package org.vcell.ncbc.physics.component.gui;

import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;

import org.vcell.ncbc.physics.component.PhysicalModel;

import cbit.gui.graph.CartoonTool;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class PhysicalModelGraphPanel extends JPanel implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private JPanel ivjFeatureSizePanel = null;
	private cbit.gui.graph.GraphPane ivjGraphPane = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private boolean ivjConnPtoP1Aligning = false;
	private JPanel ivjJPanel1 = null;
	private JToolBar ivjJToolBar1 = null;
	private ButtonModel ivjSelection = null;
	private cbit.gui.JToolBarToggleButton ivjSelectButton = null;
	private cbit.gui.ButtonGroupCivilized ivjButtonGroupCivilized = null;
	private JScrollPane ivjJScrollPane1 = null;
	private JLabel ivjJLabel3 = null;
	private JButton ivjAnnealLayoutButton = null;
	private JButton ivjCircleLayoutButton = null;
	private JLabel ivjJLabel4 = null;
	private JButton ivjLevellerLayoutButton = null;
	private JButton ivjRandomLayoutButton = null;
	private JButton ivjRelaxerLayoutButton = null;
	private JButton ivjZoomInButton = null;
	private JButton ivjZoomOutButton = null;
	private JButton ivjGlgLayoutJButton = null;
	private javax.swing.JDesktopPane fieldDesktopPane = new JDesktopPane();
	private org.vcell.ncbc.physics.component.PhysicalModel fieldPhysicalModel = null;
	private org.vcell.ncbc.physics.component.PhysicalModel ivjphysicalModel1 = null;
	private PhysicalModelGraphCartoonTool ivjphysicalModelGraphCartoonTool1 = null;
	private PhysicalModelGraphModel ivjphysicalModelGraphModel = null;
	private boolean ivjConnPtoP3Aligning = false;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public PhysicalModelGraphPanel() {
	super();
	initialize();
}
/**
 * CartoonPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public PhysicalModelGraphPanel(java.awt.LayoutManager layout) {
	super(layout);
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getZoomInButton()) 
		connEtoC1(e);
	if (e.getSource() == getZoomOutButton()) 
		connEtoC2(e);
	if (e.getSource() == getAnnealLayoutButton()) 
		connEtoM2(e);
	if (e.getSource() == getRelaxerLayoutButton()) 
		connEtoM12(e);
	if (e.getSource() == getCircleLayoutButton()) 
		connEtoM7(e);
	if (e.getSource() == getLevellerLayoutButton()) 
		connEtoM13(e);
	if (e.getSource() == getGlgLayoutJButton()) 
		connEtoM9(e);
	if (e.getSource() == getRandomLayoutButton()) 
		connEtoM1(e);
	// user code begin {2}
	// user code end
}
/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}
/**
 * connEtoC1:  (ZoomInButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomInButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomInButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (ZoomOutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomOutButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomOutButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM1:  (RandomLayoutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layout(this.getRandomizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM10:  (ReactionCartoonEditorPanel.initialize() --> GraphPane.graphModel)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10() {
	try {
		// user code begin {1}
		// user code end
		getGraphPane().setGraphModel(getphysicalModelGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM12:  (RelaxerLayoutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layout(this.getRelaxer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM13:  (LevellerLayoutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layout(this.getLeveller());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM16:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.graphPane)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().setGraphPane(getGraphPane());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM18:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.buttonGroup)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18() {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().setButtonGroup(getButtonGroupCivilized());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM2:  (AnnealLayoutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layout(this.getAnnealer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM3:  (physicalModel1.this --> physicalModelGraphModel.physicalModel)
 * @param value ncbc_old.physics.component.PhysicalModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(org.vcell.ncbc.physics.component.PhysicalModel value) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphModel().setPhysicalModel(getphysicalModel1());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM5:  (ReactionCartoonEditorPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroupCivilized().add(getSelectButton());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM7:  (CircleLayoutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layout(this.getCircularizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM8:  (PhysicalModelGraphPanel.initialize() --> physicalModelGraphCartoonTool1.setPhysicalModelGraphModel(Lncbc_old.physics.component.gui.PhysicalModelGraphModel;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8() {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().setPhysicalModelGraphModel(getphysicalModelGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM9:  (GlgLayoutJButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionModelGraphModelTool1.layoutGlg()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getphysicalModelGraphCartoonTool1().layoutGlg();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetSource:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			if ((getSelection() != null)) {
				getButtonGroupCivilized().setSelection(getSelection());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetTarget:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			setSelection(getButtonGroupCivilized().getSelection());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP2SetTarget:  (Selection.actionCommand <--> ReactionCartoonTool1.modeString)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if ((getSelection() != null)) {
			getphysicalModelGraphCartoonTool1().setModeString(getSelection().getActionCommand());
		}
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP3SetSource:  (PhysicalModelGraphPanel.physicalModel <--> physicalModel1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			if ((getphysicalModel1() != null)) {
				this.setPhysicalModel(getphysicalModel1());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP3SetTarget:  (PhysicalModelGraphPanel.physicalModel <--> physicalModel1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			setphysicalModel1(this.getPhysicalModel());
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * The firePropertyChange method was generated to support the propertyChange field.
 * @param propertyName java.lang.String
 * @param oldValue java.lang.Object
 * @param newValue java.lang.Object
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}
/**
 * Comment
 */
private java.lang.String getAnnealer() {
	return CartoonTool.ANNEALER;
}
/**
 * Return the AnnealLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAnnealLayoutButton() {
	if (ivjAnnealLayoutButton == null) {
		try {
			ivjAnnealLayoutButton = new javax.swing.JButton();
			ivjAnnealLayoutButton.setName("AnnealLayoutButton");
			ivjAnnealLayoutButton.setText("anl");
			ivjAnnealLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setActionCommand("AnnealLayout");
			ivjAnnealLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjAnnealLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAnnealLayoutButton;
}
/**
 * Return the ButtonGroup1 property value.
 * @return cbit.gui.ButtonGroupCivilized
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.ButtonGroupCivilized getButtonGroupCivilized() {
	if (ivjButtonGroupCivilized == null) {
		try {
			ivjButtonGroupCivilized = new cbit.gui.ButtonGroupCivilized();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonGroupCivilized;
}
/**
 * Return the CircleLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCircleLayoutButton() {
	if (ivjCircleLayoutButton == null) {
		try {
			ivjCircleLayoutButton = new javax.swing.JButton();
			ivjCircleLayoutButton.setName("CircleLayoutButton");
			ivjCircleLayoutButton.setText("crc");
			ivjCircleLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setActionCommand("CircleLayout");
			ivjCircleLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjCircleLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCircleLayoutButton;
}
/**
 * Comment
 */
private java.lang.String getCircularizer() {
	return CartoonTool.CIRCULARIZER;
}
/**
 * Comment
 */
private java.lang.String getCycleizer() {
	return CartoonTool.CYCLEIZER;
}
/**
 * Gets the desktopPane property (javax.swing.JDesktopPane) value.
 * @return The desktopPane property value.
 * @see #setDesktopPane
 */
public javax.swing.JDesktopPane getDesktopPane() {
	return fieldDesktopPane;
}
/**
 * Return the FeatureSizePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getFeatureSizePanel() {
	if (ivjFeatureSizePanel == null) {
		try {
			ivjFeatureSizePanel = new javax.swing.JPanel();
			ivjFeatureSizePanel.setName("FeatureSizePanel");
			ivjFeatureSizePanel.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjFeatureSizePanel.setLayout(new java.awt.BorderLayout());
			ivjFeatureSizePanel.setMinimumSize(new java.awt.Dimension(22, 396));
			getFeatureSizePanel().add(getJPanel1(), "South");
			getFeatureSizePanel().add(getJScrollPane1(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFeatureSizePanel;
}
/**
 * Comment
 */
private java.lang.String getForceDirect() {
	return CartoonTool.FORCEDIRECT;
}
/**
 * Return the GlgLayoutJButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getGlgLayoutJButton() {
	if (ivjGlgLayoutJButton == null) {
		try {
			ivjGlgLayoutJButton = new javax.swing.JButton();
			ivjGlgLayoutJButton.setName("GlgLayoutJButton");
			ivjGlgLayoutJButton.setText("glg");
			ivjGlgLayoutJButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjGlgLayoutJButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGlgLayoutJButton;
}
/**
 * Return the GraphPane property value.
 * @return cbit.vcell.graph.GraphPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.graph.GraphPane getGraphPane() {
	if (ivjGraphPane == null) {
		try {
			ivjGraphPane = new cbit.gui.graph.GraphPane();
			ivjGraphPane.setName("GraphPane");
			ivjGraphPane.setBounds(0, 0, 372, 364);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphPane;
}
/**
 * Return the JLabel3 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel3() {
	if (ivjJLabel3 == null) {
		try {
			ivjJLabel3 = new javax.swing.JLabel();
			ivjJLabel3.setName("JLabel3");
			ivjJLabel3.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel3;
}
/**
 * Return the JLabel4 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel4() {
	if (ivjJLabel4 == null) {
		try {
			ivjJLabel4 = new javax.swing.JLabel();
			ivjJLabel4.setName("JLabel4");
			ivjJLabel4.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel4;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjJScrollPane1.setMinimumSize(new java.awt.Dimension(22, 396));
			getJScrollPane1().setViewportView(getGraphPane());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}
/**
 * Return the JToolBar1 property value.
 * @return javax.swing.JToolBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JToolBar getJToolBar1() {
	if (ivjJToolBar1 == null) {
		try {
			ivjJToolBar1 = new javax.swing.JToolBar();
			ivjJToolBar1.setName("JToolBar1");
			ivjJToolBar1.setFloatable(false);
			ivjJToolBar1.setBorder(new javax.swing.border.EtchedBorder());
			ivjJToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
			getJToolBar1().add(getSelectButton(), getSelectButton().getName());
			getJToolBar1().add(getJLabel3(), getJLabel3().getName());
			getJToolBar1().add(getZoomInButton(), getZoomInButton().getName());
			getJToolBar1().add(getZoomOutButton(), getZoomOutButton().getName());
			getJToolBar1().add(getJLabel4(), getJLabel4().getName());
			getJToolBar1().add(getRandomLayoutButton(), getRandomLayoutButton().getName());
			getJToolBar1().add(getCircleLayoutButton(), getCircleLayoutButton().getName());
			getJToolBar1().add(getAnnealLayoutButton(), getAnnealLayoutButton().getName());
			getJToolBar1().add(getLevellerLayoutButton(), getLevellerLayoutButton().getName());
			getJToolBar1().add(getRelaxerLayoutButton(), getRelaxerLayoutButton().getName());
			getJToolBar1().add(getGlgLayoutJButton(), getGlgLayoutJButton().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJToolBar1;
}
/**
 * Comment
 */
private java.lang.String getLeveller() {
	return CartoonTool.LEVELLER;
}
/**
 * Return the LevellerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getLevellerLayoutButton() {
	if (ivjLevellerLayoutButton == null) {
		try {
			ivjLevellerLayoutButton = new javax.swing.JButton();
			ivjLevellerLayoutButton.setName("LevellerLayoutButton");
			ivjLevellerLayoutButton.setText("lev");
			ivjLevellerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setActionCommand("LevellerLayout");
			ivjLevellerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjLevellerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLevellerLayoutButton;
}
/**
 * Gets the reactionModel property (vcell.reactions.gui.ReactionModel) value.
 * @return The reactionModel property value.
 * @see #setReactionModel
 */
public PhysicalModel getPhysicalModel() {
	return fieldPhysicalModel;
}
/**
 * Return the reactionModel1 property value.
 * @return vcell.reactions.gui.ReactionModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.ncbc.physics.component.PhysicalModel getphysicalModel1() {
	// user code begin {1}
	// user code end
	return ivjphysicalModel1;
}
/**
 * Return the physicalModelGraphCartoonTool1 property value.
 * @return ncbc_old.physics.component.gui.PhysicalModelGraphCartoonTool
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private PhysicalModelGraphCartoonTool getphysicalModelGraphCartoonTool1() {
	if (ivjphysicalModelGraphCartoonTool1 == null) {
		try {
			ivjphysicalModelGraphCartoonTool1 = new org.vcell.ncbc.physics.component.gui.PhysicalModelGraphCartoonTool();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjphysicalModelGraphCartoonTool1;
}
/**
 * Return the physicalModelGraphModel property value.
 * @return ncbc_old.physics.component.gui.PhysicalModelGraphModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private PhysicalModelGraphModel getphysicalModelGraphModel() {
	if (ivjphysicalModelGraphModel == null) {
		try {
			ivjphysicalModelGraphModel = new org.vcell.ncbc.physics.component.gui.PhysicalModelGraphModel();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjphysicalModelGraphModel;
}
/**
 * Accessor for the propertyChange field.
 * @return java.beans.PropertyChangeSupport
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}
/**
 * Comment
 */
private java.lang.String getRandomizer() {
	return CartoonTool.RANDOMIZER;
}
/**
 * Return the RandomLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRandomLayoutButton() {
	if (ivjRandomLayoutButton == null) {
		try {
			ivjRandomLayoutButton = new javax.swing.JButton();
			ivjRandomLayoutButton.setName("RandomLayoutButton");
			ivjRandomLayoutButton.setText("rnd");
			ivjRandomLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setActionCommand("RandomLayout");
			ivjRandomLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRandomLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRandomLayoutButton;
}
/**
 * Comment
 */
private java.lang.String getRelaxer() {
	return CartoonTool.RELAXER;
}
/**
 * Return the RelaxerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRelaxerLayoutButton() {
	if (ivjRelaxerLayoutButton == null) {
		try {
			ivjRelaxerLayoutButton = new javax.swing.JButton();
			ivjRelaxerLayoutButton.setName("RelaxerLayoutButton");
			ivjRelaxerLayoutButton.setText("rlx");
			ivjRelaxerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setActionCommand("RelaxerLayout");
			ivjRelaxerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRelaxerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRelaxerLayoutButton;
}
/**
 * Return the JToolBarToggleButton2 property value.
 * @return cbit.gui.JToolBarToggleButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.JToolBarToggleButton getSelectButton() {
	if (ivjSelectButton == null) {
		try {
			ivjSelectButton = new cbit.gui.JToolBarToggleButton();
			ivjSelectButton.setName("SelectButton");
			ivjSelectButton.setText("");
			ivjSelectButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setActionCommand("select");
			ivjSelectButton.setSelected(true);
			ivjSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select.gif")));
			ivjSelectButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSelectButton;
}
/**
 * Return the selection1 property value.
 * @return javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.ButtonModel getSelection() {
	// user code begin {1}
	// user code end
	return ivjSelection;
}
/**
 * Comment
 */
private java.lang.String getStabilizer() {
	return CartoonTool.STABILIZER;
}
/**
 * Return the ZoomInButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomInButton() {
	if (ivjZoomInButton == null) {
		try {
			ivjZoomInButton = new javax.swing.JButton();
			ivjZoomInButton.setName("ZoomInButton");
			ivjZoomInButton.setText("");
			ivjZoomInButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setActionCommand("ZoomIn");
			ivjZoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomin.gif")));
			ivjZoomInButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomInButton;
}
/**
 * Return the ZoomOutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomOutButton() {
	if (ivjZoomOutButton == null) {
		try {
			ivjZoomOutButton = new javax.swing.JButton();
			ivjZoomOutButton.setName("ZoomOutButton");
			ivjZoomOutButton.setText("");
			ivjZoomOutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setActionCommand("ZoomOut");
			ivjZoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomout.gif")));
			ivjZoomOutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomOutButton;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION --------- in CartoonPanel");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getButtonGroupCivilized().addPropertyChangeListener(this);
	getZoomInButton().addActionListener(this);
	getZoomOutButton().addActionListener(this);
	this.addPropertyChangeListener(this);
	getAnnealLayoutButton().addActionListener(this);
	getRelaxerLayoutButton().addActionListener(this);
	getCircleLayoutButton().addActionListener(this);
	getLevellerLayoutButton().addActionListener(this);
	getGlgLayoutJButton().addActionListener(this);
	getRandomLayoutButton().addActionListener(this);
	connPtoP1SetTarget();
	connPtoP3SetTarget();
	connPtoP2SetTarget();
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CartoonPanel");
		setPreferredSize(new java.awt.Dimension(800, 700));
		setLayout(new java.awt.BorderLayout());
		setSize(472, 422);
		setMinimumSize(new java.awt.Dimension(700, 700));
		add(getFeatureSizePanel(), "Center");
		add(getJToolBar1(), "West");
		initConnections();
		connEtoM10();
		connEtoM5();
		connEtoM16();
		connEtoM8();
		connEtoM18();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		JFrame frame = new javax.swing.JFrame();
		PhysicalModelGraphPanel aPhysicalModelGraphPanel;
		aPhysicalModelGraphPanel = new PhysicalModelGraphPanel();
		frame.setContentPane(aPhysicalModelGraphPanel);
		frame.setSize(aPhysicalModelGraphPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == getButtonGroupCivilized() && (evt.getPropertyName().equals("selection"))) 
		connPtoP1SetTarget();
	if (evt.getSource() == this && (evt.getPropertyName().equals("physicalModel"))) 
		connPtoP3SetTarget();
	// user code begin {2}
	// user code end
}
/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}
/**
 * Sets the desktopPane property (javax.swing.JDesktopPane) value.
 * @param desktopPane The new value for the property.
 * @see #getDesktopPane
 */
public void setDesktopPane(javax.swing.JDesktopPane desktopPane) {
	JDesktopPane oldValue = fieldDesktopPane;
	fieldDesktopPane = desktopPane;
	firePropertyChange("desktopPane", oldValue, desktopPane);
}
/**
 * Sets the reactionModel property (vcell.reactions.gui.ReactionModel) value.
 * @param reactionModel The new value for the property.
 * @see #getReactionModel
 */
public void setPhysicalModel(PhysicalModel physicalModel) {
	PhysicalModel oldValue = fieldPhysicalModel;
	fieldPhysicalModel = physicalModel;
	firePropertyChange("physicalModel", oldValue, physicalModel);
}
/**
 * Set the reactionModel1 to a new value.
 * @param newValue vcell.reactions.gui.ReactionModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setphysicalModel1(org.vcell.ncbc.physics.component.PhysicalModel newValue) {
	if (ivjphysicalModel1 != newValue) {
		try {
			org.vcell.ncbc.physics.component.PhysicalModel oldValue = getphysicalModel1();
			ivjphysicalModel1 = newValue;
			connPtoP3SetSource();
			connEtoM3(ivjphysicalModel1);
			firePropertyChange("physicalModel", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
/**
 * Set the selection1 to a new value.
 * @param newValue javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setSelection(javax.swing.ButtonModel newValue) {
	if (ivjSelection != newValue) {
		try {
			ivjSelection = newValue;
			connPtoP1SetSource();
			connPtoP2SetTarget();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
/**
 * Comment
 */
private void zoomInButton_ActionPerformed() {
	if (getphysicalModelGraphModel()!=null){
		switch (getphysicalModelGraphModel().getZoomPercent()){
			case 195: {
				// already at top, do nothing
				break;
			}
			case 156: {
				getphysicalModelGraphModel().setZoomPercent(195);
				break;
			}
			case 125: {
				getphysicalModelGraphModel().setZoomPercent(156);
				break;
			}
			case 100: {
				getphysicalModelGraphModel().setZoomPercent(125);
				break;
			}
			case 80: {
				getphysicalModelGraphModel().setZoomPercent(100);
				break;
			}
			case 64: {
				getphysicalModelGraphModel().setZoomPercent(80);
				break;
			}
			case 50: {
				getphysicalModelGraphModel().setZoomPercent(64);
				break;
			}
			case 40: {
				getphysicalModelGraphModel().setZoomPercent(50);
				break;
			}
			case 30: {
				getphysicalModelGraphModel().setZoomPercent(40);
				break;
			}
			case 20: {
				getphysicalModelGraphModel().setZoomPercent(30);
				break;
			}
			case 10: {
				getphysicalModelGraphModel().setZoomPercent(20);
				break;
			}
			default: {
				getphysicalModelGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}
/**
 * Comment
 */
private void zoomOutButton_ActionPerformed() {
	if (getphysicalModelGraphModel()!=null){
		switch (getphysicalModelGraphModel().getZoomPercent()){
			case 195: {
				getphysicalModelGraphModel().setZoomPercent(156);
				break;
			}
			case 156: {
				getphysicalModelGraphModel().setZoomPercent(125);
				break;
			}
			case 125: {
				getphysicalModelGraphModel().setZoomPercent(100);
				break;
			}
			case 100: {
				getphysicalModelGraphModel().setZoomPercent(80);
				break;
			}
			case 80: {
				getphysicalModelGraphModel().setZoomPercent(64);
				break;
			}
			case 64: {
				getphysicalModelGraphModel().setZoomPercent(50);
				break;
			}
			case 50: {
				getphysicalModelGraphModel().setZoomPercent(40);
				break;
			}
			case 40: {
				getphysicalModelGraphModel().setZoomPercent(30);
				break;
			}
			case 30: {
				getphysicalModelGraphModel().setZoomPercent(20);
				break;
			}
			case 20: {
				getphysicalModelGraphModel().setZoomPercent(10);
				break;
			}
			case 10: {
				// can't zoom out any further
				break;
			}
			default: {
				getphysicalModelGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}
}
