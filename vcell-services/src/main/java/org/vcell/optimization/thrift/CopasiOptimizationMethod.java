/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.optimization.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class CopasiOptimizationMethod implements org.apache.thrift.TBase<CopasiOptimizationMethod, CopasiOptimizationMethod._Fields>, java.io.Serializable, Cloneable, Comparable<CopasiOptimizationMethod> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CopasiOptimizationMethod");

  private static final org.apache.thrift.protocol.TField OPTIMIZATION_METHOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizationMethodType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIMIZATION_PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizationParameterList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CopasiOptimizationMethodStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CopasiOptimizationMethodTupleSchemeFactory();

  /**
   * 
   * @see OptimizationMethodType
   */
  public OptimizationMethodType optimizationMethodType; // required
  public java.util.List<CopasiOptimizationParameter> optimizationParameterList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OptimizationMethodType
     */
    OPTIMIZATION_METHOD_TYPE((short)1, "optimizationMethodType"),
    OPTIMIZATION_PARAMETER_LIST((short)2, "optimizationParameterList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPTIMIZATION_METHOD_TYPE
          return OPTIMIZATION_METHOD_TYPE;
        case 2: // OPTIMIZATION_PARAMETER_LIST
          return OPTIMIZATION_PARAMETER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPTIMIZATION_METHOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("optimizationMethodType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OptimizationMethodType.class)));
    tmpMap.put(_Fields.OPTIMIZATION_PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("optimizationParameterList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "CopasiOptimizationParameterList")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CopasiOptimizationMethod.class, metaDataMap);
  }

  public CopasiOptimizationMethod() {
  }

  public CopasiOptimizationMethod(
    OptimizationMethodType optimizationMethodType,
    java.util.List<CopasiOptimizationParameter> optimizationParameterList)
  {
    this();
    this.optimizationMethodType = optimizationMethodType;
    this.optimizationParameterList = optimizationParameterList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CopasiOptimizationMethod(CopasiOptimizationMethod other) {
    if (other.isSetOptimizationMethodType()) {
      this.optimizationMethodType = other.optimizationMethodType;
    }
    if (other.isSetOptimizationParameterList()) {
      java.util.List<CopasiOptimizationParameter> __this__optimizationParameterList = new java.util.ArrayList<CopasiOptimizationParameter>(other.optimizationParameterList.size());
      for (CopasiOptimizationParameter other_element : other.optimizationParameterList) {
        __this__optimizationParameterList.add(new CopasiOptimizationParameter(other_element));
      }
      this.optimizationParameterList = __this__optimizationParameterList;
    }
  }

  public CopasiOptimizationMethod deepCopy() {
    return new CopasiOptimizationMethod(this);
  }

  @Override
  public void clear() {
    this.optimizationMethodType = null;
    this.optimizationParameterList = null;
  }

  /**
   * 
   * @see OptimizationMethodType
   */
  public OptimizationMethodType getOptimizationMethodType() {
    return this.optimizationMethodType;
  }

  /**
   * 
   * @see OptimizationMethodType
   */
  public CopasiOptimizationMethod setOptimizationMethodType(OptimizationMethodType optimizationMethodType) {
    this.optimizationMethodType = optimizationMethodType;
    return this;
  }

  public void unsetOptimizationMethodType() {
    this.optimizationMethodType = null;
  }

  /** Returns true if field optimizationMethodType is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizationMethodType() {
    return this.optimizationMethodType != null;
  }

  public void setOptimizationMethodTypeIsSet(boolean value) {
    if (!value) {
      this.optimizationMethodType = null;
    }
  }

  public int getOptimizationParameterListSize() {
    return (this.optimizationParameterList == null) ? 0 : this.optimizationParameterList.size();
  }

  public java.util.Iterator<CopasiOptimizationParameter> getOptimizationParameterListIterator() {
    return (this.optimizationParameterList == null) ? null : this.optimizationParameterList.iterator();
  }

  public void addToOptimizationParameterList(CopasiOptimizationParameter elem) {
    if (this.optimizationParameterList == null) {
      this.optimizationParameterList = new java.util.ArrayList<CopasiOptimizationParameter>();
    }
    this.optimizationParameterList.add(elem);
  }

  public java.util.List<CopasiOptimizationParameter> getOptimizationParameterList() {
    return this.optimizationParameterList;
  }

  public CopasiOptimizationMethod setOptimizationParameterList(java.util.List<CopasiOptimizationParameter> optimizationParameterList) {
    this.optimizationParameterList = optimizationParameterList;
    return this;
  }

  public void unsetOptimizationParameterList() {
    this.optimizationParameterList = null;
  }

  /** Returns true if field optimizationParameterList is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizationParameterList() {
    return this.optimizationParameterList != null;
  }

  public void setOptimizationParameterListIsSet(boolean value) {
    if (!value) {
      this.optimizationParameterList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OPTIMIZATION_METHOD_TYPE:
      if (value == null) {
        unsetOptimizationMethodType();
      } else {
        setOptimizationMethodType((OptimizationMethodType)value);
      }
      break;

    case OPTIMIZATION_PARAMETER_LIST:
      if (value == null) {
        unsetOptimizationParameterList();
      } else {
        setOptimizationParameterList((java.util.List<CopasiOptimizationParameter>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPTIMIZATION_METHOD_TYPE:
      return getOptimizationMethodType();

    case OPTIMIZATION_PARAMETER_LIST:
      return getOptimizationParameterList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPTIMIZATION_METHOD_TYPE:
      return isSetOptimizationMethodType();
    case OPTIMIZATION_PARAMETER_LIST:
      return isSetOptimizationParameterList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CopasiOptimizationMethod)
      return this.equals((CopasiOptimizationMethod)that);
    return false;
  }

  public boolean equals(CopasiOptimizationMethod that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_optimizationMethodType = true && this.isSetOptimizationMethodType();
    boolean that_present_optimizationMethodType = true && that.isSetOptimizationMethodType();
    if (this_present_optimizationMethodType || that_present_optimizationMethodType) {
      if (!(this_present_optimizationMethodType && that_present_optimizationMethodType))
        return false;
      if (!this.optimizationMethodType.equals(that.optimizationMethodType))
        return false;
    }

    boolean this_present_optimizationParameterList = true && this.isSetOptimizationParameterList();
    boolean that_present_optimizationParameterList = true && that.isSetOptimizationParameterList();
    if (this_present_optimizationParameterList || that_present_optimizationParameterList) {
      if (!(this_present_optimizationParameterList && that_present_optimizationParameterList))
        return false;
      if (!this.optimizationParameterList.equals(that.optimizationParameterList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOptimizationMethodType()) ? 131071 : 524287);
    if (isSetOptimizationMethodType())
      hashCode = hashCode * 8191 + optimizationMethodType.getValue();

    hashCode = hashCode * 8191 + ((isSetOptimizationParameterList()) ? 131071 : 524287);
    if (isSetOptimizationParameterList())
      hashCode = hashCode * 8191 + optimizationParameterList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CopasiOptimizationMethod other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOptimizationMethodType()).compareTo(other.isSetOptimizationMethodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizationMethodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizationMethodType, other.optimizationMethodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptimizationParameterList()).compareTo(other.isSetOptimizationParameterList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizationParameterList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizationParameterList, other.optimizationParameterList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CopasiOptimizationMethod(");
    boolean first = true;

    sb.append("optimizationMethodType:");
    if (this.optimizationMethodType == null) {
      sb.append("null");
    } else {
      sb.append(this.optimizationMethodType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optimizationParameterList:");
    if (this.optimizationParameterList == null) {
      sb.append("null");
    } else {
      sb.append(this.optimizationParameterList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (optimizationMethodType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optimizationMethodType' was not present! Struct: " + toString());
    }
    if (optimizationParameterList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optimizationParameterList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CopasiOptimizationMethodStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CopasiOptimizationMethodStandardScheme getScheme() {
      return new CopasiOptimizationMethodStandardScheme();
    }
  }

  private static class CopasiOptimizationMethodStandardScheme extends org.apache.thrift.scheme.StandardScheme<CopasiOptimizationMethod> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CopasiOptimizationMethod struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPTIMIZATION_METHOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.optimizationMethodType = org.vcell.optimization.thrift.OptimizationMethodType.findByValue(iprot.readI32());
              struct.setOptimizationMethodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIMIZATION_PARAMETER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.optimizationParameterList = new java.util.ArrayList<CopasiOptimizationParameter>(_list0.size);
                CopasiOptimizationParameter _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new CopasiOptimizationParameter();
                  _elem1.read(iprot);
                  struct.optimizationParameterList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOptimizationParameterListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CopasiOptimizationMethod struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.optimizationMethodType != null) {
        oprot.writeFieldBegin(OPTIMIZATION_METHOD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.optimizationMethodType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.optimizationParameterList != null) {
        oprot.writeFieldBegin(OPTIMIZATION_PARAMETER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optimizationParameterList.size()));
          for (CopasiOptimizationParameter _iter3 : struct.optimizationParameterList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CopasiOptimizationMethodTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CopasiOptimizationMethodTupleScheme getScheme() {
      return new CopasiOptimizationMethodTupleScheme();
    }
  }

  private static class CopasiOptimizationMethodTupleScheme extends org.apache.thrift.scheme.TupleScheme<CopasiOptimizationMethod> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CopasiOptimizationMethod struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.optimizationMethodType.getValue());
      {
        oprot.writeI32(struct.optimizationParameterList.size());
        for (CopasiOptimizationParameter _iter4 : struct.optimizationParameterList)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CopasiOptimizationMethod struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.optimizationMethodType = org.vcell.optimization.thrift.OptimizationMethodType.findByValue(iprot.readI32());
      struct.setOptimizationMethodTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.optimizationParameterList = new java.util.ArrayList<CopasiOptimizationParameter>(_list5.size);
        CopasiOptimizationParameter _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new CopasiOptimizationParameter();
          _elem6.read(iprot);
          struct.optimizationParameterList.add(_elem6);
        }
      }
      struct.setOptimizationParameterListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

