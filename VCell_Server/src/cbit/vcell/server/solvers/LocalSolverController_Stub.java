// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package cbit.vcell.server.solvers;


public final class LocalSolverController_Stub
    extends java.rmi.server.RemoteStub
    implements cbit.vcell.solvers.SolverController, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_getHost_0;
    private static java.lang.reflect.Method $method_getProgress_1;
    private static java.lang.reflect.Method $method_getSimulationJob_2;
    private static java.lang.reflect.Method $method_getSolverStatus_3;
    private static java.lang.reflect.Method $method_startSimulationJob_4;
    private static java.lang.reflect.Method $method_stopSimulationJob_5;
    
    static {
	try {
	    $method_getHost_0 = cbit.vcell.solvers.SolverController.class.getMethod("getHost", new java.lang.Class[] {});
	    $method_getProgress_1 = cbit.vcell.solvers.SolverController.class.getMethod("getProgress", new java.lang.Class[] {});
	    $method_getSimulationJob_2 = cbit.vcell.solvers.SolverController.class.getMethod("getSimulationJob", new java.lang.Class[] {});
	    $method_getSolverStatus_3 = cbit.vcell.solvers.SolverController.class.getMethod("getSolverStatus", new java.lang.Class[] {});
	    $method_startSimulationJob_4 = cbit.vcell.solvers.SolverController.class.getMethod("startSimulationJob", new java.lang.Class[] {});
	    $method_stopSimulationJob_5 = cbit.vcell.solvers.SolverController.class.getMethod("stopSimulationJob", new java.lang.Class[] {});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public LocalSolverController_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getHost()
    public java.lang.String getHost()
	throws cbit.util.DataAccessException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getHost_0, null, 6303500972804249791L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getProgress()
    public double getProgress()
	throws cbit.util.DataAccessException, cbit.vcell.solvers.SolverNotRunningException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getProgress_1, null, -8180129235656248200L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (cbit.vcell.solvers.SolverNotRunningException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSimulationJob()
    public cbit.vcell.solvers.SimulationJob getSimulationJob()
	throws cbit.util.DataAccessException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSimulationJob_2, null, -5054384535408496800L);
	    return ((cbit.vcell.solvers.SimulationJob) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSolverStatus()
    public cbit.vcell.solvers.SolverStatus getSolverStatus()
	throws cbit.util.DataAccessException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSolverStatus_3, null, -3057449742020537727L);
	    return ((cbit.vcell.solvers.SolverStatus) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of startSimulationJob()
    public void startSimulationJob()
	throws cbit.util.DataAccessException, cbit.vcell.solvers.SimExecutionException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_startSimulationJob_4, null, 2014841305969865019L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (cbit.vcell.solvers.SimExecutionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of stopSimulationJob()
    public void stopSimulationJob()
	throws cbit.util.DataAccessException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_stopSimulationJob_5, null, -2088673216025717036L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (cbit.util.DataAccessException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
