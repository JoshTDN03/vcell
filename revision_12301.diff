Index: src/cbit/vcell/message/jms/test/TestQueues.java
===================================================================
--- src/cbit/vcell/message/jms/test/TestQueues.java	(revision 12301)
+++ src/cbit/vcell/message/jms/test/TestQueues.java	(revision 12300)
@@ -1,7 +1,5 @@
 package cbit.vcell.message.jms.test;
 
-import java.util.ArrayList;
-
 import org.vcell.util.PropertyLoader;
 
 import cbit.vcell.message.RollbackException;
@@ -18,9 +16,8 @@
  */
 public class TestQueues {
 
-	private static final int NUM_PRODUCERS = 3;
     private static final int NUM_COMSUMERS = 1;
-	private static final int NUM_MESSAGES = 10;
+	private static final int NUM_MESSAGES = 100;
 	
     public static class Calculator {
     	private int sum = 0;
@@ -47,42 +44,32 @@
 	    	
 	        final Calculator calculator = new Calculator();
 	        
-	        // creating one messageProducer session
-	        ArrayList<VCMessageSession> sessions = new ArrayList<VCMessageSession>();
-	        for (int i=0;i<NUM_PRODUCERS;i++){
-	        	sessions.add(messagingService.createProducerSession());
-	        }
-	        int sum = 0;
-	        for (int i=0;i<NUM_MESSAGES;i++){
-	        	for (int s=0;s<NUM_PRODUCERS;s++){
-	        		sum ++;
-	        		VCMessageSession session = sessions.get(s);
-		        	VCMessage message = session.createTextMessage("message "+i+" from session "+s);
-		        	session.sendQueueMessage(VCellQueue.JimQueue, message);
-		        	session.commit();
-		        }
-	        	Thread.sleep(2000);
-	        }
-	        System.out.println("Correct sum is "+sum);
-
-
-	        Thread.sleep(30);
-	        
 	        // reading message and computing sum
 	        // create N comsumers
 	        for (int i=0;i<NUM_COMSUMERS;i++){
 	           	QueueListener listener = new QueueListener() {
 					public void onQueueMessage(VCMessage vcMessage,	VCMessageSession session) throws RollbackException {
 						//new Thread()
-						System.out.println("timestampMS="+vcMessage.getTimestampMS()+", "+toString()+",  elapsedTimeS="+((System.currentTimeMillis()-vcMessage.getTimestampMS())/1000.0)+", Received: "+vcMessage.getTextContent());
-//						int number = Integer.parseInt(vcMessage.getTextContent());
-						calculator.add(1);
+						System.out.println(toString()+",  t="+System.currentTimeMillis()+", Received: "+vcMessage.getTextContent());
+						int number = Integer.parseInt(vcMessage.getTextContent());
+						calculator.add(number);
 					}
 				};
 				VCQueueConsumer queueConsumer = new VCQueueConsumer(VCellQueue.JimQueue, listener, null, "Queue["+VCellQueue.JimQueue.getName()+"] ==== Consumer Thread "+i);
 	        	messagingService.addMessageConsumer(queueConsumer);
 	        }
 	        
+	        // creating one messageProducer session
+	        VCMessageSession messageSession = messagingService.createProducerSession();
+	        int sum = 0;
+	        for (int i=0;i<NUM_MESSAGES;i++){
+	        	sum += i;
+	        	VCMessage message = messageSession.createTextMessage(i+"");
+	        	messageSession.sendQueueMessage(VCellQueue.JimQueue, message);
+	        	messageSession.commit();
+	        }        
+	        System.out.println("Correct sum is "+sum);
+
 	        while (calculator.getSum()<sum){
 	        	System.out.println("calculator sum = "+calculator.getSum());
 	        	Thread.sleep(1000);
Index: src/cbit/vcell/message/jms/VCMessageJms.java
===================================================================
--- src/cbit/vcell/message/jms/VCMessageJms.java	(revision 12301)
+++ src/cbit/vcell/message/jms/VCMessageJms.java	(revision 12300)
@@ -287,15 +287,5 @@
 		}
 		return buffer.toString();
 	}
-
-	@Override
-	public long getTimestampMS() {
-		try {
-			return jmsMessage.getJMSTimestamp();
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage(),e);
-		}
-	}
 	
 }
Index: src/cbit/vcell/message/local/VCMessageBSON.java
===================================================================
--- src/cbit/vcell/message/local/VCMessageBSON.java	(revision 12301)
+++ src/cbit/vcell/message/local/VCMessageBSON.java	(revision 12300)
@@ -16,27 +16,23 @@
 	private VCDestination replyTo = null;
 	private String correlationID = null;
 	private final String messageID;
-	private final long timestampMS;
 
 	VCMessageBSON(){
 		this.textContent = null;
 		this.objectContent = null;
 		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-		this.timestampMS = System.currentTimeMillis();
 	}
 	
 	VCMessageBSON(String textContent){
 		this.textContent = textContent;
 		this.objectContent = null;
 		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-		this.timestampMS = System.currentTimeMillis();
 	}
 	
 	VCMessageBSON(Object objectContent){
 		this.textContent = null;
 		this.objectContent = objectContent;
 		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-		this.timestampMS = System.currentTimeMillis();
 	}
 	
 	@Override
@@ -193,9 +189,4 @@
 		return buffer.toString();
 	}
 
-	@Override
-	public long getTimestampMS() {
-		return timestampMS;
-	}
-
 }
Index: src/cbit/vcell/message/VCMessage.java
===================================================================
--- src/cbit/vcell/message/VCMessage.java	(revision 12301)
+++ src/cbit/vcell/message/VCMessage.java	(revision 12300)
@@ -47,8 +47,6 @@
 	public void setCorrelationID(String correlationID);
 
 	public String show();
-
-	public long getTimestampMS();
 	
 //	public void setMessageID(String messageID);
 }
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12301)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12300)
@@ -566,8 +566,6 @@
 
 			addObject(dbObject, vcMessage);
 			
-			dbObject.put(MongoMessage_elapsedTimeMS, new Long(System.currentTimeMillis()-vcMessage.getTimestampMS()));
-			
 			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
 		} catch (Exception e){
 			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
