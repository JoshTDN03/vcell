Index: src/cbit/vcell/message/jms/ConsumerContextJms.java
===================================================================
--- src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12211)
+++ src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12210)
@@ -85,6 +85,8 @@
 							vcRpcRequest = (VCRpcRequest)object;
 						}
 						
+						VCMongoMessage.sendRpcRequestReceived(vcRpcRequest);
+						
 						java.io.Serializable returnValue = null;
 						try {
 							//
@@ -123,7 +125,6 @@
 						replyProducer.send(replyMessage);
 						replyProducer.close();
 						jmsSession.commit();		//commit		
-						VCMongoMessage.sendRpcRequestProcessed(vcRpcRequest);
 					}
 				}else{
 //						System.out.println(toString()+"no message received within "+CONSUMER_POLLING_INTERVAL_MS+" ms");
Index: src/cbit/vcell/message/VCRpcRequest.java
===================================================================
--- src/cbit/vcell/message/VCRpcRequest.java	(revision 12211)
+++ src/cbit/vcell/message/VCRpcRequest.java	(revision 12210)
@@ -31,9 +31,6 @@
 	private Object[] args = null;
 	private ServiceType requestedServiceType = null; // refer to "databaseServer", "dataServer", "***";
 	private String methodName = null;	
-	private Long requestTimestampMS;
-	private Long beginProcessingTimestampMS;
-	private Long endProcessingTimestampMS;
 /**
  * SimpleTask constructor comment.
  * @param argName java.lang.String
@@ -41,11 +38,10 @@
  * @param argUserid java.lang.String
  */
 public VCRpcRequest(User user0, ServiceType st, String methodName0, Object[] arglist) {
-	this.user = user0;
+	user = user0;
 	this.requestedServiceType = st;
-	this.methodName = methodName0;
-	this.args = arglist;
-	this.requestTimestampMS = System.currentTimeMillis();
+	methodName = methodName0;
+	this.args = arglist;	
 }
 /**
  * Insert the method's description here.
@@ -91,17 +87,6 @@
 	
 	return user.getName();
 }
-
-
-public Long getRequestTimestampMS() {
-	return requestTimestampMS;
-}
-public Long getBeginProcessingTimestampMS() {
-	return beginProcessingTimestampMS;
-}
-public Long getEndProcessingTimestampMS() {
-	return endProcessingTimestampMS;
-}
 /**
  * Insert the method's description here.
  * Creation date: (10/18/2001 5:12:18 PM)
@@ -188,11 +173,9 @@
 			exceptionMessage += ")";
 			throw new DataAccessException(exceptionMessage);
 		}
-		beginProcessingTimestampMS = System.currentTimeMillis();
-		Object result = method.invoke(rpcServiceImpl, getArguments());
-		endProcessingTimestampMS = System.currentTimeMillis();
-		return result;
-		
+				
+		return method.invoke(rpcServiceImpl, getArguments());
+
 	} catch (InvocationTargetException ex) {
 		log.exception(ex);
 	 	Throwable targetExcepton = ex.getTargetException();
Index: src/cbit/vcell/message/server/console/ServerManageConsole.java
===================================================================
--- src/cbit/vcell/message/server/console/ServerManageConsole.java	(revision 12211)
+++ src/cbit/vcell/message/server/console/ServerManageConsole.java	(revision 12210)
@@ -2766,7 +2766,7 @@
 			return;
 		}
 		RpcSimServerProxy simProxy = new RpcSimServerProxy(userLoginInfo, vcMessaging_rpcProducerSession, log);
-		simProxy.startSimulation(sim.getSimulationInfo().getAuthoritativeVCSimulationIdentifier(),sim.getScanCount());		
+		simProxy.startSimulation(sim.getSimulationInfo().getAuthoritativeVCSimulationIdentifier());		
 	} catch (Exception ex) {
 		javax.swing.JOptionPane.showMessageDialog(this, "Resubmitting simulation failed:" + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
 	}
@@ -2786,8 +2786,8 @@
 		VCMessage msg = vcMessaging_clientTopicProducerSession.createObjectMessage(new BigString(getBroadcastMessageTextArea().getText()));
 		String username = getBroadcastMessageToTextField().getText();
 
-		if (username.equalsIgnoreCase(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)) {
-			username = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
+		if (username.equalsIgnoreCase("All")) {
+			username = "All";
 		}
 			
 		msg.setStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY, ManageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE);
Index: src/cbit/vcell/message/server/dispatcher/BatchScheduler.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/BatchScheduler.java	(revision 12211)
+++ src/cbit/vcell/message/server/dispatcher/BatchScheduler.java	(revision 12210)
@@ -10,15 +10,8 @@
 
 package cbit.vcell.message.server.dispatcher;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashSet;
 import java.util.Hashtable;
-import java.util.Iterator;
 
-import llnl.visit.GlobalAttributes;
-
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.User;
@@ -32,29 +25,6 @@
  * @author: Jim Schaff
  */
 public class BatchScheduler {
-
-	
-	public static class WaitingJob {
-		public final User user;
-		public final Integer numRunningPDEs;
-		public final Integer numRunningODEs;
-		public final Long waitingTimeStamp;
-		public final SimulationJobStatusInfo simJobStatusInfo;
-
-		public WaitingJob(User user, int numRunningPDEs, int numRunningODEs, long waitingTimeStamp, SimulationJobStatusInfo simJobStatusInfo) {
-			this.user = user;
-			this.numRunningPDEs = numRunningPDEs;
-			this.numRunningODEs = numRunningODEs;
-			this.waitingTimeStamp = waitingTimeStamp;
-			this.simJobStatusInfo = simJobStatusInfo;
-		}
-		
-		public Integer getNumRunningJobs(){
-			return new Integer(numRunningODEs+numRunningPDEs);
-		}
-		
-	};
-
 /**
  * BatchScheduler constructor comment.
  */
@@ -75,13 +45,12 @@
  * Insert the method's description here.
  * Creation date: (5/11/2006 9:32:58 AM)
  */
-public static WaitingJob[] schedule(SimulationJobStatusInfo[] allActiveJobs, int globalJobQuota, int userQuotaOde, int userQuotaPde, VCellServerID systemID, SessionLog log) {
-	Hashtable<User, Integer> userPdeRunningJobsThisSite = new Hashtable<User, Integer>();
-	Hashtable<User, Integer> userOdeRunningJobsThisSite = new Hashtable<User, Integer>();
-	
+public static SimulationJobStatusInfo schedule(SimulationJobStatusInfo[] allActiveJobs, int globalPdeQuota, int userQuotaOde, int userQuotaPde, VCellServerID systemID, SessionLog log) {
+	Hashtable<User, Integer> userPdeRunningJobs = new Hashtable<User, Integer>();
+	Hashtable<User, Integer> userOdeRunningJobs = new Hashtable<User, Integer>();
 
 	cbit.vcell.messaging.db.SimulationJobStatus jobStatus = null;
-	int numRunningJobsAllSites = 0;
+	int runningPDEs = 0;
 	for (int i = 0; i < allActiveJobs.length; i++){
 		jobStatus = allActiveJobs[i].getSimJobStatus();
 
@@ -93,131 +62,67 @@
 			continue;  // we only do statistics on running jobs;
 		}
 		
-		numRunningJobsAllSites++;
+		if (allActiveJobs[i].isPDE()) {
+			runningPDEs ++; // running PDE jobs
+		}
 		
 		if (jobStatus.getServerID().equals(systemID)) { // the number of running jobs on this site
 			User user = allActiveJobs[i].getUser();
 			if(allActiveJobs[i].isPDE()) {
-				Integer numUserPdeJobs = userPdeRunningJobsThisSite.get(user);
+				Integer numUserPdeJobs = userPdeRunningJobs.get(user);
 				if (numUserPdeJobs == null) {
-					userPdeRunningJobsThisSite.put(user, 1);
+					userPdeRunningJobs.put(user, 1);
 				} else {
-					userPdeRunningJobsThisSite.put(user, numUserPdeJobs.intValue() + 1);
+					userPdeRunningJobs.put(user, numUserPdeJobs.intValue() + 1);
 				}
 			} else {
-				Integer numUserOdeJobs = userOdeRunningJobsThisSite.get(user);
+				Integer numUserOdeJobs = userOdeRunningJobs.get(user);
 				if (numUserOdeJobs == null) {
-					userOdeRunningJobsThisSite.put(user, 1);
+					userOdeRunningJobs.put(user, 1);
 				} else {
-					userOdeRunningJobsThisSite.put(user, numUserOdeJobs.intValue() + 1);
+					userOdeRunningJobs.put(user, numUserOdeJobs.intValue() + 1);
 				}
 			}
 		}
-	}
-	ArrayList<WaitingJob> waitingJobs = new ArrayList<WaitingJob>();
+	}	
 	for (int i = 0; i < allActiveJobs.length; i++){
 		jobStatus = allActiveJobs[i].getSimJobStatus();
 			
 		if (!jobStatus.getSchedulerStatus().isWaiting()) {
 			continue; // ignore non-waiting job
 		}
+			
 		if (!jobStatus.getServerID().equals(systemID)) {
 			continue; // doesn't belong
 		}
-
+		
 		User user = allActiveJobs[i].getUser();
-		Integer numRunningPDEsThisSite = userPdeRunningJobsThisSite.get(user);
-		if (numRunningPDEsThisSite==null){
-			numRunningPDEsThisSite = new Integer(0);
-		}
-		Integer numRunningODEsThisSite = userOdeRunningJobsThisSite.get(user);
-		if (numRunningODEsThisSite == null){
-			numRunningODEsThisSite = new Integer(0);
-		}
-		long waitingTimeStamp = jobStatus.getSimulationQueueEntryStatus().getQueueDate().getTime();
-		
-		waitingJobs.add(new WaitingJob(user, numRunningPDEsThisSite, numRunningODEsThisSite, waitingTimeStamp, allActiveJobs[i]));
-	}
+		if (allActiveJobs[i].isPDE() && runningPDEs >= globalPdeQuota) {
+			log.print("Global PDE quota reached [" + jobStatus.getVCSimulationIdentifier() + "]");
+			continue; // global LSF quota violated
+		}							
 
-	Collections.sort(waitingJobs,new Comparator<WaitingJob>(){
-
-		@Override
-		public int compare(WaitingJob o1, WaitingJob o2) {
-			//
-			// user with fewer jobs running should take precedence
-			//
-			if (!o1.getNumRunningJobs().equals(o2.getNumRunningJobs())){
-				return o1.getNumRunningJobs().compareTo(o2.getNumRunningJobs());
-			}
-			//
-			// ODEs take precedence over PDEs (they should be faster)
-			//
-			if (o1.simJobStatusInfo.isPDE() != o2.simJobStatusInfo.isPDE()){
-				if (o1.simJobStatusInfo.isPDE()){
-					return 1;
-				}else{
-					return -1;
+		if(allActiveJobs[i].isPDE()) {
+			Object numUserPdeJobs = userPdeRunningJobs.get(user);
+			if (numUserPdeJobs != null) {
+				if (((Integer)numUserPdeJobs).intValue() >= userQuotaPde) {
+					//log.print("User PDE quota reached [" + jobStatus.getVCSimulationIdentifier() + "]");
+					continue; // user PDE quota reached
 				}
 			}
-			//
-			// both are odes or both are pdes ... sort by waiting time
-			//
-			return o1.waitingTimeStamp.compareTo(o2.waitingTimeStamp);
-		}
-		
-	});
-	
-	//
-	// enforce quota for each user
-	//
-	HashSet<User> users = new HashSet<User>();
-	users.addAll(userPdeRunningJobsThisSite.keySet());
-	users.addAll(userOdeRunningJobsThisSite.keySet());
-	for (User user : users){
-		Integer numRunningPDEsThisSite = userPdeRunningJobsThisSite.get(user);
-		int numRunningPDEs = 0;
-		if (numRunningPDEsThisSite!=null){
-			numRunningPDEs = numRunningPDEsThisSite;
-		}
-		Integer numRunningODEsThisSite = userOdeRunningJobsThisSite.get(user);
-		int numRunningODEs = 0;
-		if (numRunningODEsThisSite != null){
-			numRunningODEs = numRunningODEsThisSite;
-		}
-		
-		//
-		// go full list and remove any jobs that would exceed this users quota
-		//
-		Iterator<WaitingJob> waitingJobIter = waitingJobs.iterator();
-		while (waitingJobIter.hasNext()){
-			WaitingJob waitingJob = waitingJobIter.next();
-			if (waitingJob.user.equals(user)){
-				if (waitingJob.simJobStatusInfo.isPDE()){
-					if (numRunningPDEs < userQuotaPde){
-						numRunningPDEs++;
-					}else{
-						waitingJobIter.remove();
-					}
-				}else{
-					if (numRunningODEs < userQuotaOde){
-						numRunningODEs++;
-					}else{
-						waitingJobIter.remove();
-					}
+		} else {
+			Object numUserOdeJobs = userOdeRunningJobs.get(user);
+			if (numUserOdeJobs != null) {
+				if (((Integer)numUserOdeJobs).intValue() >= userQuotaOde) {
+					log.print("User ODE quota reached [" + jobStatus.getVCSimulationIdentifier() + "]");
+					continue; // user ODE quota reached
 				}
 			}
-		}
+		}	
+
+		return allActiveJobs[i];		
 	}
-	//
-	// enforce global quota (keep only first N jobs) where currentRunning + N <= quota
-	//
-	int numJobsSlotsAvailable = Math.max(0, globalJobQuota - numRunningJobsAllSites);
-	int numJobsEligible = waitingJobs.size();
-	int numJobsToDispatch = Math.min(numJobsSlotsAvailable,numJobsEligible);
-	if (numJobsToDispatch == 0){
-		return new WaitingJob[0];
-	}else{
-		return waitingJobs.subList(0, numJobsToDispatch).toArray(new WaitingJob[0]);
-	}
+
+	return null;
 }
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12211)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12210)
@@ -28,7 +28,6 @@
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationInfo;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.VCSimulationIdentifier;
 
@@ -77,12 +76,12 @@
 	 * @throws SQLException 
 	 * @throws DataAccessException 
 	 */
-	public void onStartRequest(VCSimulationIdentifier vcSimID, User user, int simulationScanCount, SimulationDatabase simulationDatabase, VCMessageSession session, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
+	public void onStartRequest(VCSimulationIdentifier vcSimID, User user, SimulationDatabase simulationDatabase, VCMessageSession session, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 		KeyValue simKey = vcSimID.getSimulationKey();
 
-		SimulationInfo simulationInfo = null;
+		Simulation simulation = null;
 		try {
-			simulationInfo = simulationDatabase.getSimulationInfo(user, simKey);
+			simulation = simulationDatabase.getSimulation(user, simKey);
 		} catch (DataAccessException ex) {
 			log.alert("Bad simulation " + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
@@ -90,7 +89,7 @@
 			message.sendToClient(session);
 			return;
 		}
-		if (simulationInfo == null) {
+		if (simulation == null) {
 			log.alert("Can't start, simulation [" + vcSimID + "] doesn't exist in database");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
 					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
@@ -98,21 +97,34 @@
 			return;
 		}
 
-		if (simulationScanCount > Integer.parseInt(org.vcell.util.PropertyLoader.getRequiredProperty(org.vcell.util.PropertyLoader.maxJobsPerScan))) {
-			log.alert("Too many simulations (" + simulationScanCount + ") for parameter scan." + vcSimID);
+		if (simulation.getScanCount() > Integer.parseInt(org.vcell.util.PropertyLoader.getRequiredProperty(org.vcell.util.PropertyLoader.maxJobsPerScan))) {
+			log.alert("Too many simulations (" + simulation.getScanCount() + ") for parameter scan." + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Too many simulations (" + simulationScanCount + ") for parameter scan."), null, null), user.getName(), null, null);
+					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Too many simulations (" + simulation.getScanCount() + ") for parameter scan."), null, null), user.getName(), null, null);
 			message.sendToClient(session);
 			return;
 		}
 
-		for (int jobIndex = 0; jobIndex < simulationScanCount; jobIndex++){
+		FieldDataIdentifierSpec[] fdis = null;
+		try {
+			simulationDatabase.getFieldDataIdentifierSpecs(simulation);
+		} catch (DataAccessException e) {
+			log.alert("Bad simulation " + vcSimID);
+			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
+					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Failed to dispatch simulation: "+ e.getMessage()), null, null), user.getName(), null, null);
+			message.sendToClient(session);
+			return;
+		}
+
+		for (int jobIndex = 0; jobIndex < simulation.getScanCount(); jobIndex++){
 			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
 			try {
-				simStateMachine.onStartRequest(user, vcSimID, simulationDatabase, session, log);
+				simStateMachine.onStartRequest(user, simulation, fdis, simulationDatabase, session, log);
 			}catch (UpdateSynchronizationException e){
-				simStateMachine.onStartRequest(user, vcSimID, simulationDatabase, session, log);
+				simStateMachine.onStartRequest(user, simulation, fdis, simulationDatabase, session, log);
 			}
+			int taskID = simStateMachine.getLatestKnownTaskID();
+			simStateMachine.onDispatch(vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
 		}
 	}
 
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12211)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12210)
@@ -211,7 +211,25 @@
 		return simInfo;
 	}
 
+	/**
+	 * Insert the method's description here.
+	 * Creation date: (2/3/2004 8:34:36 AM)
+	 * @return cbit.vcell.messaging.SimulationTask
+	 * @param simKey cbit.sql.KeyValue
+	 * @throws XmlParseException 
+	 * @throws DataAccessException 
+	 * @throws ObjectNotFoundException 
+	 * @throws SQLException 
+	 */
+	public SimulationTask getSimulationTask(SimulationJobStatus jobStatus) throws XmlParseException, ObjectNotFoundException, DataAccessException, SQLException {
+		VCSimulationIdentifier vcSimID = jobStatus.getVCSimulationIdentifier();
+		User user = getUser(vcSimID.getSimulationKey(), null);				
+		Simulation sim = getSimulation(user, vcSimID.getSimulationKey());
+		SimulationTask simTask = new SimulationTask(new SimulationJob(sim, jobStatus.getJobIndex(), getFieldDataIdentifierSpecs(sim)), jobStatus.getTaskID());
 
+		return simTask;
+	}
+
 	public int getNumSimulationJobs(User user, KeyValue simKey) throws DataAccessException {
 		Simulation sim = getSimulation(user, simKey);
 		return sim.getScanCount();
@@ -233,4 +251,10 @@
 		}
 	}
 
+	public SimulationJob getSimulationJob(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException {
+		User user = getUser(simKey, null);				
+		Simulation sim = getSimulation(user, simKey);
+		return new SimulationJob(sim, jobIndex, getFieldDataIdentifierSpecs(sim));
+	}
+
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12211)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12210)
@@ -413,8 +413,9 @@
 
 	}
 
-	public synchronized void onStartRequest(User user, VCSimulationIdentifier vcSimID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
+	public synchronized void onStartRequest(User user, Simulation simulation, FieldDataIdentifierSpec[] fieldDataIdentifierSpecs, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 
+		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, simulation.getVersion().getOwner());
 		if (!user.equals(vcSimID.getOwner())) {
 			log.alert(user + " is not authorized to start simulation (key=" + simKey + ")");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
@@ -649,7 +650,14 @@
 		SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 		addStateMachineTransition(new StateMachineTransition(new AbortStateMachineEvent(updatedSimJobStatus.getTaskID(), failureMessage), oldJobStatus, updatedSimJobStatus));
 
-		String userName = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
+		String userName = "all";
+		SimulationJob simulationJob = simulationDatabase.getSimulationJob(simKey, jobIndex);
+		if (simulationJob!=null){
+			Version version = simulationJob.getSimulation().getVersion();
+			if (version!=null){
+				userName = version.getOwner().getName();
+			}
+		}
 		StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, null, null);
 		msgForClient.sendToClient(session);
 		log.print("Send status to client: " + msgForClient);
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12211)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12210)
@@ -47,7 +47,6 @@
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
-import cbit.vcell.message.server.dispatcher.BatchScheduler.WaitingJob;
 import cbit.vcell.message.server.htc.HtcException;
 import cbit.vcell.message.server.htc.HtcJobID;
 import cbit.vcell.message.server.htc.HtcJobID.BatchSystemType;
@@ -89,9 +88,6 @@
 	private HtcProxy htcProxy = null;
 
 	public class DispatchThread extends Thread {
-
-		Object notifyObject = new Object();
-		
 		public DispatchThread() {
 			super();
 			setDaemon(true);
@@ -101,27 +97,29 @@
 		public void run() {
 			
 			while (true) {
-				
-				boolean bDispatchedAnyJobs = false;
 
 				try {
-					final SimulationJobStatusInfo[] allActiveJobs = simulationDatabase.getActiveJobs(getHTCPartitionShareServerIDs());
+					SimulationJobStatusInfo[] allActiveJobs = simulationDatabase.getActiveJobs(getHTCPartitionShareServerIDs());
+					ArrayList<SimulationJobStatusInfo> allActiveJobsList = new ArrayList<SimulationJobStatusInfo>(Arrays.asList(allActiveJobs));
 					if (allActiveJobs != null && allActiveJobs.length > 0) {
 						int htcMaxJobs = getHTCPartitionMaximumJobs();
 						int maxOdePerUser = BatchScheduler.getMaxOdeJobsPerUser();
 						int maxPdePerUser = BatchScheduler.getMaxPdeJobsPerUser();
 						VCellServerID serverID = VCellServerID.getSystemServerID();
 						
-						WaitingJob[] waitingJobs = BatchScheduler.schedule(allActiveJobs, htcMaxJobs, maxOdePerUser, maxPdePerUser, serverID, log);
+						SimulationJobStatusInfo nextJob = BatchScheduler.schedule(allActiveJobsList.toArray(new SimulationJobStatusInfo[0]), htcMaxJobs, maxOdePerUser, maxPdePerUser, serverID, log);
 						
-						for (WaitingJob waitingJob : waitingJobs){
-							SimulationJobStatus jobStatus = waitingJob.simJobStatusInfo.getSimJobStatus();
+						while (nextJob != null) {
+							
+							SimulationJobStatus jobStatus = nextJob.getSimJobStatus();
 							VCSimulationIdentifier vcSimID = jobStatus.getVCSimulationIdentifier();
 							
 							simDispatcherEngine.onDispatch(vcSimID, jobStatus.getJobIndex(), jobStatus.getTaskID(), simulationDatabase, dispatcherQueueSession, log);
-							bDispatchedAnyJobs = true;
 							
 							Thread.yield();
+							
+							allActiveJobsList.remove(nextJob);
+							nextJob = BatchScheduler.schedule(allActiveJobsList.toArray(new SimulationJobStatusInfo[0]), htcMaxJobs, maxOdePerUser, maxPdePerUser, serverID, log);
 						}
 					}
 				} catch (Exception ex) {
@@ -130,14 +128,9 @@
 
 				// if there are no messages or no qualified jobs or exceptions, sleep for a while
 				// this will be interrupted if there is a start request.
-				if (!bDispatchedAnyJobs){
-					synchronized (notifyObject) {
-						try {
-							long waitTime = 5 * MessageConstants.SECOND_IN_MS;
-							notifyObject.wait(waitTime);
-						} catch (InterruptedException ex) {
-						}
-					}
+				try {
+					sleep(10 * MessageConstants.SECOND_IN_MS);
+				} catch (InterruptedException ex) {
 				}
 			} // while(true)
 		}
@@ -200,9 +193,7 @@
 					long startWaitTime = System.currentTimeMillis();
 					notifyObject.wait(waitTime);
 					long endWaitTime = System.currentTimeMillis();
-					long elapsedFlushTime = endWaitTime-startWaitTime;
-					VCMongoMessage.sendInfo("flushed worker event queue: elapsedTime="+(elapsedFlushTime/1000.0)+" s");
-					if (elapsedFlushTime >= waitTime){
+					if ((endWaitTime-startWaitTime)>=waitTime){
 						throw new VCMessagingException("worker event queue flush timed out (>"+waitTime+" s), considerable message backlog?");
 					}
 				} catch (InterruptedException e) {
@@ -345,29 +336,14 @@
 
 			VCRpcRequest request = (VCRpcRequest)objectContent;
 
+			VCSimulationIdentifier vcSimID = (VCSimulationIdentifier)request.getArguments()[0];
 			User user = request.getUser();
 
 			if (request.getMethodName().equals(METHOD_NAME_STARTSIMULATION)) {
-
-				VCSimulationIdentifier vcSimID = (VCSimulationIdentifier)request.getArguments()[0];
-				Integer numSimulationScanJobs = (Integer)request.getArguments()[1];
 				
-				simDispatcherEngine.onStartRequest(vcSimID, user, numSimulationScanJobs.intValue(), simulationDatabase, session, dispatcherQueueSession, log);
+				simDispatcherEngine.onStartRequest(vcSimID, user, simulationDatabase, session, dispatcherQueueSession, log);
 
-				// wake up dispatcher thread
-				if (dispatchThread!=null){
-					try {
-						synchronized (dispatchThread.notifyObject){
-							dispatchThread.notifyObject.notify();
-						}
-					}catch (IllegalMonitorStateException e){
-						e.printStackTrace();
-					}
-				}
-
 			} else if (request.getMethodName().equals(METHOD_NAME_STOPSIMULATION)) {
-
-				VCSimulationIdentifier vcSimID = (VCSimulationIdentifier)request.getArguments()[0];
 				
 				simDispatcherEngine.onStopRequest(vcSimID, user, simulationDatabase, session, log);
 
@@ -396,6 +372,7 @@
 					}catch (IllegalMonitorStateException e){
 						e.printStackTrace();
 					}
+					VCMongoMessage.sendInfo("flushed worker event queue");
 				}
 				return;
 			}
Index: src/cbit/vcell/message/server/bootstrap/LocalSimulationControllerMessaging.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/LocalSimulationControllerMessaging.java	(revision 12211)
+++ src/cbit/vcell/message/server/bootstrap/LocalSimulationControllerMessaging.java	(revision 12210)
@@ -40,9 +40,9 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(VCSimulationIdentifier vcSimID, int numSimulationScanJobs) {
+public void startSimulation(VCSimulationIdentifier vcSimID) {
 	fieldSessionLog.print("LocalSimulationControllerMessaging.startSimulation(" + vcSimID + ")");
-	simServerProxy.startSimulation(vcSimID,numSimulationScanJobs);
+	simServerProxy.startSimulation(vcSimID);
 }
 
 
Index: src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java	(revision 12211)
+++ src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java	(revision 12210)
@@ -81,9 +81,9 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(VCSimulationIdentifier vcSimID, int numSimulationScanJobs) {
+public void startSimulation(VCSimulationIdentifier vcSimID) {
 	try {
-		rpcNoWait("startSimulation",new Object[]{vcSimID, new Integer(numSimulationScanJobs)});
+		rpcNoWait("startSimulation",new Object[]{vcSimID});
 	}catch (DataAccessException e){
 		log.exception(e);
 		throw new RuntimeException(e.getMessage());
Index: src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12211)
+++ src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12210)
@@ -149,10 +149,6 @@
 		if (msgType.equals(MessageConstants.MESSAGE_TYPE_SIMSTATUS_VALUE)) {
 					
 			StatusMessage statusMessage = new StatusMessage(message);
-			String userName = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
-			if (message.propertyExists(MessageConstants.USERNAME_PROPERTY)){
-				userName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-			}
 			
 			SimulationJobStatus newJobStatus = statusMessage.getJobStatus();
 			if (newJobStatus == null) {
@@ -191,7 +187,7 @@
  */
 public void init() {
 	String clientMessageFilter = (user == null ? "" : MessageConstants.USERNAME_PROPERTY + "='" + user.getName() + "' OR ");
-	clientMessageFilter += MessageConstants.USERNAME_PROPERTY + "='"+MessageConstants.USERNAME_PROPERTY_VALUE_ALL+"'";
+	clientMessageFilter += MessageConstants.USERNAME_PROPERTY + "='All'";
 	VCMessageSelector selector = vcMessagingService.createSelector(clientMessageFilter);
 	VCTopicConsumer topicConsumer = new VCTopicConsumer(VCellTopic.ClientStatusTopic, this, selector, "Client Status Topic Consumer for user "+user.getName());
 	vcMessagingService.addMessageConsumer(topicConsumer);
Index: src/cbit/vcell/message/server/htc/pbs/PbsJobID.java
===================================================================
--- src/cbit/vcell/message/server/htc/pbs/PbsJobID.java	(revision 12211)
+++ src/cbit/vcell/message/server/htc/pbs/PbsJobID.java	(revision 12210)
@@ -12,4 +12,7 @@
 		return getJobID();
 	}
 		
+	public String toString(){
+		return "<<<DONT CALL TOSTRING()>>>";
+	}
 }
Index: src/cbit/vcell/message/server/htc/HtcJobID.java
===================================================================
--- src/cbit/vcell/message/server/htc/HtcJobID.java	(revision 12211)
+++ src/cbit/vcell/message/server/htc/HtcJobID.java	(revision 12210)
@@ -39,7 +39,7 @@
 	}
 	
 	public String toString(){
-		return toDatabase();
+		return "<<<DONT CALL TOSTRING()>>>";
 	}
 	
 	protected String getJobID(){
Index: src/cbit/vcell/message/server/htc/sge/SgeJobID.java
===================================================================
--- src/cbit/vcell/message/server/htc/sge/SgeJobID.java	(revision 12211)
+++ src/cbit/vcell/message/server/htc/sge/SgeJobID.java	(revision 12210)
@@ -8,6 +8,10 @@
 		super(jobID,BatchSystemType.SGE);
 	}
 		
+	public String toString(){
+		return "<<<DONT CALL TOSTRING()>>>";
+	}
+
 	public String getSgeJobID() {
 		return getJobID();
 	}
Index: src/cbit/vcell/numericstest/TestCriteriaNew.java
===================================================================
--- src/cbit/vcell/numericstest/TestCriteriaNew.java	(revision 12211)
+++ src/cbit/vcell/numericstest/TestCriteriaNew.java	(revision 12210)
@@ -144,10 +144,4 @@
 public cbit.vcell.solver.test.VariableComparisonSummary[] getVarComparisonSummaries() {
 	return varComparisonSummaries;
 }
-
-
-public int getScanCount() {
-	return 1;
 }
-
-}
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12211)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12210)
@@ -208,7 +208,7 @@
  * @throws SQLException 
  * @throws FileNotFoundException 
  */
-LocalSolverController getOrCreateSolverController(SimulationTask simTask, SessionLog userSessionLog) throws FileNotFoundException, ConfigurationException, DataAccessException, AuthenticationException, SQLException, SolverException  {
+LocalSolverController getSolverController(SimulationTask simTask, SessionLog userSessionLog) throws FileNotFoundException, ConfigurationException, DataAccessException, AuthenticationException, SQLException, SolverException  {
 	Simulation simulation = simTask.getSimulation();
 	VCSimulationIdentifier vcSimID = simulation.getSimulationInfo().getAuthoritativeVCSimulationIdentifier();
 	if (vcSimID == null){
@@ -298,7 +298,7 @@
 		SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(vcMessage);
 		simTask = simTaskMessage.getSimulationTask();
 		
-		LocalSolverController solverController = getOrCreateSolverController(simTask,adminSessionLog);
+		LocalSolverController solverController = getSolverController(simTask,adminSessionLog);
 		
 		solverController.startSimulationJob(); // can only start after updating the database is done
 		
@@ -340,36 +340,26 @@
 	addSimulationJobStatusListener(localVCellConnection.getMessageCollector());
 
 	VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simulation.getKey(), simulation.getVersion().getOwner());
-	simulationDispatcherEngine.onStartRequest(vcSimID, localVCellConnection.getUserLoginInfo().getUser(), simulation.getScanCount(), simulationDatabase, vcMessageSession, vcMessageSession, adminSessionLog);
+	simulationDispatcherEngine.onStartRequest(vcSimID, localVCellConnection.getUserLoginInfo().getUser(), simulationDatabase, vcMessageSession, vcMessageSession, adminSessionLog);
 	vcMessageSession.deliverAll();
-	for (int jobIndex = 0; jobIndex < simulation.getScanCount(); jobIndex++){
-		int taskID = -1;
-		SimulationJobStatus[] simJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simulation.getKey(), jobIndex);
-		for (SimulationJobStatus simJobStatus : simJobStatusArray){
-			if (simJobStatus.getTaskID()>taskID){
-				taskID = simJobStatus.getTaskID();
-			}
-		}
-		simulationDispatcherEngine.onDispatch(vcSimID, jobIndex , taskID, simulationDatabase, vcMessageSession, adminSessionLog);
-		vcMessageSession.deliverAll();
-	}
 }
 
 private void onServiceControlTopic_StopSimulation(VCMessage message){
 	KeyValue simKey = new KeyValue(String.valueOf(message.getLongProperty(MessageConstants.SIMKEY_PROPERTY)));
 	int jobIndex = message.getIntProperty(MessageConstants.JOBINDEX_PROPERTY);
 	int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
+	SimulationTask simTask = null;
 	
 	try {
-		SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simKey, jobIndex, taskID);
-		LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
-		if (solverController!=null){
-			solverController.stopSimulationJob(); // can only start after updating the database is done
-		}
+		simTask = new SimulationTask(simulationDatabase.getSimulationJob(simKey,jobIndex),taskID);
 		
+		LocalSolverController solverController = getSolverController(simTask,adminSessionLog);
+		
+		solverController.stopSimulationJob(); // can only start after updating the database is done
+		
 	} catch (Exception e) {
 		adminSessionLog.exception(e);
-		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, localVCellConnection.getUserLoginInfo().getUser());
+		VCSimulationIdentifier vcSimID = simTask.getSimulationJob().getVCDataIdentifier().getVcSimID();
 		SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, null, SchedulerStatus.FAILED, taskID, SimulationMessage.jobFailed(e.getMessage()), null, null);
 		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
Index: src/cbit/vcell/server/SimulationController.java
===================================================================
--- src/cbit/vcell/server/SimulationController.java	(revision 12211)
+++ src/cbit/vcell/server/SimulationController.java	(revision 12210)
@@ -20,7 +20,7 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier, int numSimulationScanJobs) throws RemoteException;
+public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws RemoteException;
 
 
 /**
Index: src/cbit/vcell/server/LocalSimulationController.java
===================================================================
--- src/cbit/vcell/server/LocalSimulationController.java	(revision 12211)
+++ src/cbit/vcell/server/LocalSimulationController.java	(revision 12210)
@@ -40,7 +40,7 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier, int numSimulationScanJobs) {
+public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) {
 	sessionLog.print("LocalSimulationController.startSimulation(simInfo="+vcSimulationIdentifier+")");
 	try {
 		Simulation simulation = simulationControllerImpl.getSimulationDatabase().getSimulation(user,vcSimulationIdentifier.getSimulationKey());
Index: src/cbit/vcell/mongodb/VCMongoDbDriver.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 12211)
+++ src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 12210)
@@ -170,8 +170,8 @@
     
     public void addMessage(VCMongoMessage message)
     {
-//    	getSessionLog().print("VCMongoMessage queued : "+message);
     	messageOutbox.add(message);
+    	getSessionLog().print("VCMongoMessage queued : "+message);
     	if (!IsProcessing()){
     		startProcessing();
     	}
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12211)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12210)
@@ -124,8 +124,6 @@
 	public final static String MongoMessage_rpcRequestMethod	= "rpcMethod";
 	public final static String MongoMessage_rpcRequestArgs		= "rpcArgs";
 	public final static String MongoMessage_rpcRequestService	= "rpcService";
-	public final static String MongoMessage_rpcRequestDelay		= "rpcDelay";
-	public final static String MongoMessage_rpcServiceTime		= "rpcServiceTime";
 	public final static String MongoMessage_userName			= "user";
 	public final static String MongoMessage_host				= "host";
 	public final static String MongoMessage_serviceName			= "serviceName";
@@ -607,7 +605,7 @@
 		}
 	}
 
-	public static void sendRpcRequestProcessed(VCRpcRequest rpcRequest) {
+	public static void sendRpcRequestReceived(VCRpcRequest rpcRequest) {
 		if (!enabled){
 			return;
 		}
@@ -772,12 +770,6 @@
 		dbObject.put(MongoMessage_rpcRequestMethod,rpcRequest.getMethodName());
 		dbObject.put(MongoMessage_rpcRequestService,rpcRequest.getRequestedServiceType().getName());
 		dbObject.put(MongoMessage_userName,rpcRequest.getUserName());
-		if (rpcRequest.getRequestTimestampMS()!=null && rpcRequest.getBeginProcessingTimestampMS()!=null){
-			dbObject.put(MongoMessage_rpcRequestDelay,rpcRequest.getBeginProcessingTimestampMS().longValue() - rpcRequest.getRequestTimestampMS().longValue());
-		}
-		if (rpcRequest.getBeginProcessingTimestampMS()!=null && rpcRequest.getEndProcessingTimestampMS()!=null){
-			dbObject.put(MongoMessage_rpcServiceTime,rpcRequest.getEndProcessingTimestampMS().longValue() - rpcRequest.getBeginProcessingTimestampMS().longValue());
-		}
 	}
 		
 	private static void addObject(BasicDBObject dbObject, SimulationTask simulationTask){
Index: src/cbit/vcell/client/ClientRequestManager.java
===================================================================
--- src/cbit/vcell/client/ClientRequestManager.java	(revision 12211)
+++ src/cbit/vcell/client/ClientRequestManager.java	(revision 12210)
@@ -2717,11 +2717,11 @@
  * @param documentWindowManager cbit.vcell.client.DocumentWindowManager
  * @param simulations cbit.vcell.solver.Simulation[]
  */
-public void runSimulation(final SimulationInfo simInfo, int numSimulationScanJobs) throws DataAccessException{
+public void runSimulation(final SimulationInfo simInfo) throws DataAccessException{
 
 	getClientServerManager().
 		getJobManager().
-			startSimulation(simInfo.getAuthoritativeVCSimulationIdentifier(), numSimulationScanJobs);
+			startSimulation(simInfo.getAuthoritativeVCSimulationIdentifier());
 }		
 
 
Index: src/cbit/vcell/client/task/RunSims.java
===================================================================
--- src/cbit/vcell/client/task/RunSims.java	(revision 12211)
+++ src/cbit/vcell/client/task/RunSims.java	(revision 12210)
@@ -258,7 +258,7 @@
 					//
 					// translate to common ancestral simulation (oldest mathematically equivalent simulation)
 					//
-					jobManager.startSimulation(simInfo.getAuthoritativeVCSimulationIdentifier(),sim.getScanCount());
+					jobManager.startSimulation(simInfo.getAuthoritativeVCSimulationIdentifier());
 					// updateStatus
 					clientSimManager.updateStatusFromStartRequest(sim, false, null);
 				} else {
Index: src/cbit/vcell/client/RequestManager.java
===================================================================
--- src/cbit/vcell/client/RequestManager.java	(revision 12211)
+++ src/cbit/vcell/client/RequestManager.java	(revision 12210)
@@ -246,7 +246,7 @@
  * @param documentWindowManager cbit.vcell.client.DocumentWindowManager
  * @param simulation cbit.vcell.solver.Simulation
  */
-void runSimulation(SimulationInfo simInfo, int numSimulationScanJobs) throws DataAccessException;
+void runSimulation(SimulationInfo simInfo) throws DataAccessException;
 
 
 /**
Index: src/cbit/vcell/client/server/ClientJobManager.java
===================================================================
--- src/cbit/vcell/client/server/ClientJobManager.java	(revision 12211)
+++ src/cbit/vcell/client/server/ClientJobManager.java	(revision 12210)
@@ -174,14 +174,14 @@
  * Insert the method's description here.
  * Creation date: (6/4/2004 3:22:42 PM)
  */
-public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier, int numSimulationScanJobs) throws DataAccessException {
+public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws DataAccessException {
 	try {
-		getClientServerManager().getSimulationController().startSimulation(vcSimulationIdentifier, numSimulationScanJobs);
+		getClientServerManager().getSimulationController().startSimulation(vcSimulationIdentifier);
 	} catch (RemoteException rexc) {
 		handleRemoteException(rexc);
 		// once more before we fail
 		try {
-			getClientServerManager().getSimulationController().startSimulation(vcSimulationIdentifier, numSimulationScanJobs);
+			getClientServerManager().getSimulationController().startSimulation(vcSimulationIdentifier);
 		} catch (RemoteException rexc2) {
 			handleRemoteException(rexc2);
 			throw new DataAccessException("Start simulation '"+vcSimulationIdentifier+"' failed\n"+rexc2.getMessage());
Index: src/cbit/vcell/client/server/JobManager.java
===================================================================
--- src/cbit/vcell/client/server/JobManager.java	(revision 12211)
+++ src/cbit/vcell/client/server/JobManager.java	(revision 12210)
@@ -48,7 +48,7 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-void startSimulation(VCSimulationIdentifier vcSimulationIdentifier, int numSimulationScanJobs) throws DataAccessException;
+void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws DataAccessException;
 
 
 /**
Index: src/cbit/vcell/client/TestingFrameworkWindowManager.java
===================================================================
--- src/cbit/vcell/client/TestingFrameworkWindowManager.java	(revision 12211)
+++ src/cbit/vcell/client/TestingFrameworkWindowManager.java	(revision 12210)
@@ -2822,7 +2822,7 @@
 			pp.setProgress((int)(1+(((double)i/(double)tcrits.length)*100)));
 			pp.setMessage("Trying to run sim "+tcrits[i].getSimInfo().getName());
 			updateTCritStatus(tcrits[i],TestCriteriaNew.TCRIT_STATUS_SIMRUNNING,null);
-			getRequestManager().runSimulation(tcrits[i].getSimInfo(),tcrits[i].getScanCount());
+			getRequestManager().runSimulation(tcrits[i].getSimInfo());
 		}catch(Throwable e){
 			e.printStackTrace();
 			errors.append("Failed to start sim "+tcrits[i].getSimInfo().getVersion().getName()+" "+e.getClass().getName()+" mesg="+e.getMessage()+"\n");
Index: src/org/vcell/util/MessageConstants.java
===================================================================
--- src/org/vcell/util/MessageConstants.java	(revision 12211)
+++ src/org/vcell/util/MessageConstants.java	(revision 12210)
@@ -19,13 +19,12 @@
 	
 	public static final String METHOD_NAME_PROPERTY	= "MethodName";	
 	public static final String USERNAME_PROPERTY	= "UserName";
-	public static final String 		USERNAME_PROPERTY_VALUE_ALL = "All";
 	public static final String SIZE_MB_PROPERTY		= "SizeMB";
 	public static final String SIMKEY_PROPERTY		= "SimKey";
 	public static final String JOBINDEX_PROPERTY		= "JobIndex";
 	public static final String TASKID_PROPERTY		= "TaskID";
 	public static final String FIELDDATAID_PROPERTY		= "FieldDataID";
-	public static final String HTCJOBID_PROPERTY 	= "HtcJobID";
+	public static final String HTCJOBID_PROPERTY 	= "HtcJobID";	
 
 	// bitmapped counter so that allows 3 retries for each request (but preserves ordinal nature)
 	// bits 0-3: retry count
