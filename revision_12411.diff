Index: src/cbit/vcell/message/server/console/ZombieSlayer.java
===================================================================
--- src/cbit/vcell/message/server/console/ZombieSlayer.java	(revision 12411)
+++ src/cbit/vcell/message/server/console/ZombieSlayer.java	(revision 12410)
@@ -16,7 +16,6 @@
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
 import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.message.server.dispatcher.SimulationDatabaseDirect;
 import cbit.vcell.message.server.htc.pbs.PbsProxy;
 import cbit.vcell.message.server.htc.pbs.PbsProxy.RunningPbsJobRecord;
 import cbit.vcell.messaging.db.SimulationJobStatus;
@@ -24,7 +23,6 @@
 import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.DbDriver;
 import cbit.vcell.modeldb.ResultSetCrawler;
-import cbit.vcell.modeldb.ResultSetDBTopLevel;
 
 public class ZombieSlayer {
 
@@ -89,8 +87,8 @@
 			ConnectionFactory conFactory = new OraclePoolingConnectionFactory(log);
 			DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
 			AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
-			ResultSetDBTopLevel resultSetDbTopLevel = new ResultSetDBTopLevel(conFactory, log);
-			SimulationDatabase simulationDatabase = new SimulationDatabaseDirect(resultSetDbTopLevel, adminDbTopLevel, databaseServerImpl,log);
+			ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
+			SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl,log);
 		    ArrayList<SuspectSimJobID> zombieCandidateIDs = new ArrayList<SuspectSimJobID>();
 		    ArrayList<RunningPbsJobRecord> runningPbsJobRecords = null;
 
@@ -111,13 +109,31 @@
 		
 			RunningPbsJobRecord suspectPbsJobRecord = null;
 			SimulationJobStatus.SchedulerStatus schedulerStatus = null;
+			SimulationJobStatus[] simJobs = null;
+			SimulationJobStatus simJobStatus = null;
 				
 			Iterator<RunningPbsJobRecord> jobRecordIter = runningPbsJobRecords.iterator();
 			while (jobRecordIter.hasNext()){
 				schedulerStatus = null;
+				simJobStatus = null;
+				int highestTaskId, highestTaskIdIndex=0;
 				suspectPbsJobRecord = jobRecordIter.next();
-				SimulationJobStatus simJobStatus = simulationDatabase.getLatestSimulationJobStatus(suspectPbsJobRecord.getSimID(), suspectPbsJobRecord.getSimJobIndex());
+				simJobs = simulationDatabase.getSimulationJobStatusArray(suspectPbsJobRecord.getSimID(), suspectPbsJobRecord.getSimJobIndex());
 		
+				if (simJobs!=null && (simJobs.length>0)){
+					highestTaskId=0;
+					highestTaskIdIndex = 0;
+					
+					for (int i=0; i<simJobs.length; i++) {
+						if (simJobs[i].getTaskID()>highestTaskId){
+							highestTaskId = simJobs[i].getTaskID();
+							highestTaskIdIndex = i;
+						}
+					}
+				
+					simJobStatus = simJobs[highestTaskIdIndex];
+				
+				}
 				if (simJobStatus!=null) {
 					schedulerStatus = simJobStatus.getSchedulerStatus();
 				}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabaseDirect.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabaseDirect.java	(revision 12411)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabaseDirect.java	(revision 12410)
@@ -1,229 +0,0 @@
-package cbit.vcell.message.server.dispatcher;
-
-import java.io.File;
-import java.sql.SQLException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Vector;
-
-import org.vcell.util.BigString;
-import org.vcell.util.DataAccessException;
-import org.vcell.util.ObjectNotFoundException;
-import org.vcell.util.PermissionException;
-import org.vcell.util.PropertyLoader;
-import org.vcell.util.SessionLog;
-import org.vcell.util.document.ExternalDataIdentifier;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-import org.vcell.util.document.VCellServerID;
-
-import cbit.vcell.field.FieldDataDBOperationResults;
-import cbit.vcell.field.FieldDataDBOperationSpec;
-import cbit.vcell.field.FieldDataIdentifierSpec;
-import cbit.vcell.field.FieldFunctionArguments;
-import cbit.vcell.field.FieldUtilities;
-import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationRequirements;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
-import cbit.vcell.modeldb.AdminDBTopLevel;
-import cbit.vcell.modeldb.DatabaseServerImpl;
-import cbit.vcell.modeldb.ResultSetDBTopLevel;
-import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationInfo;
-import cbit.vcell.solver.SolverResultSetInfo;
-import cbit.vcell.solver.VCSimulationDataIdentifier;
-import cbit.vcell.solver.VCSimulationIdentifier;
-import cbit.vcell.xml.XmlHelper;
-import cbit.vcell.xml.XmlParseException;
-
-public class SimulationDatabaseDirect implements SimulationDatabase {
-
-	private AdminDBTopLevel adminDbTopLevel = null;
-	private ResultSetDBTopLevel resultSetDbTopLevel = null;
-	private DatabaseServerImpl databaseServerImpl = null;
-	private SessionLog log = null;
-	private Map<KeyValue, FieldDataIdentifierSpec[]> simFieldDataIDMap = Collections.synchronizedMap(new HashMap<KeyValue, FieldDataIdentifierSpec[]>());
-	private Map<String, User> userMap = Collections.synchronizedMap(new HashMap<String, User>());
-	private Map<VCSimulationDataIdentifier,SolverResultSetInfo> resultSetMap = Collections.synchronizedMap(new HashMap<VCSimulationDataIdentifier,SolverResultSetInfo>());
-
-	public SimulationDatabaseDirect(ResultSetDBTopLevel resultSetDbTopLevel, AdminDBTopLevel adminDbTopLevel, DatabaseServerImpl databaseServerImpl, SessionLog log){
-		this.resultSetDbTopLevel = resultSetDbTopLevel;
-		this.databaseServerImpl = databaseServerImpl;
-		this.adminDbTopLevel = adminDbTopLevel;
-		this.log = log;
-	}
-
-	@Override
-	public SimulationJobStatus getLatestSimulationJobStatus(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException {
-		SimulationJobStatus[] simJobStatusArray = adminDbTopLevel.getSimulationJobStatusArray(simKey, jobIndex, true);
-		if (simJobStatusArray.length == 0){
-			return null;
-		}else if (simJobStatusArray.length == 1){
-			return simJobStatusArray[0];
-		}
-		SimulationJobStatus latestSimJobStatus = simJobStatusArray[0];
-		for (SimulationJobStatus simJobStatus : simJobStatusArray){
-			if (latestSimJobStatus.getTaskID() < simJobStatus.getTaskID()){
-				latestSimJobStatus = simJobStatus;
-			}
-		}
-		return latestSimJobStatus;
-	}
-
-	SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException, SQLException {
-		return adminDbTopLevel.getSimulationJobStatus(simKey, jobIndex, taskID, true);
-	}
-
-	@Override
-	public void insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, SQLException{
-		adminDbTopLevel.insertSimulationJobStatus(simulationJobStatus,true);
-	}
-
-	@Override
-	public SimulationJobStatus[] getActiveJobs() throws DataAccessException, SQLException{
-		SimulationJobStatus[] activeJobs = adminDbTopLevel.getActiveJobs(VCellServerID.getSystemServerID(),true);
-		return activeJobs;
-	}
-	@Override
-	public Map<KeyValue,SimulationRequirements> getSimulationRequirements(List<KeyValue> simKeys) throws SQLException {
-		Map<KeyValue,SimulationRequirements> simReqMap = adminDbTopLevel.getSimulationRequirements(simKeys,true);
-		return simReqMap;
-	}
-	
-	@Override
-	public void updateSimulationJobStatus(SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException, SQLException {
-		adminDbTopLevel.updateSimulationJobStatus(newSimulationJobStatus,true);
-	}
-
-	@Override
-	public Simulation getSimulation(User user, KeyValue simKey) throws DataAccessException {
-		Simulation sim = null;
-
-		BigString simstr = databaseServerImpl.getSimulationXML(user,simKey);	
-		if (simstr != null){
-			try {
-				sim = XmlHelper.XMLToSim(simstr.toString());
-			}catch (XmlParseException e){
-				log.exception(e);
-				throw new DataAccessException(e.getMessage());
-			}
-		}
-
-		return sim;
-	}
-
-	@Override
-	public FieldDataIdentifierSpec[] getFieldDataIdentifierSpecs(Simulation sim) throws DataAccessException {
-		try {		
-			KeyValue simKey = sim.getKey();
-			log.print("Get FieldDataIdentifierSpec for [" + simKey + "]");	
-			FieldDataIdentifierSpec[] fieldDataIDSs = (FieldDataIdentifierSpec[])simFieldDataIDMap.get(simKey);
-
-			if (fieldDataIDSs != null) {
-				return fieldDataIDSs;
-			}
-
-			FieldFunctionArguments[] fieldFuncArgs =  FieldUtilities.getFieldFunctionArguments(sim.getMathDescription());
-			if (fieldFuncArgs == null || fieldFuncArgs.length == 0) {
-				fieldDataIDSs = new FieldDataIdentifierSpec[0];
-				simFieldDataIDMap.put(simKey, fieldDataIDSs);
-				return fieldDataIDSs;
-			}
-			fieldDataIDSs = new FieldDataIdentifierSpec[0];
-			User owner = sim.getVersion().getOwner();
-			FieldDataDBOperationSpec fieldDataDbOperationSpec = FieldDataDBOperationSpec.createGetExtDataIDsSpec(owner);
-			FieldDataDBOperationResults fieldDataDBOperationResults = databaseServerImpl.fieldDataDBOperation(owner,fieldDataDbOperationSpec);
-			ExternalDataIdentifier[] externalDataIDs = fieldDataDBOperationResults.extDataIDArr;
-			if (externalDataIDs != null && externalDataIDs.length != 0 &&
-					fieldFuncArgs != null && fieldFuncArgs.length>0	) {
-				Vector<FieldDataIdentifierSpec> fieldDataIdV = new Vector<FieldDataIdentifierSpec>();
-				for(int j=0;fieldFuncArgs != null && j<fieldFuncArgs.length;j+= 1){
-					for(int i=0;i<externalDataIDs.length;i+= 1){
-						if(externalDataIDs[i].getName().equals(fieldFuncArgs[j].getFieldName())){
-							fieldDataIdV.add(
-									new FieldDataIdentifierSpec(fieldFuncArgs[j],externalDataIDs[i])
-									);
-							break;
-						}
-					}
-				}
-				if(fieldDataIdV.size() > 0){
-					fieldDataIDSs = new FieldDataIdentifierSpec[fieldDataIdV.size()];
-					fieldDataIdV.copyInto(fieldDataIDSs);
-				}
-			}
-
-			simFieldDataIDMap.put(simKey, fieldDataIDSs);		
-			return fieldDataIDSs;
-		} catch (Exception ex) {
-			log.exception(ex);
-			throw new DataAccessException(ex.getMessage());
-		}
-	}
-	
-	@Override
-	public Set<KeyValue> getUnreferencedSimulations() throws SQLException{
-		return adminDbTopLevel.getUnreferencedSimulations(true);
-	}
-
-	@Override
-	public User getUser(String username) throws DataAccessException, SQLException {
-		User user = null;
-
-		synchronized(userMap) {
-			user = (User)userMap.get(username);
-			if (user!=null){
-				return user;
-			}
-		}
-		
-		user = adminDbTopLevel.getUser(username,true);
-		
-		synchronized(userMap) {
-			if (user != null) {
-				userMap.put(username, user);
-			}else{
-				throw new RuntimeException("username "+username+" not found");
-			}
-		}
-		return user;
-	}
-
-	@Override
-	public SimulationInfo getSimulationInfo(User user, KeyValue simKey) throws ObjectNotFoundException, DataAccessException {
-		SimulationInfo simInfo = databaseServerImpl.getSimulationInfo(user, simKey);
-		return simInfo;
-	}
-	
-	public static SolverResultSetInfo createNewSolverResultSetInfo(VCSimulationDataIdentifier vcSimDataID){
-		User user = vcSimDataID.getOwner();
-		File dataRootDir = new File(PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty));
-		File userDir = new File(dataRootDir, user.getName());
-		File logFile = new File(userDir,vcSimDataID.getID() + ".log");
-		SolverResultSetInfo rsetInfo = new SolverResultSetInfo(vcSimDataID,logFile.getAbsolutePath(),new java.util.Date(),null);
-		return rsetInfo;
-	}
-
-	@Override
-	public void updateSolverResultSetInfo(SolverResultSetInfo solverResultSetInfo) throws PermissionException, SQLException, DataAccessException {
-		resultSetDbTopLevel.updateResultSetInfo(solverResultSetInfo.getVCSimulationDataIdentifier().getOwner(), solverResultSetInfo, true);
-		resultSetMap.put(solverResultSetInfo.getVCSimulationDataIdentifier(), solverResultSetInfo);
-	}
-	
-	@Override
-	public SolverResultSetInfo getSolverResultSetInfo(User user, KeyValue simKey, int jobIndex) throws SQLException, DataAccessException{
-		VCSimulationDataIdentifier vcSimDataID = new VCSimulationDataIdentifier(new VCSimulationIdentifier(simKey, user), jobIndex);
-		SolverResultSetInfo storedSolverResultSetInfo = resultSetMap.get(vcSimDataID);
-		if (storedSolverResultSetInfo!=null){
-			return storedSolverResultSetInfo;
-		}
-		storedSolverResultSetInfo = resultSetDbTopLevel.getResultSetInfo(user, simKey, jobIndex, true);
-		resultSetMap.put(vcSimDataID, storedSolverResultSetInfo);
-		return storedSolverResultSetInfo;
-	}
-
-}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12411)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12410)
@@ -12,6 +12,7 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.SessionLog;
@@ -20,6 +21,7 @@
 import org.vcell.util.document.VCellServerID;
 
 import cbit.rmi.event.WorkerEvent;
+import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.messages.StatusMessage;
@@ -63,11 +65,11 @@
 		return newStateMachine;
 	}
 
-	public void onDispatch(Simulation simulation, SimulationJobStatus simJobStatus, SimulationDatabase simulationDatabase, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException{
-		KeyValue simulationKey = simJobStatus.getVCSimulationIdentifier().getSimulationKey();
-		SimulationStateMachine simStateMachine = getSimulationStateMachine(simulationKey, simJobStatus.getJobIndex());
+	public void onDispatch(Simulation simulation, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationDatabase simulationDatabase, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException{
+		KeyValue simulationKey = vcSimID.getSimulationKey();
+		SimulationStateMachine simStateMachine = getSimulationStateMachine(simulationKey, jobIndex);
 		
-		simStateMachine.onDispatch(simulation, simJobStatus, simulationDatabase, dispatcherQueueSession, log);
+		simStateMachine.onDispatch(simulation, vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
 	}
 	/**
 	 * @param vcMessage
@@ -119,19 +121,18 @@
 	public void onStopRequest(VCSimulationIdentifier vcSimID, User user, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws DataAccessException, VCMessagingException, SQLException {
 		KeyValue simKey = vcSimID.getSimulationKey();
 
-		SimulationJobStatus[] allActiveSimJobStatusArray = simulationDatabase.getActiveJobs();
-		ArrayList<SimulationJobStatus> simJobStatusArray = new ArrayList<SimulationJobStatus>();
-		for (SimulationJobStatus activeSimJobStatus : allActiveSimJobStatusArray){
-			if (activeSimJobStatus.getVCSimulationIdentifier().getSimulationKey().equals(vcSimID.getSimulationKey())){
-				simJobStatusArray.add(activeSimJobStatus);
-			}
+		SimulationJobStatus[] simJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey);
+		HashSet<Integer> simJobIndices = new HashSet<Integer>();
+		for (SimulationJobStatus simJobStatus : simJobStatusArray){
+			int jobIndex = simJobStatus.getJobIndex();
+			simJobIndices.add(jobIndex);
 		}
-		for (SimulationJobStatus simJobStatus : simJobStatusArray){
-			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, simJobStatus.getJobIndex());
+		for (int jobIndex : simJobIndices){
+			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
 			try {
-				simStateMachine.onStopRequest(user, simJobStatus, simulationDatabase, session, log);
+				simStateMachine.onStopRequest(user, vcSimID, simulationDatabase, session, log);
 			}catch (UpdateSynchronizationException e){
-				simStateMachine.onStopRequest(user, simJobStatus, simulationDatabase, session, log);
+				simStateMachine.onStopRequest(user, vcSimID, simulationDatabase, session, log);
 			}
 		}
 	}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12411)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12410)
@@ -1,47 +1,197 @@
 package cbit.vcell.message.server.dispatcher;
 
 import java.sql.SQLException;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.Vector;
 
+import org.vcell.util.BigString;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ObjectNotFoundException;
-import org.vcell.util.PermissionException;
+import org.vcell.util.SessionLog;
+import org.vcell.util.document.ExternalDataIdentifier;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
+import org.vcell.util.document.VCellServerID;
 
+import cbit.vcell.field.FieldDataDBOperationResults;
+import cbit.vcell.field.FieldDataDBOperationSpec;
 import cbit.vcell.field.FieldDataIdentifierSpec;
+import cbit.vcell.field.FieldFunctionArguments;
+import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationRequirements;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
+import cbit.vcell.modeldb.AdminDBTopLevel;
+import cbit.vcell.modeldb.DatabaseServerImpl;
+import cbit.vcell.modeldb.ResultSetCrawler;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationInfo;
-import cbit.vcell.solver.SolverResultSetInfo;
+import cbit.vcell.solver.VCSimulationDataIdentifier;
+import cbit.vcell.xml.XmlHelper;
+import cbit.vcell.xml.XmlParseException;
 
-public interface SimulationDatabase {
+public class SimulationDatabase {
 
-	public SimulationJobStatus getLatestSimulationJobStatus(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException;
+	private AdminDBTopLevel adminDbTopLevel = null;
+	private DatabaseServerImpl databaseServerImpl = null;
+	private SessionLog log = null;
+	private Map<KeyValue, FieldDataIdentifierSpec[]> simFieldDataIDMap = Collections.synchronizedMap(new HashMap<KeyValue, FieldDataIdentifierSpec[]>());
+	private Map<String, User> userMap = Collections.synchronizedMap(new HashMap<String, User>());
+	protected HashSet<VCSimulationDataIdentifier> resultSetSavedSet = new HashSet<VCSimulationDataIdentifier>();
+	private ResultSetCrawler resultSetCrawler = null;
 
-	public void insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, SQLException;
 
-	public SimulationJobStatus[] getActiveJobs() throws DataAccessException, SQLException;
+	public SimulationDatabase(ResultSetCrawler resultSetCrawler, AdminDBTopLevel adminDbTopLevel, DatabaseServerImpl databaseServerImpl, SessionLog log){
+		this.resultSetCrawler = resultSetCrawler;
+		this.databaseServerImpl = databaseServerImpl;
+		this.adminDbTopLevel = adminDbTopLevel;
+		this.log = log;
+	}
+
+	public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException {
+		return adminDbTopLevel.getSimulationJobStatusArray(simKey, jobIndex, true);
+	}
+
+	public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey) throws DataAccessException, SQLException {
+		return adminDbTopLevel.getSimulationJobStatusArray(simKey, true);
+	}
+
+	public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException, SQLException {
+		return adminDbTopLevel.getSimulationJobStatus(simKey, jobIndex, taskID, true);
+	}
+
+	public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, SQLException{
+		return adminDbTopLevel.insertSimulationJobStatus(simulationJobStatus,true);
+	}
+
+	public SimulationJobStatus[] getActiveJobs(VCellServerID serverID) throws DataAccessException, SQLException{
+		SimulationJobStatus[] activeJobs = adminDbTopLevel.getActiveJobs(serverID,true);
+		return activeJobs;
+	}
+	public Map<KeyValue,SimulationRequirements> getSimulationRequirements(List<KeyValue> simKeys) throws SQLException {
+		Map<KeyValue,SimulationRequirements> simReqMap = adminDbTopLevel.getSimulationRequirements(simKeys,true);
+		return simReqMap;
+	}
 	
-	public Map<KeyValue,SimulationRequirements> getSimulationRequirements(List<KeyValue> simKeys) throws SQLException;
-	
-	public void updateSimulationJobStatus(SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException, SQLException;
+	public SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException, SQLException {
+		return adminDbTopLevel.updateSimulationJobStatus(oldSimulationJobStatus,newSimulationJobStatus,true);
+	}
 
-	public Simulation getSimulation(User user, KeyValue simKey) throws DataAccessException;
+	public Simulation getSimulation(User user, KeyValue simKey) throws DataAccessException {
+		Simulation sim = null;
 
-	public FieldDataIdentifierSpec[] getFieldDataIdentifierSpecs(Simulation sim) throws DataAccessException;
+		BigString simstr = databaseServerImpl.getSimulationXML(user,simKey);	
+		if (simstr != null){
+			try {
+				sim = XmlHelper.XMLToSim(simstr.toString());
+			}catch (XmlParseException e){
+				log.exception(e);
+				throw new DataAccessException(e.getMessage());
+			}
+		}
+
+		return sim;
+	}
+
+	public FieldDataIdentifierSpec[] getFieldDataIdentifierSpecs(Simulation sim) throws DataAccessException {
+		try {		
+			KeyValue simKey = sim.getKey();
+			log.print("Get FieldDataIdentifierSpec for [" + simKey + "]");	
+			FieldDataIdentifierSpec[] fieldDataIDSs = (FieldDataIdentifierSpec[])simFieldDataIDMap.get(simKey);
+
+			if (fieldDataIDSs != null) {
+				return fieldDataIDSs;
+			}
+
+			FieldFunctionArguments[] fieldFuncArgs =  FieldUtilities.getFieldFunctionArguments(sim.getMathDescription());
+			if (fieldFuncArgs == null || fieldFuncArgs.length == 0) {
+				fieldDataIDSs = new FieldDataIdentifierSpec[0];
+				simFieldDataIDMap.put(simKey, fieldDataIDSs);
+				return fieldDataIDSs;
+			}
+			fieldDataIDSs = new FieldDataIdentifierSpec[0];
+			User owner = sim.getVersion().getOwner();
+			FieldDataDBOperationSpec fieldDataDbOperationSpec = FieldDataDBOperationSpec.createGetExtDataIDsSpec(owner);
+			FieldDataDBOperationResults fieldDataDBOperationResults = databaseServerImpl.fieldDataDBOperation(owner,fieldDataDbOperationSpec);
+			ExternalDataIdentifier[] externalDataIDs = fieldDataDBOperationResults.extDataIDArr;
+			if (externalDataIDs != null && externalDataIDs.length != 0 &&
+					fieldFuncArgs != null && fieldFuncArgs.length>0	) {
+				Vector<FieldDataIdentifierSpec> fieldDataIdV = new Vector<FieldDataIdentifierSpec>();
+				for(int j=0;fieldFuncArgs != null && j<fieldFuncArgs.length;j+= 1){
+					for(int i=0;i<externalDataIDs.length;i+= 1){
+						if(externalDataIDs[i].getName().equals(fieldFuncArgs[j].getFieldName())){
+							fieldDataIdV.add(
+									new FieldDataIdentifierSpec(fieldFuncArgs[j],externalDataIDs[i])
+									);
+							break;
+						}
+					}
+				}
+				if(fieldDataIdV.size() > 0){
+					fieldDataIDSs = new FieldDataIdentifierSpec[fieldDataIdV.size()];
+					fieldDataIdV.copyInto(fieldDataIDSs);
+				}
+			}
+
+			simFieldDataIDMap.put(simKey, fieldDataIDSs);		
+			return fieldDataIDSs;
+		} catch (Exception ex) {
+			log.exception(ex);
+			throw new DataAccessException(ex.getMessage());
+		}
+	}
 	
-	public Set<KeyValue> getUnreferencedSimulations() throws SQLException;
+	public Set<KeyValue> getUnreferencedSimulations() throws SQLException{
+		return adminDbTopLevel.getUnreferencedSimulations(true);
+	}
 
-	public User getUser(String username) throws DataAccessException, SQLException;
+	public User getUser(String username) throws DataAccessException, SQLException {
+		User user = null;
 
-	public SimulationInfo getSimulationInfo(User user, KeyValue simKey) throws ObjectNotFoundException, DataAccessException;
+		synchronized(userMap) {
+			user = (User)userMap.get(username);
+			if (user!=null){
+				return user;
+			}
+		}
+		
+		user = adminDbTopLevel.getUser(username,true);
+		
+		synchronized(userMap) {
+			if (user != null) {
+				userMap.put(username, user);
+			}else{
+				throw new RuntimeException("username "+username+" not found");
+			}
+		}
+		return user;
+	}
 
-	public void updateSolverResultSetInfo(SolverResultSetInfo vcSimDataID) throws PermissionException, SQLException, DataAccessException;
+	public SimulationInfo getSimulationInfo(User user, KeyValue simKey) throws ObjectNotFoundException, DataAccessException {
+		SimulationInfo simInfo = databaseServerImpl.getSimulationInfo(user, simKey);
+		return simInfo;
+	}
 
-	public SolverResultSetInfo getSolverResultSetInfo(User user, KeyValue simKey, int jobIndex) throws SQLException, DataAccessException;
+
+	public void dataMoved(VCSimulationDataIdentifier vcSimDataID, User user) {
+		// called by data mover thread after successful move operations
+		try {		
+			if (!resultSetSavedSet.contains(vcSimDataID)){
+				try {
+					resultSetCrawler.updateSimResults(user,vcSimDataID);
+					resultSetSavedSet.add(vcSimDataID);
+				} catch (Throwable exc) {
+					log.exception(exc);
+				}
+			}
+		} catch (Throwable e){
+			log.exception(e);
+		}
+	}
+
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12411)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12410)
@@ -33,7 +33,6 @@
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
-import cbit.vcell.solver.SolverResultSetInfo;
 import cbit.vcell.solver.VCSimulationDataIdentifier;
 import cbit.vcell.solver.VCSimulationIdentifier;
 
@@ -180,9 +179,10 @@
 		VCMongoMessage.sendWorkerEvent(workerEventMessage);
 		
 		String userName = workerEvent.getUserName(); // as the filter of the client
-		int workerEventTaskID = workerEvent.getTaskID();
+		int taskID = workerEvent.getTaskID();
+		int jobIndex = workerEvent.getJobIndex();
 
-		log.print("onWorkerEventMessage[" + workerEvent.getEventTypeID() + "," + workerEvent.getSimulationMessage() + "][simid=" + workerEvent.getVCSimulationDataIdentifier() + ",job=" + jobIndex + ",task=" + workerEventTaskID + "]");
+		log.print("onWorkerEventMessage[" + workerEvent.getEventTypeID() + "," + workerEvent.getSimulationMessage() + "][simid=" + workerEvent.getVCSimulationDataIdentifier() + ",job=" + jobIndex + ",task=" + taskID + "]");
 
 		VCSimulationDataIdentifier vcSimDataID = workerEvent.getVCSimulationDataIdentifier();
 		if (vcSimDataID == null) {
@@ -190,17 +190,16 @@
 			return;
 		}
 		KeyValue simKey = vcSimDataID.getSimulationKey();
-		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getLatestSimulationJobStatus(simKey, jobIndex);
+		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
 
 		if (oldSimulationJobStatus == null){
 			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent, no current SimulationJobStatus: "+workerEvent.show());
 			return;
 		}	
-		if (oldSimulationJobStatus == null || oldSimulationJobStatus.getSchedulerStatus().isDone() || oldSimulationJobStatus.getTaskID() > workerEventTaskID){
+		if (oldSimulationJobStatus == null || oldSimulationJobStatus.getSchedulerStatus().isDone()){
 			VCMongoMessage.sendInfo("onWorkerEvent() ignoring outdated WorkerEvent, (currState="+oldSimulationJobStatus.getSchedulerStatus().getDescription()+"): "+workerEvent.show());
 			return;
-		}
-		int taskID = oldSimulationJobStatus.getTaskID();
+		}	
 		SchedulerStatus oldSchedulerStatus = oldSimulationJobStatus.getSchedulerStatus();
 		
 		//
@@ -308,12 +307,10 @@
 
 		} else if (workerEvent.isNewDataEvent()) {
 			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
-				SolverResultSetInfo solverResultSetInfo = simulationDatabase.getSolverResultSetInfo(oldSimulationJobStatus.getVCSimulationIdentifier().getOwner(), simKey, queuePriority);
-				if (solverResultSetInfo == null){
-					SolverResultSetInfo newSolverResultSetInfo = SimulationDatabaseDirect.createNewSolverResultSetInfo(vcSimDataID);
-					simulationDatabase.updateSolverResultSetInfo(newSolverResultSetInfo);
-				}
 				
+				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
+				
+				
 				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL || hasData==false){
 					
 					// new queue status		
@@ -372,11 +369,7 @@
 				endDate = new Date();
 				hasData = true;
 
-				SolverResultSetInfo solverResultSetInfo = simulationDatabase.getSolverResultSetInfo(oldSimulationJobStatus.getVCSimulationIdentifier().getOwner(), simKey, queuePriority);
-				if (solverResultSetInfo == null){
-					SolverResultSetInfo newSolverResultSetInfo = SimulationDatabaseDirect.createNewSolverResultSetInfo(vcSimDataID);
-					simulationDatabase.updateSolverResultSetInfo(newSolverResultSetInfo);
-				}
+				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
 				
 				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, htcJobID);
 
@@ -416,30 +409,31 @@
 
 			}
 		}
+		SimulationJobStatus updatedSimJobStatus = null;
 		if (newJobStatus!=null){
-			simulationDatabase.updateSimulationJobStatus(newJobStatus);
+			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, newJobStatus);
 			if (!newJobStatus.compareEqual(oldSimulationJobStatus) || workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()) {		
 				Double progress = workerEvent.getProgress();
 				Double timepoint = workerEvent.getTimePoint();
-				StatusMessage msgForClient = new StatusMessage(newJobStatus, userName, progress, timepoint);
+				StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, progress, timepoint);
 				msgForClient.sendToClient(session);
 				log.print("Send status to client: " + msgForClient);
 			} else {
-				StatusMessage msgForClient = new StatusMessage(newJobStatus, userName, null, null);
+				StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, null, null);
 				msgForClient.sendToClient(session);
 				log.print("Send status to client: " + msgForClient);
 			}
 		}else if (workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()){
 			Double progress = workerEvent.getProgress();
 			Double timepoint = workerEvent.getTimePoint();
-			simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus);
-			StatusMessage msgForClient = new StatusMessage(oldSimulationJobStatus, userName, progress, timepoint);
+			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, oldSimulationJobStatus);
+			StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, progress, timepoint);
 			msgForClient.sendToClient(session);
 			log.print("Send status to client: " + msgForClient);
 		}else{
 			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent (currState="+oldSchedulerStatus.getDescription()+"): "+workerEvent.show());
 		}
-		addStateMachineTransition(new StateMachineTransition(new WorkerStateMachineEvent(taskID, workerEvent), oldSimulationJobStatus, newJobStatus));
+		addStateMachineTransition(new StateMachineTransition(new WorkerStateMachineEvent(updatedSimJobStatus.getTaskID(), workerEvent), oldSimulationJobStatus, updatedSimJobStatus));
 
 	}
 
@@ -457,10 +451,14 @@
 		//
 		// get latest simulation job task (if any).
 		//
-		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getLatestSimulationJobStatus(simKey, jobIndex);
+		SimulationJobStatus[] oldSimulationJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey, jobIndex);
+		SimulationJobStatus oldSimulationJobStatus = null;
 		int oldTaskID = -1;
-		if (oldSimulationJobStatus != null){
-			oldTaskID = oldSimulationJobStatus.getTaskID();
+		for (SimulationJobStatus simJobStatus : oldSimulationJobStatusArray){
+			if (simJobStatus.getTaskID() > oldTaskID){
+				oldTaskID = simJobStatus.getTaskID();
+				oldSimulationJobStatus = simJobStatus;
+			}
 		}
 		// if already started by another thread
 		if (oldSimulationJobStatus != null && !oldSimulationJobStatus.getSchedulerStatus().isDone()) {
@@ -483,7 +481,7 @@
 		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_WAITING);
 		
 		// new exe status
-		Date lastUpdateDate = new Date();
+		Date lastUpdateDate = null;
 		String computeHost = null;
 		Date startDate = null;
 		Date endDate = null;
@@ -498,18 +496,21 @@
 		SimulationJobStatus newJobStatus = new SimulationJobStatus(vcServerID, vcSimID, jobIndex, submitDate, SchedulerStatus.WAITING,
 				newTaskID, SimulationMessage.MESSAGE_JOB_WAITING, newQueueStatus, newExeStatus);
 		
-		simulationDatabase.insertSimulationJobStatus(newJobStatus);
-		addStateMachineTransition(new StateMachineTransition(new StartStateMachineEvent(newTaskID), oldSimulationJobStatus, newJobStatus));
+		SimulationJobStatus updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newJobStatus);
+		addStateMachineTransition(new StateMachineTransition(new StartStateMachineEvent(updatedSimJobStatus.getTaskID()), oldSimulationJobStatus, updatedSimJobStatus));
 			
-		StatusMessage message = new StatusMessage(newJobStatus, user.getName(), null, null);
+		StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
 		message.sendToClient(session);
 	}
 	
 
-	public synchronized void onDispatch(Simulation simulation, SimulationJobStatus oldSimulationJobStatus, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
-		VCSimulationIdentifier vcSimID = oldSimulationJobStatus.getVCSimulationIdentifier();
-		int taskID = oldSimulationJobStatus.getTaskID();
+	public synchronized void onDispatch(Simulation simulation, VCSimulationIdentifier vcSimID, int taskID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 
+		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
+		if (oldSimulationJobStatus == null) {
+			VCMongoMessage.sendInfo("onDispatch("+vcSimID.getID()+") Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "], status not found)");
+			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "], status not found)");
+		}
 		if (!oldSimulationJobStatus.getSchedulerStatus().isWaiting()) {
 			VCMongoMessage.sendInfo("onDispatch("+vcSimID.getID()+") Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "] is already dispatched ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
 			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "] is already dispatched ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
@@ -520,8 +521,8 @@
 
 		double requiredMemMB = simulationTask.getEstimatedMemorySizeMB();
 		double allowableMemMB = Double.parseDouble(PropertyLoader.getRequiredProperty(PropertyLoader.limitJobMemoryMB));
+		SimulationJobStatus updatedSimJobStatus = null;
 		
-		final SimulationJobStatus newSimJobStatus;
 		if (requiredMemMB > allowableMemMB) {						
 			//
 			// fail the simulation
@@ -530,14 +531,14 @@
 			// new queue status
 			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
 			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
-			newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
+			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
 					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.FAILED,taskID,
 					SimulationMessage.jobFailed("simulation required "+requiredMemMB+"MB of memory, only "+allowableMemMB+"MB allowed"),
 					newQueueStatus,newSimExeStatus);
 			
-			simulationDatabase.updateSimulationJobStatus(newSimJobStatus);
+			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus,newSimJobStatus);
 			
-			StatusMessage message = new StatusMessage(newSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
+			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
 			message.sendToClient(session);
 			
 		}else{
@@ -547,7 +548,7 @@
 			Date currentDate = new Date();
 			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_SIMULATIONJOB);
 			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
-			newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
+			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
 					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.QUEUED,taskID,
 					SimulationMessage.MESSAGE_JOB_DISPATCHED,
 					newQueueStatus,newSimExeStatus);
@@ -555,58 +556,63 @@
 			SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(simulationTask);
 			simTaskMessage.sendSimulationTask(session);
 			
-			simulationDatabase.updateSimulationJobStatus(newSimJobStatus);
+			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus,newSimJobStatus);
 			
-			StatusMessage message = new StatusMessage(newSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
+			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
 			message.sendToClient(session);
 		
 		}
-		addStateMachineTransition(new StateMachineTransition(new DispatchStateMachineEvent(taskID), oldSimulationJobStatus, newSimJobStatus));
+		addStateMachineTransition(new StateMachineTransition(new DispatchStateMachineEvent(updatedSimJobStatus.getTaskID()), oldSimulationJobStatus, updatedSimJobStatus));
 
 	}
 
-	public synchronized void onStopRequest(User user, SimulationJobStatus simJobStatus, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
+	public synchronized void onStopRequest(User user, VCSimulationIdentifier vcSimID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 		
-		if (!user.equals(simJobStatus.getVCSimulationIdentifier().getOwner())) {
+		if (!user.equals(vcSimID.getOwner())) {
 			log.alert(user + " is not authorized to stop simulation (key=" + simKey + ")");
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), simJobStatus.getVCSimulationIdentifier(), 0, null, 
+			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
 					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
 			message.sendToClient(session);
-			VCMongoMessage.sendInfo("onStopRequest("+simJobStatus.getVCSimulationIdentifier()+") ignoring stop simulation request - wrong user)");
+			VCMongoMessage.sendInfo("onStopRequest("+vcSimID.getID()+") ignoring stop simulation request - wrong user)");
 			return;
 		} 
+		// if the job is in simJob queue, get it out
+		KeyValue simKey = vcSimID.getSimulationKey();
+		SimulationJobStatus[] oldJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey, jobIndex);
 		
-		// stop latest task if active
-		SchedulerStatus schedulerStatus = simJobStatus.getSchedulerStatus();
-		int taskID = simJobStatus.getTaskID();
+		// stop each active task.
+		for (SimulationJobStatus oldJobStatus : oldJobStatusArray){
+			SchedulerStatus schedulerStatus = oldJobStatus.getSchedulerStatus();
+			int taskID = oldJobStatus.getTaskID();
+	
+			if (schedulerStatus.isActive()){
+				SimulationQueueEntryStatus simQueueEntryStatus = oldJobStatus.getSimulationQueueEntryStatus();
+				SimulationExecutionStatus simExeStatus = oldJobStatus.getSimulationExecutionStatus();
+				SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(),vcSimID,jobIndex,oldJobStatus.getSubmitDate(),
+						SchedulerStatus.STOPPED,taskID,SimulationMessage.solverStopped("simulation stopped by user"),simQueueEntryStatus,simExeStatus);
+				
+				//
+				// send stopSimulation to serviceControl topic
+				//
+				log.print("send " + MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE + " to " + VCellTopic.ServiceControlTopic.getName() + " topic");
+				VCMessage msg = session.createMessage();
+				msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE);
+				msg.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simKey + ""));
+				msg.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, jobIndex);
+				msg.setIntProperty(MessageConstants.TASKID_PROPERTY, taskID);
+				msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, user.getName());
+				if (simExeStatus.getHtcJobID()!=null){
+					msg.setStringProperty(MessageConstants.HTCJOBID_PROPERTY, simExeStatus.getHtcJobID().toDatabase());
+				}
+				session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
+				
+				SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+				addStateMachineTransition(new StateMachineTransition(new StopStateMachineEvent(updatedSimJobStatus.getTaskID()), oldJobStatus, updatedSimJobStatus));
 
-		if (schedulerStatus.isActive()){
-			SimulationQueueEntryStatus simQueueEntryStatus = simJobStatus.getSimulationQueueEntryStatus();
-			SimulationExecutionStatus simExeStatus = simJobStatus.getSimulationExecutionStatus();
-			SimulationJobStatus newJobStatus = new SimulationJobStatus(simJobStatus.getServerID(),simJobStatus.getVCSimulationIdentifier(),jobIndex,simJobStatus.getSubmitDate(),
-					SchedulerStatus.STOPPED,taskID,SimulationMessage.solverStopped("simulation stopped by user"),simQueueEntryStatus,simExeStatus);
-			
-			//
-			// send stopSimulation to serviceControl topic
-			//
-			log.print("send " + MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE + " to " + VCellTopic.ServiceControlTopic.getName() + " topic");
-			VCMessage msg = session.createMessage();
-			msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE);
-			msg.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simKey + ""));
-			msg.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, jobIndex);
-			msg.setIntProperty(MessageConstants.TASKID_PROPERTY, taskID);
-			msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, user.getName());
-			if (simExeStatus.getHtcJobID()!=null){
-				msg.setStringProperty(MessageConstants.HTCJOBID_PROPERTY, simExeStatus.getHtcJobID().toDatabase());
+				// update client
+				StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
+				message.sendToClient(session);
 			}
-			session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
-			
-			simulationDatabase.updateSimulationJobStatus(newJobStatus);
-			addStateMachineTransition(new StateMachineTransition(new StopStateMachineEvent(taskID), simJobStatus, newJobStatus));
-
-			// update client
-			StatusMessage message = new StatusMessage(newJobStatus, user.getName(), null, null);
-			message.sendToClient(session);
 		}
 	}
 
@@ -663,11 +669,11 @@
 		SimulationJobStatus newJobStatus = new SimulationJobStatus(vcServerID, oldJobStatus.getVCSimulationIdentifier(), jobIndex, submitDate, SchedulerStatus.FAILED,
 				taskID, SimulationMessage.jobFailed(failureMessage), newQueueStatus, newExeStatus);
 		
-		simulationDatabase.updateSimulationJobStatus(newJobStatus);
-		addStateMachineTransition(new StateMachineTransition(new AbortStateMachineEvent(taskID, failureMessage), oldJobStatus, newJobStatus));
+		SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+		addStateMachineTransition(new StateMachineTransition(new AbortStateMachineEvent(updatedSimJobStatus.getTaskID(), failureMessage), oldJobStatus, updatedSimJobStatus));
 
 		String userName = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
-		StatusMessage msgForClient = new StatusMessage(newJobStatus, userName, null, null);
+		StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, null, null);
 		msgForClient.sendToClient(session);
 		log.print("Send status to client: " + msgForClient);
 	}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12411)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12410)
@@ -65,7 +65,7 @@
 import cbit.vcell.modeldb.AdminDBTopLevel;
 import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.DbDriver;
-import cbit.vcell.modeldb.ResultSetDBTopLevel;
+import cbit.vcell.modeldb.ResultSetCrawler;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
 import cbit.vcell.solver.Simulation;
@@ -111,7 +111,7 @@
 				boolean bDispatchedAnyJobs = false;
 
 				try {
-					final SimulationJobStatus[] allActiveJobs = simulationDatabase.getActiveJobs();
+					final SimulationJobStatus[] allActiveJobs = simulationDatabase.getActiveJobs(VCellServerID.getSystemServerID());
 					ArrayList<KeyValue> simKeys = new ArrayList<KeyValue>();
 					for (SimulationJobStatus simJobStatus : allActiveJobs){
 						simKeys.add(simJobStatus.getVCSimulationIdentifier().getSimulationKey());
@@ -139,7 +139,7 @@
 								sim = simulationDatabase.getSimulation(vcSimID.getOwner(), vcSimID.getSimulationKey());
 								tempSimulationMap.put(simKey, sim);
 							}
-							simDispatcherEngine.onDispatch(sim, jobStatus, simulationDatabase, dispatcherQueueSession, log);
+							simDispatcherEngine.onDispatch(sim, vcSimID, jobStatus.getJobIndex(), jobStatus.getTaskID(), simulationDatabase, dispatcherQueueSession, log);
 							bDispatchedAnyJobs = true;
 							
 							Thread.yield();
@@ -240,15 +240,12 @@
 					try {
 						String simJobName = jobInfo.getJobName();
 						HtcProxy.SimTaskInfo simTaskInfo = HtcProxy.getSimTaskInfoFromSimJobName(simJobName);
-						SimulationJobStatus simJobStatus = simulationDatabase.getLatestSimulationJobStatus(simTaskInfo.simId, simTaskInfo.jobIndex);
+						SimulationJobStatus simJobStatus = simulationDatabase.getSimulationJobStatus(simTaskInfo.simId, simTaskInfo.jobIndex, simTaskInfo.taskId);
 						String failureMessage = null;
 						boolean killJob = false;
 						if (simJobStatus==null){
 							failureMessage = "no jobStatus found in database for running htc job";
 							killJob = true;
-						}else if (simTaskInfo.taskId < simJobStatus.getTaskID()){
-							failureMessage = "newer task found in database for running htc job";
-							killJob = true;
 						}else if (simJobStatus.getSchedulerStatus().isDone()){
 							failureMessage = "jobStatus Done in database for running htc job";
 							if (simJobStatus.getSimulationExecutionStatus()==null){
@@ -288,7 +285,7 @@
 			//
 			//
 			long currentTimeMS = System.currentTimeMillis();
-			SimulationJobStatus[] activeJobStatusArray = simulationDatabase.getActiveJobs();
+			SimulationJobStatus[] activeJobStatusArray = simulationDatabase.getActiveJobs(VCellServerID.getSystemServerID());
 			Set<KeyValue> unreferencedSimKeys = simulationDatabase.getUnreferencedSimulations();
 			for (SimulationJobStatus activeJobStatus : activeJobStatusArray){
 				SchedulerStatus schedulerStatus = activeJobStatus.getSchedulerStatus();
@@ -513,8 +510,8 @@
 			ConnectionFactory conFactory = new OraclePoolingConnectionFactory(log);
 			DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
 			AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
-			ResultSetDBTopLevel resultSetDbTopLevel = new ResultSetDBTopLevel(conFactory, log);
-			SimulationDatabase simulationDatabase = new SimulationDatabaseDirect(resultSetDbTopLevel, adminDbTopLevel, databaseServerImpl,log);
+			ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
+			SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl,log);
 
 			VCMessagingService vcMessagingService = VCMessagingService.createInstance();
 
Index: src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java	(revision 12411)
+++ src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java	(revision 12410)
@@ -21,6 +21,7 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
+import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 import org.vcell.util.document.UserInfo;
 
@@ -29,12 +30,11 @@
 import cbit.sql.OraclePoolingConnectionFactory;
 import cbit.vcell.message.VCMessagingService;
 import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.message.server.dispatcher.SimulationDatabaseDirect;
 import cbit.vcell.modeldb.AdminDBTopLevel;
 import cbit.vcell.modeldb.DatabasePolicySQL;
 import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.LocalAdminDbServer;
-import cbit.vcell.modeldb.ResultSetDBTopLevel;
+import cbit.vcell.modeldb.ResultSetCrawler;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
 import cbit.vcell.server.AdminDatabaseServer;
@@ -46,6 +46,7 @@
 import cbit.vcell.server.VCellConnection;
 import cbit.vcell.server.VCellServer;
 import cbit.vcell.server.WatchdogMonitor;
+import cbit.vcell.server.UserLoginInfo.DigestedPassword;
 /**
  * This class was generated by a SmartGuide.
  * 
@@ -190,9 +191,9 @@
 		
 		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
 		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
+		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
 		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
-		ResultSetDBTopLevel resultSetDbTopLevel = new ResultSetDBTopLevel(conFactory, log);
-		SimulationDatabase simulationDatabase = new SimulationDatabaseDirect(resultSetDbTopLevel, adminDbTopLevel, databaseServerImpl, log);
+		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, log);
 		LocalVCellBootstrap localVCellBootstrap = new LocalVCellBootstrap(host+":"+rmiPort,adminDbServer,vcMessagingService,simulationDatabase);
 
 		//
Index: src/cbit/vcell/modeldb/ResultSetMetaDataTable.java
===================================================================
--- src/cbit/vcell/modeldb/ResultSetMetaDataTable.java	(revision 12411)
+++ src/cbit/vcell/modeldb/ResultSetMetaDataTable.java	(revision 12410)
@@ -87,16 +87,19 @@
 		throw new DataAccessException("ResultSetMetaData.simKey not same as simInfo");
 	}
 	int parsedJobIndex = rset.getInt(jobIndex.toString());
+	SolverResultSetInfo rsetInfo = new SolverResultSetInfo(new VCSimulationDataIdentifier(simInfo.getAuthoritativeVCSimulationIdentifier(), parsedJobIndex));
+	rsetInfo.setDataFilePath(rset.getString(dataFilePath.toString()));
 
-	java.util.Date parsedStartingDate = getDate(rset, startDate.toString());
-	java.util.Date parsedEndingDate	= getDate(rset, endDate.toString());
+	try {
+		rsetInfo.setStartingDate(getDate(rset, startDate.toString()));
+		rsetInfo.setEndingDate(getDate(rset, endDate.toString()));
+	}catch (java.beans.PropertyVetoException e){
+		log.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
 	
-	String parsedPathFileName = rset.getString(dataFilePath.toString()).trim();
-	if (parsedPathFileName!=null){
-		parsedPathFileName = parsedPathFileName.trim();
-	}
+	String pathFileName = rset.getString(dataFilePath.toString()).trim();
 
-	SolverResultSetInfo rsetInfo = new SolverResultSetInfo(new VCSimulationDataIdentifier(simInfo.getAuthoritativeVCSimulationIdentifier(), parsedJobIndex), parsedPathFileName, parsedStartingDate, parsedEndingDate);
 	return rsetInfo;
 }
 
@@ -134,10 +137,8 @@
  * @param key KeyValue
  * @param modelName java.lang.String
  */
-public String getSQLValueList(KeyValue key, SolverResultSetInfo rsetInfo) {
+public String getSQLValueList(KeyValue key, KeyValue simKey, SolverResultSetInfo rsetInfo) {
 
-	KeyValue simKey = rsetInfo.getVCSimulationDataIdentifier().getSimulationKey();
-	
 	StringBuffer buffer = new StringBuffer();
 	buffer.append("(");
 	buffer.append(key+",");
Index: src/cbit/vcell/modeldb/ResultSetDBTopLevel.java
===================================================================
--- src/cbit/vcell/modeldb/ResultSetDBTopLevel.java	(revision 12411)
+++ src/cbit/vcell/modeldb/ResultSetDBTopLevel.java	(revision 12410)
@@ -30,7 +30,7 @@
 /**
  * DBTopLevel constructor comment.
  */
-public ResultSetDBTopLevel(ConnectionFactory aConFactory,SessionLog newLog) throws SQLException{
+ResultSetDBTopLevel(ConnectionFactory aConFactory,SessionLog newLog) throws SQLException{
 	super(aConFactory,newLog);
 	GeomDbDriver geomDBDriver = new GeomDbDriver(newLog);
 	MathDescriptionDbDriver mathDBDriver = new MathDescriptionDbDriver(geomDBDriver,newLog);
@@ -174,7 +174,7 @@
  * @exception java.sql.SQLException The exception description.
  * @exception cbit.sql.RecordChangedException The exception description.
  */
-public SolverResultSetInfo getResultSetInfo(User user, KeyValue simKey, int jobIndex, boolean bEnableRetry) throws SQLException, DataAccessException {
+SolverResultSetInfo getResultSetInfo(User user, KeyValue simKey, int jobIndex, boolean bEnableRetry) throws SQLException, DataAccessException {
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
@@ -290,12 +290,12 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-void insertResultSetInfo(User user, SolverResultSetInfo rsetInfo, boolean bEnableRetry) throws SQLException, DataAccessException, PermissionException {
+void insertResultSetInfo(User user, KeyValue simKey, SolverResultSetInfo rsetInfo, boolean bEnableRetry) throws SQLException, DataAccessException, PermissionException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
-		simDB.insertResultSetInfoSQL(con,user,rsetInfo);
+		simDB.insertResultSetInfoSQL(con,user,simKey,rsetInfo);
 		con.commit();
 		return;
 	} catch (Throwable e) {
@@ -308,7 +308,7 @@
 		}
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
-			insertResultSetInfo(user,rsetInfo,false);
+			insertResultSetInfo(user,simKey,rsetInfo,false);
 		}else{
 			handle_DataAccessException_SQLException(e);
 		}
@@ -323,16 +323,16 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-public void updateResultSetInfo(User user, SolverResultSetInfo rsetInfo, boolean bEnableRetry) throws SQLException, DataAccessException, PermissionException {
+void updateResultSetInfo(User user, KeyValue simKey, SolverResultSetInfo rsetInfo, boolean bEnableRetry) throws SQLException, DataAccessException, PermissionException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
 		try {
-			simDB.updateResultSetInfoSQL(con,user,rsetInfo);
+			simDB.updateResultSetInfoSQL(con,user,simKey,rsetInfo);
 			con.commit();
 		}catch (ObjectNotFoundException e){
-			simDB.insertResultSetInfoSQL(con,user,rsetInfo);
+			simDB.insertResultSetInfoSQL(con,user,simKey,rsetInfo);
 			con.commit();
 		}
 		return;
@@ -346,7 +346,7 @@
 		}
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
-			updateResultSetInfo(user,rsetInfo,false);
+			updateResultSetInfo(user,simKey,rsetInfo,false);
 		}else{
 			handle_DataAccessException_SQLException(e);
 		}
Index: src/cbit/vcell/modeldb/LocalAdminDbServer.java
===================================================================
--- src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12411)
+++ src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12410)
@@ -192,9 +192,9 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-public void insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException {
 	try {
-		adminDbTop.insertSimulationJobStatus(simulationJobStatus,true);
+		return adminDbTop.insertSimulationJobStatus(simulationJobStatus,true);
 	}catch (UpdateSynchronizationException ex){
 		throw ex;
 	}catch (Throwable e){
@@ -227,9 +227,9 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-public void updateSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException {
+public SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus simulationJobStatus) throws DataAccessException {
 	try {
-		adminDbTop.updateSimulationJobStatus(simulationJobStatus,true);
+		return adminDbTop.updateSimulationJobStatus(oldSimulationJobStatus,simulationJobStatus,true);
 	} catch (Throwable e){
 		log.exception(e);
 		throw new DataAccessException("failure updating SimulationJobStatus: "+simulationJobStatus);
Index: src/cbit/vcell/modeldb/SimulationDbDriver.java
===================================================================
--- src/cbit/vcell/modeldb/SimulationDbDriver.java	(revision 12411)
+++ src/cbit/vcell/modeldb/SimulationDbDriver.java	(revision 12410)
@@ -460,15 +460,13 @@
  * @param userid java.lang.String
  * @exception java.rmi.RemoteException The exception description.
  */
-void insertResultSetInfoSQL(Connection con, User user, SolverResultSetInfo rsetInfo) throws SQLException, DataAccessException, PermissionException {
-	KeyValue simKey = rsetInfo.getVCSimulationDataIdentifier().getSimulationKey();
-	int jobIndex = rsetInfo.getVCSimulationDataIdentifier().getJobIndex();
+void insertResultSetInfoSQL(Connection con, User user, KeyValue simKey, SolverResultSetInfo rsetInfo) throws SQLException, DataAccessException, PermissionException {
 	Vector<VersionInfo> versionInfoVector = getVersionableInfos(con,log,user,VersionableType.Simulation,false,simKey,false);
 	if(versionInfoVector.size() == 0){
-		throw new ObjectNotFoundException("SimulationDbDriver:insertResultSetInfo() key="+simKey+", jobIndex="+jobIndex+" not found for user="+user);
+		throw new ObjectNotFoundException("SimulationDbDriver:insertResultSetInfo() key="+simKey+" not found for user="+user);
 	}
 	else if (versionInfoVector.size() > 1){
-		throw new DataAccessException("SimulationDbDriver:insertResultSetInfo() key="+simKey+", jobIndex="+jobIndex+" found more than one entry  DB ERROR,BAD!!!!!MUST CHECK");
+		throw new DataAccessException("SimulationDbDriver:insertResultSetInfo() key="+simKey+" found more than one entry  DB ERROR,BAD!!!!!MUST CHECK");
 	}
 	VersionInfo versionInfo = versionInfoVector.firstElement();
 	//
@@ -480,7 +478,7 @@
 
 	String sql;
 	sql = "INSERT INTO " + rsetInfoTable.getTableName() + " " + rsetInfoTable.getSQLColumnList() + " VALUES " + 
-		rsetInfoTable.getSQLValueList(getNewKey(con), rsetInfo);
+		rsetInfoTable.getSQLValueList(getNewKey(con), simKey, rsetInfo);
 //System.out.println(sql);
 	updateCleanSQL(con,sql);
 }
@@ -582,9 +580,7 @@
  * @param userid java.lang.String
  * @exception java.rmi.RemoteException The exception description.
  */
-void updateResultSetInfoSQL(Connection con, User user, SolverResultSetInfo rsetInfo) throws SQLException, DataAccessException, PermissionException {
-	int jobIndex = rsetInfo.getVCSimulationDataIdentifier().getJobIndex();
-	KeyValue simKey = rsetInfo.getVCSimulationDataIdentifier().getSimulationKey();
+void updateResultSetInfoSQL(Connection con, User user, KeyValue simKey, SolverResultSetInfo rsetInfo) throws SQLException, DataAccessException, PermissionException {
 	Vector<VersionInfo> versionInfoVector = getVersionableInfos(con,log,user,VersionableType.Simulation,false,simKey,false);
 	if(versionInfoVector.size() == 0){
 		throw new ObjectNotFoundException("SimulationDbDriver:updateResultSetInfo() key="+simKey+" not found for user="+user);
@@ -604,7 +600,6 @@
 	sb.append("UPDATE " + rsetInfoTable.getTableName());
 	sb.append(" SET " + rsetInfoTable.getSQLUpdateList(simKey,rsetInfo));
 	sb.append(" WHERE " + rsetInfoTable.simRef + " = " + simKey);
-	sb.append(" AND " + rsetInfoTable.jobIndex + " = " + jobIndex);
 //System.out.println(sb.toString());
 	int numRecordsChanged = updateCleanSQL(con,sb.toString());
 	if (numRecordsChanged!=1){
Index: src/cbit/vcell/modeldb/AdminDBTopLevel.java
===================================================================
--- src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12411)
+++ src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12410)
@@ -590,13 +590,14 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-public void insertSimulationJobStatus(SimulationJobStatus simulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException, UpdateSynchronizationException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
-		insertSimulationJobStatus(con, simulationJobStatus);
+		SimulationJobStatus newSimulationJobStatus = insertSimulationJobStatus(con, simulationJobStatus);
 		con.commit();
+		return newSimulationJobStatus;
 	} catch (Throwable e) {
 		log.exception(e);
 		try {
@@ -607,8 +608,10 @@
 		}
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
+			return insertSimulationJobStatus(simulationJobStatus,false);
 		}else{
 			handle_DataAccessException_SQLException(e);
+			return null; // never gets here;
 		}
 	}finally{
 		conFactory.release(con,lock);
@@ -620,9 +623,17 @@
  * Insert the method's description here.
  * Creation date: (10/3/2005 3:33:09 PM)
  */
-void insertSimulationJobStatus(Connection con, SimulationJobStatus simulationJobStatus) throws SQLException, UpdateSynchronizationException {
+SimulationJobStatus insertSimulationJobStatus(Connection con, SimulationJobStatus simulationJobStatus) throws SQLException, UpdateSynchronizationException {
+	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),simulationJobStatus.getTaskID(),false);
+	if (currentSimulationJobStatus != null){
+		VCMongoMessage.sendSimJobStatusInsertedAlready(simulationJobStatus, currentSimulationJobStatus);
+		log.alert("AdminDbTopLevel.insertSimulationJobStatus() : current Job Status = " + currentSimulationJobStatus + ", job status database record already exists");
+		throw new UpdateSynchronizationException("Job Status database record already exists:" + currentSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey()+" job: "+currentSimulationJobStatus.getJobIndex()+" taskID: "+currentSimulationJobStatus.getTaskID());
+	}
 	jobDB.insertSimulationJobStatus(con,simulationJobStatus, DbDriver.getNewKey(con));
-	VCMongoMessage.sendSimJobStatusInsert(simulationJobStatus);
+	SimulationJobStatus newSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),simulationJobStatus.getTaskID(),false);
+	VCMongoMessage.sendSimJobStatusInsert(simulationJobStatus, newSimulationJobStatus);
+	return newSimulationJobStatus;
 }
 
 
@@ -668,13 +679,14 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-public void updateSimulationJobStatus(SimulationJobStatus newSimulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException {
+public SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
-		updateSimulationJobStatus(con, newSimulationJobStatus);
+		SimulationJobStatus updatedSimulationJobStatus = updateSimulationJobStatus(con, oldSimulationJobStatus, newSimulationJobStatus);
 		con.commit();
+		return updatedSimulationJobStatus;
 	} catch (Throwable e) {
 		log.exception(e);
 		try {
@@ -685,9 +697,10 @@
 		}
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
-			updateSimulationJobStatus(newSimulationJobStatus,false);
+			return updateSimulationJobStatus(oldSimulationJobStatus,newSimulationJobStatus,false);
 		}else{
 			handle_DataAccessException_SQLException(e);
+			return null; // never gets here;
 		}
 	}finally{
 		conFactory.release(con,lock);
@@ -699,9 +712,17 @@
  * Insert the method's description here.
  * Creation date: (10/6/2005 3:20:41 PM)
  */
-void updateSimulationJobStatus(Connection con, SimulationJobStatus newSimulationJobStatus) throws SQLException, UpdateSynchronizationException {
+SimulationJobStatus updateSimulationJobStatus(Connection con, SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws SQLException, UpdateSynchronizationException {
+	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),newSimulationJobStatus.getTaskID(),true);
+	if (!currentSimulationJobStatus.compareEqual(oldSimulationJobStatus)){
+		VCMongoMessage.sendSimJobStatusUpdateCacheMiss(oldSimulationJobStatus, currentSimulationJobStatus, newSimulationJobStatus);
+		log.print("AdminDbTopLevel.updateSimulationJobStatus() : current Job Status = "+currentSimulationJobStatus+", old Job Status = "+oldSimulationJobStatus);
+		throw new UpdateSynchronizationException("current Job Status doesn't match argument for Simulation :"+currentSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey()+" job: "+currentSimulationJobStatus.getJobIndex());
+	}
 	jobDB.updateSimulationJobStatus(con,newSimulationJobStatus);
-	VCMongoMessage.sendSimJobStatusUpdate(newSimulationJobStatus);
+	SimulationJobStatus updatedSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),newSimulationJobStatus.getTaskID(),false);
+	VCMongoMessage.sendSimJobStatusUpdate(oldSimulationJobStatus,newSimulationJobStatus,updatedSimulationJobStatus);
+	return updatedSimulationJobStatus;
 }
 
 
Index: src/cbit/vcell/modeldb/SimulationTable.java
===================================================================
--- src/cbit/vcell/modeldb/SimulationTable.java	(revision 12411)
+++ src/cbit/vcell/modeldb/SimulationTable.java	(revision 12410)
@@ -124,10 +124,15 @@
 	
 	VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simulationVersion.getVersionKey(),simulationVersion.getOwner());
 	VCSimulationDataIdentifier vcSimDataID = new VCSimulationDataIdentifier(vcSimID, rset.getInt(ResultSetMetaDataTable.table.jobIndex.toString()));
-	String parsedPath = rset.getString(ResultSetMetaDataTable.table.dataFilePath.toString());
-	java.util.Date parsedEndingDate = getDate(rset,ResultSetMetaDataTable.table.endDate.toString());
-	java.util.Date parsedStartingDate = getDate(rset,ResultSetMetaDataTable.table.startDate.toString());
-	SolverResultSetInfo rsetInfo = new SolverResultSetInfo(vcSimDataID,parsedPath,parsedStartingDate,parsedEndingDate);
+	SolverResultSetInfo rsetInfo = new SolverResultSetInfo(vcSimDataID);
+	try {
+		String path = rset.getString(ResultSetMetaDataTable.table.dataFilePath.toString());
+		rsetInfo.setDataFilePath(path);
+		rsetInfo.setEndingDate(getDate(rset,ResultSetMetaDataTable.table.endDate.toString()));
+		rsetInfo.setStartingDate(getDate(rset,ResultSetMetaDataTable.table.startDate.toString()));
+	}catch (PropertyVetoException e){
+		log.exception(e);
+	}
 	return rsetInfo;
 }
 /**
Index: src/cbit/vcell/modeldb/ResultSetCrawler.java
===================================================================
--- src/cbit/vcell/modeldb/ResultSetCrawler.java	(revision 12411)
+++ src/cbit/vcell/modeldb/ResultSetCrawler.java	(revision 12410)
@@ -9,6 +9,7 @@
  */
 
 package cbit.vcell.modeldb;
+import java.beans.PropertyVetoException;
 import java.io.File;
 import java.io.PrintWriter;
 import java.sql.SQLException;
@@ -25,6 +26,7 @@
 import org.vcell.util.document.User;
 
 import cbit.sql.ConnectionFactory;
+import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.simdata.SimDataConstants;
 import cbit.vcell.simdata.SimulationData;
 import cbit.vcell.solver.Simulation;
@@ -551,7 +553,7 @@
 }
 
 
-/**
+	/**
  * Insert the method's description here.
  * Creation date: (2/14/01 9:48:46 AM)
  * @param user cbit.vcell.server.User
@@ -590,9 +592,14 @@
 		//
 		// if log file found, then insert/update record in database for result metadata
 		//
-		SolverResultSetInfo rsetInfo = new SolverResultSetInfo(vcSimDataID,logFile.getPath(),new java.util.Date(logFile.lastModified()),null);
+		SolverResultSetInfo rsetInfo = new SolverResultSetInfo(vcSimDataID);
+		rsetInfo.setDataFilePath(logFile.getPath());
 		try {
-			resultSetDbTopLevel.updateResultSetInfo(user, rsetInfo, true);
+			rsetInfo.setStartingDate(new java.util.Date(logFile.lastModified()));
+		} catch (PropertyVetoException e) {
+		}
+		try {
+			resultSetDbTopLevel.updateResultSetInfo(user, simKey, rsetInfo, true);
 			log.print("file " + logFile.toString() + " found, simInfo (" + vcSimDataID + ") stored in database");
 		}catch (PermissionException e){
 			log.exception(e);
Index: src/cbit/vcell/server/SimulationTaskID.java
===================================================================
--- src/cbit/vcell/server/SimulationTaskID.java	(revision 12411)
+++ src/cbit/vcell/server/SimulationTaskID.java	(revision 12410)
@@ -1,54 +0,0 @@
-package cbit.vcell.server;
-
-import org.vcell.util.document.KeyValue;
-
-import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.server.SimulationTask;
-import cbit.vcell.solver.SimulationInfo;
-import cbit.vcell.solver.SimulationJob;
-
-public class SimulationTaskID {
-	public final KeyValue simKey;
-	public final int jobIndex;
-	public final int taskID;
-	public SimulationTaskID(KeyValue simKey,int jobIndex,int taskID){
-		this.simKey = simKey;
-		this.jobIndex = jobIndex;
-		this.taskID = taskID;
-	}
-	public SimulationTaskID(SimulationTask simTask){
-		this.simKey = simTask.getSimulation().getKey();
-		this.jobIndex = simTask.getSimulationJob().getJobIndex();
-		this.taskID = simTask.getTaskID();
-	}
-	public SimulationTaskID(SimulationJob simulationJob ,int taskID){
-		this.simKey = simulationJob.getSimulation().getKey();
-		this.jobIndex = simulationJob.getJobIndex();
-		this.taskID = taskID;
-	}
-	public SimulationTaskID(SimulationInfo simulationInfo, int jobIndex ,int taskID){
-		this.simKey = simulationInfo.getSimulationVersion().getVersionKey();
-		this.jobIndex = jobIndex;
-		this.taskID = taskID;
-	}
-	public SimulationTaskID(SimulationJobStatus simulationJobStatus) {
-		this.simKey = simulationJobStatus.getVCSimulationIdentifier().getSimulationKey();
-		this.jobIndex = simulationJobStatus.getJobIndex();
-		this.taskID = simulationJobStatus.getTaskID();
-	}
-	@Override
-	public boolean equals(Object obj){
-		if (obj instanceof SimulationTaskID){
-			return toString().equals(((SimulationTaskID)obj).toString());
-		}
-		return false;
-	}
-	@Override
-	public int hashCode(){
-		return toString().hashCode();
-	}
-	@Override
-	public String toString(){
-		return "SimTaskInfo("+simKey.toString()+","+jobIndex+","+taskID+")";
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/server/LocalVCellServerFactory.java
===================================================================
--- src/cbit/vcell/server/LocalVCellServerFactory.java	(revision 12411)
+++ src/cbit/vcell/server/LocalVCellServerFactory.java	(revision 12410)
@@ -20,11 +20,10 @@
 import cbit.sql.KeyFactory;
 import cbit.vcell.message.VCMessagingService;
 import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.message.server.dispatcher.SimulationDatabaseDirect;
 import cbit.vcell.modeldb.AdminDBTopLevel;
 import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.LocalAdminDbServer;
-import cbit.vcell.modeldb.ResultSetDBTopLevel;
+import cbit.vcell.modeldb.ResultSetCrawler;
 /**
  * This type was created in VisualAge.
  */
@@ -33,6 +32,12 @@
 /**
  * LocalVCellConnectionFactory constructor comment.
  */
+public LocalVCellServerFactory(String userid, UserLoginInfo.DigestedPassword digestedPassword, String hostName, ConnectionFactory conFactory, KeyFactory keyFactory, SessionLog sessionLog) throws java.sql.SQLException, java.io.FileNotFoundException, DataAccessException {
+	this(userid, digestedPassword, hostName, null, conFactory, keyFactory, sessionLog);
+}
+/**
+ * LocalVCellConnectionFactory constructor comment.
+ */
 public LocalVCellServerFactory(String userid, UserLoginInfo.DigestedPassword digestedPassword, String hostName, VCMessagingService vcMessagingService, ConnectionFactory conFactory, KeyFactory keyFactory, SessionLog sessionLog) throws java.sql.SQLException, java.io.FileNotFoundException, DataAccessException {
 	try {
 		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,sessionLog);
@@ -47,9 +52,9 @@
 			}
 		}
 		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, sessionLog);
-		ResultSetDBTopLevel resultSetDbTopLevel = new ResultSetDBTopLevel(conFactory, sessionLog);
+		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, sessionLog);
 		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, sessionLog);
-		SimulationDatabase simulationDatabase = new SimulationDatabaseDirect(resultSetDbTopLevel, adminDbTopLevel, databaseServerImpl, sessionLog);
+		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, sessionLog);
 		vcServer = new LocalVCellServer(hostName, vcMessagingService, adminDbServer, simulationDatabase);
 	} catch (java.rmi.RemoteException e){
 		sessionLog.exception(e);
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12411)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12410)
@@ -45,6 +45,7 @@
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationInfo;
+import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.SolverException;
 import cbit.vcell.solver.SolverStatus;
@@ -57,7 +58,47 @@
  * @author: Jim Schaff
  */
 public class SimulationControllerImpl implements WorkerEventListener {
-	private java.util.Hashtable<SimulationTaskID, LocalSolverController> solverControllerHash = new java.util.Hashtable<SimulationTaskID, LocalSolverController>();
+	public class SimulationTaskInfo {
+		public final KeyValue simKey;
+		public final int jobIndex;
+		public final int taskID;
+		public SimulationTaskInfo(KeyValue simKey,int jobIndex,int taskID){
+			this.simKey = simKey;
+			this.jobIndex = jobIndex;
+			this.taskID = taskID;
+		}
+		public SimulationTaskInfo(SimulationTask simTask){
+			this.simKey = simTask.getSimulation().getKey();
+			this.jobIndex = simTask.getSimulationJob().getJobIndex();
+			this.taskID = simTask.getTaskID();
+		}
+		public SimulationTaskInfo(SimulationJob simulationJob ,int taskID){
+			this.simKey = simulationJob.getSimulation().getKey();
+			this.jobIndex = simulationJob.getJobIndex();
+			this.taskID = taskID;
+		}
+		public SimulationTaskInfo(SimulationInfo simulationInfo, int jobIndex ,int taskID){
+			this.simKey = simulationInfo.getSimulationVersion().getVersionKey();
+			this.jobIndex = jobIndex;
+			this.taskID = taskID;
+		}
+		@Override
+		public boolean equals(Object obj){
+			if (obj instanceof SimulationTaskInfo){
+				return toString().equals(((SimulationTaskInfo)obj).toString());
+			}
+			return false;
+		}
+		@Override
+		public int hashCode(){
+			return toString().hashCode();
+		}
+		@Override
+		public String toString(){
+			return "SimTaskInfo("+simKey.toString()+","+jobIndex+","+taskID+")";
+		}
+	}
+	private java.util.Hashtable<SimulationTaskInfo, LocalSolverController> solverControllerHash = new java.util.Hashtable<SimulationTaskInfo, LocalSolverController>();
 	private SessionLog adminSessionLog = null;
 	private LocalVCellConnection localVCellConnection = null;
 	private SimulationDatabase simulationDatabase = null;
@@ -175,7 +216,7 @@
 	if (!simulation.getVersion().getOwner().equals(localVCellConnection.getUserLoginInfo().getUser())){
 		throw new PermissionException("insufficient privilege: startSimulation()");
 	}
-	SimulationTaskID simTaskInfo = new SimulationTaskID(simTask);
+	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simTask);
 	LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
 	if (solverController==null){
 		solverController = createNewSolverController(simTask,userSessionLog);
@@ -190,7 +231,7 @@
  * @exception java.rmi.RemoteException The exception description.
  */
 public SolverStatus getSolverStatus(SimulationInfo simulationInfo, int jobIndex, int taskID) throws PermissionException, DataAccessException {
-	SimulationTaskID simTaskInfo = new SimulationTaskID(simulationInfo, jobIndex, taskID);
+	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simulationInfo, jobIndex, taskID);
 	LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
 	if (solverController==null){
 		return new SolverStatus(SolverStatus.SOLVER_READY, SimulationMessage.MESSAGE_SOLVER_READY);
@@ -301,8 +342,14 @@
 	simulationDispatcherEngine.onStartRequest(vcSimID, localVCellConnection.getUserLoginInfo().getUser(), simulation.getScanCount(), simulationDatabase, vcMessageSession, vcMessageSession, adminSessionLog);
 	vcMessageSession.deliverAll();
 	for (int jobIndex = 0; jobIndex < simulation.getScanCount(); jobIndex++){
-		SimulationJobStatus latestSimJobStatus = simulationDatabase.getLatestSimulationJobStatus(simulation.getKey(), jobIndex);
-		simulationDispatcherEngine.onDispatch(simulation, latestSimJobStatus, simulationDatabase, vcMessageSession, adminSessionLog);
+		int taskID = -1;
+		SimulationJobStatus[] simJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simulation.getKey(), jobIndex);
+		for (SimulationJobStatus simJobStatus : simJobStatusArray){
+			if (simJobStatus.getTaskID()>taskID){
+				taskID = simJobStatus.getTaskID();
+			}
+		}
+		simulationDispatcherEngine.onDispatch(simulation, vcSimID, jobIndex , taskID, simulationDatabase, vcMessageSession, adminSessionLog);
 		vcMessageSession.deliverAll();
 	}
 }
@@ -313,7 +360,7 @@
 	int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
 	
 	try {
-		SimulationTaskID simTaskInfo = new SimulationTaskID(simKey, jobIndex, taskID);
+		SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simKey, jobIndex, taskID);
 		LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
 		if (solverController!=null){
 			solverController.stopSimulationJob(); // can only start after updating the database is done
Index: src/cbit/vcell/server/AdminDatabaseServer.java
===================================================================
--- src/cbit/vcell/server/AdminDatabaseServer.java	(revision 12411)
+++ src/cbit/vcell/server/AdminDatabaseServer.java	(revision 12410)
@@ -93,7 +93,7 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-void insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
@@ -108,7 +108,7 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-void updateSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
Index: src/cbit/vcell/solver/SolverResultSetInfo.java
===================================================================
--- src/cbit/vcell/solver/SolverResultSetInfo.java	(revision 12411)
+++ src/cbit/vcell/solver/SolverResultSetInfo.java	(revision 12410)
@@ -9,9 +9,6 @@
  */
 
 package cbit.vcell.solver;
-
-import java.util.Date;
-
 /**
  * Metadata for SolverResultSets.
  * Creation date: (8/17/2000 9:10:20 PM)
@@ -30,21 +27,52 @@
 	 * Specifies the problem that generated the result set..
 	 */
 	private VCSimulationDataIdentifier fieldVCSimDataID = null;
+	protected transient java.beans.VetoableChangeSupport vetoPropertyChange;
+	protected transient java.beans.PropertyChangeSupport propertyChange;
 	private java.lang.String fieldDataFilePath = new String();
 
 /**
  * ODESolverResultSetInfo constructor comment.
  */
-public SolverResultSetInfo(VCSimulationDataIdentifier arg_vcSimID, String dataFilePath, Date startingDate, Date endingDate) {
+public SolverResultSetInfo(VCSimulationDataIdentifier arg_vcSimID) {
 	super();
 	fieldVCSimDataID = arg_vcSimID;
-	fieldDataFilePath = dataFilePath;
-	fieldStartingDate = startingDate;
-	fieldEndingDate = endingDate;
 }
 
 
 /**
+ * The addPropertyChangeListener method was generated to support the propertyChange field.
+ */
+public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
+	getPropertyChange().addPropertyChangeListener(listener);
+}
+
+
+/**
+ * The addPropertyChangeListener method was generated to support the propertyChange field.
+ */
+public synchronized void addPropertyChangeListener(java.lang.String propertyName, java.beans.PropertyChangeListener listener) {
+	getPropertyChange().addPropertyChangeListener(propertyName, listener);
+}
+
+
+/**
+ * The addVetoableChangeListener method was generated to support the vetoPropertyChange field.
+ */
+public synchronized void addVetoableChangeListener(java.beans.VetoableChangeListener listener) {
+	getVetoPropertyChange().addVetoableChangeListener(listener);
+}
+
+
+/**
+ * The addVetoableChangeListener method was generated to support the vetoPropertyChange field.
+ */
+public synchronized void addVetoableChangeListener(java.lang.String propertyName, java.beans.VetoableChangeListener listener) {
+	getVetoPropertyChange().addVetoableChangeListener(propertyName, listener);
+}
+
+
+/**
  * Checks for internal representation of objects, not keys from database
  * @return boolean
  * @param obj java.lang.Object
@@ -73,6 +101,70 @@
 
 
 /**
+ * The firePropertyChange method was generated to support the propertyChange field.
+ */
+public void firePropertyChange(java.beans.PropertyChangeEvent evt) {
+	getPropertyChange().firePropertyChange(evt);
+}
+
+
+/**
+ * The firePropertyChange method was generated to support the propertyChange field.
+ */
+public void firePropertyChange(java.lang.String propertyName, int oldValue, int newValue) {
+	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
+}
+
+
+/**
+ * The firePropertyChange method was generated to support the propertyChange field.
+ */
+public void firePropertyChange(java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue) {
+	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
+}
+
+
+/**
+ * The firePropertyChange method was generated to support the propertyChange field.
+ */
+public void firePropertyChange(java.lang.String propertyName, boolean oldValue, boolean newValue) {
+	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
+}
+
+
+/**
+ * The fireVetoableChange method was generated to support the vetoPropertyChange field.
+ */
+public void fireVetoableChange(java.beans.PropertyChangeEvent evt) throws java.beans.PropertyVetoException {
+	getVetoPropertyChange().fireVetoableChange(evt);
+}
+
+
+/**
+ * The fireVetoableChange method was generated to support the vetoPropertyChange field.
+ */
+public void fireVetoableChange(java.lang.String propertyName, int oldValue, int newValue) throws java.beans.PropertyVetoException {
+	getVetoPropertyChange().fireVetoableChange(propertyName, oldValue, newValue);
+}
+
+
+/**
+ * The fireVetoableChange method was generated to support the vetoPropertyChange field.
+ */
+public void fireVetoableChange(java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue) throws java.beans.PropertyVetoException {
+	getVetoPropertyChange().fireVetoableChange(propertyName, oldValue, newValue);
+}
+
+
+/**
+ * The fireVetoableChange method was generated to support the vetoPropertyChange field.
+ */
+public void fireVetoableChange(java.lang.String propertyName, boolean oldValue, boolean newValue) throws java.beans.PropertyVetoException {
+	getVetoPropertyChange().fireVetoableChange(propertyName, oldValue, newValue);
+}
+
+
+/**
  * Gets the dataFilePath property (java.lang.String) value.
  * @return The dataFilePath property value.
  * @see #setDataFilePath
@@ -93,6 +185,17 @@
 
 
 /**
+ * Accessor for the propertyChange field.
+ */
+protected java.beans.PropertyChangeSupport getPropertyChange() {
+	if (propertyChange == null) {
+		propertyChange = new java.beans.PropertyChangeSupport(this);
+	};
+	return propertyChange;
+}
+
+
+/**
  * Gets the startDate property (java.util.Date) value.
  * @return The startDate property value.
  * @see #setStartDate
@@ -113,6 +216,96 @@
 
 
 /**
+ * Accessor for the vetoPropertyChange field.
+ */
+protected java.beans.VetoableChangeSupport getVetoPropertyChange() {
+	if (vetoPropertyChange == null) {
+		vetoPropertyChange = new java.beans.VetoableChangeSupport(this);
+	};
+	return vetoPropertyChange;
+}
+
+
+/**
+ * The hasListeners method was generated to support the propertyChange field.
+ */
+public synchronized boolean hasListeners(java.lang.String propertyName) {
+	return getPropertyChange().hasListeners(propertyName);
+}
+
+
+/**
+ * The removePropertyChangeListener method was generated to support the propertyChange field.
+ */
+public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
+	getPropertyChange().removePropertyChangeListener(listener);
+}
+
+
+/**
+ * The removePropertyChangeListener method was generated to support the propertyChange field.
+ */
+public synchronized void removePropertyChangeListener(java.lang.String propertyName, java.beans.PropertyChangeListener listener) {
+	getPropertyChange().removePropertyChangeListener(propertyName, listener);
+}
+
+
+/**
+ * The removeVetoableChangeListener method was generated to support the vetoPropertyChange field.
+ */
+public synchronized void removeVetoableChangeListener(java.beans.VetoableChangeListener listener) {
+	getVetoPropertyChange().removeVetoableChangeListener(listener);
+}
+
+
+/**
+ * The removeVetoableChangeListener method was generated to support the vetoPropertyChange field.
+ */
+public synchronized void removeVetoableChangeListener(java.lang.String propertyName, java.beans.VetoableChangeListener listener) {
+	getVetoPropertyChange().removeVetoableChangeListener(propertyName, listener);
+}
+
+
+/**
+ * Sets the dataFilePath property (java.lang.String) value.
+ * @param dataFilePath The new value for the property.
+ * @see #getDataFilePath
+ */
+public void setDataFilePath(java.lang.String dataFilePath) {
+	String oldValue = fieldDataFilePath;
+	fieldDataFilePath = dataFilePath;
+	firePropertyChange("dataFilePath", oldValue, dataFilePath);
+}
+
+
+/**
+ * Sets the endDate property (java.util.Date) value.
+ * @param endDate The new value for the property.
+ * @see #getEndDate
+ */
+public void setEndingDate(java.util.Date endingDate) throws java.beans.PropertyVetoException {
+	java.util.Date oldValue = fieldEndingDate;
+	fireVetoableChange("endingDate", oldValue, endingDate);
+	fieldEndingDate = endingDate;
+	firePropertyChange("endingDate", oldValue, endingDate);
+}
+
+
+/**
+ * Sets the startDate property (java.util.Date) value.
+ * @param startDate The new value for the property.
+ * @see #getStartDate
+ */
+public void setStartingDate(java.util.Date startingDate) throws java.beans.PropertyVetoException {
+	java.util.Date oldValue = fieldStartingDate;
+	fireVetoableChange("startingDate", oldValue, startingDate);
+	fieldStartingDate = startingDate;
+	firePropertyChange("startingDate", oldValue, startingDate);
+
+}
+
+
+/**
  * Insert the method's description here.
  * Creation date: (12/30/2000 3:32:02 PM)
  * @return java.lang.String
Index: src/cbit/vcell/messaging/db/SimulationExecutionStatus.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationExecutionStatus.java	(revision 12411)
+++ src/cbit/vcell/messaging/db/SimulationExecutionStatus.java	(revision 12410)
@@ -34,9 +34,6 @@
  * SimulationExecutionStatus constructor comment.
  */
 public SimulationExecutionStatus(Date startDate, String computeHost, Date latestUpdateDate, Date endDate, boolean hasData, HtcJobID htcJobID) {
-	if (latestUpdateDate==null){
-		throw new IllegalArgumentException("latestUpdateDate must not be null");
-	}
 	fieldStartDate = startDate;
 	fieldComputeHost = computeHost;
 	fieldLatestUpdateDate = latestUpdateDate;
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12411)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12410)
@@ -413,7 +413,7 @@
 		}
 	}
 
-	public static void sendSimJobStatusInsert(SimulationJobStatus newSimulationJobStatus) {
+	public static void sendSimJobStatusInsert(SimulationJobStatus newSimulationJobStatus,SimulationJobStatus updatedSimulationJobStatus) {
 		if (!enabled){
 			return;
 		}
@@ -422,30 +422,79 @@
 
 			addHeader(dbObject,MongoMessage_msgtype_simJobStatusInsert);
 
-			addObject(dbObject,newSimulationJobStatus);
+			addObject(dbObject,updatedSimulationJobStatus);
 			
+			BasicDBObject newSimJobStatusObject = new BasicDBObject();
+			addObject(newSimJobStatusObject, newSimulationJobStatus);
+			dbObject.put(MongoMessage_newSimJobStatus, newSimJobStatusObject);
+	
+			BasicDBObject updatedSimJobStatusObject = new BasicDBObject();
+			addObject(updatedSimJobStatusObject, updatedSimulationJobStatus);
+			dbObject.put(MongoMessage_updatedSimJobStatus, updatedSimJobStatusObject);
+			
 			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
 		} catch (Exception e){
 			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
 		}
 	}
 
-	public static void sendSimJobStatusUpdate(SimulationJobStatus newSimulationJobStatus) {
+	public static void sendSimJobStatusUpdateCacheMiss(SimulationJobStatus cachedSimulationJobStatus, SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) {
 		if (!enabled){
 			return;
 		}
 		try {
 			BasicDBObject dbObject = new BasicDBObject();
 
-			addHeader(dbObject,MongoMessage_msgtype_simJobStatusUpdate);
+			addHeader(dbObject,MongoMessage_msgtype_simJobStatusUpdate_DBCacheMiss);
 
 			addObject(dbObject,newSimulationJobStatus);
-				
+			
+			BasicDBObject cachedSimJobStatusObject = new BasicDBObject();
+			addObject(cachedSimJobStatusObject, cachedSimulationJobStatus);
+			dbObject.put(MongoMessage_cachedSimJobStatus, cachedSimJobStatusObject);
+			
+			BasicDBObject oldSimJobStatusObject = new BasicDBObject();
+			addObject(oldSimJobStatusObject, oldSimulationJobStatus);
+			dbObject.put(MongoMessage_oldSimJobStatus, oldSimJobStatusObject);
+	
+			BasicDBObject newSimJobStatusObject = new BasicDBObject();
+			addObject(newSimJobStatusObject, newSimulationJobStatus);
+			dbObject.put(MongoMessage_newSimJobStatus, newSimJobStatusObject);
+	
 			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
 		} catch (Exception e){
 			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
 		}
 	}
+	
+	public static void sendSimJobStatusUpdate(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus, SimulationJobStatus updatedSimulationJobStatus) {
+		if (!enabled){
+			return;
+		}
+		try {
+			BasicDBObject dbObject = new BasicDBObject();
+
+			addHeader(dbObject,MongoMessage_msgtype_simJobStatusUpdate);
+
+			addObject(dbObject,updatedSimulationJobStatus);
+	
+			BasicDBObject oldSimJobStatusObject = new BasicDBObject();
+			addObject(oldSimJobStatusObject, oldSimulationJobStatus);
+			dbObject.put(MongoMessage_oldSimJobStatus, oldSimJobStatusObject);
+	
+			BasicDBObject newSimJobStatusObject = new BasicDBObject();
+			addObject(newSimJobStatusObject, newSimulationJobStatus);
+			dbObject.put(MongoMessage_newSimJobStatus, newSimJobStatusObject);
+	
+			BasicDBObject updatedSimJobStatusObject = new BasicDBObject();
+			addObject(updatedSimJobStatusObject, updatedSimulationJobStatus);
+			dbObject.put(MongoMessage_updatedSimJobStatus, updatedSimJobStatusObject);
+			
+			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
+		} catch (Exception e){
+			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
+		}
+	}
 		
 	
 	public static void sendSolverEvent(SolverEvent solverEvent) {
