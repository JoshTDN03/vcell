Index: deployInfo/runservice64
===================================================================
--- deployInfo/runservice64	(revision 12069)
+++ deployInfo/runservice64	(revision 12068)
@@ -1,143 +0,0 @@
-printusage() {
-	echo "Usage: runservice64 -h"
-	echo "Usage: runservice64 -help"
-	echo "Usage: runservice64 {Db|Data|Exprt|Dsptch|HtcC|OdeC|LclC} ordinal mem"
-	exit 1
-}
-
-getnodeindex() {
-	nodeindex=${nodename}
-	nodeindex=${nodeindex%.local}
-	nodeindex=`expr match "${nodeindex}" '.*-\(.*\)'`
-}
-
-# main code
-g++ -v
-if [ -z "$1" ] ; then 
-	printusage
-fi
-if [ "$1" = "-h" ] ; then
-	printusage
-fi
-if [ "$1" = "-help" ] ; then
-	printusage
-fi
-if [ -z "$2" ] ; then 
-	printusage
-fi
-if [ -z "$3" ] ; then 
-	printusage
-fi
-site=GENERATED
-
-servicetype=$1
-
-if [ "${servicetype}" != "Db" ] ; then
-	if [ "${servicetype}" != "Data" ] ; then
-		if [ "${servicetype}" != "Exprt" ] ; then
-			if [ "${servicetype}" != "Dsptch" ] ; then
-				if [ "${servicetype}" != "PbsC" ] ; then
-					if [ "${servicetype}" != "LclC" ] ; then
-						printusage
-					fi
-				fi
-			fi
-		fi
-	fi
-fi
-ordinal=$2
-memoryMB=$3
-
-#siteUpperCase=`echo ${site} | tr [:lower:] [:upper:]` 
-
-# not used for this script. get node index since we only run limited number of database and dispatch services
-nodename=`hostname`
-getnodeindex
-
-# set up cmd and cmd rguments
-siteRootDir=/share/apps/vcell/deployed/${site}
-siteResDir=${siteRootDir}/resources
-siteCfgDir=${siteRootDir}/configs
-siteLibDir=${siteRootDir}/lib
-logdir=/share/apps/vcell/logs/${site}
-jvmmem=-Xmx500M
-
-# define arguments
-
-# pbs pde only
-if [ "${servicetype}" = "PbsC" ] ; then
-	mainclass=cbit.vcell.message.server.sim.HtcSimulationWorker
-	arguments="${ordinal} ${logdir} SGE" 
-fi
-
-# ode and local pde
-if [ "${servicetype}" = "LclC" ] ; then
-	mainclass=cbit.vcell.message.server.sim.LocalSimulationWorker
-	arguments="${ordinal} ${logdir}"
-	jvmmem=-Xmx1000M
-fi
-
-# Database
-if [ "${servicetype}" = "Db" ] ; then
-	mainclass=cbit.vcell.message.server.db.DatabaseServer
-	arguments="${ordinal} ${logdir}"
-	jvmmem=-Xmx800M
-fi
-
-# Data
-if [ "${servicetype}" = "Data" ] ; then
-	mainclass=cbit.vcell.message.server.data.SimDataServer
-	arguments="${ordinal} ${logdir}"
-	jvmmem=-Xmx800M
-fi
-
-# Export
-if [ "${servicetype}" = "Exprt" ] ; then
-	mainclass=cbit.vcell.message.server.data.SimDataServer
-	arguments="${ordinal} EXPORTONLY ${logdir}"
-	jvmmem=-Xmx800M
-fi
-
-# Dispatch
-if [ "${servicetype}" = "Dsptch" ] ; then
-	mainclass=cbit.vcell.message.server.dispatcher.SimulationDispatcher
-	arguments="${ordinal} ${logdir}"
-fi
-serviceid=${site}_${servicetype}_${ordinal}
-# kill running instance
-echo "killing running instance for ${serviceid}"
-ps ux | grep "${mainclass} ${arguments}" | grep -v grep | awk '{ print "killing "$2; system("kill -9 " $2)}'
-
-# remove log file
-rm ${logdir}/*_${servicetype}_${ordinal}_*
-
-# copy jar files to local dir
-#localServiceDir=/cm/local/vcell/${site}/${serviceid}
-#mkdir -p ${localServiceDir}
-
-#if [ ! -e ${localServiceDir} ] ; then
-#	echo "can NOT create local service directory ${localServiceDir}"
-#	exit 1
-#fi
-
-#rm -f ${localServiceDir}/* 
-#cp -f ${siteResDir}/*.jar ${localServiceDir}
-#cp -f ${siteResDir}/*.zip ${localServiceDir}
-#cp -f ${siteLibDir}/*.so ${localServiceDir}
-
-# add gcc and sonic to path
-#export PATH=/share/apps/gcc/3.4.4/bin:/usr/pbs/bin:$PATH
-export LD_LIBRARY_PATH=${siteLibDir}:$LD_LIBRARY_PATH
-
-localServiceDir=${siteResDir}
-jre=java 
-jvm_jars=GENERATED
-#:${localServiceDir}/.jar
-#jvmprop="-Xmx${memoryMB}M -Dvcell.propertyfile=${siteCfgDir}/vcell64.properties"
-jvmprop="${jvmmem} -Dvcell.propertyfile=${siteCfgDir}/vcell64.properties"
-
-echo "starting ${serviceid} on ${nodename}"
-nice ${jre} -cp ${jvm_jars} ${jvmprop} ${mainclass} ${arguments}
-
-exit 0
-
Index: deployInfo/JavaSimExe64
===================================================================
--- deployInfo/JavaSimExe64	(revision 12069)
+++ deployInfo/JavaSimExe64	(revision 12068)
@@ -1,29 +0,0 @@
-printusage() {
-	echo "Usage: JavaSimExe64 userdir inputfile jobIndex -tid taskID"
-	exit 1
-}
-
-# main code
-if [ "$#" != "5" ] ; then 
-	printusage
-fi
-site=GENERATED
-
-# set up cmd and cmd rguments
-mainclass=GENERATED
-arguments=$*
-
-siteRootDir=/share/apps/vcell/deployed/${site}
-siteResDir=${siteRootDir}/resources
-siteCfgDir=${siteRootDir}/configs
-logdir=/share/apps/vcell/logs/${site}
-
-jre=java 
-jvm_jars=GENERATED
-jvmprop="-Xmx500M -Dvcell.propertyfile=${siteCfgDir}/vcell64.properties"
-
-echo "starting ${serviceid} on ${nodename}"
-nice ${jre} -cp ${jvm_jars} ${jvmprop} ${mainclass} ${site} ${arguments}
-
-exit 0
-
Index: deployInfo/messaging-vcell64
===================================================================
--- deployInfo/messaging-vcell64	(revision 12069)
+++ deployInfo/messaging-vcell64	(revision 12068)
@@ -1,45 +0,0 @@
-printusage() {
-	echo "Usage : vcell {start|stop}"
-	exit 1
-}
-
-start() {
-#   start server manager
-	nice /usr/java/latest/bin/java -Xmx64M -Dvcell.propertyfile=${siteCfgDir}/vcell64.properties -cp GENERATED cbit.vcell.message.server.manager.ServerManagerDaemon /share/apps/vcell/logs/${site} 1>~/ServerManagerDaemon.log 2>&1 &
-	echo "starting ${site} server manager				[OK]"
-}
-
-stop() {
-#   stop server manager
-	ps ux | grep java | grep ${site} | grep -v grep | awk '{ print "killing "$2; system("kill -9 " $2)}'
-	echo "stopping ${site} server manager				[OK]"
-#   stop all the services from PBS
-	pbsjobprefix=${siteUpperCase:0:1}_
-	qstat | grep ${pbsjobprefix} | awk '{ print ; system("qdel " $1"")}'
-	echo "stopping ${site} services						[OK]"
-}
-
-cmd=$1
-source /home/VCELL/vcell/.profile
-site=GENERATED
-export PATH=/cm/shared/apps/torque/2.5.5/bin/:$PATH
-siteRootDir=/share/apps/vcell/deployed/${site}
-siteResDir=${siteRootDir}/resources
-siteCfgDir=${siteRootDir}/configs
-
-
-case "${cmd}" in 
-	start)
-		start
-		;;
-
-	stop)
-		stop
-		;;
-	*)
-		printusage
-		;;
-esac
-exit 0
-
-
Index: deployInfo/vcell64.properties
===================================================================
--- deployInfo/vcell64.properties	(revision 12069)
+++ deployInfo/vcell64.properties	(revision 12068)
@@ -1,120 +0,0 @@
-#
-# general compiler settings
-#
-vcell.c++.compiler = g++ -c -O2 -fexceptions 
-vcell.c++.linker = g++
-vcell.c++.objoutput = -o 
-vcell.c++.exeoutput = -o 
-vcell.c++.srcsuffix = .cpp
-vcell.c++.exesuffix = 
-vcell.c++.objectsuffix = .o
-vcell.c++.defines = -DUNIX -DLINNUX64 -DUSE_MESSAGING
-
-#
-# Finite Volume Library
-#
-vcell.c++.include = -IGENERATED_SERVER_SITE_PATH/numerics/VCell_CodeGen/include -IGENERATED_SERVER_SITE_PATH/numerics/SonicCClient64/Linux_AS4_64/include -IGENERATED_SERVER_SITE_PATH/numerics/SonicCClient64/Linux_AS4_64/include/CPP
-vcell.c++.libs = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libvcellCodeGen.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libpcgwrapperCodeGen.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libExpressionParser.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libqhull.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libzip.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libunzip.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libPCGPack.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libblas.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libIDAWin.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libsundials_ida.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libsundials_cvode.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libsundials_nvecserial.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libsundials.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libnetcdf_cxx.a GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/libnetcdf.a -LGENERATED_SERVER_SITE_PATH/numerics/SonicCClient64/Linux_AS4_64/bin/release/ -lsmq -lpthread -lz -lm -lgfortran
-vcell.corbaEnabled = false
-
-#
-# Finite Volume Standalone
-#
-vcell.finitevolume.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/FiniteVolume_x64
-
-#
-# stiff ODE solver library
-#
-vcell.sundialsSolver.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/SundialsSolverStandalone_x64
-
-#
-# java simulation executable
-#
-vcell.javaSimulation.executable = GENERATED_SERVER_SITE_PATH/configs/JavaSimExe64
-
-#
-# stochastic solver 
-#
-vcell.stoch.library = 
-vcell.stoch.include = 
-vcell.stoch.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/VCellStoch_x64
-
-#
-# hybrid stochastic solvers
-#
-vcell.hybridEM.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/Hybrid_EM_x64
-vcell.hybridMil.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/Hybrid_MIL_x64
-vcell.hybridMilAdaptive.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/Hybrid_MIL_Adaptive_x64
-
-#
-# smoldyn spatial stochastic solver
-#
-vcell.smoldyn.executable = GENERATED_SERVER_SITE_PATH/numerics/cmake-build/bin/smoldyn_x64
-
-#
-# Server configuration
-#
-vcell.primarySimdatadir = /share/apps/vcell/users/
-vcell.secondarySimdatadir = /share/apps/vcell2/users/
-vcell.localSimdatadir = /share/apps/vcell/users/
-vcell.tempdir = /tmp
-#vcell.help.userGuideURL = http://www.nrcam.uchc.edu/user_guide_v3/tocv3.html
-#vcell.help.tutorialURL = http://www.nrcam.uchc.edu/tutorials_v3/tutorials.html
-vcell.export.baseURL = http://vcell.org/export/
-vcell.export.baseDir = /share/apps/vcell2/export/
-vcell.export.useLocalDataServer = true
-vcell.odeComputeServerHosts = 
-vcell.pdeComputeServerHosts = 
-vcell.simDataServerHost = 
-vcell.databaseCacheSize = 50000000
-vcell.simdataCacheSize = 200000000
-vcell.numProcessors = 2
-vcell.maxJavaMemoryBytes = 1000000000
-vcell.dataSetCrawlerEnabled = false
-vcell.dataSetCrawlerIntervalMinutes = 120
-vcell.serverStatistics = 
-
-#
-# Limits
-#
-vcell.limit.jobMemoryMB = 20000
-
-#
-# Quota info
-#
-vcell.server.maxOdeJobsPerUser = 40
-vcell.server.maxPdeJobsPerUser = 40
-vcell.server.maxJobsPerScan = 100
-
-#
-# HTC info
-#
-vcell.htc.partition.maximumJobs = 200
-vcell.htc.partition.shareServerIDs = REL BETA ALPHA TEST TEST2
-#vcell.htc.computeresources = osgrocks64
-#vcell.htc.submittemplates = osgrocks64@GENERATED_SERVER_SITE_PATH/configs/pbstemplate.sub
-vcell.htc.computeresources = sigcluster
-vcell.htc.submittemplates = sigcluster@GENERATED_SERVER_SITE_PATH/configs/pbstemplate.sub
-vcell.pbs.homeDir = /cm/shared/apps/torque/current
-
-#
-# Client Timeout in milliseconds
-#
-vcell.client.timeoutMS = 600000
-
-#
-# Management info
-#
-vcell.service.submitScript = GENERATED_SERVER_SITE_PATH/configs/runservice64
-
-#
-#PSLID Properties
-#
-SYSCLIENT_vcell.pslid.allProteinListURL=http://pslid.cbi.cmu.edu/tcnp/return_xml_list.jsp?listtype=target
-SYSCLIENT_vcell.pslid.cellProteinListExpURL=http://pslid.cbi.cmu.edu/tcnp/return_xml_list.jsp?listtype=target_cell_name
-SYSCLIENT_vcell.pslid.cellProteinListGenURL=http://pslid.cbi.cmu.edu/tcnp/return_xml_list.jsp?listtype=gen_model
-SYSCLIENT_vcell.pslid.cellProteinImageInfoExpURL=http://pslid.cbi.cmu.edu/tcnp/searchreturnxml.jsp?target=
-SYSCLIENT_vcell.pslid.cellProteinImageInfoGenURL=
-SYSCLIENT_vcell.pslid.cellProteinImageExpURL=
-SYSCLIENT_vcell.pslid.cellProteinImageGenURL_1=http://pslid.cbi.cmu.edu/tcnp/genmodel_TCNP.jsp?protset1=
-SYSCLIENT_vcell.pslid.cellProteinImageGenURL_2=&selectset2=using&settype=regionset&settitle=2d+region+set&task=genmodel&table=tblregion_Sets&setnum=2&multisel=0&next=Continue
Index: deployInfo/convertSmoldyn.py
===================================================================
--- deployInfo/convertSmoldyn.py	(revision 12069)
+++ deployInfo/convertSmoldyn.py	(revision 12068)
@@ -1,256 +0,0 @@
-    #convertSmoldyn.py
-    
-    #usage convertSmoldyn.py
-    # /path/to/SimID_xxxxxxxxxxx_0_
-    # /path/to/outputfolder/ImageOutputRootFileName
-    # {2|3 dimension}
-    # {sets beginTimeIndex, index 0 is beginning}
-    # {sets endTimeIndex, last index numTimes-1, must be > endTimeIndex}
-    # particle sphere size
-    # frame size X
-    # frame size Y
-    # {0=all variables, 1 or more means number of specified variables} varname1 varname2 
-
-    
-    # by Ed Boyce - March 15, 2011
-    # University of Connecticut Health Center
-    # Center for Cell Analysis and Modeling
-    
-    # Edit March 30, 2011 by Frank Morgan
-    # 1.  Added 2 command line options to specify begin and end time indices to allow
-    # creation of smaller movies from subsets of time.
-    # 2.  Add try/except to main body of script because java exec(...) was not
-    # returning if the script had an error.
-    
-import sys, os, tokenize, string, commands
-try:
-    #argStart=sys.argv.index('convertSmoldyn.py')
-    argStart = 0;
-    
-    for argidx in range(len(sys.argv)):
-        if (sys.argv[argidx].endswith('convertSmoldyn.py')):
-            argStart=sys.argv.index(sys.argv[argidx])
-            
-    
-    inputFilePathRoot=sys.argv[argStart+1]
-    outputImageFileRoot=sys.argv[argStart+2]
-    if sys.argv[argStart+3]=="2":
-        dimension="2"
-    else:
-        dimension="3"
-    
-    vcellBeginTimeIndex = int(sys.argv[argStart+4]);
-    vcellEndTimeIndex = int(sys.argv[argStart+5]);
-    print "vcellBeginTimeIndex="+str(vcellBeginTimeIndex)+" vcellEndTimeIndex="+str(vcellEndTimeIndex); 
-    if vcellEndTimeIndex < vcellBeginTimeIndex:
-        raise ValueError('vcellEndTimeIndex must be >= vcellBeginTimeIndex')
-    
-    pointSphereSize = int(sys.argv[argStart+6])
-    frameXSize = int(sys.argv[argStart+7])
-    frameYSize = int(sys.argv[argStart+8])
-    
-    particleIncludeList=[]
-    includeVarNumber=int(sys.argv[argStart+9])
-    if (includeVarNumber>0):
-        for vari in range(1,includeVarNumber+1):
-            particleIncludeList.append(sys.argv[(argStart+9+vari)])  
-    
-    simID=inputFilePathRoot[inputFilePathRoot.find("SimID"):]
-    
-    
-
-    particleTypeList=[]
-    particleTypeNumber=0
-    fileIterator=1
-    print "inputFilePathRoot=" + inputFilePathRoot+"\n"
-    print "SimID = "+simID+"\n"
-    
-    inputFilePathRootPartition= os.path.split(inputFilePathRoot)[1]
-    outputFileRoot=os.path.join(outputImageFileRoot,inputFilePathRootPartition)
-    print "starting with: " + (inputFilePathRoot+('%03d' %fileIterator)+".smoldynOutput")
-    while os.path.exists(inputFilePathRoot+('%03d' %fileIterator)+".smoldynOutput"):
-        if fileIterator < (vcellBeginTimeIndex+1) or fileIterator > (vcellEndTimeIndex+1):
-            print "Skipping "+inputFilePathRoot+('%03d' %fileIterator)+".smoldynOutput"
-            fileIterator = fileIterator+1;
-            continue;
-        print "Processing "+inputFilePathRoot+('%03d' %fileIterator)+".smoldynOutput"
-        ifile=open((inputFilePathRoot+('%03d' %fileIterator)+".smoldynOutput"),'r')
-        ofile=open(outputFileRoot+'p3d-'+('%03d' %fileIterator),'w')
-        print "Outputting "+ofile.name
-        ofile.write('x y z particle\n')
-        for line in ifile.readlines():
-            lineTokens=string.split(line)
-            parenPos=string.find(lineTokens[0],'(')
-            pType=lineTokens[0][0:parenPos]
-            if (particleTypeList.count(pType)==0):
-                particleTypeList.append(pType)
-                particleTypeNumber=particleTypeNumber+1
-            if (dimension=="2"):
-                if (includeVarNumber==0):
-                    outputLine=lineTokens[1]+' '+lineTokens[2]+' 0 '+str(particleTypeList.index(pType)+1)+'\n'
-                else:
-                    if (particleIncludeList.count(pType)==1):    
-                        outputLine=lineTokens[1]+' '+lineTokens[2]+' 0 '+str(particleIncludeList.index(pType)+1)+'\n'
-            else:
-                 if (includeVarNumber==0):
-                     outputLine=lineTokens[1]+' '+lineTokens[2]+' '+lineTokens[3]+' '+str(particleTypeList.index(pType)+1)+'\n'
-                 else:
-                     if (particleIncludeList.count(pType)==1):
-                         outputLine=lineTokens[1]+' '+lineTokens[2]+' '+lineTokens[3]+' '+str(particleIncludeList.index(pType)+1)+'\n'
-            if (includeVarNumber==0):
-                ofile.write(outputLine)
-            else:
-                if (particleIncludeList.count(pType)==1):
-                    ofile.write(outputLine)
-        ifile.close()
-        ofile.close()
-        fileIterator=fileIterator+1
-    
-    print("Done processing Smoldyn data into Point3D.  Now opening databases in Visit.")
-    
-    
-    # Open and plot the mesh
-    
-    meshFilePathRoot=inputFilePathRoot[:inputFilePathRoot.index('__')+1]
-    
-    #print("Opening the .log file: "+ meshFilePathRoot+".log\n")
-    visitMeshDB=meshFilePathRoot+".log"
-    print("Opening .log file "+visitMeshDB)
-    success=OpenDatabase(visitMeshDB,0,"VCellMTMD_1.0")
-    AddPlot("Mesh", "membrMesh")
-    
-    meshAtts=MeshAttributes()
-    meshAtts.legendFlag = 0
-    meshAtts.smoothingLevel = meshAtts.High
-    meshAtts.pointSize=0.01
-    meshAtts.pointSizePixels=1
-    meshAtts.opacity=0.2
-    #meshAtts.opaqueColor = (255,255,255,30)
-    
-    SetPlotOptions(meshAtts)
-    
-    aaMesh=AnnotationAttributes()
-    aaMesh.axes3D.xAxis.label.visible = 0
-    aaMesh.axes3D.yAxis.label.visible = 0
-    aaMesh.axes3D.zAxis.label.visible = 0
-    aaMesh.databaseInfoFlag = 0 
-    aaMesh.userInfoFlag = 0
-    aaMesh.legendInfoFlag = 0
-    SetAnnotationAttributes(aaMesh)
-    
-    AddOperator("Smooth", 1)
-    SmoothOperatorAtts = SmoothOperatorAttributes()
-    SmoothOperatorAtts.numIterations = 40
-    SmoothOperatorAtts.relaxationFactor = 0.03
-    SmoothOperatorAtts.convergence = 0
-    SmoothOperatorAtts.maintainFeatures = 0
-    SmoothOperatorAtts.featureAngle = 45
-    SmoothOperatorAtts.edgeAngle = 15
-    SmoothOperatorAtts.smoothBoundaries = 0
-    SetOperatorOptions(SmoothOperatorAtts, 1)
-    DrawPlots()
-    
-    
-    # Open and plot the points
-    
-    print("Opening database series: " + outputFileRoot+"p3d-*")
-    visitDB=outputFileRoot+"p3d-* database"
-    success=OpenDatabase(visitDB,0,"Point3D_1.0")
-    
-    
-    if (success==1):
-        print("Succeeded\n")
-    else:
-        print("Failed\n")
-    AddPlot("Pseudocolor","particle")
-    
-    # All attribute settings from here on apply to the points plot
-    SetActivePlots(1);
-    
-    if dimension=="2":
-        AddOperator("Slice")
-        sa = SliceAttributes()
-        sa.project2d = 1
-        sa.originType = sa.Point
-        sa.normal = (0,0,1)
-        sa.upAxis = (0,1,0)
-        sa.originPoint = (0,0,0)
-        SetOperatorOptions(sa)
-    
-    
-    DrawPlots()
-    
-    pc=PseudocolorAttributes()
-    pc.pointType=4
-    pc.pointSizePixels = pointSphereSize
-    if (includeVarNumber==0):
-        pc.max=(len(particleTypeList))
-    else:
-        pc.max=(len(particleIncludeList))
-    if (pc.max==1):
-        pc.max=2
-    pc.maxFlag=1
-    pc.min=1
-    pc.minFlag=1
-    
-    if (includeVarNumber==0):
-        pc.max = max (pc.max,len(particleTypeList))
-    else:
-        pc.max = max (pc.max,len(particleIncludeList))    
-              
-    SetPlotOptions(pc)
-    
-    s=SaveWindowAttributes()
-    s.outputToCurrentDirectory=0
-    s.outputDirectory = outputImageFileRoot
-    s.fileName=simID+"-visitOutputFrame"
-    
-    # 2=JPEG from the possible enumerated list: format = # BMP, CURVE, JPEG, OBJ, PNG, POSTSCRIPT, POVRAY, PPM, RGB, STL, TIFF, ULTRA, VTK, PLY 
-    s.format=2 
-    s.resConstraint = s.NoConstraint
-    s.width = frameXSize
-    s.height = frameYSize
-    SetSaveWindowAttributes(s)
-    
-    aa=AnnotationAttributes()
-    aa.axes3D.xAxis.label.visible = 0
-    aa.axes3D.yAxis.label.visible = 0
-    aa.axes3D.zAxis.label.visible = 0
-    aa.axesArray.axes.title.visible = 0
-    aa.databaseInfoFlag = 0
-    aa.userInfoFlag = 0
-    SetAnnotationAttributes(aa)
-    
-    # Setup the legend
-    # Plot0001 is the plot id. You can obtain of from GetPlotList()
-    L = GetAnnotationObject("Plot0001")
-    
-    if (includeVarNumber==0):
-        L.suppliedLabels = tuple(particleTypeList)
-        L.suppliedValues = tuple(range(1,len(particleTypeList)+1))
-    else:
-        L.suppliedLabels = tuple(particleIncludeList)
-        L.suppliedValues = tuple(range(1,len(particleIncludeList)+1))
-    
-    L.drawLabels = L.Labels
-    L.controlTicks = 0
-    L.drawMinMax = 0
-    L.position=(0,0.4)
-    L.orientation = 1
-    
-    # Make the frames
-    for ts in range(TimeSliderGetNStates()):
-        SetTimeSliderState(ts)
-        DrawPlots()
-        SaveWindow()
-    
-    #print("Doing ffmpeg processing now\n")
-    #s=commands.getoutput("ls /home/VCELL/visit/visitframes")
-    #print(s+"\n") 
-    #ffmpegCommand="ffmpeg -f image2 -r 2 -i /home/VCELL/visit/visitframes/visit%04d.png -vcodec mpeg4 -s vga -vframes 1000 -r 24 -b 200000 "+outputfilename
-    #s1=commands.getoutput(ffmpegCommand)
-    #print(s1+"\n")
-except:
-    sys.exit(1)
-
-sys.exit(0);
\ No newline at end of file
Index: src/cbit/vcell/message/server/manager/ServerManagerDaemon.java
===================================================================
--- src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12069)
+++ src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12068)
@@ -258,7 +258,7 @@
 	// site, type, ordinal, memory
 	String[] command = new String[] { 
 			executable, 
-//			VCellServerID.getSystemServerID().toString().toLowerCase(), 
+			VCellServerID.getSystemServerID().toString().toLowerCase(), 
 			type.getName(), 
 			String.valueOf(ordinal), 
 			String.valueOf(service.getServiceSpec().getMemoryMB()) };
Index: src/cbit/vcell/message/server/htc/test/HtcTest.java
===================================================================
--- src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12069)
+++ src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12068)
@@ -1,7 +1,6 @@
 package cbit.vcell.message.server.htc.test;
 
 import java.util.List;
-import java.util.TreeMap;
 
 import org.vcell.util.ExecutableException;
 import org.vcell.util.document.VCellServerID;
@@ -45,8 +44,8 @@
 	private static void testServices(HtcProxy htcProxy, VCellServerID serverID)	throws ExecutableException, HtcException, HtcJobNotFoundException {
 		try {
 			System.out.println("getting services");
-			TreeMap<HtcJobID, String> jobIDs = htcProxy.getServiceJobIDs(serverID);
-			for (HtcJobID jobID : jobIDs.keySet()){
+			List<HtcJobID> jobIDs = htcProxy.getServiceJobIDs(serverID);
+			for (HtcJobID jobID : jobIDs){
 				if (jobID instanceof PbsJobID){
 					System.out.println("serviceJobID : "+((PbsJobID)jobID).getPbsJobID());
 					htcProxy.killJob(jobID);
Index: src/cbit/vcell/message/server/htc/HtcProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/HtcProxy.java	(revision 12069)
+++ src/cbit/vcell/message/server/htc/HtcProxy.java	(revision 12068)
@@ -9,7 +9,6 @@
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.util.List;
-import java.util.TreeMap;
 
 import org.vcell.util.ExecutableException;
 import org.vcell.util.document.KeyValue;
@@ -66,7 +65,7 @@
 
 	public abstract HtcProxy cloneThreadsafe();
 	
-	public abstract TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException;
+	public abstract List<HtcJobID> getServiceJobIDs(VCellServerID serverID) throws ExecutableException;
 
 	public final CommandService getCommandService() {
 		return commandService;
Index: src/cbit/vcell/message/server/htc/pbs/PbsProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/pbs/PbsProxy.java	(revision 12069)
+++ src/cbit/vcell/message/server/htc/pbs/PbsProxy.java	(revision 12068)
@@ -1,16 +1,13 @@
 package cbit.vcell.message.server.htc.pbs;
 
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.PrintWriter;
-import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
-import java.util.TreeMap;
 
 import org.vcell.util.ExecutableException;
 import org.vcell.util.FileUtils;
@@ -297,29 +294,19 @@
 	}
 	
 	@Override
-	public TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
-		try {
-			String[] cmd = new String[]{JOB_CMD_STATUS, "|", "grep", serverID.toString().toUpperCase()+"_"};
-			CommandOutput commandOutput = commandService.command(cmd);
-			TreeMap<HtcJobID, String> pbsJobIDMapServiceType = new TreeMap<HtcJobID, String>();
-			BufferedReader br = new BufferedReader(new StringReader(commandOutput.getStandardOutput()));
-			String line = null;
-			while((line = br.readLine()) != null){
-				StringTokenizer st = new StringTokenizer(line," \t");
-				String pbsJobInfo = st.nextToken();
-				Integer pbsJobID = new Integer(pbsJobInfo.substring(0,pbsJobInfo.indexOf('.')));
-				String serviceJobName = st.nextToken();
-				pbsJobIDMapServiceType.put(new PbsJobID(String.valueOf(pbsJobID)), serviceJobName);
-			}
-			return pbsJobIDMapServiceType;
-		} catch (Exception e) {
-			e.printStackTrace();
-			if(e instanceof ExecutableException){
-				throw (ExecutableException)e;
-			}else{
-				throw new ExecutableException("Error getServiceJobIDs: "+e.getMessage());
-			}
+	public List<HtcJobID> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
+		String[] cmd = new String[]{JOB_CMD_STATUS, "|", "grep", serverID.toString().toUpperCase()+"_"};
+		CommandOutput commandOutput = commandService.command(cmd);
+		ArrayList<HtcJobID> serviceJobIDs = new ArrayList<HtcJobID>();
+		
+		String output = commandOutput.getStandardOutput();
+		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
+		while (st.hasMoreTokens()) {
+			String line = st.nextToken().trim();
+			int pbsJobID = Integer.parseInt(line.substring(0, line.indexOf('.')));
+			serviceJobIDs.add(new PbsJobID(String.valueOf(pbsJobID)));
 		}
+		return serviceJobIDs;
 	}
 
 
Index: src/cbit/vcell/message/server/htc/sge/SgeProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/sge/SgeProxy.java	(revision 12069)
+++ src/cbit/vcell/message/server/htc/sge/SgeProxy.java	(revision 12068)
@@ -1,27 +1,17 @@
 package cbit.vcell.message.server.htc.sge;
 
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
-import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.StringTokenizer;
-import java.util.TreeMap;
 
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.input.SAXBuilder;
 import org.vcell.util.ExecutableException;
 import org.vcell.util.FileUtils;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.util.xml.XmlUtil;
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandService.CommandOutput;
 import cbit.vcell.message.server.htc.HtcException;
@@ -29,8 +19,6 @@
 import cbit.vcell.message.server.htc.HtcJobNotFoundException;
 import cbit.vcell.message.server.htc.HtcJobStatus;
 import cbit.vcell.message.server.htc.HtcProxy;
-import cbit.vcell.message.server.htc.pbs.PbsJobID;
-import cbit.vcell.xml.XmlHelper;
 
 public class SgeProxy extends HtcProxy {
 	private final static String QDEL_UNKNOWN_JOB_RESPONSE = "does not exist";
@@ -391,29 +379,23 @@
 	}
 
 	@Override
-	public TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
-		try{
-			String[] cmd = new String[]{JOB_CMD_STATUS, "-xml"};//get running jobs in XML format
-			CommandOutput commandOutput = commandService.command(cmd);
-			TreeMap<HtcJobID, String> pbsJobIDMapServiceType = new TreeMap<HtcJobID, String>();
-			Document qstatDoc = XmlUtil.stringToXML(commandOutput.getStandardOutput(), null);
-			Element rootElement = qstatDoc.getRootElement();
-			List<Element> qstatInfoChildren = rootElement.getChild("queue_info").getChildren("job_list");
-			for(Element jobInfoElement : qstatInfoChildren){
-				String jobID = jobInfoElement.getChildText("JB_job_number").trim();
-				String jobName = jobInfoElement.getChildText("JB_name").trim();
-				if(jobName.startsWith(serverID.toString().toUpperCase()+"_"))
-				pbsJobIDMapServiceType.put(new SgeJobID(jobID), jobName);
-			}
-			return pbsJobIDMapServiceType;
-		} catch (Exception e) {
-			e.printStackTrace();
-			if(e instanceof ExecutableException){
-				throw (ExecutableException)e;
-			}else{
-				throw new ExecutableException("Error getServiceJobIDs: "+e.getMessage());
-			}
+	public List<HtcJobID> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
+/*
+   6951 0.55500 TEST2_MySe vcell        r     10/10/2012 19:08:34 all.q@compute-4-1.local            1
+   6952 0.55500 TEST2_MySe vcell        r     10/10/2012 19:08:34 all.q@compute-0-1.local            1
+ */
+		String[] cmd = new String[]{JOB_CMD_STATUS, "|", "grep", serverID.toString().toUpperCase()+"_"};
+		CommandOutput commandOutput = commandService.command(cmd);
+		ArrayList<HtcJobID> serviceJobIDs = new ArrayList<HtcJobID>();
+		
+		String output = commandOutput.getStandardOutput();
+		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
+		while (st.hasMoreTokens()) {
+			String line = st.nextToken().trim();
+			StringTokenizer lineTokens = new StringTokenizer(line," \t");
+			serviceJobIDs.add(new SgeJobID(lineTokens.nextToken()));
 		}
+		return serviceJobIDs;
 	}
 
 }
Index: src/cbit/vcell/solvers/HTCSolver.java
===================================================================
--- src/cbit/vcell/solvers/HTCSolver.java	(revision 12069)
+++ src/cbit/vcell/solvers/HTCSolver.java	(revision 12068)
@@ -127,7 +127,7 @@
 	} else {
 		File inputFile = new File(getBaseName() + JAVA_INPUT_EXTENSION);
 		Executable exe = new Executable(new String[]{PropertyLoader.getRequiredProperty(PropertyLoader.javaSimulationExecutable), 
-				/*VCellServerID.getSystemServerID().toString(),*/ inputFile.getParent(), inputFile.getName(), getJobIndex()+""});
+				VCellServerID.getSystemServerID().toString(), inputFile.getParent(), inputFile.getName(), getJobIndex()+""});
 		return exe.getCommand();
 	}
 }
