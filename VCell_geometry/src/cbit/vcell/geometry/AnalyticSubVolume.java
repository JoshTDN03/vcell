package cbit.vcell.geometry;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;
import java.io.*;

import org.vcell.expression.ExpressionBindingException;
import org.vcell.expression.ExpressionException;
import org.vcell.expression.ExpressionFactory;
import org.vcell.expression.IExpression;
import org.vcell.expression.SimpleSymbolTable;

import cbit.util.KeyValue;
import cbit.util.Matchable;
import edu.uchc.vcell.expression.internal.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class AnalyticSubVolume extends SubVolume {
	private IExpression exp = null;
	private SimpleSymbolTable symbolTable = new SimpleSymbolTable(new String[] { "x", "y", "z" });

	//
	// the following fields are used for evaluating the inside/outside function "isInside()"
	//
	private double valueArray[] = new double[3];
	private int xIndex = 0;
	private int yIndex = 1;
	private int zIndex = 2;

/**
 * MathDescription constructor comment.
 */
public AnalyticSubVolume(KeyValue key, String subDomainName, IExpression exp, int handle) throws ExpressionException {
	super(key,subDomainName, handle);
	setExpression(exp);
}


/**
 * This method was created in VisualAge.
 * @param subDomainName java.lang.String
 */
public AnalyticSubVolume(String subDomainName) throws ExpressionException {
	this(null,subDomainName,ExpressionFactory.createExpression(1.0),-1);
}


/**
 * MathDescription constructor comment.
 */
public AnalyticSubVolume(String subDomainName, IExpression exp) throws ExpressionException {
	super(null,subDomainName, -1);
	setExpression(exp);
}


/**
 * This method was created in VisualAge.
 */
private void bind() throws ExpressionBindingException {
	if (exp != null){
		exp.bindExpression(symbolTable);
	}
}


/**
 * This method was created in VisualAge.
 * @return boolean
 * @param obj java.lang.Object
 */
public boolean compareEqual(Matchable obj) {
	if (!compareEqual0(obj)){
		return false;
	}
	if (!(obj instanceof AnalyticSubVolume)){
		return false;
	}
	AnalyticSubVolume sv = (AnalyticSubVolume)obj;

	if (!cbit.util.Compare.isEqual(exp,sv.exp)){
		return false;
	}

	return true;
}


/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.parser.Expression
 */
public IExpression getExpression() {
	return exp;
}




/**
 * This method was created in VisualAge.
 * @return boolean
 * @param x double
 * @param y double
 * @param z double
 */
public boolean isInside(double x,double y, double z, GeometrySpec geometrySpec) throws GeometryException, ExpressionException {
	if (exp==null){
		throw new GeometryException("expression for analytic geometry is not defined");
	}
	valueArray[xIndex] = x;		// x
	valueArray[yIndex] = y;		// y
	valueArray[zIndex] = z;		// z
	double value = exp.evaluateVector(valueArray);
	return (value!=0);
}


/**
 * Insert the method's description here.
 * Creation date: (4/2/01 5:39:04 PM)
 */
public void rebind() throws ExpressionException {
	//
	// make sure x,y,z are pointing to the correct instances (each are singletons per-JVM)
	// such that they have the right variableIndex (it's a transient property and serialization
	// sets it to zero
	//
	bind();
}


/**
 * This method was created in VisualAge.
 * @param exp cbit.vcell.parser.Expression
 */
public void setExpression(IExpression exp) throws ExpressionBindingException {
	IExpression oldExp = this.exp;
	this.exp = exp;
	bind();
	firePropertyChange("expression",oldExp,exp);
//	if (geometry!=null){
//		geometry.forceNotifyObservers(this);
//	}
}
}