Index: src/cbit/vcell/simdata/LocalDataSetController.java
===================================================================
--- src/cbit/vcell/simdata/LocalDataSetController.java	(revision 12052)
+++ src/cbit/vcell/simdata/LocalDataSetController.java	(revision 12051)
@@ -9,28 +9,30 @@
  */
 
 package cbit.vcell.simdata;
+import cbit.rmi.event.*;
+import cbit.vcell.solver.AnnotatedFunction;
+import cbit.vcell.solver.DataProcessingOutput;
+import cbit.vcell.client.data.OutputContext;
+import cbit.vcell.export.server.*;
+import cbit.vcell.field.FieldDataFileOperationResults;
+import cbit.vcell.field.FieldDataFileOperationSpec;
+import cbit.vcell.simdata.gui.SpatialSelection;
+import cbit.vcell.math.*;
+import java.rmi.*;
+import java.rmi.server.*;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
-import org.vcell.util.document.TimeSeriesJobSpec;
 import org.vcell.util.document.User;
 import org.vcell.util.document.VCDataIdentifier;
 
-import cbit.rmi.event.ExportEvent;
-import cbit.vcell.client.data.OutputContext;
-import cbit.vcell.export.server.ExportServiceImpl;
-import cbit.vcell.field.FieldDataFileOperationResults;
-import cbit.vcell.field.FieldDataFileOperationSpec;
-import cbit.vcell.server.DataSetController;
-import cbit.vcell.server.LocalVCellConnection;
-import cbit.vcell.simdata.gui.SpatialSelection;
-import cbit.vcell.solver.AnnotatedFunction;
-import cbit.vcell.solver.DataProcessingOutput;
 import cbit.vcell.solvers.CartesianMesh;
+import cbit.vcell.server.*;
 /**
  * This interface was generated by a SmartGuide.
  * 
  */
-public class LocalDataSetController implements DataSetController {
+public class LocalDataSetController extends UnicastRemoteObject implements DataSetController {
 	private LocalVCellConnection vcConn = null;
 	private SessionLog log = null;
 	private User user = null;
@@ -39,7 +41,8 @@
 /**
  * This method was created by a SmartGuide.
  */
-public LocalDataSetController (LocalVCellConnection argvcConn, SessionLog log, DataSetControllerImpl dsControllerImpl, ExportServiceImpl exportServiceImpl, User user) {
+public LocalDataSetController (LocalVCellConnection argvcConn, SessionLog log, DataSetControllerImpl dsControllerImpl, ExportServiceImpl exportServiceImpl, User user) throws RemoteException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortDataSetController,0));
 	this.vcConn = argvcConn;
 	this.user = user;
 	this.log = log;
@@ -77,7 +80,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public AnnotatedFunction[] getFunctions(OutputContext outputContext,VCDataIdentifier vcdID) throws org.vcell.util.DataAccessException {
+public AnnotatedFunction[] getFunctions(OutputContext outputContext,VCDataIdentifier vcdID) throws org.vcell.util.DataAccessException, java.rmi.RemoteException {
 	return dataServerImpl.getFunctions(outputContext,user, vcdID);
 }
 
@@ -90,7 +93,7 @@
  * @param spatialSelection cbit.vcell.simdata.gui.SpatialSelection
  * @exception java.rmi.RemoteException The exception description.
  */
-public cbit.plot.PlotData getLineScan(OutputContext outputContext, VCDataIdentifier vcdID, String varName, double time, SpatialSelection spatialSelection) throws DataAccessException {
+public cbit.plot.PlotData getLineScan(OutputContext outputContext, VCDataIdentifier vcdID, java.lang.String varName, double time, SpatialSelection spatialSelection) throws org.vcell.util.DataAccessException, java.rmi.RemoteException {
 	return dataServerImpl.getLineScan(outputContext, user, vcdID,varName,time,spatialSelection);
 }
 
@@ -111,7 +114,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public cbit.vcell.solver.ode.ODESimData getODEData(VCDataIdentifier vcdID) throws DataAccessException {
+public cbit.vcell.solver.ode.ODESimData getODEData(VCDataIdentifier vcdID) throws DataAccessException, RemoteException {
 	return dataServerImpl.getODEData(user, vcdID);
 }
 
@@ -161,7 +164,7 @@
  * @param y int
  * @param z int
  */
-public org.vcell.util.document.TimeSeriesJobResults getTimeSeriesValues(OutputContext outputContext, VCDataIdentifier vcdID, TimeSeriesJobSpec timeSeriesJobSpec) throws DataAccessException {
+public org.vcell.util.document.TimeSeriesJobResults getTimeSeriesValues(OutputContext outputContext, VCDataIdentifier vcdID,org.vcell.util.document.TimeSeriesJobSpec timeSeriesJobSpec) throws DataAccessException {
 	return dataServerImpl.getTimeSeriesValues(outputContext, user,vcdID,timeSeriesJobSpec);
 }
 
@@ -172,7 +175,7 @@
  * @param exportSpecs cbit.vcell.export.server.ExportSpecs
  * @exception org.vcell.util.DataAccessException The exception description.
  */
-public ExportEvent makeRemoteFile(OutputContext outputContext,cbit.vcell.export.server.ExportSpecs exportSpecs) throws DataAccessException {
+public ExportEvent makeRemoteFile(OutputContext outputContext,cbit.vcell.export.server.ExportSpecs exportSpecs) throws org.vcell.util.DataAccessException {
 	return dataServerImpl.makeRemoteFile(outputContext,user, exportSpecs);
 
 	/*
Index: src/cbit/vcell/simdata/LocalDataSetControllerProxy.java
===================================================================
--- src/cbit/vcell/simdata/LocalDataSetControllerProxy.java	(revision 0)
+++ src/cbit/vcell/simdata/LocalDataSetControllerProxy.java	(revision 12051)
@@ -0,0 +1,447 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.vcell.simdata;
+
+import cbit.rmi.event.*;
+import cbit.vcell.solver.*;
+import cbit.vcell.client.data.OutputContext;
+import cbit.vcell.export.server.*;
+import cbit.vcell.field.FieldDataFileOperationResults;
+import cbit.vcell.field.FieldDataFileOperationSpec;
+import cbit.vcell.simdata.gui.SpatialSelection;
+import cbit.vcell.math.*;
+import cbit.plot.*;
+import java.rmi.*;
+import java.rmi.server.*;
+import org.vcell.util.DataAccessException;
+import org.vcell.util.PropertyLoader;
+import org.vcell.util.SessionLog;
+import org.vcell.util.document.VCDataIdentifier;
+
+import cbit.vcell.solvers.CartesianMesh;
+import cbit.vcell.server.*;
+/**
+ * This interface was generated by a SmartGuide.
+ * 
+ */
+public class LocalDataSetControllerProxy extends UnicastRemoteObject implements DataSetController {
+	private LocalDataSetController localDataSetController = null;
+	private RemoteDataSetControllerFactory remoteDataSetControllerFactory = null;
+	private DataSetController remoteDataSetController = null;
+	private SessionLog sessionLog = null;
+/**
+ * This method was created by a SmartGuide.
+ */
+public LocalDataSetControllerProxy (SessionLog sessionLog, 
+									RemoteDataSetControllerFactory argRemoteDataSetControllerFactory, 
+									LocalDataSetController argLocalDataSetController)
+									throws RemoteException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortDataSetController,0));
+	this.localDataSetController = argLocalDataSetController;
+	this.remoteDataSetControllerFactory = argRemoteDataSetControllerFactory;
+	this.sessionLog = sessionLog;
+}
+public FieldDataFileOperationResults fieldDataFileOperation(FieldDataFileOperationSpec fieldDataFileOperationSpec) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.fieldDataFileOperation(...)");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.fieldDataFileOperation(fieldDataFileOperationSpec);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().fieldDataFileOperation(fieldDataFileOperationSpec);
+	}catch (DataAccessException e){
+		sessionLog.exception(e);
+		throw e;
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @return java.lang.String[]
+ */
+public DataIdentifier[] getDataIdentifiers(OutputContext outputContext, VCDataIdentifier vcdID) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getDataIdentifiers(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getDataIdentifiers(outputContext,vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getDataIdentifiers(outputContext,vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return double[]
+ */
+public double[] getDataSetTimes(VCDataIdentifier vcdID) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getDataSetTimes(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getDataSetTimes(vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getDataSetTimes(vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (10/11/00 1:11:04 PM)
+ * @param function cbit.vcell.math.Function
+ * @exception org.vcell.util.DataAccessException The exception description.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public AnnotatedFunction[] getFunctions(OutputContext outputContext,VCDataIdentifier vcdID) throws org.vcell.util.DataAccessException, java.rmi.RemoteException {
+	sessionLog.print("LocalDataSetControllerProxy.getFunctions(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getFunctions(outputContext,vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getFunctions(outputContext,vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return cbit.plot.PlotData
+ * @param varName java.lang.String
+ * @param spatialSelection cbit.vcell.simdata.gui.SpatialSelection
+ */
+public PlotData getLineScan(OutputContext outputContext, VCDataIdentifier vcdID, String varName, double time, SpatialSelection spatialSelection) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getLineScan(simID="+vcdID.getID()+", "+varName+", "+time+", at "+spatialSelection+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getLineScan(outputContext,vcdID, varName, time, spatialSelection);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getLineScan(outputContext,vcdID, varName, time, spatialSelection);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (10/22/01 11:21:33 AM)
+ * @return cbit.vcell.server.DataSetController
+ * @param user cbit.vcell.server.User
+ */
+private LocalDataSetController getLocalDataSetController() {
+	return localDataSetController;
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return int[]
+ */
+public CartesianMesh getMesh(VCDataIdentifier vcdID) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getMesh(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getMesh(vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getMesh(vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (1/14/00 11:20:51 AM)
+ * @return cbit.vcell.export.data.ODESimData
+ * @exception org.vcell.util.DataAccessException The exception description.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public cbit.vcell.solver.ode.ODESimData getODEData(VCDataIdentifier vcdID) throws DataAccessException, RemoteException {
+	sessionLog.print("LocalDataSetControllerProxy.getODEData(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getODEData(vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getODEData(vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return double[]
+ * @param varName java.lang.String
+ * @param time double
+ */
+public ParticleDataBlock getParticleDataBlock(VCDataIdentifier vcdID, double time) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getParticleDataBlock(simID="+vcdID.getID()+",time="+time+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getParticleDataBlock(vcdID,time);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getParticleDataBlock(vcdID,time);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return boolean
+ */
+public DataProcessingOutput getDataProcessingOutput(VCDataIdentifier vcdID) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getDataProcessingOutput(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getDataProcessingOutput(vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getDataProcessingOutput(vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return boolean
+ */
+public boolean getParticleDataExists(VCDataIdentifier vcdID) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getParticleDataExists(simID="+vcdID.getID()+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getParticleDataExists(vcdID);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getParticleDataExists(vcdID);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (10/22/01 11:21:33 AM)
+ * @return cbit.vcell.server.DataSetController
+ * @param user cbit.vcell.server.User
+ */
+private DataSetController getRemoteDataSetController() {
+	//
+	// slave data server should have a null remote factory
+	//
+	if (remoteDataSetControllerFactory == null){
+		return null;
+	}
+	if (remoteDataSetController==null){
+		try {
+			remoteDataSetController = remoteDataSetControllerFactory.getRemoteDataSetController();
+		}catch (Throwable e){
+			sessionLog.exception(e);
+		}
+	}
+	return remoteDataSetController;
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return double[]
+ * @param varName java.lang.String
+ * @param time double
+ */
+public SimDataBlock getSimDataBlock(OutputContext outputContext, VCDataIdentifier vcdID, String varName, double time) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getSimDataBlock(simID="+vcdID.getID()+", varName="+varName+", time="+time+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getSimDataBlock(outputContext,vcdID,varName,time);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getSimDataBlock(outputContext,vcdID,varName,time);
+	}catch (DataAccessException e){
+		sessionLog.exception(e);
+		throw (DataAccessException)e;
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return double[]
+ * @param varName java.lang.String
+ * @param index int
+ */
+public org.vcell.util.document.TimeSeriesJobResults getTimeSeriesValues(OutputContext outputContext, VCDataIdentifier vcdID,org.vcell.util.document.TimeSeriesJobSpec timeSeriesJobSpec) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.getTimeSeriesValues(simID="+vcdID.getID()+", "+timeSeriesJobSpec+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.getTimeSeriesValues(outputContext,vcdID,timeSeriesJobSpec);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().getTimeSeriesValues(outputContext,vcdID,timeSeriesJobSpec);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (10/22/01 11:38:12 AM)
+ */
+private void invalidateRemoteDataSetController() {
+	this.remoteDataSetController = null;
+}
+/**
+ * This method was created in VisualAge.
+ * @param simInfo cbit.vcell.solver.SimulationInfo
+ * @exception org.vcell.util.DataAccessException The exception description.
+ */
+public ExportEvent makeRemoteFile(OutputContext outputContext,ExportSpecs exportSpecs) throws DataAccessException {
+	sessionLog.print("LocalDataSetControllerProxy.makeRemoteFile(simID="+exportSpecs.getVCDataIdentifier().getID()+","+exportSpecs+")");
+	try {
+		//
+		// try once with remote reference (if it exists)
+		// if it fails with a RemoteException, invalidate the remote reference and try local
+		//
+		DataSetController rdsc = getRemoteDataSetController();
+		if (rdsc!=null){
+			try {
+				return rdsc.makeRemoteFile(outputContext,exportSpecs);
+			}catch (RemoteException e){
+				sessionLog.exception(e);
+				invalidateRemoteDataSetController();
+			}
+		}
+		return getLocalDataSetController().makeRemoteFile(outputContext,exportSpecs);
+	}catch (Throwable e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+}
Index: src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java	(revision 12052)
+++ src/cbit/vcell/message/server/bootstrap/LocalVCellBootstrap.java	(revision 12051)
@@ -1,221 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.server.bootstrap;
-
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.PrintStream;
-import java.rmi.RemoteException;
-import java.rmi.server.UnicastRemoteObject;
-
-import org.vcell.util.DataAccessException;
-import org.vcell.util.PermissionException;
-import org.vcell.util.PropertyLoader;
-import org.vcell.util.SessionLog;
-import org.vcell.util.StdoutSessionLog;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-import org.vcell.util.document.UserInfo;
-
-import cbit.sql.ConnectionFactory;
-import cbit.sql.KeyFactory;
-import cbit.sql.OraclePoolingConnectionFactory;
-import cbit.vcell.message.VCMessagingService;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.modeldb.AdminDBTopLevel;
-import cbit.vcell.modeldb.DatabasePolicySQL;
-import cbit.vcell.modeldb.DatabaseServerImpl;
-import cbit.vcell.modeldb.LocalAdminDbServer;
-import cbit.vcell.modeldb.ResultSetCrawler;
-import cbit.vcell.mongodb.VCMongoMessage;
-import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
-import cbit.vcell.server.AdminDatabaseServer;
-import cbit.vcell.server.AuthenticationException;
-import cbit.vcell.server.LocalVCellConnection;
-import cbit.vcell.server.LocalVCellServer;
-import cbit.vcell.server.UserLoginInfo;
-import cbit.vcell.server.VCellBootstrap;
-import cbit.vcell.server.VCellConnection;
-import cbit.vcell.server.VCellServer;
-import cbit.vcell.server.WatchdogMonitor;
-import cbit.vcell.server.UserLoginInfo.DigestedPassword;
-/**
- * This class was generated by a SmartGuide.
- * 
- */
-@SuppressWarnings("serial")
-public class LocalVCellBootstrap extends UnicastRemoteObject implements VCellBootstrap {
-	private LocalVCellServer localVCellServer = null;
-	private AdminDatabaseServer adminDbServer = null;
-	private SessionLog sessionLog = new StdoutSessionLog(PropertyLoader.ADMINISTRATOR_ACCOUNT);
-/**
- * This method was created by a SmartGuide.
- * @exception java.rmi.RemoteException The exception description.
- */
-private LocalVCellBootstrap(String hostName, AdminDatabaseServer adminDbServer, VCMessagingService vcMessagingService, SimulationDatabase simulationDatabase) throws RemoteException, FileNotFoundException, DataAccessException {
-	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellBootstrap,0));
-	this.adminDbServer = adminDbServer;
-	this.localVCellServer = new LocalVCellServer(hostName, vcMessagingService, adminDbServer, simulationDatabase);
-}
-/**
- * This method was created by a SmartGuide.
- * @return cbit.vcell.server.DataSetController
- * @exception java.lang.Exception The exception description.
- */
-public VCellConnection getVCellConnection(UserLoginInfo userLoginInfo) throws DataAccessException, AuthenticationException {
-	try {
-		VCellConnection vcConn = localVCellServer.getVCellConnection(userLoginInfo);
-		if (vcConn!=null){
-			sessionLog.print("LocalVCellBootstrap.getVCellConnection(" + userLoginInfo.getUserName() +") <<<<SUCCESS>>>>");
-		}else{
-			sessionLog.print("LocalVCellBootstrap.getVCellConnection(" + userLoginInfo.getUserName() +") <<<<RETURNED NULL>>>>");
-		}
-		return vcConn;
-	}catch (RemoteException e){
-		sessionLog.exception(e);
-		throw new DataAccessException(e.getMessage());
-	}catch (FileNotFoundException e){
-		sessionLog.exception(e);
-		throw new DataAccessException(e.getMessage());
-	}catch (java.sql.SQLException e){
-		sessionLog.exception(e);
-		throw new DataAccessException(e.getMessage());
-	}
-}
-/**
- * This method was created by a SmartGuide.
- * @return cbit.vcell.server.DataSetController
- * @exception java.lang.Exception The exception description.
- */
-public VCellServer getVCellServer(User user, UserLoginInfo.DigestedPassword digestedPassword) throws DataAccessException, AuthenticationException, PermissionException {
-	//
-	// Authenticate User
-	//
-	boolean bAuthenticated = adminDbServer.getUser(user.getName(),digestedPassword).compareEqual(user);
-	if (!bAuthenticated){
-		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user +"), didn't authenticate");
-		throw new AuthenticationException("Authentication Failed for user " + user.getName());
-	}else if (user.getName().equals(PropertyLoader.ADMINISTRATOR_ACCOUNT)){
-		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user + "), returning remote copy of VCellServer");
-		return localVCellServer;
-	}else{
-		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user + "), insufficient privilege for user "+user.getName());
-		throw new PermissionException("insufficient privilege for user "+user.getName());
-	}
-}
-/**
- * Insert the method's description here.
- * Creation date: (6/8/2006 3:25:26 PM)
- * @return java.lang.String
- */
-public java.lang.String getVCellSoftwareVersion() {
-	String ver = PropertyLoader.getRequiredProperty(PropertyLoader.vcellSoftwareVersion);
-	sessionLog.print("LocalVCellBootstrap.getVCellSoftwareVersion() : " + ver);
-	return ver;
-}
-/**
- * main entrypoint - starts the application
- * @param args java.lang.String[]
- */
-public static void main(java.lang.String[] args) {
-	String MESSAGING = "messaging";
-	if (args.length != 4) {
-		System.out.println("usage: cbit.vcell.server.LocalVCellBootstrap host port messaging [logfile|-] \n");
-		System.out.println(" example -  cbit.vcell.server.LocalVCellBootstrap nrcam.vcell.uchc.edu 40099 messaging server.log");
-		System.exit(1);
-	}
-	try {
-		//
-		// Redirect output to the logfile (append if exists)
-		//
-		if (!args[3].equals("-")){
-			System.setOut(new PrintStream(new FileOutputStream(args[3], true), true));
-		}
-		
-		//
-		// Create and install a security manager
-		//
-		//System.setSecurityManager(new RMISecurityManager());
-
-		
-		Thread.currentThread().setName("Application");
-		new PropertyLoader();
-
-		//
-		// get Host and Port
-		//
-		String host = args[0];
-		if (host.equals("localhost")){
-			try {
-				host = java.net.InetAddress.getLocalHost().getHostName();
-			}catch (java.net.UnknownHostException e){
-				// do nothing, "localhost" is ok
-			}
-		}
-		int argRmiPort = Integer.parseInt(args[1]);
-		int rmiPort = PropertyLoader.getIntProperty(PropertyLoader.rmiPortRegistry, argRmiPort);
-
-		if (argRmiPort!=rmiPort){
-			System.out.println("RMI Registry using port ("+rmiPort+") from propertyfile ");
-		}
-		
-
-		VCMongoMessage.serviceStartup(ServiceName.bootstrap, new Integer(rmiPort), args);
-		//
-		// decide whether it will be a Primary or Slave Server
-		//
-		String serverConfig = args[2];
-		if (!serverConfig.equals(MESSAGING)){
-			throw new Exception("expecting '" + MESSAGING + "' as third argument");
-		}
-		//VCMessagingService vcMessagingService = new VCMessagingServiceSonicMQ();
-		VCMessagingService vcMessagingService = VCMessagingService.createInstance();
-		
-		SessionLog log = new StdoutSessionLog("local(unauthenticated)_administrator");
-		
-		ConnectionFactory conFactory = new OraclePoolingConnectionFactory(log);
-		KeyFactory keyFactory = new cbit.sql.OracleKeyFactory();
-		DatabasePolicySQL.bSilent=true;
-		//
-		// don't timeout entries, and use vcell.properties for cacheSize
-		//
-		LocalVCellConnection.setDatabaseResources(conFactory,keyFactory);
-		
-		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
-		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
-		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
-		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
-		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, log);
-		LocalVCellBootstrap localVCellBootstrap = new LocalVCellBootstrap(host+":"+rmiPort,adminDbServer,vcMessagingService,simulationDatabase);
-
-		//
-		// spawn the WatchdogMonitor (which spawns the RMI registry, and binds the localVCellBootstrap)
-		//
-		long minuteMS = 60000;
-		long monitorSleepTime = 20*minuteMS;
-		String rmiUrl = "//" + host + ":" + rmiPort + "/VCellBootstrapServer";
-		Thread watchdogMonitorThread = new Thread(new WatchdogMonitor(monitorSleepTime,rmiPort,rmiUrl,localVCellBootstrap,serverConfig),"WatchdogMonitor");
-		watchdogMonitorThread.setDaemon(true);
-		watchdogMonitorThread.setName("WatchdogMonitor");
-		watchdogMonitorThread.start();
-	} catch (Throwable e) {
-		System.out.println("LocalVCellBootstrap err: " + e.getMessage());
-		e.printStackTrace();
-	}
-}
-public UserInfo insertUserInfo(UserInfo newUserInfo) throws RemoteException,DataAccessException {
-	return adminDbServer.insertUserInfo(newUserInfo);
-}
-public void sendLostPassword(String userid) throws RemoteException,DataAccessException {
-	adminDbServer.sendLostPassword(userid);
-}
-
-}
Index: src/cbit/vcell/modeldb/LocalUserMetaDbServer.java
===================================================================
--- src/cbit/vcell/modeldb/LocalUserMetaDbServer.java	(revision 12052)
+++ src/cbit/vcell/modeldb/LocalUserMetaDbServer.java	(revision 12051)
@@ -9,10 +9,13 @@
  */
 
 package cbit.vcell.modeldb;
+import java.rmi.RemoteException;
+
 import org.vcell.util.BigString;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ObjectNotFoundException;
 import org.vcell.util.Preference;
+import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.BioModelInfo;
 import org.vcell.util.document.CurateSpec;
@@ -54,14 +57,16 @@
 /**
  * This type was created in VisualAge.
  */
-public class LocalUserMetaDbServer implements UserMetaDbServer {
+public class LocalUserMetaDbServer extends java.rmi.server.UnicastRemoteObject implements UserMetaDbServer {
 	private DatabaseServerImpl dbServerImpl = null;
 	private User user = null;
 
 /**
  * This method was created in VisualAge.
  */
-public LocalUserMetaDbServer(ConnectionFactory conFactory, KeyFactory keyFactory, User argUser, SessionLog sessionLog) throws DataAccessException {
+public LocalUserMetaDbServer(ConnectionFactory conFactory, KeyFactory keyFactory, User argUser, SessionLog sessionLog) 
+						throws RemoteException, DataAccessException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortUserMetaDbServer,0));
 	this.user = argUser;
 	dbServerImpl = new DatabaseServerImpl(conFactory,keyFactory, sessionLog);
 }
@@ -74,11 +79,11 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public VCDocumentInfo curate(CurateSpec curateSpec) throws DataAccessException, ObjectNotFoundException {
+public VCDocumentInfo curate(CurateSpec curateSpec) throws DataAccessException, ObjectNotFoundException, java.rmi.RemoteException {
 	return dbServerImpl.curate(user,curateSpec);
 }
 
-public UserRegistrationResults userRegistrationOP(UserRegistrationOP userRegistrationOP) throws DataAccessException, ObjectNotFoundException {
+public UserRegistrationResults userRegistrationOP(UserRegistrationOP userRegistrationOP) throws DataAccessException, ObjectNotFoundException, java.rmi.RemoteException {
 	return dbServerImpl.userRegistrationOP(user,userRegistrationOP);
 }
 
@@ -137,7 +142,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public TestSuiteOPResults doTestSuiteOP(TestSuiteOP tsop) throws DataAccessException {
+public TestSuiteOPResults doTestSuiteOP(TestSuiteOP tsop) throws DataAccessException, java.rmi.RemoteException {
 
 	return dbServerImpl.doTestSuiteOP(user, tsop);
 }
@@ -150,7 +155,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public ReferenceQueryResult findReferences(ReferenceQuerySpec rqs) throws DataAccessException, ObjectNotFoundException {
+public ReferenceQueryResult findReferences(ReferenceQuerySpec rqs) throws DataAccessException, ObjectNotFoundException, java.rmi.RemoteException {
 	return dbServerImpl.findReferences(user, rqs);
 }
 
@@ -430,7 +435,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public TestSuiteNew getTestSuite(java.math.BigDecimal getThisTS) throws DataAccessException {
+public TestSuiteNew getTestSuite(java.math.BigDecimal getThisTS) throws DataAccessException, java.rmi.RemoteException {
 
 	return dbServerImpl.getTestSuite(user,getThisTS);
 }
@@ -443,7 +448,7 @@
  * @exception org.vcell.util.DataAccessException The exception description.
  * @exception java.rmi.RemoteException The exception description.
  */
-public TestSuiteInfoNew[] getTestSuiteInfos() throws DataAccessException {
+public TestSuiteInfoNew[] getTestSuiteInfos() throws DataAccessException, java.rmi.RemoteException {
 
 	return dbServerImpl.getTestSuiteInfos(user);
 }
Index: src/cbit/vcell/modeldb/LocalAdminDbServer.java
===================================================================
--- src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12052)
+++ src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12051)
@@ -27,13 +27,12 @@
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatusInfo;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
-import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.server.UserLoginInfo;
 
 /**
  * This type was created in VisualAge.
  */
-public class LocalAdminDbServer implements AdminDatabaseServer {
+public class LocalAdminDbServer extends java.rmi.server.UnicastRemoteObject implements cbit.vcell.server.AdminDatabaseServer {
 	private SessionLog log = null;
 	private AdminDBTopLevel adminDbTop = null;
 
@@ -44,6 +43,7 @@
 public LocalAdminDbServer(ConnectionFactory conFactory, KeyFactory keyFactory, SessionLog sessionLog) 
 		throws RemoteException, DataAccessException {
 
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortAdminDbServer,0));
 	this.log = sessionLog;
 	DbDriver.setKeyFactory(keyFactory);
 	try {
Index: src/cbit/vcell/server/LocalVCellServer.java
===================================================================
--- src/cbit/vcell/server/LocalVCellServer.java	(revision 12052)
+++ src/cbit/vcell/server/LocalVCellServer.java	(revision 12051)
@@ -146,7 +146,7 @@
  * This method was created in VisualAge.
  * @return cbit.vcell.server.AdminDatabaseServer
  */
-private AdminDatabaseServer getAdminDatabaseServer() {
+public AdminDatabaseServer getAdminDatabaseServer() {
 	try {
 		return adminDbServer;
 	}catch (Throwable e){
@@ -234,7 +234,7 @@
  * @throws FileNotFoundException 
  * @exception java.lang.Exception The exception description.
  */
-public VCellConnection getVCellConnection(UserLoginInfo userLoginInfo) throws RemoteException, DataAccessException, AuthenticationException, FileNotFoundException, SQLException {
+VCellConnection getVCellConnection(UserLoginInfo userLoginInfo) throws RemoteException, DataAccessException, AuthenticationException, FileNotFoundException, SQLException {
 	VCellConnection localConnection = null;
 	//Authenticate User
 	User user = null;
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12052)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12051)
@@ -52,6 +52,7 @@
 import cbit.vcell.solver.SolverStatus;
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.solvers.LocalSolverController;
+import cbit.vcell.solvers.SolverController;
 
 /**
  * Insert the type's description here.
@@ -99,7 +100,7 @@
 			return "SimTaskInfo("+simKey.toString()+","+jobIndex+","+taskID+")";
 		}
 	}
-	private java.util.Hashtable<SimulationTaskInfo, LocalSolverController> solverControllerHash = new java.util.Hashtable<SimulationTaskInfo, LocalSolverController>();
+	private java.util.Hashtable<SimulationTaskInfo, SolverController> solverControllerHash = new java.util.Hashtable<SimulationTaskInfo, SolverController>();
 	private SessionLog adminSessionLog = null;
 	private LocalVCellConnection localVCellConnection = null;
 	private SimulationDatabase simulationDatabase = null;
@@ -160,7 +161,7 @@
  * @throws SolverException 
  * @throws ConfigurationException 
  */
-private LocalSolverController createNewSolverController(SimulationTask simTask, SessionLog userSessionLog) throws FileNotFoundException, DataAccessException, AuthenticationException, SQLException, ConfigurationException, SolverException  {
+private SolverController createNewSolverController(SimulationTask simTask, SessionLog userSessionLog) throws RemoteException, FileNotFoundException, DataAccessException, AuthenticationException, SQLException, ConfigurationException, SolverException  {
 	//
 	// either no appropriate slave server or THIS IS A SLAVE SERVER (can't pass the buck).
 	//
@@ -208,7 +209,7 @@
  * @throws SQLException 
  * @throws FileNotFoundException 
  */
-LocalSolverController getSolverController(SimulationTask simTask, SessionLog userSessionLog) throws FileNotFoundException, ConfigurationException, DataAccessException, AuthenticationException, SQLException, SolverException  {
+SolverController getSolverController(SimulationTask simTask, SessionLog userSessionLog) throws RemoteException, FileNotFoundException, ConfigurationException, DataAccessException, AuthenticationException, SQLException, SolverException  {
 	Simulation simulation = simTask.getSimulation();
 	VCSimulationIdentifier vcSimID = simulation.getSimulationInfo().getAuthoritativeVCSimulationIdentifier();
 	if (vcSimID == null){
@@ -218,7 +219,7 @@
 		throw new PermissionException("insufficient privilege: startSimulation()");
 	}
 	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simTask);
-	LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
+	SolverController solverController = solverControllerHash.get(simTaskInfo);
 	if (solverController==null){
 		solverController = createNewSolverController(simTask,userSessionLog);
 		solverControllerHash.put(simTaskInfo,solverController);
@@ -231,9 +232,9 @@
  * @return java.lang.String
  * @exception java.rmi.RemoteException The exception description.
  */
-public SolverStatus getSolverStatus(SimulationInfo simulationInfo, int jobIndex, int taskID) throws PermissionException, DataAccessException {
+public SolverStatus getSolverStatus(SimulationInfo simulationInfo, int jobIndex, int taskID) throws RemoteException, PermissionException, DataAccessException {
 	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simulationInfo, jobIndex, taskID);
-	LocalSolverController solverController = solverControllerHash.get(simTaskInfo);
+	SolverController solverController = solverControllerHash.get(simTaskInfo);
 	if (solverController==null){
 		return new SolverStatus(SolverStatus.SOLVER_READY, SimulationMessage.MESSAGE_SOLVER_READY);
 	}
@@ -298,7 +299,7 @@
 		SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(vcMessage);
 		simTask = simTaskMessage.getSimulationTask();
 		
-		LocalSolverController solverController = getSolverController(simTask,adminSessionLog);
+		SolverController solverController = getSolverController(simTask,adminSessionLog);
 		
 		solverController.startSimulationJob(); // can only start after updating the database is done
 		
@@ -318,7 +319,7 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(Simulation simulation, SessionLog userSessionLog) throws Exception {
+public void startSimulation(Simulation simulation, SessionLog userSessionLog) throws RemoteException, Exception {
 
 	LocalVCMessageListener localVCMessageListener = new LocalVCMessageListener(){
 		
@@ -353,7 +354,7 @@
 	try {
 		simTask = new SimulationTask(simulationDatabase.getSimulationJob(simKey,jobIndex),taskID);
 		
-		LocalSolverController solverController = getSolverController(simTask,adminSessionLog);
+		SolverController solverController = getSolverController(simTask,adminSessionLog);
 		
 		solverController.stopSimulationJob(); // can only start after updating the database is done
 		
@@ -376,7 +377,7 @@
  * @exception java.rmi.RemoteException The exception description.
  * @throws VCMessagingException 
  */
-public void stopSimulation(Simulation simulation) throws FileNotFoundException, SQLException, DataAccessException, AuthenticationException, JMSException, VCMessagingException {	
+public void stopSimulation(Simulation simulation) throws RemoteException, FileNotFoundException, SQLException, DataAccessException, AuthenticationException, JMSException, VCMessagingException {	
 	LocalVCMessageListener localVCMessageListener = new LocalVCMessageListener(){
 		
 		public void onLocalVCMessage(VCDestination destination, VCMessage objectMessage) {
Index: src/cbit/vcell/server/LocalVCellBootstrap.java
===================================================================
--- src/cbit/vcell/server/LocalVCellBootstrap.java	(revision 0)
+++ src/cbit/vcell/server/LocalVCellBootstrap.java	(revision 12051)
@@ -0,0 +1,218 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.vcell.server;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.PrintStream;
+import java.rmi.RemoteException;
+import java.rmi.server.UnicastRemoteObject;
+
+import org.vcell.util.DataAccessException;
+import org.vcell.util.PermissionException;
+import org.vcell.util.PropertyLoader;
+import org.vcell.util.SessionLog;
+import org.vcell.util.StdoutSessionLog;
+import org.vcell.util.document.KeyValue;
+import org.vcell.util.document.User;
+import org.vcell.util.document.UserInfo;
+
+import cbit.sql.ConnectionFactory;
+import cbit.sql.KeyFactory;
+import cbit.sql.OraclePoolingConnectionFactory;
+import cbit.vcell.message.VCMessagingService;
+import cbit.vcell.message.server.dispatcher.SimulationDatabase;
+import cbit.vcell.modeldb.AdminDBTopLevel;
+import cbit.vcell.modeldb.DatabasePolicySQL;
+import cbit.vcell.modeldb.DatabaseServerImpl;
+import cbit.vcell.modeldb.LocalAdminDbServer;
+import cbit.vcell.modeldb.ResultSetCrawler;
+import cbit.vcell.mongodb.VCMongoMessage;
+import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
+/**
+ * This class was generated by a SmartGuide.
+ * 
+ */
+@SuppressWarnings("serial")
+public class LocalVCellBootstrap extends UnicastRemoteObject implements VCellBootstrap {
+	private LocalVCellServer localVCellServer = null;
+	private AdminDatabaseServer adminDbServer = null;
+	private SessionLog sessionLog = new StdoutSessionLog(PropertyLoader.ADMINISTRATOR_ACCOUNT);
+/**
+ * This method was created by a SmartGuide.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+private LocalVCellBootstrap(String hostName, AdminDatabaseServer adminDbServer, VCMessagingService vcMessagingService, SimulationDatabase simulationDatabase) throws RemoteException, FileNotFoundException, DataAccessException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellBootstrap,0));
+	this.adminDbServer = adminDbServer;
+	this.localVCellServer = new LocalVCellServer(hostName, vcMessagingService, adminDbServer, simulationDatabase);
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return cbit.vcell.server.DataSetController
+ * @exception java.lang.Exception The exception description.
+ */
+public VCellConnection getVCellConnection(UserLoginInfo userLoginInfo) throws DataAccessException, AuthenticationException {
+	try {
+		VCellConnection vcConn = localVCellServer.getVCellConnection(userLoginInfo);
+		if (vcConn!=null){
+			sessionLog.print("LocalVCellBootstrap.getVCellConnection(" + userLoginInfo.getUserName() +") <<<<SUCCESS>>>>");
+		}else{
+			sessionLog.print("LocalVCellBootstrap.getVCellConnection(" + userLoginInfo.getUserName() +") <<<<RETURNED NULL>>>>");
+		}
+		return vcConn;
+	}catch (RemoteException e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}catch (FileNotFoundException e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}catch (java.sql.SQLException e){
+		sessionLog.exception(e);
+		throw new DataAccessException(e.getMessage());
+	}
+}
+/**
+ * This method was created by a SmartGuide.
+ * @return cbit.vcell.server.DataSetController
+ * @exception java.lang.Exception The exception description.
+ */
+public VCellServer getVCellServer(User user, UserLoginInfo.DigestedPassword digestedPassword) throws DataAccessException, AuthenticationException, PermissionException {
+	//
+	// Authenticate User
+	//
+	boolean bAuthenticated = false;
+	
+	try{
+		bAuthenticated = adminDbServer.getUser(user.getName(),digestedPassword).compareEqual(user);
+	}catch(RemoteException e){
+		sessionLog.exception(e);
+		throw new DataAccessException("Failure authenticating user "+user.getName()+", RemoteException: " + e.getMessage());
+	}
+	if (!bAuthenticated){
+		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user +"), didn't authenticate");
+		throw new AuthenticationException("Authentication Failed for user " + user.getName());
+	}else if (user.getName().equals(PropertyLoader.ADMINISTRATOR_ACCOUNT)){
+		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user + "), returning remote copy of VCellServer");
+		return localVCellServer;
+	}else{
+		sessionLog.print("LocalVCellBootstrap.getVCellServer(" + user + "), insufficient privilege for user "+user.getName());
+		throw new PermissionException("insufficient privilege for user "+user.getName());
+	}
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (6/8/2006 3:25:26 PM)
+ * @return java.lang.String
+ */
+public java.lang.String getVCellSoftwareVersion() {
+	String ver = PropertyLoader.getRequiredProperty(PropertyLoader.vcellSoftwareVersion);
+	sessionLog.print("LocalVCellBootstrap.getVCellSoftwareVersion() : " + ver);
+	return ver;
+}
+/**
+ * main entrypoint - starts the application
+ * @param args java.lang.String[]
+ */
+public static void main(java.lang.String[] args) {
+	String MESSAGING = "messaging";
+	if (args.length != 4) {
+		System.out.println("usage: cbit.vcell.server.LocalVCellBootstrap host port messaging [logfile|-] \n");
+		System.out.println(" example -  cbit.vcell.server.LocalVCellBootstrap nrcam.vcell.uchc.edu 40099 messaging server.log");
+		System.exit(1);
+	}
+	try {
+		//
+		// Redirect output to the logfile (append if exists)
+		//
+		if (!args[3].equals("-")){
+			System.setOut(new PrintStream(new FileOutputStream(args[3], true), true));
+		}
+		
+		//
+		// Create and install a security manager
+		//
+		//System.setSecurityManager(new RMISecurityManager());
+
+		
+		Thread.currentThread().setName("Application");
+		new PropertyLoader();
+
+		//
+		// get Host and Port
+		//
+		String host = args[0];
+		if (host.equals("localhost")){
+			try {
+				host = java.net.InetAddress.getLocalHost().getHostName();
+			}catch (java.net.UnknownHostException e){
+				// do nothing, "localhost" is ok
+			}
+		}
+		int argRmiPort = Integer.parseInt(args[1]);
+		int rmiPort = PropertyLoader.getIntProperty(PropertyLoader.rmiPortRegistry, argRmiPort);
+
+		if (argRmiPort!=rmiPort){
+			System.out.println("RMI Registry using port ("+rmiPort+") from propertyfile ");
+		}
+		
+
+		VCMongoMessage.serviceStartup(ServiceName.bootstrap, new Integer(rmiPort), args);
+		//
+		// decide whether it will be a Primary or Slave Server
+		//
+		String serverConfig = args[2];
+		if (!serverConfig.equals(MESSAGING)){
+			throw new Exception("expecting '" + MESSAGING + "' as third argument");
+		}
+		//VCMessagingService vcMessagingService = new VCMessagingServiceSonicMQ();
+		VCMessagingService vcMessagingService = VCMessagingService.createInstance();
+		
+		SessionLog log = new StdoutSessionLog("local(unauthenticated)_administrator");
+		
+		ConnectionFactory conFactory = new OraclePoolingConnectionFactory(log);
+		KeyFactory keyFactory = new cbit.sql.OracleKeyFactory();
+		DatabasePolicySQL.bSilent=true;
+		//
+		// don't timeout entries, and use vcell.properties for cacheSize
+		//
+		LocalVCellConnection.setDatabaseResources(conFactory,keyFactory);
+		
+		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
+		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
+		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
+		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
+		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, log);
+		LocalVCellBootstrap localVCellBootstrap = new LocalVCellBootstrap(host+":"+rmiPort,adminDbServer,vcMessagingService,simulationDatabase);
+
+		//
+		// spawn the WatchdogMonitor (which spawns the RMI registry, and binds the localVCellBootstrap)
+		//
+		long minuteMS = 60000;
+		long monitorSleepTime = 20*minuteMS;
+		String rmiUrl = "//" + host + ":" + rmiPort + "/VCellBootstrapServer";
+		Thread watchdogMonitorThread = new Thread(new WatchdogMonitor(monitorSleepTime,rmiPort,rmiUrl,localVCellBootstrap,serverConfig),"WatchdogMonitor");
+		watchdogMonitorThread.setDaemon(true);
+		watchdogMonitorThread.setName("WatchdogMonitor");
+		watchdogMonitorThread.start();
+	} catch (Throwable e) {
+		System.out.println("LocalVCellBootstrap err: " + e.getMessage());
+		e.printStackTrace();
+	}
+}
+public UserInfo insertUserInfo(UserInfo newUserInfo) throws RemoteException,DataAccessException {
+	return adminDbServer.insertUserInfo(newUserInfo);
+}
+public void sendLostPassword(String userid) throws RemoteException,DataAccessException {
+	adminDbServer.sendLostPassword(userid);
+}
+
+}
Index: src/cbit/vcell/server/VCellServer.java
===================================================================
--- src/cbit/vcell/server/VCellServer.java	(revision 12052)
+++ src/cbit/vcell/server/VCellServer.java	(revision 12051)
@@ -21,6 +21,14 @@
 
 /**
  * This method was created in VisualAge.
+ * @return cbit.vcell.server.AdminDatabaseServer
+ * @exception java.rmi.RemoteException The exception description.
+ */
+AdminDatabaseServer getAdminDatabaseServer() throws RemoteException;
+
+
+/**
+ * This method was created in VisualAge.
  * @return CacheStatus
  */
 CacheStatus getCacheStatus() throws RemoteException;
Index: src/cbit/vcell/server/LocalVCellConnection.java
===================================================================
--- src/cbit/vcell/server/LocalVCellConnection.java	(revision 12052)
+++ src/cbit/vcell/server/LocalVCellConnection.java	(revision 12051)
@@ -11,7 +11,8 @@
 package cbit.vcell.server;
 import java.io.FileNotFoundException;
 import java.net.URL;
-import java.sql.SQLException;
+import java.rmi.RemoteException;
+import java.rmi.server.UnicastRemoteObject;
 
 import org.vcell.util.BeanUtils;
 import org.vcell.util.DataAccessException;
@@ -43,7 +44,7 @@
  * @author: Jim Schaff.
  */
 @SuppressWarnings("serial")
-public class LocalVCellConnection implements VCellConnection, ExportListener, DataJobListener {
+public class LocalVCellConnection extends UnicastRemoteObject implements VCellConnection, ExportListener, DataJobListener {
 	private SimulationController simulationController = null;
 	private SimulationControllerImpl simulationControllerImpl = null;
 	private ExportServiceImpl exportServiceImpl = null;
@@ -70,7 +71,8 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public LocalVCellConnection(UserLoginInfo userLoginInfo, String host, SessionLog sessionLog, SimulationDatabase simulationDatabase, DataSetControllerImpl dataSetControllerImpl, ExportServiceImpl exportServiceImpl) throws SQLException, FileNotFoundException {
+public LocalVCellConnection(UserLoginInfo userLoginInfo, String host, SessionLog sessionLog, SimulationDatabase simulationDatabase, DataSetControllerImpl dataSetControllerImpl, ExportServiceImpl exportServiceImpl) throws RemoteException, java.sql.SQLException, FileNotFoundException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellConnection,0));
 	this.userLoginInfo = userLoginInfo;
 	this.fieldHost = host;
 	this.fieldSessionLog = sessionLog;
@@ -111,7 +113,7 @@
  * @return cbit.vcell.server.DataSetController
  * @exception java.lang.Exception The exception description.
  */
-public DataSetController getDataSetController() throws DataAccessException {
+public DataSetController getDataSetController() throws RemoteException, DataAccessException {
 	getSessionLog().print("LocalVCellConnection.getDataSetController()");
 	if (localDataSetController == null) {
 		localDataSetController = new LocalDataSetController(this, getSessionLog(), dataSetControllerImpl, exportServiceImpl, getUserLoginInfo().getUser());
@@ -159,7 +161,7 @@
  * @param mathDesc cbit.vcell.math.MathDescription
  * @exception java.rmi.RemoteException The exception description.
  */
-public SimulationController getSimulationController() {
+public SimulationController getSimulationController() throws RemoteException {
 	if (simulationController == null){
 		simulationController = new LocalSimulationController(getUserLoginInfo().getUser(),simulationControllerImpl,getSessionLog());
 	}
@@ -199,7 +201,7 @@
  * @param userid java.lang.String
  * @exception java.rmi.RemoteException The exception description.
  */
-public UserMetaDbServer getUserMetaDbServer() throws DataAccessException {
+public UserMetaDbServer getUserMetaDbServer() throws RemoteException, DataAccessException {
 	getSessionLog().print("LocalVCellConnection.getUserMetaDbServer(" + getUserLoginInfo().getUser() + ")");
 	if (userMetaDbServer == null) {
 		userMetaDbServer = new LocalUserMetaDbServer(conFactory, keyFactory, getUserLoginInfo().getUser(), getSessionLog());
@@ -212,7 +214,7 @@
  * This method was created in VisualAge.
  * @param conFactory cbit.sql.ConnectionFactory
  */
-public static void setDatabaseResources(ConnectionFactory argConFactory, KeyFactory argKeyFactory) {
+static void setDatabaseResources(ConnectionFactory argConFactory, KeyFactory argKeyFactory) {
 	conFactory = argConFactory;
 	keyFactory = argKeyFactory;
 }
@@ -225,16 +227,16 @@
 }
 
 
-public void sendErrorReport(Throwable exception) {
+public void sendErrorReport(Throwable exception) throws RemoteException {
 	BeanUtils.sendErrorReport(exception);
 }
 
-public MessageEvent[] getMessageEvents() {
+public MessageEvent[] getMessageEvents() throws RemoteException {
 	return messageService.getMessageEvents();
 }
 
 
-public void reportPerformanceMonitorEvent(PerformanceMonitorEvent performanceMonitorEvent) {
+public void reportPerformanceMonitorEvent(PerformanceMonitorEvent performanceMonitorEvent) throws RemoteException {
 	performanceMonitoringFacility.performanceMonitorEvent(performanceMonitorEvent);
 	
 }
Index: src/cbit/vcell/server/LocalSimulationController.java
===================================================================
--- src/cbit/vcell/server/LocalSimulationController.java	(revision 12052)
+++ src/cbit/vcell/server/LocalSimulationController.java	(revision 12051)
@@ -9,18 +9,22 @@
  */
 
 package cbit.vcell.server;
+import java.rmi.*;
+
 import org.vcell.util.DataAccessException;
+import org.vcell.util.ObjectNotFoundException;
+import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.User;
 
-import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.VCSimulationIdentifier;
+import cbit.vcell.message.server.dispatcher.SimulationDatabase;
+import cbit.vcell.solver.*;
 /**
  * Insert the type's description here.
  * Creation date: (6/28/01 12:55:29 PM)
  * @author: Jim Schaff
  */
-public class LocalSimulationController implements SimulationController {
+public class LocalSimulationController extends java.rmi.server.UnicastRemoteObject implements SimulationController {
 	private SessionLog sessionLog = null;
 	private SimulationControllerImpl simulationControllerImpl = null;
 	private User user = null;
@@ -29,7 +33,8 @@
  * LocalSimulationController constructor comment.
  * @exception java.rmi.RemoteException The exception description.
  */
-protected LocalSimulationController(User user, SimulationControllerImpl simulationControllerImpl, SessionLog argSessionLog) {
+protected LocalSimulationController(User user, SimulationControllerImpl simulationControllerImpl, SessionLog argSessionLog) throws java.rmi.RemoteException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortSimulationController,0));
 	this.sessionLog = argSessionLog;
 	this.simulationControllerImpl = simulationControllerImpl;
 	this.user = user;
@@ -40,11 +45,14 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) {
+public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws java.rmi.RemoteException {
 	sessionLog.print("LocalSimulationController.startSimulation(simInfo="+vcSimulationIdentifier+")");
 	try {
 		Simulation simulation = simulationControllerImpl.getSimulationDatabase().getSimulation(user,vcSimulationIdentifier.getSimulationKey());
 		simulationControllerImpl.startSimulation(simulation,sessionLog);
+	}catch (RemoteException e){
+		sessionLog.exception(e);
+		throw e;
 	}catch (DataAccessException e){
 		sessionLog.exception(e);
 		throw new RuntimeException(e.getMessage());
@@ -59,11 +67,14 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void stopSimulation(VCSimulationIdentifier vcSimulationIdentifier) {
+public void stopSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws java.rmi.RemoteException {
 	sessionLog.print("LocalSimulationController.getSolverStatus(simInfo="+vcSimulationIdentifier+")");
 	try {
 		Simulation simulation = simulationControllerImpl.getSimulationDatabase().getSimulation(user,vcSimulationIdentifier.getSimulationKey());
 		simulationControllerImpl.stopSimulation(simulation);
+	}catch (RemoteException e){
+		sessionLog.exception(e);
+		throw e;
 	}catch (DataAccessException e){
 		sessionLog.exception(e);
 		throw new RuntimeException(e.getMessage());
Index: src/cbit/vcell/server/AdminDatabaseServer.java
===================================================================
--- src/cbit/vcell/server/AdminDatabaseServer.java	(revision 12052)
+++ src/cbit/vcell/server/AdminDatabaseServer.java	(revision 12051)
@@ -10,6 +10,8 @@
 
 package cbit.vcell.server;
 
+import java.rmi.*;
+
 import org.vcell.util.DataAccessException;
 import org.vcell.util.document.ExternalDataIdentifier;
 import org.vcell.util.document.KeyValue;
@@ -23,9 +25,9 @@
 /**
  * This type was created in VisualAge.
  */
-public interface AdminDatabaseServer {
+public interface AdminDatabaseServer extends java.rmi.Remote {
 	
-ExternalDataIdentifier[] getExternalDataIdentifiers(User fielddataOwner) throws DataAccessException;
+ExternalDataIdentifier[] getExternalDataIdentifiers(User fielddataOwner) throws RemoteException, DataAccessException;
 
 /**
  * Insert the method's description here.
@@ -36,12 +38,12 @@
  * @exception java.rmi.RemoteException The exception description.
  */
 
-SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws DataAccessException;
+SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws RemoteException, DataAccessException;
 
-SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException;
+SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws RemoteException, DataAccessException;
 
 
-java.util.List<SimpleJobStatus> getSimulationJobStatus(String conditions) throws DataAccessException;
+java.util.List<SimpleJobStatus> getSimulationJobStatus(String conditions) throws RemoteException, DataAccessException;
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:33:54 PM)
@@ -50,42 +52,42 @@
  * @param userOnly cbit.vcell.server.User
  * @exception java.rmi.RemoteException The exception description.
  */
-SimulationJobStatus[] getSimulationJobStatus(boolean bActiveOnly, User userOnly) throws DataAccessException;
+SimulationJobStatus[] getSimulationJobStatus(boolean bActiveOnly, User userOnly) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-User getUser(String userid) throws DataAccessException;
+User getUser(String userid) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-User getUser(String userid, UserLoginInfo.DigestedPassword digestedPassword) throws DataAccessException;
+User getUser(String userid, UserLoginInfo.DigestedPassword digestedPassword) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-User getUserFromSimulationKey(KeyValue simKey) throws DataAccessException;
+User getUserFromSimulationKey(KeyValue simKey) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-UserInfo getUserInfo(KeyValue userKey) throws DataAccessException;
+UserInfo getUserInfo(KeyValue userKey) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-UserInfo[] getUserInfos() throws DataAccessException;
+UserInfo[] getUserInfos() throws RemoteException, DataAccessException;
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:30:21 PM)
@@ -93,14 +95,14 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws RemoteException, DataAccessException, UpdateSynchronizationException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-org.vcell.util.document.UserInfo insertUserInfo(org.vcell.util.document.UserInfo newUserInfo) throws DataAccessException;
+org.vcell.util.document.UserInfo insertUserInfo(org.vcell.util.document.UserInfo newUserInfo) throws RemoteException, DataAccessException;
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:30:21 PM)
@@ -108,15 +110,15 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws RemoteException, DataAccessException, UpdateSynchronizationException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
  * @param userid java.lang.String
  * @param password java.lang.String
  */
-org.vcell.util.document.UserInfo updateUserInfo(org.vcell.util.document.UserInfo newUserInfo) throws DataAccessException;
+org.vcell.util.document.UserInfo updateUserInfo(org.vcell.util.document.UserInfo newUserInfo) throws RemoteException, DataAccessException;
 
-void sendLostPassword(String userid) throws DataAccessException;
-void updateUserStat(UserLoginInfo userLoginInfo) throws DataAccessException;
+void sendLostPassword(String userid) throws RemoteException,DataAccessException;
+void updateUserStat(UserLoginInfo userLoginInfo) throws RemoteException,DataAccessException;
 }
Index: src/cbit/vcell/solvers/SolverController.java
===================================================================
--- src/cbit/vcell/solvers/SolverController.java	(revision 0)
+++ src/cbit/vcell/solvers/SolverController.java	(revision 12051)
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.vcell.solvers;
+import cbit.vcell.solver.*;
+import java.rmi.*;
+/**
+ * This interface was generated by a SmartGuide.
+ * 
+ */
+public interface SolverController extends java.rmi.Remote {
+/**
+ * This method was created in VisualAge.
+ * @return java.lang.String
+ * @exception java.rmi.RemoteException The exception description.
+ */
+String getHost() throws RemoteException, org.vcell.util.DataAccessException;
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @return java.lang.String
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public double getProgress() throws RemoteException, SolverNotRunningException, org.vcell.util.DataAccessException;	
+
+
+///**
+// * This method was created by a SmartGuide.
+// * @return cbit.vcell.solver.Simulation
+// */
+//public cbit.vcell.solver.SimulationJob getSimulationJob() throws RemoteException, org.vcell.util.DataAccessException;
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @return java.lang.String
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public SolverStatus getSolverStatus() throws RemoteException, org.vcell.util.DataAccessException;	
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public void startSimulationJob() throws RemoteException, SimExecutionException, org.vcell.util.DataAccessException;
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public void stopSimulationJob() throws RemoteException, org.vcell.util.DataAccessException;
+}
Index: src/cbit/vcell/solvers/LocalSolverController.java
===================================================================
--- src/cbit/vcell/solvers/LocalSolverController.java	(revision 12052)
+++ src/cbit/vcell/solvers/LocalSolverController.java	(revision 12051)
@@ -10,11 +10,13 @@
 
 package cbit.vcell.solvers;
 import java.io.File;
+import java.rmi.RemoteException;
 import java.util.HashSet;
 
 import javax.swing.event.EventListenerList;
 
 import org.vcell.util.DataAccessException;
+import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
 import cbit.rmi.event.WorkerEvent;
@@ -32,7 +34,7 @@
  * This type was created in VisualAge.
  */
 @SuppressWarnings("serial")
-public class LocalSolverController implements SolverListener {
+public class LocalSolverController extends java.rmi.server.UnicastRemoteObject implements SolverController, SolverListener {
 	private SolverControllerImpl solverControllerImpl = null;
 	private EventListenerList listenerList = new EventListenerList();
 	private SessionLog log = null;
@@ -50,7 +52,8 @@
  * @exception java.rmi.RemoteException The exception description.
  * @throws SolverException 
  */
-public LocalSolverController(LocalVCellConnection vcellConnection, SessionLog sessionLog, SimulationTask simTask, File dataDirectory) throws SolverException {
+public LocalSolverController(LocalVCellConnection vcellConnection, SessionLog sessionLog, SimulationTask simTask, File dataDirectory) throws RemoteException, SolverException {
+	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortSolverController,0));
 	this.log = sessionLog;
 	this.vcConn = vcellConnection;
 	solverControllerImpl = new SolverControllerImpl(vcellConnection, sessionLog, simTask, dataDirectory);
Index: src/cbit/vcell/client/LocalDataSetControllerProvider.java
===================================================================
--- src/cbit/vcell/client/LocalDataSetControllerProvider.java	(revision 12052)
+++ src/cbit/vcell/client/LocalDataSetControllerProvider.java	(revision 12051)
@@ -10,6 +10,8 @@
 
 package cbit.vcell.client;
 
+import java.rmi.RemoteException;
+
 import org.vcell.util.DataAccessException;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.TimeSeriesJobResults;
@@ -51,54 +53,54 @@
 			this.dataServerImpl = new DataServerImpl(log, dsci, esi);
 		}
 
-		public FieldDataFileOperationResults fieldDataFileOperation(FieldDataFileOperationSpec fieldDataFileOperationSpec) throws DataAccessException {
+		public FieldDataFileOperationResults fieldDataFileOperation(FieldDataFileOperationSpec fieldDataFileOperationSpec) throws RemoteException, DataAccessException {
 			return dataServerImpl.fieldDataFileOperation(user,fieldDataFileOperationSpec);
 		}
 
-		public DataIdentifier[] getDataIdentifiers(OutputContext outputContext,	VCDataIdentifier vcdataID) throws DataAccessException {
+		public DataIdentifier[] getDataIdentifiers(OutputContext outputContext,	VCDataIdentifier vcdataID) throws RemoteException, DataAccessException {
 			return dataServerImpl.getDataIdentifiers(outputContext, user, vcdataID);
 			}
 
-		public double[] getDataSetTimes(VCDataIdentifier vcdataID) throws DataAccessException {
+		public double[] getDataSetTimes(VCDataIdentifier vcdataID) throws RemoteException, DataAccessException {
 			return dataServerImpl.getDataSetTimes(user, vcdataID);
 		}
 
-		public AnnotatedFunction[] getFunctions(OutputContext outputContext, VCDataIdentifier vcdataID) throws DataAccessException {
+		public AnnotatedFunction[] getFunctions(OutputContext outputContext, VCDataIdentifier vcdataID) throws DataAccessException,	RemoteException {
 			return dataServerImpl.getFunctions(outputContext,user, vcdataID);
 		}
 
-		public PlotData getLineScan(OutputContext outputContext, VCDataIdentifier vcdataID, String varName, double time, SpatialSelection spatialSelection) throws DataAccessException {
+		public PlotData getLineScan(OutputContext outputContext, VCDataIdentifier vcdataID, String varName, double time, SpatialSelection spatialSelection) throws RemoteException, DataAccessException {
 			return dataServerImpl.getLineScan(outputContext, user, vcdataID, varName, time, spatialSelection);
 			}
 
-		public CartesianMesh getMesh(VCDataIdentifier vcdataID) throws DataAccessException {
+		public CartesianMesh getMesh(VCDataIdentifier vcdataID) throws RemoteException, DataAccessException {
 			return dataServerImpl.getMesh(user, vcdataID);
 			}
 
-		public ODESimData getODEData(VCDataIdentifier vcdataID)	throws DataAccessException {
+		public ODESimData getODEData(VCDataIdentifier vcdataID)	throws DataAccessException, RemoteException {
 			return dataServerImpl.getODEData(user, vcdataID);
 		}
 
-		public ParticleDataBlock getParticleDataBlock(VCDataIdentifier vcdataID, double time) throws DataAccessException {
+		public ParticleDataBlock getParticleDataBlock(VCDataIdentifier vcdataID, double time) throws DataAccessException, RemoteException {
 			return dataServerImpl.getParticleDataBlock(user, vcdataID, time);
 		}
 
-		public DataProcessingOutput getDataProcessingOutput(VCDataIdentifier vcdataID) throws DataAccessException {
+		public DataProcessingOutput getDataProcessingOutput(VCDataIdentifier vcdataID) throws DataAccessException, RemoteException {
 			return dataServerImpl.getDataProcessingOutput(user, vcdataID);		}
 
-		public boolean getParticleDataExists(VCDataIdentifier vcdataID) throws DataAccessException {
+		public boolean getParticleDataExists(VCDataIdentifier vcdataID) throws DataAccessException, RemoteException {
 			return dataServerImpl.getParticleDataExists(user, vcdataID);
 			}
 
-		public SimDataBlock getSimDataBlock(OutputContext outputContext, VCDataIdentifier vcdataID, String varName, double time) throws DataAccessException { 		
+		public SimDataBlock getSimDataBlock(OutputContext outputContext, VCDataIdentifier vcdataID, String varName, double time) throws RemoteException, DataAccessException { 		
 			return dataServerImpl.getSimDataBlock(outputContext, user, vcdataID, varName, time);		
 			}
 
-		public TimeSeriesJobResults getTimeSeriesValues(OutputContext outputContext, VCDataIdentifier vcdataID, TimeSeriesJobSpec timeSeriesJobSpec) throws DataAccessException {
+		public TimeSeriesJobResults getTimeSeriesValues(OutputContext outputContext, VCDataIdentifier vcdataID, TimeSeriesJobSpec timeSeriesJobSpec) throws RemoteException, DataAccessException {
 			return dataServerImpl.getTimeSeriesValues(outputContext, user, vcdataID, timeSeriesJobSpec);
 		}
 
-		public ExportEvent makeRemoteFile(OutputContext outputContext, ExportSpecs exportSpecs) throws DataAccessException {
+		public ExportEvent makeRemoteFile(OutputContext outputContext, ExportSpecs exportSpecs) throws DataAccessException, RemoteException {
 			return dataServerImpl.makeRemoteFile(outputContext,user, exportSpecs);
 		}
 	}
Index: src/org/vcell/util/BeanUtils.java
===================================================================
--- src/org/vcell/util/BeanUtils.java	(revision 12052)
+++ src/org/vcell/util/BeanUtils.java	(revision 12051)
@@ -819,9 +819,9 @@
 		Transport.send(msg);
 	}
 
-	public static void sendErrorReport(Throwable exception) throws RuntimeException {
+	public static void sendErrorReport(Throwable exception) throws RemoteException {
 		if (exception == null) {
-			throw new RuntimeException("Send Error Report, exception is null");
+			throw new RemoteException("Send Error Report, exception is null");
 		}
 		String smtpHost = PropertyLoader.getProperty(PropertyLoader.vcellSMTPHostName, null);
 		if (smtpHost == null) {
@@ -843,10 +843,10 @@
 			BeanUtils.sendSMTP(smtpHost, Integer.parseInt(smtpPort), from, to, subject, content);
 		} catch (AddressException e) {
 			e.printStackTrace();
-			throw new RuntimeException(e.getMessage());
+			throw new RemoteException(e.getMessage());
 		} catch (MessagingException e) {
 			e.printStackTrace();
-			throw new RuntimeException(e.getMessage());
+			throw new RemoteException(e.getMessage());
 		}
 	}
 
