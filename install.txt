install.txt

=======================================================================
=======================================================================
=============== Standalone Installation ===============================
=======================================================================
=======================================================================


VCell Client
============

create a vcell.properties from vcell.properties.standalone_template (e.g. edit to specify installation directory).

run VCellClientTest

usage: VCellClientTest ( (-local [userid password]) | (-open filename) ) -Dvcell.propertyfile="installdir/vcell.properties" -Xmx500M




=======================================================================
=======================================================================
=============== Distributed Installation ==============================
=======================================================================
=======================================================================

A Virtual Cell multi-user distributed application requires 
- a JDBC compliant relational database (e.g. Oracle 11g - Oracle)
- a JMS compliant message oriented middleware (MOM) (SonicMQ - Progress Software)
- a PBS-like scheduling middleware (Torque, Maui, Rocks cluster)

The VCell services consist of a

1) VCell client application.
2) Bootstrap service (authentication), VCell Connection - provides RPC and messaging services to the client.
3) VCell Services (Simulation dispatcher, Database, Simulation Data, Simulation Data Exporter, Simulation launcher).
4) Cluster Managment Console

1) VCell Client
===============
cbit.vcell.client.test.VCellClientTest ( ((-local|host[:port]) [userid password]) | (-open filename) ) -Dvcell.propertyfile="installdir/vcell.properties" -Xmx500M

2) VCell Bootstrap services
===========================
create a vcell.properties from vcell.properties.server_template (e.g. edit to specify installation directory).

cbit.vcell.server.LocalVCellBootstrap host port messaging [logfile|-] -Dvcell.propertyfile="installdir/vcell.properties" -Xmx500M

3) VCell Cluster services
=========================
create a vcell.properties from vcell.properties.server_template (e.g. edit to specify installation directory).

cbit.vcell.messaging.server.SimulationWorker {-local|-pbs} serviceOrdinal memorySizeMB [logdir]
cbit.vcell.messaging.server.DatabaseServer serviceOrdinal [logdir]
cbit.vcell.messaging.server.SimDataServer serviceOrdinal [EXPORTONLY] [logdir]
cbit.vcell.messaging.server.SimulationDispatcher serviceOrdinal [logdir]

4) Server management console
============================
cbit.vcell.messaging.admin.ServerManageConsole


=======================================================================
=============== ORACLE DATABASE CONFIGURATION =========================
=======================================================================
 
Database creation commands (in sqlplus or other database client - as user "sys").
 
oracle-sql> CREATE USER VCELL
oracle-sql> PROFILE "DEFAULT"
oracle-sql> IDENTIFIED BY "password" DEFAULT TABLESPACE "USERS"
oracle-sql> TEMPORARY TABLESPACE "TEMP"
oracle-sql> ACCOUNT UNLOCK;

oracle-sql> GRANT UNLIMITED TABLESPACE TO VCELL;
oracle-sql> GRANT "CONNECT" TO VCELL;
oracle-sql> GRANT "RESOURCE" TO VCELL;
oracle-sql> ALTER USER VCELL DEFAULT ROLE  ALL;
oracle-sql> COMMIT;

To create the VCell tables run SQLCreateAllTables either command-line with the proper classpath or via the following.

java> cbit.vcell.modeldb.SQLCreateAllTables.main("oracle","database_host", "database_sid", "vcell", "vcell_database_password");

in "vcell.properties" file:

vcell.server.dbConnectURL = jdbc:oracle:thin:@database_host:1521:database_sid
vcell.server.dbDriverName = oracle.jdbc.driver.OracleDriver
vcell.server.dbUserid = vcell
vcell.server.dbPassword = vcell_database_password


=======================================================================
=============== SONICMQ MESSAGING SERVER CONFIGURATION ================
=======================================================================

create queues: 

fileChannel, simReq, dataReq, dbReq, simJob, workerEvent, lsfJobInfo

create topics:

serviceControl, daemonControl, clientStatus

in "vcell.properties" file:

vcell.jms.provider = SonicMQ
vcell.jms.url = tcp://jms_host:2506
vcell.jms.user = jms_user
vcell.jms.password = jms_password
vcell.jms.queue.fileChannel = fileChannel
vcell.jms.queue.simReq = simReq
vcell.jms.queue.dataReq = simDataReq
vcell.jms.queue.dbReq = dbReq
vcell.jms.queue.simJob = simJob
vcell.jms.queue.workerEvent = workerEvent
vcell.jms.queue.lsfJobInfo = lsfJobInfo
vcell.jms.topic.serviceControl = serviceControl
vcell.jms.topic.daemonControl = daemonControl
vcell.jms.topic.clientStatus = clientStatus
vcell.jms.workerPrefetchCount = 1
vcell.jms.servicePrefetchCount = 1
