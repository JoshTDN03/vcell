#!/bin/bash

#
# set to 0 for print statements, 1 for quietier mode
#
DEBUG_FLAG=1
SSH_OPT='-o ConnectTimeout=60'

debug( ) {
	return $DEBUG_FLAG 
}
ndebug( ) {
	debug && return 1 || return 0
}

declare -A filedesc
filedesc=(
	["servicepid"]="master"
	["highpid"]="bootstrap (rmi) high"
	["htpppid"]="bootstrap (rmi) low (http)"
)

# set $pid $host variables from file
# param [pid filename]
hostAndPid( ) {
	read -ra FIELDS <<< `cat $1`
	pid="${FIELDS[0]}"
	host="${FIELDS[1]}"
	if [ -z $host ]; then 
		echo "error parsing $1, aborting"
		exit 1
	fi
}

# check process running 
# param [pid filename]
# param (optional) time delay for checking
# param (optional) verbose 
checkRunning( ) {
	if [ ! -e $1 ]; then
		echo "no file $1 for ${filedesc[$1]} process found" 
		return 1
	fi
	ndebug || echo "checking pidfile $1" 
	hostAndPid $1
	if debug || [  ! -z "$2" ] ; then 
	echo -n "checking ${filedesc[$1]} process $pid on $host ..."
	fi
	ssh $SSH_OPT $host ps $pid >/dev/null
	stat=$?
	if debug || [  ! -z "$2" ] ; then 
		[ $stat -eq 0 ] || echo -n "not " 
		echo "running"
	fi
	return $stat
}

# verify process is not running if and only if pidfile exists
# exit script if it is 
checkOff( ) {
	if [ ! -e $1 ] ; then return 0; fi
	if checkRunning $1 ; then
		echo "${filedesc[$1]} process $pid running on $host, aborting"	
		exit 9
	fi
}

# kill running  process, first with default signal, then with SIGKILL (-9) if that fails
# param [pid filename]
# param (optional) verbose 
killRunning( ) {
	hostAndPid $1
	if debug || [  ! -z "$2" ] ; then 
		echo "commencing kill sequence for ${filedesc[$1]} process $pid running on $host"
	fi
	if ! checkRunning $1 ; then
		echo $1 process $pid on $host not running
		return 0
	fi
	if debug || [  ! -z "$2" ] ; then 
		echo "sending ${filedesc[$1]} process $pid running on $host default kill signal"
	fi
	ssh $SSH_OPT vcell@$host kill $pid
	# check if it died
	(( n = 0 )) 
	while checkRunning $1; do
		sleep 1
		(( n += 1 ))
		if [[ $n -ge 5 ]]; then
			break
		fi
	done
	if checkRunning $1 ; then
		if debug || [  ! -z "$2" ] ; then 
			 echo "kill failed, killing with -9"
		fi
		ssh $SSH_OPT vcell@$host kill -9 $pid
		checkOff $1
	else
		ndebug || echo "..killed"
	fi
}

#
# set site variables, verify configs and log directories exist
#
setsite( )  {
	SITE=$1
	CONFIGSDIR="/share/apps/vcell2/deployed/$SITE/configs/"
	LOGDIR="/share/apps/vcell2/logs/$SITE/"
	
	if [ ! -d $CONFIGSDIR ]; then
		echo "Invalid site $SITE, no configs directory $CONFIGSDIR"
		exit 1
	fi
	if [ ! -d $LOGDIR ]; then 
		echo "Invalid site $SITE, no log directory $LOGDIR"
		exit 1
	fi
}

#
# verify $SITE et. al. set
# exit script if any not set
#
checksite( ) { 
	if [ -z "$SITE" ]; then 
		echo SITE not set
		exit 1
	fi
	if [ -z "$CONFIGSDIR" ]; then 
		echo CONFIGSDIR not set
		exit 1
	fi
	if [ -z "$LOGDIR" ]; then 
		echo LOGDIR not set
		exit 1
	fi
}

#
# start master 
# prereq $SITE set 
#
startmaster( ) {
	checksite
	echo "process $$ starting master $SITE on vcellservice"
	ssh $SSH_OPT vcell@vcellservice << EOSTART
	cd $CONFIGSDIR 
	./vcellservice  >/tmp/vstartlog$$ 2>&1
EOSTART
}

#
# start highbootstrap 
# prereq $SITE set 
#
starthigh( ) {
	checksite
	rhost=$(rmiHost)
	echo "starting rmi high $SITE on $rhost"
	ssh $SSH_OPT vcell@$rhost << EOHIGH
	cd $CONFIGSDIR 
	./vcellbootstrap_high  >/tmp/vstartloghi$$ 2>&1
EOHIGH
#
# start lowbootstrap 
# prereq $SITE set 
#
}
startlow( ) {
	checksite
	rhost=$(rmiHost)
	echo "starting rmi low $SITE on $rhost"
	ssh $SSH_OPT vcell@$rhost << EOLOW
	cd $CONFIGSDIR 
	./vcellbootstrap_http  >/tmp/vstartloglo$$ 2>&1
EOLOW
}

#
# find rmi hostname for site
# prereq $SITE set 
#
rmiHost( ) {
	checksite
	case $SITE in
		rel)
			echo "rmi-rel"
			;;
		beta)
			echo "rmi-beta"
			;;
		*)
			echo "rmi-alpha"
	esac
}

#
# decide if site runs a low port bootstrap or not 
# prereq $SITE set 
#
runsLow( ) {
	checksite
	case $SITE in
		rel)
			return 0
			;;
		beta)
			return 0
			;;
		*)
			return 1	
	esac
}
#
# check for quit command
#
checkexitscript( ) {
	if [ "$1" == "exit_script" ]; then
		exit 0
	fi
}

#
# param seconds to wait
# param description
#
activepause( ) {
	echo -n "pausing prior to ${filedesc[$2]}"
	for (( w = 0 ; w < $1 ; w++)); do
		echo -n '.'
		sleep 1
	done
	echo
}

#
# wait for a process to be running
# param seconds to wait
# param pidfile 
waitforproc( ) {
	ndebug || "waiting up to $1 for ${filedesc[$2]} process running" 
	for (( w = 0 ; w < $1; w++)); do
		checkRunning $2 
		stat=$?
		if [ $stat -eq 0 ]; then break; fi
		sleep 1
	done
	if  [ $stat -ne 0 ]; then
		echo "${filedesc[$2]} start failed, aborting"
		exit 50
	fi
}

#
# execute checkalive script
# param level 1 or 2
# param how long to wait 
#
#function verifyAlive( ) {
#	checksite
#	case $1 in
#		1)
#		local arg=RMI_ONLY_0
#		;;
#		2)
#		local arg=INFOS_2
#		;;
#		*)
#		echo invalid arg to verifyAlive 
#		exit 99
#		;;
#	esac
#	for (( w = 0 ; w < $2; w++)); do
#		$CONFIGSDIR/checkvcellalive $arg >/dev/null 
#		stat=$?
#		if [ $stat -eq 0 ]; then return 0; fi
#		sleep 1
#	done
#	return 1
#}


#
# startup sequence
# prereq SITE set
function startSite( ) {
	cd $LOGDIR
	checkOff servicepid 
	checkOff highpid 
	if runsLow ; then
		 checkOff httppid  
	fi
	#clear logs
	mkdir -p old
	mv * old 2>/dev/null
	startmaster
	waitforproc 10 servicepid
	activepause 10 highpid 
	starthigh
	waitforproc 10 highpid
	if runsLow ; then
		activepause 40 httppid 
		startlow
		waitforproc 10 httppid 
	fi
	echo $SITE processes started
}


#
# shutdown site 
# prereq SITE set
function stopSite( ) {
	cd $LOGDIR
	killRunning highpid v 
	if runsLow ; then
		killRunning httppid v
	fi
	killRunning servicepid v
}

