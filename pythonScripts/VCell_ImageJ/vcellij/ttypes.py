#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class DomainType(object):
    VOLUME = 0
    MEMBRANE = 1

    _VALUES_TO_NAMES = {
        0: "VOLUME",
        1: "MEMBRANE",
    }

    _NAMES_TO_VALUES = {
        "VOLUME": 0,
        "MEMBRANE": 1,
    }


class SimulationState(object):
    notRun = 0
    running = 1
    done = 2
    failed = 3

    _VALUES_TO_NAMES = {
        0: "notRun",
        1: "running",
        2: "done",
        3: "failed",
    }

    _NAMES_TO_VALUES = {
        "notRun": 0,
        "running": 1,
        "done": 2,
        "failed": 3,
    }


class SimulationInfo(object):
    """
    Attributes:
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
    )

    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimulationInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SBMLModel(object):
    """
    Attributes:
     - filepath
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'filepath', 'UTF8', None, ),  # 1
    )

    def __init__(self, filepath=None,):
        self.filepath = filepath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.filepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SBMLModel')
        if self.filepath is not None:
            oprot.writeFieldBegin('filepath', TType.STRING, 1)
            oprot.writeString(self.filepath.encode('utf-8') if sys.version_info[0] == 2 else self.filepath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.filepath is None:
            raise TProtocolException(message='Required field filepath is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VariableInfo(object):
    """
    Attributes:
     - variableVtuName
     - variableDisplayName
     - domainName
     - variableDomainType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'variableVtuName', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'variableDisplayName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'domainName', 'UTF8', None, ),  # 3
        (4, TType.I32, 'variableDomainType', None, None, ),  # 4
    )

    def __init__(self, variableVtuName=None, variableDisplayName=None, domainName=None, variableDomainType=None,):
        self.variableVtuName = variableVtuName
        self.variableDisplayName = variableDisplayName
        self.domainName = domainName
        self.variableDomainType = variableDomainType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.variableVtuName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.variableDisplayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.domainName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.variableDomainType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('VariableInfo')
        if self.variableVtuName is not None:
            oprot.writeFieldBegin('variableVtuName', TType.STRING, 1)
            oprot.writeString(self.variableVtuName.encode('utf-8') if sys.version_info[0] == 2 else self.variableVtuName)
            oprot.writeFieldEnd()
        if self.variableDisplayName is not None:
            oprot.writeFieldBegin('variableDisplayName', TType.STRING, 2)
            oprot.writeString(self.variableDisplayName.encode('utf-8') if sys.version_info[0] == 2 else self.variableDisplayName)
            oprot.writeFieldEnd()
        if self.domainName is not None:
            oprot.writeFieldBegin('domainName', TType.STRING, 3)
            oprot.writeString(self.domainName.encode('utf-8') if sys.version_info[0] == 2 else self.domainName)
            oprot.writeFieldEnd()
        if self.variableDomainType is not None:
            oprot.writeFieldBegin('variableDomainType', TType.I32, 4)
            oprot.writeI32(self.variableDomainType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.variableVtuName is None:
            raise TProtocolException(message='Required field variableVtuName is unset!')
        if self.variableDisplayName is None:
            raise TProtocolException(message='Required field variableDisplayName is unset!')
        if self.domainName is None:
            raise TProtocolException(message='Required field domainName is unset!')
        if self.variableDomainType is None:
            raise TProtocolException(message='Required field variableDomainType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimulationSpec(object):
    """
    Attributes:
     - outputTimeStep
     - totalTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'outputTimeStep', None, None, ),  # 1
        (2, TType.DOUBLE, 'totalTime', None, None, ),  # 2
    )

    def __init__(self, outputTimeStep=None, totalTime=None,):
        self.outputTimeStep = outputTimeStep
        self.totalTime = totalTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.outputTimeStep = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.totalTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimulationSpec')
        if self.outputTimeStep is not None:
            oprot.writeFieldBegin('outputTimeStep', TType.DOUBLE, 1)
            oprot.writeDouble(self.outputTimeStep)
            oprot.writeFieldEnd()
        if self.totalTime is not None:
            oprot.writeFieldBegin('totalTime', TType.DOUBLE, 2)
            oprot.writeDouble(self.totalTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.outputTimeStep is None:
            raise TProtocolException(message='Required field outputTimeStep is unset!')
        if self.totalTime is None:
            raise TProtocolException(message='Required field totalTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThriftDataAccessException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThriftDataAccessException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimulationStatus(object):
    """
    Attributes:
     - simState
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'simState', None, None, ),  # 1
    )

    def __init__(self, simState=None,):
        self.simState = simState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.simState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimulationStatus')
        if self.simState is not None:
            oprot.writeFieldBegin('simState', TType.I32, 1)
            oprot.writeI32(self.simState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.simState is None:
            raise TProtocolException(message='Required field simState is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
