Index: src/cbit/vcell/message/RollbackException.java
===================================================================
--- src/cbit/vcell/message/RollbackException.java	(revision 11989)
+++ src/cbit/vcell/message/RollbackException.java	(revision 11988)
@@ -1,5 +0,0 @@
-package cbit.vcell.message;
-
-public class RollbackException extends Exception {
-
-}
Index: src/cbit/vcell/message/jms/test/TestRPC.java
===================================================================
--- src/cbit/vcell/message/jms/test/TestRPC.java	(revision 11989)
+++ src/cbit/vcell/message/jms/test/TestRPC.java	(revision 11988)
@@ -1,91 +0,0 @@
-package cbit.vcell.message.jms.test;
-
-import org.vcell.util.MessageConstants.ServiceType;
-import org.vcell.util.PropertyLoader;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-
-import cbit.vcell.message.RollbackException;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingInvocationTargetException;
-import cbit.vcell.message.VCMessagingService;
-import cbit.vcell.message.VCMessagingService.VCMessagingDelegate;
-import cbit.vcell.message.VCQueueConsumer;
-import cbit.vcell.message.VCQueueConsumer.QueueListener;
-import cbit.vcell.message.VCRpcConsumer;
-import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.VCellQueue;
-
-/**
- * Hello world!
- */
-public class TestRPC {
-
-    private static final int NUM_COMSUMERS = 1;
-	private static final int NUM_MESSAGES = 100;
-	
-	public static class MyRpcServer {
-		public int add(int a, int b){
-			return a+b;
-		}
-	}
-
-	public static void main(String[] args) throws Exception {
-		try {
-			
-			PropertyLoader.loadProperties();
-			
-    		VCMessagingService messagingService = VCMessagingService.createInstance();
-	    	
-	        // reading message and computing sum
-	        // create N comsumers
-	        MyRpcServer myRpcServer = new MyRpcServer();
-	        for (int i=0;i<NUM_COMSUMERS;i++){
-				VCRpcConsumer rpcConsumer = new VCRpcConsumer(myRpcServer, VCellQueue.JimQueue, ServiceType.TESTING_SERVICE, null, "Queue["+VCellQueue.JimQueue.getName()+"] ==== RPC Consumer Thread "+i);
-	        	messagingService.addMessageConsumer(rpcConsumer);
-	        }
-	        
-	        // creating one messageProducer session
-	        VCMessageSession messageSession = messagingService.createProducerSession();
-
-	        for (int i=0;i<NUM_MESSAGES;i++){
-	        	try {
-	        		//
-	        		// create simple RPC request for service "Testing_Service"
-	        		//
-		        	User user = new User("schaff",new KeyValue("17"));
-		        	Integer n1 = new Integer(i);
-		        	Integer n2 = new Integer(i+1);
-		        	VCRpcRequest rpcRequest = new VCRpcRequest(user, ServiceType.TESTING_SERVICE, "add", new Object[] { n1, n2 });
-		        	
-		        	//
-		        	// send request and block for response (or timeout).
-		        	// RPC invocations don't need commits.
-		        	//
-		        	Object returnValue = messageSession.sendRpcMessage(VCellQueue.JimQueue, rpcRequest, true, 20000, null, null);
-		        	
-		        	//
-		        	// print result.
-		        	//
-		        	if (returnValue instanceof Integer){
-		        		System.out.println("add("+n1+","+n2+") ===> "+returnValue);
-		        	}else{
-		        		System.out.println("unexpected return value of "+returnValue);
-		        	}
-	        	}catch (VCMessagingInvocationTargetException e){
-	        		e.printStackTrace(System.out);
-	        		System.out.println("the rpc service threw an exception");
-	        		e.getTargetException().printStackTrace(System.out);
-	        	}
-	        }        
-
-	    	System.out.println("main program calling closeAll()");
-	    	messagingService.closeAll();
-	    	System.out.println("main program exiting");
-		}catch (Exception e){
-			e.printStackTrace(System.out);
-		}
-    }	
-
-}
\ No newline at end of file
Index: src/cbit/vcell/message/jms/test/TestQueues.java
===================================================================
--- src/cbit/vcell/message/jms/test/TestQueues.java	(revision 11989)
+++ src/cbit/vcell/message/jms/test/TestQueues.java	(revision 11988)
@@ -1,87 +0,0 @@
-package cbit.vcell.message.jms.test;
-
-import org.vcell.util.PropertyLoader;
-
-import cbit.vcell.message.RollbackException;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingService;
-import cbit.vcell.message.VCMessagingService.VCMessagingDelegate;
-import cbit.vcell.message.VCQueueConsumer;
-import cbit.vcell.message.VCQueueConsumer.QueueListener;
-import cbit.vcell.message.VCellQueue;
-
-/**
- * Hello world!
- */
-public class TestQueues {
-
-    private static final int NUM_COMSUMERS = 1;
-	private static final int NUM_MESSAGES = 100;
-	
-    public static class Calculator {
-    	private int sum = 0;
-    	public synchronized void add(int number){
-    		sum += number;
-    		System.out.println("sum is :"+sum);
-    	}
-    	public int getSum(){
-    		return sum;
-    	}
-    }
-
-	public static void main(String[] args) throws Exception {
-		try {
-	    	PropertyLoader.loadProperties();
-	    	
-	    	VCMessagingService messagingService = VCMessagingService.createInstance();
-	    	VCMessagingDelegate messagingDelegate = new VCMessagingDelegate() {
-				public void onMessagingException(Exception e) {
-					e.printStackTrace(System.out);
-				}
-			};
-			messagingService.setDelegate(messagingDelegate);
-	    	
-	        final Calculator calculator = new Calculator();
-	        
-	        // reading message and computing sum
-	        // create N comsumers
-	        for (int i=0;i<NUM_COMSUMERS;i++){
-	           	QueueListener listener = new QueueListener() {
-					public void onQueueMessage(VCMessage vcMessage,	VCMessageSession session) throws RollbackException {
-						//new Thread()
-						System.out.println(toString()+",  t="+System.currentTimeMillis()+", Received: "+vcMessage.getTextContent());
-						int number = Integer.parseInt(vcMessage.getTextContent());
-						calculator.add(number);
-					}
-				};
-				VCQueueConsumer queueConsumer = new VCQueueConsumer(VCellQueue.JimQueue, listener, null, "Queue["+VCellQueue.JimQueue.getName()+"] ==== Consumer Thread "+i);
-	        	messagingService.addMessageConsumer(queueConsumer);
-	        }
-	        
-	        // creating one messageProducer session
-	        VCMessageSession messageSession = messagingService.createProducerSession();
-	        int sum = 0;
-	        for (int i=0;i<NUM_MESSAGES;i++){
-	        	sum += i;
-	        	VCMessage message = messageSession.createTextMessage(i+"");
-	        	messageSession.sendQueueMessage(VCellQueue.JimQueue, message);
-	        	messageSession.commit();
-	        }        
-	        System.out.println("Correct sum is "+sum);
-
-	        while (calculator.getSum()<sum){
-	        	System.out.println("calculator sum = "+calculator.getSum());
-	        	Thread.sleep(1000);
-	        }
-	    	System.out.println("calculator sum = "+calculator.getSum());
-	    	
-	    	System.out.println("main program calling closeAll()");
-	    	messagingService.closeAll();
-	    	System.out.println("main program exiting");
-		}catch (Exception e){
-			e.printStackTrace(System.out);
-		}
-    }
-	
-}
\ No newline at end of file
Index: src/cbit/vcell/message/jms/VCMessagingServiceJms.java
===================================================================
--- src/cbit/vcell/message/jms/VCMessagingServiceJms.java	(revision 11989)
+++ src/cbit/vcell/message/jms/VCMessagingServiceJms.java	(revision 11988)
@@ -1,116 +0,0 @@
-package cbit.vcell.message.jms;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import javax.jms.ConnectionFactory;
-import javax.jms.Destination;
-import javax.jms.JMSException;
-
-import cbit.vcell.message.VCMessageSelector;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingConsumer;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCMessagingService;
-
-public abstract class VCMessagingServiceJms extends VCMessagingService {
-	
-	private ArrayList<ConsumerContextJms> consumerContexts = new ArrayList<ConsumerContextJms>();
-    private ArrayList<MessageProducerSessionJms> messagingProducerSessions = new ArrayList<MessageProducerSessionJms>();
-	protected HashMap<String,Destination> destinationMap = new HashMap<String,Destination>();
-	
-	public VCMessagingServiceJms() {
-		super();
-	}
-	
-	private void onException(JMSException e){
-		e.printStackTrace(System.out);
-	}
-	
-	public VCMessageSession createProducerSession(){
-		MessageProducerSessionJms messageProducerSession;
-		try {
-			messageProducerSession = new MessageProducerSessionJms(this);
-			messagingProducerSessions.add(messageProducerSession);
-			return messageProducerSession;
-		} catch (JMSException e) {
-			onException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public abstract ConnectionFactory createConnectionFactory() throws JMSException;
-		
-	@Override
-	public void closeAll() throws VCMessagingException {
-		System.out.println(toString()+" closeAll() started");
-		for (ConsumerContextJms consumerContext : consumerContexts){
-			consumerContext.stop();
-		}
-		try {
-			Thread.sleep(ConsumerContextJms.CONSUMER_POLLING_INTERVAL_MS*2);
-		} catch (InterruptedException e) {
-			e.printStackTrace();
-		}
-		System.out.println(toString()+" consumer close() invocations");
-		for (ConsumerContextJms consumerContext : consumerContexts){
-			consumerContext.close();
-		}
-		
-		System.out.println(toString()+" message producer close requests");
-		for (MessageProducerSessionJms messageProducerSession : messagingProducerSessions){
-			messageProducerSession.close();
-		}
-		System.out.println(toString()+" closeAll() complete");
-	}
-
-	@Override
-	public void addMessageConsumer(VCMessagingConsumer vcMessagingConsumer) {
-		for (ConsumerContextJms context : consumerContexts){
-			if (context.getVCConsumer()==vcMessagingConsumer){
-				return;
-			}
-		}
-		
-		ConsumerContextJms consumerContext = new ConsumerContextJms(this,vcMessagingConsumer);
-		consumerContexts.add(consumerContext);
-		
-		try {
-			consumerContext.init();
-		} catch (JMSException e1) {
-			e1.printStackTrace();
-			onException(e1);
-		}
-		consumerContext.start();
-	}
-
-	@Override
-	public void removeMessageConsumer(VCMessagingConsumer vcMessagingConsumer) {
-		for (ConsumerContextJms context : consumerContexts){
-			if (context.getVCConsumer() == vcMessagingConsumer){
-				try {
-					context.stop();
-				} finally {
-					consumerContexts.remove(context);
-				}
-				return;
-			}
-		}
-	}
-
-	@Override
-	public List<VCMessagingConsumer> getMessageConsumers() {
-		ArrayList<VCMessagingConsumer> consumers = new ArrayList<VCMessagingConsumer>();
-		for (ConsumerContextJms context : consumerContexts){
-			consumers.add(context.getVCConsumer());
-		}
-		return consumers;
-	}
-	
-	@Override
-	public VCMessageSelector createSelector(String selectorString){
-		return new VCMessageSelectorJms(selectorString);
-	}
-	
-}
Index: src/cbit/vcell/message/jms/MessageProducerSessionJms.java
===================================================================
--- src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 11989)
+++ src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 11988)
@@ -1,219 +0,0 @@
-package cbit.vcell.message.jms;
-
-import java.io.Serializable;
-
-import javax.jms.Connection;
-import javax.jms.Destination;
-import javax.jms.ExceptionListener;
-import javax.jms.JMSException;
-import javax.jms.Message;
-import javax.jms.MessageConsumer;
-import javax.jms.MessageProducer;
-import javax.jms.ObjectMessage;
-import javax.jms.Session;
-import javax.jms.TemporaryQueue;
-
-import org.vcell.util.MessageConstants;
-
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCMessagingInvocationTargetException;
-import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-import cbit.vcell.mongodb.VCMongoMessage;
-
-public class MessageProducerSessionJms implements VCMessageSession {
-		
-		private VCMessagingServiceJms vcMessagingServiceJms = null;
-		private TemporaryQueue commonTemporaryQueue = null;
-		private Connection connection = null;
-		private Session session = null;
-		protected boolean bIndependent;
-		
-		public MessageProducerSessionJms(VCMessagingServiceJms vcMessagingServiceJms) throws JMSException {
-			this.vcMessagingServiceJms = vcMessagingServiceJms;
-			this.connection = vcMessagingServiceJms.createConnectionFactory().createConnection();
-			this.connection.setExceptionListener(new ExceptionListener() {
-				public void onException(JMSException arg0) {
-					MessageProducerSessionJms.this.onException(arg0);
-				}
-			});
-			this.connection.start();
-			boolean bTransacted = true;
-			this.session = connection.createSession(bTransacted, Session.AUTO_ACKNOWLEDGE);
-			this.commonTemporaryQueue = session.createTemporaryQueue();
-			this.bIndependent = true;
-		}
-
-		public MessageProducerSessionJms(Session session) {
-			this.session = session;
-			this.bIndependent = false;
-		}
-
-		public Object sendRpcMessage(VCellQueue queue, VCRpcRequest vcRpcRequest, boolean returnRequired, long timeoutMS, String[] specialProperties, Object[] specialValues) throws VCMessagingException, VCMessagingInvocationTargetException {
-			MessageProducer messageProducer = null;
-			try {
-				if (!bIndependent){
-					throw new VCMessagingException("cannot invoke RpcMessage from within another transaction, create an independent message producer");
-				}
-				Destination destination = session.createQueue(queue.getName());
-				messageProducer = session.createProducer(destination);				
-				ObjectMessage rpcMessage = session.createObjectMessage(vcRpcRequest);
-				rpcMessage.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY,MessageConstants.MESSAGE_TYPE_RPC_SERVICE_VALUE);
-				rpcMessage.setStringProperty(MessageConstants.SERVICE_TYPE_PROPERTY,vcRpcRequest.getRequestedServiceType().getName());
-				if (specialValues != null) {
-					for (int i = 0; i < specialValues.length; i ++) {
-						rpcMessage.setObjectProperty(specialProperties[i], specialValues[i]);
-					}
-				}
-
-				if (returnRequired) {
-					rpcMessage.setJMSReplyTo(commonTemporaryQueue);
-					messageProducer.setTimeToLive(timeoutMS);
-					messageProducer.send(rpcMessage);
-					session.commit();
-System.out.println("rpcMessage sent: id='"+rpcMessage.getJMSMessageID()+"'");
-					String filter = MessageConstants.JMSCORRELATIONID_PROPERTY + "='" + rpcMessage.getJMSMessageID() + "'";
-					MessageConsumer replyConsumer = session.createConsumer(commonTemporaryQueue,filter);
-					Message replyMessage = replyConsumer.receive(timeoutMS);
-					replyConsumer.close();
-					if (replyMessage == null) {
-						System.out.println("Request timed out");
-					}
-
-					if (replyMessage == null || !(replyMessage instanceof ObjectMessage)) {
-						throw new JMSException("Server is temporarily not responding, please try again later. If problem persists, contact VCell_Support@uchc.edu." +
-								" (server=" + vcRpcRequest.getRequestedServiceType().getName() + ", method=" + vcRpcRequest.getMethodName() +")");
-					} else {				
-						Object returnValue = ((ObjectMessage)replyMessage).getObject();
-						if (returnValue instanceof Exception){
-							throw new VCMessagingInvocationTargetException((Exception)returnValue);
-						} else {
-							return returnValue;
-						}
-					} 
-				} else {
-					messageProducer.send(rpcMessage);
-					commit();
-					return null;
-				}
-			} catch (JMSException e){
-				onException(e);
-				throw new VCMessagingException(e.getMessage(),e);
-			} finally {
-				try {
-					if (messageProducer!=null){
-						messageProducer.close();
-					}
-				} catch (JMSException e) {
-					onException(e);
-				}
-			}
-		}
-
-		public void sendQueueMessage(VCellQueue queue, VCMessage message) throws VCMessagingException {
-			if (message instanceof VCMessageJms){
-				try {
-					Destination destination = session.createQueue(queue.getName());
-					MessageProducer messageProducer = session.createProducer(destination);
-					messageProducer.send(((VCMessageJms)message).getJmsMessage());
-					if (bIndependent){
-						session.commit();
-					}
-					VCMongoMessage.sendJmsMessageSent(message,queue);
-				} catch (JMSException e) {
-					onException(e);
-				}
-			}else{
-				throw new RuntimeException("expected JMS message for JMS message service");
-			}
-		}
-		
-		public void sendTopicMessage(VCellTopic topic, VCMessage message) throws VCMessagingException {
-			if (message instanceof VCMessageJms){
-				VCMessageJms jmsMessage = (VCMessageJms)message;
-				try {
-					MessageProducer producer = session.createProducer(session.createTopic(topic.getName()));
-					producer.send(jmsMessage.getJmsMessage());
-					if (bIndependent){
-						session.commit();
-					}
-					VCMongoMessage.sendJmsMessageSent(message,topic);
-				} catch (JMSException e) {
-					e.printStackTrace(System.out);
-					onException(e);
-				}				
-			}else{
-				throw new RuntimeException("must send a JMS message to a JMS messaging service");
-			}
-		}
-
-		public void rollback() {
-			try {
-				session.rollback();
-			}catch (JMSException e){
-				onException(e);
-			}
-		}
-
-		public void commit() {
-			try {
-				session.commit();
-			}catch (JMSException e){
-				onException(e);
-			}
-		}
-
-		public VCMessage createTextMessage(String text) {
-			try {
-				Message jmsMessage = session.createTextMessage(text);
-				return new VCMessageJms(jmsMessage);
-			} catch (JMSException e) {
-				e.printStackTrace(System.out);
-				onException(e);
-				throw new RuntimeException("unable to create text message");
-			}
-		}
-		public VCMessage createObjectMessage(Serializable object) {
-			try {
-				Message jmsMessage = session.createObjectMessage(object);
-				return new VCMessageJms(jmsMessage);
-			} catch (JMSException e) {
-				e.printStackTrace(System.out);
-				onException(e);
-				throw new RuntimeException("unable to create text message");
-			}
-		}
-		public VCMessage createMessage() {
-			try {
-				Message jmsMessage = session.createMessage();
-				return new VCMessageJms(jmsMessage);
-			} catch (JMSException e) {
-				e.printStackTrace(System.out);
-				onException(e);
-				throw new RuntimeException("unable to create message");
-			}
-		}
-
-		private void onException(JMSException e){
-			e.printStackTrace(System.out);
-		}
-
-		public void close() {
-			try {
-				if (session!=null){
-					session.close();
-				}
-				if (commonTemporaryQueue!=null){
-					commonTemporaryQueue.delete();
-				}
-				if (connection!=null){
-					connection.close();
-				}
-			}catch (JMSException e){
-				onException(e);
-			}
-		}
-	}
\ No newline at end of file
Index: src/cbit/vcell/message/jms/VCMessageJms.java
===================================================================
--- src/cbit/vcell/message/jms/VCMessageJms.java	(revision 11989)
+++ src/cbit/vcell/message/jms/VCMessageJms.java	(revision 11988)
@@ -1,291 +0,0 @@
-package cbit.vcell.message.jms;
-
-import java.util.Enumeration;
-
-import javax.jms.Destination;
-import javax.jms.JMSException;
-import javax.jms.Message;
-import javax.jms.ObjectMessage;
-import javax.jms.Queue;
-import javax.jms.TextMessage;
-import javax.jms.Topic;
-
-import cbit.vcell.message.MessagePropertyNotFoundException;
-import cbit.vcell.message.VCDestination;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-
-public class VCMessageJms implements VCMessage {
-	
-	private Message jmsMessage = null;
-		
-	public VCMessageJms(Message jmsMessage){
-		this.jmsMessage = jmsMessage;
-	}
-	
-	public Message getJmsMessage(){
-		return jmsMessage;
-	}
-	
-	public Object getObjectContent(){
-		if (jmsMessage instanceof ObjectMessage){
-			try {
-				return ((ObjectMessage)jmsMessage).getObject();
-			} catch (JMSException e) {
-				handleJMSException(e);
-				throw new RuntimeException(e.getMessage());
-			}
-		}else{
-			return null;
-		}
-	}
-	
-	public String getTextContent(){
-		if (jmsMessage instanceof TextMessage){
-			try {
-				return ((TextMessage)jmsMessage).getText();
-			} catch (JMSException e) {
-				handleJMSException(e);
-				throw new RuntimeException(e.getMessage());
-			}
-		}else{
-			return null;
-		}
-	}
-	
-	public void setBooleanProperty(String propertyName, boolean value){
-		try {
-			jmsMessage.setBooleanProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public void setDoubleProperty(String propertyName, double value){
-		try {
-			jmsMessage.setDoubleProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public void setIntProperty(String propertyName, int value){
-		try {
-			jmsMessage.setIntProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public void setLongProperty(String propertyName, long value){
-		try {
-			jmsMessage.setLongProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public void setObjectProperty(String propertyName, Object value){
-		try {
-			jmsMessage.setObjectProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public void setStringProperty(String propertyName, String value){
-		try {
-			jmsMessage.setStringProperty(propertyName,value);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public Enumeration<String> getPropertyNames(){
-		try {
-			return jmsMessage.getPropertyNames();
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	public boolean getBooleanProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getBooleanProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public double getDoubleProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getDoubleProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public int getIntProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getIntProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public long getLongProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getLongProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public Object getObjectProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getObjectProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public String getStringProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		try {
-			return jmsMessage.getStringProperty(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public boolean propertyExists(String propertyName){
-		try {
-			return jmsMessage.propertyExists(propertyName);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-	
-	private void handleJMSException(JMSException e){
-		e.printStackTrace(System.out);
-	}
-
-	public VCDestination getReplyTo() {
-		try {
-			Destination destination = jmsMessage.getJMSReplyTo();
-			if (destination == null){
-				return null;
-			}
-			if (destination instanceof Queue){
-				return new VCellQueue(((Queue) destination).getQueueName());
-			}else if (destination instanceof Topic){
-				return new VCellTopic(((Topic) destination).getTopicName());
-			}else{
-				throw new RuntimeException("unexpected destination: "+destination);
-			}
-		}catch (JMSException e){
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage());
-		}
-	}
-
-	public String getCorrelationID() {
-		try {
-			return jmsMessage.getJMSCorrelationID();
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage(),e);
-		}
-	}
-
-	public String getMessageID() {
-		try {
-			return jmsMessage.getJMSMessageID();
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage(),e);
-		}
-	}
-
-	public void setCorrelationID(String correlationID) {
-		try {
-			jmsMessage.setJMSCorrelationID(correlationID);
-		} catch (JMSException e) {
-			handleJMSException(e);
-			throw new RuntimeException(e.getMessage(),e);
-		}
-	}
-
-	public String show(){
-		StringBuffer buffer = new StringBuffer();
-		try {
-			java.util.Enumeration enum1 = jmsMessage.getPropertyNames();
-			while (enum1.hasMoreElements()){
-				String propName = (String)enum1.nextElement();
-				try {
-					String value = jmsMessage.getStringProperty(propName);
-					buffer.append(" " + propName + "='" + value + "'");
-				} catch (MessagePropertyNotFoundException ex) {
-					// definitely should not happen
-				}
-			}
-			int maxContentLength = 120;
-			if (jmsMessage instanceof TextMessage){
-				buffer.append("  textContent='");
-				String textContent = ((TextMessage)jmsMessage).getText();
-				if (textContent.length()>maxContentLength){
-					buffer.append(textContent.substring(0, maxContentLength-3)+"...");
-				}else{
-					buffer.append(textContent);
-				}
-				buffer.append("'");
-			}else if (jmsMessage instanceof ObjectMessage){
-				buffer.append("  objectContent='");
-				String text = ((ObjectMessage)jmsMessage).getObject().toString();
-				if (text.length()>maxContentLength){
-					buffer.append(text.substring(0, maxContentLength-3)+"...");
-				}else{
-					buffer.append(text);
-				}
-				buffer.append("'");
-			}
-		} catch (JMSException e) {
-			e.printStackTrace(System.out);
-			throw new RuntimeException(e.getMessage(),e);
-		}
-		return buffer.toString();
-	}
-	
-}
Index: src/cbit/vcell/message/jms/VCMessageSelectorJms.java
===================================================================
--- src/cbit/vcell/message/jms/VCMessageSelectorJms.java	(revision 11989)
+++ src/cbit/vcell/message/jms/VCMessageSelectorJms.java	(revision 11988)
@@ -1,13 +0,0 @@
-package cbit.vcell.message.jms;
-
-import cbit.vcell.message.VCMessageSelector;
-
-public class VCMessageSelectorJms extends VCMessageSelector {
-	
-	String selectorString = null;
-	
-	VCMessageSelectorJms(String selectorString){
-		this.selectorString = selectorString;
-	}
-
-}
Index: src/cbit/vcell/message/jms/activeMQ/VCMessagingServiceActiveMQ.java
===================================================================
--- src/cbit/vcell/message/jms/activeMQ/VCMessagingServiceActiveMQ.java	(revision 11989)
+++ src/cbit/vcell/message/jms/activeMQ/VCMessagingServiceActiveMQ.java	(revision 11988)
@@ -1,47 +0,0 @@
-package cbit.vcell.message.jms.activeMQ;
-
-import java.net.URI;
-
-import javax.jms.ConnectionFactory;
-
-import org.apache.activemq.ActiveMQConnectionFactory;
-import org.apache.activemq.broker.BrokerService;
-import org.apache.activemq.broker.TransportConnector;
-import org.vcell.util.PropertyLoader;
-
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.jms.VCMessagingServiceJms;
-
-public class VCMessagingServiceActiveMQ extends VCMessagingServiceJms {
-	private BrokerService broker = null;
-	
-	public VCMessagingServiceActiveMQ() {
-		super();
-	}
-	
-	@Override
-	public ConnectionFactory createConnectionFactory(){
-		//return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false&create=false");
-		String jmsUrl = PropertyLoader.getRequiredProperty(PropertyLoader.jmsURL);
-		return new ActiveMQConnectionFactory(jmsUrl);
-	}
-	
-	@Override
-	protected void init(boolean bStartBroker) throws VCMessagingException {
-		if (bStartBroker){
-			this.broker = new BrokerService();
-	
-			try {
-				TransportConnector connector = new TransportConnector();
-				String jmsUrl = PropertyLoader.getRequiredProperty(PropertyLoader.jmsURL);
-				connector.setUri(new URI(jmsUrl));
-				broker.addConnector(connector);
-				broker.start();
-			} catch (Exception e) {
-				e.printStackTrace();
-				throw new VCMessagingException(e.getMessage());
-			}
-		}
-	}
-
-}
Index: src/cbit/vcell/message/jms/activeMQ/ActiveMqTest.java
===================================================================
--- src/cbit/vcell/message/jms/activeMQ/ActiveMqTest.java	(revision 11989)
+++ src/cbit/vcell/message/jms/activeMQ/ActiveMqTest.java	(revision 11988)
@@ -1,35 +0,0 @@
-package cbit.vcell.message.jms.activeMQ;
-import org.apache.activemq.ActiveMQConnectionFactory;
-import org.apache.activemq.broker.BrokerService;
-import org.apache.activemq.broker.TransportConnector;
-import org.apache.activemq.network.NetworkConnector;
-
-
-public class ActiveMqTest {
-
-	/**
-	 * @param args
-	 */
-	public static void main(String[] args) {
-		try {
-			BrokerService broker = new BrokerService();
-			broker.setBrokerName("fred");
-			broker.setUseShutdownHook(false);
-			broker.setPersistent(false);
-			//Add plugin
-			//broker.setPlugins(new BrokerPlugin[]{new JaasAuthenticationPlugin()});
-			//Add a network connection
-			NetworkConnector connector = broker.addNetworkConnector("static://"+"tcp://localhost:61616");
-			connector.setDuplex(true);
-			TransportConnector transportConnector = broker.addConnector("tcp://localhost:61616");
-			broker.start();	
-			
-			//transportConnector.
-			
-			ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
-		}catch (Exception e){
-			e.printStackTrace(System.out);
-		}
-	}
-
-}
Index: src/cbit/vcell/message/jms/sonicMQ/VCMessagingServiceSonicMQ.java
===================================================================
--- src/cbit/vcell/message/jms/sonicMQ/VCMessagingServiceSonicMQ.java	(revision 11989)
+++ src/cbit/vcell/message/jms/sonicMQ/VCMessagingServiceSonicMQ.java	(revision 11988)
@@ -1,35 +0,0 @@
-package cbit.vcell.message.jms.sonicMQ;
-
-import javax.jms.ConnectionFactory;
-import javax.jms.JMSException;
-
-import org.vcell.util.PropertyLoader;
-
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.jms.VCMessagingServiceJms;
-
-public class VCMessagingServiceSonicMQ extends VCMessagingServiceJms {
-	
-	public VCMessagingServiceSonicMQ() {
-		super();
-	}
-	
-	@Override
-	public ConnectionFactory createConnectionFactory() throws JMSException {
-		//return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false&create=false");
-		String jmsUrl = PropertyLoader.getRequiredProperty(PropertyLoader.jmsURL);
-		String jmsUser = PropertyLoader.getRequiredProperty(PropertyLoader.jmsUser);
-		String jmsPassword = PropertyLoader.getRequiredProperty(PropertyLoader.jmsPassword);
-		progress.message.jclient.ConnectionFactory sonicConnectionFactory = new progress.message.jclient.ConnectionFactory(jmsUrl, jmsUser, jmsPassword);
-		sonicConnectionFactory.setFaultTolerant(true);
-		return sonicConnectionFactory;
-	}
-	
-	@Override
-	protected void init(boolean bStartBroker) throws VCMessagingException {
-		if (bStartBroker){
-			throw new VCMessagingException("embedded broker not supported");
-		}
-	}
-
-}
Index: src/cbit/vcell/message/jms/ConsumerContextJms.java
===================================================================
--- src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 11989)
+++ src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 11988)
@@ -1,221 +0,0 @@
-package cbit.vcell.message.jms;
-
-import java.io.Serializable;
-
-import javax.jms.Connection;
-import javax.jms.DeliveryMode;
-import javax.jms.Destination;
-import javax.jms.ExceptionListener;
-import javax.jms.JMSException;
-import javax.jms.Message;
-import javax.jms.MessageConsumer;
-import javax.jms.MessageProducer;
-import javax.jms.ObjectMessage;
-import javax.jms.Queue;
-import javax.jms.Session;
-
-import org.vcell.util.MessageConstants;
-import org.vcell.util.SessionLog;
-import org.vcell.util.StdoutSessionLog;
-
-import cbit.vcell.message.RollbackException;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessagingConsumer;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCQueueConsumer;
-import cbit.vcell.message.VCRpcConsumer;
-import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.VCTopicConsumer;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.messaging.server.RpcRequest;
-import cbit.vcell.mongodb.VCMongoMessage;
-
-public class ConsumerContextJms implements Runnable {
-	public static final long CONSUMER_POLLING_INTERVAL_MS = 2000;
-	private VCMessagingServiceJms vcMessagingServiceJms = null;
-	private VCMessagingConsumer vcConsumer = null;
-	private Destination jmsDestination = null;
-	private Session jmsSession = null;
-	private Connection jmsConnection = null;
-	private MessageConsumer jmsMessageConsumer = null;
-	private boolean bProcessing = false;
-	private Thread thread = null;
-	private SessionLog log = new StdoutSessionLog("consumer");
-	
-	public ConsumerContextJms(VCMessagingServiceJms vcMessagingServiceJms, VCMessagingConsumer consumer){
-		this.vcMessagingServiceJms = vcMessagingServiceJms;
-		this.vcConsumer = consumer;
-	}
-	
-	public void run(){
-		bProcessing = true;
-		System.out.println(toString()+" consumer thread starting.");
-		while (bProcessing){
-			try {
-				Message jmsMessage = jmsMessageConsumer.receive(CONSUMER_POLLING_INTERVAL_MS);
-				if (jmsMessage!=null){
-//						System.out.println(toString()+"===============message received within "+CONSUMER_POLLING_INTERVAL_MS+" ms");
-					if (vcConsumer instanceof VCQueueConsumer){
-						VCQueueConsumer queueConsumer = (VCQueueConsumer)vcConsumer;
-						VCMessage vcMessage = new VCMessageJms(jmsMessage);
-						VCMongoMessage.sendJmsMessageReceived(vcMessage,vcConsumer.getVCDestination());
-						MessageProducerSessionJms temporaryMessageProducerSession = new MessageProducerSessionJms(jmsSession);
-						queueConsumer.getQueueListener().onQueueMessage(vcMessage, temporaryMessageProducerSession);
-						jmsSession.commit();
-					} else if (vcConsumer instanceof VCTopicConsumer){
-						VCTopicConsumer topicConsumer = (VCTopicConsumer)vcConsumer;
-						VCMessage vcMessage = new VCMessageJms(jmsMessage);
-						VCMongoMessage.sendJmsMessageReceived(vcMessage,vcConsumer.getVCDestination());
-						MessageProducerSessionJms temporaryMessageProducerSession = new MessageProducerSessionJms(jmsSession);
-						topicConsumer.getTopicListener().onTopicMessage(vcMessage, temporaryMessageProducerSession);
-						jmsSession.commit();
-					} else {
-						VCRpcConsumer rpcConsumer = (VCRpcConsumer)vcConsumer;
-						if (!(jmsMessage instanceof ObjectMessage)){
-							jmsSession.commit();
-							throw new VCMessagingException("expecting ObjectMessage");
-						}
-						ObjectMessage objectMessage = (ObjectMessage)jmsMessage;
-						Serializable object = objectMessage.getObject();
-						if (!(object instanceof VCRpcRequest) && !(object instanceof RpcRequest)){
-							jmsSession.commit();
-							throw new VCMessagingException("expecting RpcRequest in message");
-						}
-						VCRpcRequest vcRpcRequest = null;
-						if (object instanceof RpcRequest){
-							vcRpcRequest = VCRpcRequest.fromRpcRequest(((RpcRequest)object));
-						} else if (object instanceof VCRpcRequest){
-							vcRpcRequest = (VCRpcRequest)object;
-						}
-						
-						VCMongoMessage.sendRpcRequestReceived(vcRpcRequest);
-						
-						java.io.Serializable returnValue = null;
-						try {
-							//
-							// invoke the local RPC implementation and collect either the return value or the exception that was thrown
-							//
-
-							returnValue = (Serializable) vcRpcRequest.rpc(rpcConsumer.getServiceImplementation(), log);
-						} catch (Exception ex) {
-							log.exception(ex);
-							returnValue = ex; // if exception occurs, send client the exception
-						}
-
-						// check the return value for non-seriablable objects
-						if (returnValue != null && returnValue.getClass().isArray()) {
-							Class<?> componentClass = returnValue.getClass().getComponentType();
-							if (!componentClass.isPrimitive() && !Serializable.class.isAssignableFrom(componentClass)) {
-								returnValue = new ClassCastException("Not serializable:" + componentClass);
-							}
-						}
-
-						// reply to "reply-to" queue with the return value or exception.
-						long clientTimeoutMS = Long.parseLong(org.vcell.util.PropertyLoader.getRequiredProperty(org.vcell.util.PropertyLoader.vcellClientTimeoutMS)); 
-						Queue replyTo = (Queue)jmsMessage.getJMSReplyTo();
-						Message replyMessage = jmsSession.createObjectMessage(returnValue);
-						replyMessage.setStringProperty(MessageConstants.METHOD_NAME_PROPERTY, vcRpcRequest.getMethodName());
-						replyMessage.setJMSCorrelationID(jmsMessage.getJMSMessageID());
-//{
-//Enumeration<String> props = replyMessage.getPropertyNames();
-//while (props.hasMoreElements()){
-//	System.out.println("ReplyMessage property="+props.nextElement());
-//}
-//}
-						MessageProducer replyProducer = jmsSession.createProducer(replyTo);
-						replyProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
-						replyProducer.setTimeToLive(clientTimeoutMS);
-						replyProducer.send(replyMessage);
-						replyProducer.close();
-						jmsSession.commit();		//commit		
-					}
-				}else{
-//						System.out.println(toString()+"no message received within "+CONSUMER_POLLING_INTERVAL_MS+" ms");
-				}
-			} catch (JMSException e) {
-				onException(e);
-			} catch (RollbackException e) {
-				log.exception(e);
-				try {
-					jmsSession.rollback();
-				} catch (JMSException e1) {
-					onException(e1);
-				}
-			} catch (Exception e) {
-				log.exception(e);
-			}
-		}
-		System.out.println(toString()+" consumer thread exiting.");
-	}
-	
-	
-	
-	public void start() {
-		if (bProcessing){
-			throw new RuntimeException("consumer already started");
-		}
-		setThread(new Thread(this,vcConsumer.getThreadName()));
-		getThread().setDaemon(true);
-		getThread().start();
-	}
-	public void stop(){
-		if (bProcessing){
-			bProcessing=false;
-			System.out.println(toString()+" consumer thread stop requested");
-		}
-	}
-	public void init() throws JMSException {
-		boolean bTransacted = true;
-		int acknowledgeMode = Session.AUTO_ACKNOWLEDGE;
-		try {
-			this.jmsConnection = vcMessagingServiceJms.createConnectionFactory().createConnection();
-			this.jmsConnection.setExceptionListener(new ExceptionListener() {
-				public void onException(JMSException arg0) {
-					ConsumerContextJms.this.onException(arg0);
-				}
-			});
-			this.jmsConnection.start();
-			this.jmsSession = this.jmsConnection.createSession(bTransacted, acknowledgeMode);			
-			if (vcConsumer.getVCDestination() instanceof VCellQueue){
-				this.jmsDestination = this.jmsSession.createQueue(vcConsumer.getVCDestination().getName());							
-			}else{
-				this.jmsDestination = this.jmsSession.createTopic(vcConsumer.getVCDestination().getName());							
-			}
-			this.jmsMessageConsumer = this.jmsSession.createConsumer(this.jmsDestination);
-		}catch (JMSException e){
-			e.printStackTrace(System.out);
-			onException(e);
-		}
-	}
-	
-	private void onException(JMSException e){
-		e.printStackTrace(System.out);
-	}
-	
-	public VCMessagingConsumer getVCConsumer() {
-		return vcConsumer;
-	}
-	
-	void close() {
-		try {
-			if (jmsMessageConsumer!=null){
-				jmsMessageConsumer.close();
-			}
-			if (jmsSession!=null){
-				jmsSession.close();
-			}
-			if (jmsConnection!=null){
-				jmsConnection.stop();
-				jmsConnection.close();
-			}
-		}catch (JMSException e){
-			onException(e);
-		}
-	}
-	public Thread getThread() {
-		return thread;
-	}
-	public void setThread(Thread thread) {
-		this.thread = thread;
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/message/VCMessageSelector.java
===================================================================
--- src/cbit/vcell/message/VCMessageSelector.java	(revision 11989)
+++ src/cbit/vcell/message/VCMessageSelector.java	(revision 11988)
@@ -1,6 +0,0 @@
-package cbit.vcell.message;
-
-public abstract class VCMessageSelector {
-
-
-}
Index: src/cbit/vcell/message/VCMessagingConsumer.java
===================================================================
--- src/cbit/vcell/message/VCMessagingConsumer.java	(revision 11989)
+++ src/cbit/vcell/message/VCMessagingConsumer.java	(revision 11988)
@@ -1,26 +0,0 @@
-package cbit.vcell.message;
-
-public abstract class VCMessagingConsumer {
-
-	private VCDestination vcDestination = null;
-	private String threadName = null;
-	private VCMessageSelector selector = null;
-	
-	public VCMessagingConsumer(VCDestination vcDestination, VCMessageSelector selector, String threadName) {
-		this.vcDestination = vcDestination;
-		this.selector = selector;
-		this.threadName = threadName;
-	}
-	
-	public VCDestination getVCDestination(){
-		return this.vcDestination;
-	}
-	
-	public String getThreadName(){
-		return this.threadName;
-	}
-	
-	public VCMessageSelector getSelector(){
-		return this.selector;
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/message/VCTopicConsumer.java
===================================================================
--- src/cbit/vcell/message/VCTopicConsumer.java	(revision 11989)
+++ src/cbit/vcell/message/VCTopicConsumer.java	(revision 11988)
@@ -1,21 +0,0 @@
-package cbit.vcell.message;
-
-public final class VCTopicConsumer extends VCMessagingConsumer {
-	
-	public interface TopicListener {
-		void onTopicMessage(VCMessage vcMessage, VCMessageSession session);
-	}
-
-	private TopicListener listener = null;
-	
-	public VCTopicConsumer(VCellTopic topic, TopicListener listener, VCMessageSelector selector, String threadName){
-		super(topic,selector,threadName);
-		this.listener = listener;
-	}
-	public VCellTopic getTopic() {
-		return (VCellTopic)getVCDestination();
-	}
-	public TopicListener getTopicListener() {
-		return listener;
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/message/VCMessagingService.java
===================================================================
--- src/cbit/vcell/message/VCMessagingService.java	(revision 11989)
+++ src/cbit/vcell/message/VCMessagingService.java	(revision 11988)
@@ -1,62 +0,0 @@
-package cbit.vcell.message;
-
-import java.util.List;
-
-import org.vcell.util.PropertyLoader;
-
-import cbit.vcell.message.jms.activeMQ.VCMessagingServiceActiveMQ;
-import cbit.vcell.message.jms.sonicMQ.VCMessagingServiceSonicMQ;
-
-public abstract class VCMessagingService {
-	
-	public interface VCMessagingDelegate {
-		public void onMessagingException(Exception e);
-	}
-
-	protected VCMessagingDelegate delegate = null;
-	
-	public VCMessagingService(){
-	}
-	
-	public abstract VCMessageSession createProducerSession();
-	
-	public abstract void addMessageConsumer(VCMessagingConsumer vcMessagingConsumer);
-	
-	public abstract void removeMessageConsumer(VCMessagingConsumer vcMessagingConsumer);
-	
-	public abstract List<VCMessagingConsumer> getMessageConsumers();
-	
-	protected abstract void init(boolean bStartBroker) throws VCMessagingException;
-	
-	public abstract void closeAll() throws VCMessagingException;
-
-	public void setDelegate(VCMessagingDelegate delegate) {
-		this.delegate = delegate;
-	}
-	
-	public VCMessagingDelegate getDelegate(){
-		return this.delegate;
-	}
-
-	public abstract VCMessageSelector createSelector(String clientMessageFilter);
-	
-	public static VCMessagingService createInstance() throws VCMessagingException{
-		VCMessagingService messagingService = null;
-		
-		String jmsProvider = PropertyLoader.getRequiredProperty(PropertyLoader.jmsProvider);
-		if (jmsProvider.equalsIgnoreCase(PropertyLoader.jmsProviderValueSonicMQ)){
-			messagingService = new VCMessagingServiceSonicMQ();
-		}else if (jmsProvider.equalsIgnoreCase(PropertyLoader.jmsProviderValueActiveMQ)){
-			messagingService = new VCMessagingServiceActiveMQ();
-		}else{
-			throw new RuntimeException("unrecognized jms provider : "+jmsProvider);
-		}
-		messagingService.init(false);
-		return messagingService;
-	}
-	
-}
-
-
-
-
Index: src/cbit/vcell/message/VCRpcConsumer.java
===================================================================
--- src/cbit/vcell/message/VCRpcConsumer.java	(revision 11989)
+++ src/cbit/vcell/message/VCRpcConsumer.java	(revision 11988)
@@ -1,24 +0,0 @@
-package cbit.vcell.message;
-
-import org.vcell.util.MessageConstants.ServiceType;
-
-
-public class VCRpcConsumer extends VCMessagingConsumer {
-	private Object serviceImplementation = null;
-	private ServiceType serviceType = null;
-
-	public VCRpcConsumer(Object serviceImplementation, VCellQueue queue, ServiceType serviceType, VCMessageSelector selector, String threadName) {
-		super(queue, selector, threadName);
-		this.serviceImplementation = serviceImplementation;
-		this.serviceType = serviceType;
-	}
-	public Object getServiceImplementation() {
-		return serviceImplementation;
-	}
-	public VCellQueue getQueue() {
-		return (VCellQueue)getVCDestination();
-	}
-	public ServiceType getServiceType() {
-		return serviceType;
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/message/VCQueueConsumer.java
===================================================================
--- src/cbit/vcell/message/VCQueueConsumer.java	(revision 11989)
+++ src/cbit/vcell/message/VCQueueConsumer.java	(revision 11988)
@@ -1,22 +0,0 @@
-package cbit.vcell.message;
-
-
-public final class VCQueueConsumer extends VCMessagingConsumer {
-	
-	public interface QueueListener {
-		void onQueueMessage(VCMessage vcMessage, VCMessageSession session) throws RollbackException;
-	}	
-	
-	private QueueListener listener = null;
-	
-	public VCQueueConsumer(VCellQueue queue, QueueListener listener, VCMessageSelector selector, String threadName){
-		super(queue, selector, threadName);
-		this.listener = listener;
-	}
-	public VCellQueue getQueue() {
-		return (VCellQueue)getVCDestination();
-	}
-	public QueueListener getQueueListener() {
-		return listener;
-	}
-}
\ No newline at end of file
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 11989)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 11988)
@@ -25,6 +25,7 @@
 import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.messages.StatusMessage;
 import cbit.vcell.messaging.db.SimulationJobStatus;
+import cbit.vcell.messaging.db.SimulationJobStatusInfo;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.Simulation;
Index: src/org/vcell/util/PropertyLoader.java
===================================================================
--- src/org/vcell/util/PropertyLoader.java	(revision 11989)
+++ src/org/vcell/util/PropertyLoader.java	(revision 11988)
@@ -97,8 +97,6 @@
 	public static final String hostSeparator	= ",";
 
 	public static final String jmsProvider				= "vcell.jms.provider";
-	public static final String jmsProviderValueActiveMQ		= "ActiveMQ";
-	public static final String jmsProviderValueSonicMQ		= "SonicMQ";
 	public static final String jmsURL					= "vcell.jms.url";
 	public static final String jmsUser					= "vcell.jms.user";
 	public static final String jmsPassword				= "vcell.jms.password";
Index: src/org/vcell/util/MessageConstants.java
===================================================================
--- src/org/vcell/util/MessageConstants.java	(revision 11989)
+++ src/org/vcell/util/MessageConstants.java	(revision 11988)
@@ -57,8 +57,7 @@
 		DISPATCH ("Dsptch"),
 		PBSCOMPUTE ("PbsC"),	// submit everything to PBS
 		LOCALCOMPUTE ("LclC"),   // local pde and ode
-		SERVERMANAGER ("ServerManager"),
-		TESTING_SERVICE ("TestingService");
+		SERVERMANAGER ("ServerManager");
 		
 		private final String typeName;
 		ServiceType(String tn) {
Index: .classpath
===================================================================
--- .classpath	(revision 11989)
+++ .classpath	(revision 11988)
@@ -4,7 +4,7 @@
 	<classpathentry kind="lib" path="lib/jta.jar"/>
 	<classpathentry kind="src" path="src">
 		<attributes>
-			<attribute name="org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY" value="VCell/nativelibs/win64"/>
+			<attribute name="org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY" value="VCell_5.3/nativelibs/win64"/>
 		</attributes>
 	</classpathentry>
 	<classpathentry kind="src" path="src_jvisit"/>
@@ -12,19 +12,10 @@
 	<classpathentry kind="src" path="resources_vfrap"/>
 	<classpathentry kind="src" path="src_vfrap">
 		<attributes>
-			<attribute name="org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY" value="VCell/nativelibs/win32"/>
+			<attribute name="org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY" value="VCell_5.3/nativelibs/win64"/>
 		</attributes>
 	</classpathentry>
 	<classpathentry kind="src" path="resources"/>
-	<classpathentry kind="lib" path="lib/activemq-core-5.6.0.jar"/>
-	<classpathentry kind="lib" path="lib/camel-jms-2.9.2.jar"/>
-	<classpathentry kind="lib" path="lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar"/>
-	<classpathentry kind="lib" path="lib/geronimo-jms_1.1_spec-1.1.1.jar"/>
-	<classpathentry kind="lib" path="lib/geronimo-jta_1.0.1B_spec-1.0.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/slf4j-api-1.6.4.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/slf4j-log4j12-1.6.4.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/log4j-1.2.16.jar"/>
-	<classpathentry kind="lib" path="lib/kahadb-5.6.0.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/xercesImpl-2.7.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/icu4j-3.4.4.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/iri-0.7.jar"/>
@@ -47,8 +38,11 @@
 	<classpathentry exported="true" kind="lib" path="lib/js.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/script-api.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/script-js.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/slf4j-api-1.6.4.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/slf4j-log4j12-1.6.4.jar"/>
 	<classpathentry exported="true" kind="lib" path="sesame/sesame-rio-turtle-2.6.2.jar"/>
 	<classpathentry exported="true" kind="lib" path="sesame/sesame-util-2.6.2.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/log4j-1.2.16.jar"/>
 	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry exported="true" kind="lib" path="lib/apache_commons_math_2.2.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/ojdbc5.jar"/>
