Index: src/cbit/vcell/message/server/cmd/CommandServiceSsh.java
===================================================================
--- src/cbit/vcell/message/server/cmd/CommandServiceSsh.java	(revision 12154)
+++ src/cbit/vcell/message/server/cmd/CommandServiceSsh.java	(revision 12153)
@@ -128,8 +128,6 @@
 				ssh.close();
 			} catch (IOException e) {
 				e.printStackTrace();
-			} finally {
-				ssh = null;
 			}
 		}
 	}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12154)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12153)
@@ -160,16 +160,4 @@
 		}
 	}
 
-
-	public void onSystemAbort(SimulationJobStatus jobStatus, String failureMessage, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) {
-		try {
-			KeyValue simKey = jobStatus.getVCSimulationIdentifier().getSimulationKey();
-			int jobIndex = jobStatus.getJobIndex();
-			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
-			simStateMachine.onSystemAbort(jobStatus, failureMessage, simulationDatabase, session, log);
-		} catch (Exception ex) {
-			log.exception(ex);
-		}
-	}
-
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12154)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12153)
@@ -164,8 +164,8 @@
 		}
 	}
 	
-	public SimulationJobStatus[] getObsoleteSimulations(long interval) throws SQLException{
-		return adminDbTopLevel.getObsoleteSimulations(interval,true);
+	public SimulationJobStatus getNextObsoleteSimulation(long interval) throws SQLException{
+		return adminDbTopLevel.getNextObsoleteSimulation(interval,true);
 	}
 
 	public User getUser(KeyValue simKey, String username) throws DataAccessException, SQLException {
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12154)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12153)
@@ -12,7 +12,6 @@
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 import org.vcell.util.document.VCellServerID;
-import org.vcell.util.document.Version;
 
 import cbit.rmi.event.WorkerEvent;
 import cbit.vcell.field.FieldDataIdentifierSpec;
@@ -28,7 +27,6 @@
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.solver.Simulation;
@@ -79,10 +77,6 @@
 		public DispatchStateMachineEvent(){
 		}
 	}
-	public class AbortStateMachineEvent extends AbstractStateMachineEvent {
-		public AbortStateMachineEvent(){
-		}
-	}
 
 	
 	public SimulationStateMachine(KeyValue simKey, int jobIndex){
@@ -257,7 +251,7 @@
 			startDate = oldSimExeStatus.getStartDate();
 		}
 		if (oldSimExeStatus!=null && oldSimExeStatus.getLatestUpdateDate()!=null){
-			lastUpdateDate = oldSimExeStatus.getLatestUpdateDate();
+			startDate = oldSimExeStatus.getLatestUpdateDate();
 		}
 		if (oldSimExeStatus!=null && oldSimExeStatus.getEndDate()!=null){
 			endDate = oldSimExeStatus.getEndDate();
@@ -381,7 +375,7 @@
 					if (oldSimExeStatus != null) {
 						Date latestUpdate = oldSimExeStatus.getLatestUpdateDate();
 						Date sysDate = oldSimulationJobStatus.getTimeDateStamp();
-						if (sysDate.getTime() - latestUpdate.getTime() >= MessageConstants.INTERVAL_PING_SERVER_MS * 3 / 5) {
+						if (sysDate.getTime() - latestUpdate.getTime() >= MessageConstants.INTERVAL_PING_SERVER * 3 / 5) {
 							// new queue status		
 							SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 							SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, htcJobID);
@@ -418,10 +412,13 @@
 				
 				// new exe status
 				endDate = new Date();
+				hasData = true;
 
+				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
+				
 				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, htcJobID);
 
-				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.FAILED,
+				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
 						taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
 
 			}
@@ -617,20 +614,17 @@
 				SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(),vcSimID,jobIndex,oldJobStatus.getSubmitDate(),
 						SchedulerStatus.STOPPED,taskID,SimulationMessage.solverStopped("simulation stopped by user"),simQueueEntryStatus,simExeStatus);
 				
-				//
-				// send stopSimulation to serviceControl topic
-				//
-				log.print("send " + MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE + " to " + VCellTopic.ServiceControlTopic.getName() + " topic");
-				VCMessage msg = session.createMessage();
-				msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE);
-				msg.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simKey + ""));
-				msg.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, jobIndex);
-				msg.setIntProperty(MessageConstants.TASKID_PROPERTY, taskID);
-				msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, user.getName());
-				if (simExeStatus.getHtcJobID()!=null){
-					msg.setStringProperty(MessageConstants.HTCJOBID_PROPERTY, simExeStatus.getHtcJobID().toDatabase());
+				if (schedulerStatus.isDispatched() || schedulerStatus.isRunning()){
+					// send stopSimulation to serviceControl topic
+					log.print("send " + MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE + " to " + VCellTopic.ServiceControlTopic.getName() + " topic");
+					VCMessage msg = session.createMessage();
+					msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE);
+					msg.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simKey + ""));
+					msg.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, jobIndex);
+					msg.setIntProperty(MessageConstants.TASKID_PROPERTY, taskID);
+					msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, user.getName());
+					session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
 				}
-				session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
 				
 				SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 				
@@ -641,75 +635,6 @@
 		}
 	}
 
-	public synchronized void onSystemAbort(SimulationJobStatus oldJobStatus, String failureMessage, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, UpdateSynchronizationException, DataAccessException, SQLException {
-		addStateMachineEvent(new AbortStateMachineEvent());
-		
-		SchedulerStatus schedulerStatus = oldJobStatus.getSchedulerStatus();
-		int taskID = oldJobStatus.getTaskID();
-		addOrReplaceSimTaskProcessState(getNewTaskState_StopSimulation(taskID));
 
-		//
-		// status information (initialized as if new record)
-		//
-		Date startDate = null;
-		boolean hasData = false;
-		HtcJobID htcJobID = null;
-		String computeHost = null;
-		VCellServerID vcServerID = VCellServerID.getSystemServerID();
-		Date submitDate = null;
-		Date queueDate = null;
-		int queuePriority = MessageConstants.PRIORITY_DEFAULT;
-		
 
-		//
-		// update using previously stored status (if available).
-		//
-		SimulationExecutionStatus oldSimExeStatus = oldJobStatus.getSimulationExecutionStatus();
-		if (oldSimExeStatus!=null && oldSimExeStatus.getStartDate()!=null){
-			startDate = oldSimExeStatus.getStartDate();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.hasData()){
-			hasData = true;
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getComputeHost()!=null){
-			computeHost = oldSimExeStatus.getComputeHost();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getHtcJobID()!=null){
-			htcJobID = oldSimExeStatus.getHtcJobID();
-		}
-		vcServerID = oldJobStatus.getServerID();
-		submitDate = oldJobStatus.getSubmitDate();
-		SimulationQueueEntryStatus oldQueueStatus = oldJobStatus.getSimulationQueueEntryStatus();
-		if (oldQueueStatus!=null && oldQueueStatus.getQueueDate()!=null){
-			queueDate = oldQueueStatus.getQueueDate();
-		}
-		if (oldQueueStatus!=null){
-			queuePriority = oldQueueStatus.getQueuePriority();
-		}
-			
-		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-		
-		Date endDate = new Date();
-		Date lastUpdateDate = new Date();
-
-		SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, htcJobID);
-
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(vcServerID, oldJobStatus.getVCSimulationIdentifier(), jobIndex, submitDate, SchedulerStatus.FAILED,
-				taskID, SimulationMessage.jobFailed(failureMessage), newQueueStatus, newExeStatus);
-		
-		SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
-
-		String userName = "all";
-		SimulationJob simulationJob = simulationDatabase.getSimulationJob(simKey, jobIndex);
-		if (simulationJob!=null){
-			Version version = simulationJob.getSimulation().getVersion();
-			if (version!=null){
-				userName = version.getOwner().getName();
-			}
-		}
-		StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, null, null);
-		msgForClient.sendToClient(session);
-		log.print("Send status to client: " + msgForClient);
-	}
-
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12154)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12153)
@@ -9,14 +9,11 @@
  */
 
 package cbit.vcell.message.server.dispatcher;
-import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
 import java.util.StringTokenizer;
-import java.util.TreeMap;
 
-import org.vcell.util.ExecutableException;
 import org.vcell.util.MessageConstants;
 import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
@@ -34,7 +31,6 @@
 import cbit.vcell.message.VCMessage;
 import cbit.vcell.message.VCMessageSelector;
 import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.VCMessagingService;
 import cbit.vcell.message.VCQueueConsumer;
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
@@ -44,16 +40,6 @@
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.cmd.CommandService;
-import cbit.vcell.message.server.cmd.CommandServiceLocal;
-import cbit.vcell.message.server.cmd.CommandServiceSsh;
-import cbit.vcell.message.server.htc.HtcException;
-import cbit.vcell.message.server.htc.HtcJobID;
-import cbit.vcell.message.server.htc.HtcJobID.BatchSystemType;
-import cbit.vcell.message.server.htc.HtcJobNotFoundException;
-import cbit.vcell.message.server.htc.HtcProxy;
-import cbit.vcell.message.server.htc.pbs.PbsProxy;
-import cbit.vcell.message.server.htc.sge.SgeProxy;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatusInfo;
 import cbit.vcell.modeldb.AdminDBTopLevel;
@@ -63,7 +49,6 @@
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
 import cbit.vcell.solver.VCSimulationIdentifier;
-import cbit.vcell.solvers.AbstractSolver;
 
 /**
  * Insert the type's description here.
@@ -81,11 +66,7 @@
 	private SimulationDispatcherEngine simDispatcherEngine = new SimulationDispatcherEngine();
 
 	private DispatchThread dispatchThread = null;
-	private SimulationMonitorThread simMonitorThread = null;
 	private VCMessageSession dispatcherQueueSession = null;
-	private VCMessageSession simMonitorThreadSession = null;
-	
-	private HtcProxy htcProxy = null;
 
 	public class DispatchThread extends Thread {
 		public DispatchThread() {
@@ -136,135 +117,96 @@
 		}
 	}
 
-	class SimulationMonitorThread extends Thread {
+//	class SimulationMonitorThread extends Thread {
+//
+//		public SimulationMonitorThread() {
+//			super();
+//			setDaemon(true);
+//			setName("Simulation Monitor Thread");
+//		}
+//		
+//		public void run() {
+//
+//			while (true){
+//				
+//				//
+//				// for first 10 minutes of dispatcher uptime, don't check for obsolete messages.
+//				// as a startup transient, let the dispatchers catch up with worker messages before passing
+//				// judgement on the health of jobs.
+//				//
+//				// a better way of doing it is to wait until the worker messages have caught-up (message.date > startup.date).
+//				//
+//				// also, now that things are in memory, we can check memory for those jobs that are not well behaved.
+//				//
+//				long uptime = System.currentTimeMillis() - VCMongoMessage.getServiceStartupTime();
+//				final int UPTIME_WAIT = 1000*60*10;
+//				if (uptime < UPTIME_WAIT){
+//					try {
+//						Thread.sleep(UPTIME_WAIT - uptime);
+//					}catch (Exception e){
+//					}
+//					continue;  // for first 10 minutes of uptime, don't obsolete any jobs
+//				}
+//				
+//				SimulationJobStatus jobStatus = simulationDatabase.getNextObsoleteSimulation(MessageConstants.INTERVAL_DATABASE_SERVER_FAIL);								
+//				HtcJobID htcJobID = jobStatus.getSimulationExecutionStatus().getHtcJobID();
+//				if (pbsJobID!=null){
+//					PBSUtils.killJob(htcJobID);
+//				}
+//
+//				// too many retries
+//				if ((jobStatus.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) >= MessageConstants.TASKID_MAX_RETRIES) {							
+//					log.print("##MT too many retries " + jobStatus);
+//
+//					// new job status is failed.
+//					SimulationJobStatus	newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getSubmitDate(),
+//						SchedulerStatus.FAILED, jobStatus.getTaskID(),
+//						SimulationMessage.MESSAGE_JOB_FAILED_TOOMANYRETRIES,
+//						jobStatus.getSimulationQueueEntryStatus(), jobStatus.getSimulationExecutionStatus());
+//					//update the database
+//					this.simulationDispatcherMessaging.jobAdminXA.updateSimulationJobStatus(obsoleteJobDbConnection.getConnection(), jobStatus, newJobStatus);
+//					// tell client
+//					StatusMessage statusMsg = new StatusMessage(newJobStatus, jobStatus.getVCSimulationIdentifier().getOwner().getName(), null, null);
+//					statusMsg.sendToClient(obsoleteJobDispatcher);
+//					
+//				} else {
+//					SimulationTask simTask = this.simulationDispatcherMessaging.simDispatcher.getSimulationTask(jobStatus);
+//					
+//					log.print("##MT requeued " + simTask);
+//
+//					// increment taskid, new job status is queued
+//					SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getSubmitDate(), 
+//						SchedulerStatus.QUEUED, jobStatus.getTaskID() + 1, 
+//						SimulationMessage.MESSAGE_JOB_QUEUED_RETRY, jobStatus.getSimulationQueueEntryStatus(), null);
+//					
+//					//update the database
+//					this.simulationDispatcherMessaging.jobAdminXA.updateSimulationJobStatus(obsoleteJobDbConnection.getConnection(), jobStatus, newJobStatus);
+//					// send to simulation queue
+//					Simulation sim = simTask.getSimulationJob().getSimulation();
+//					SimulationTask newSimTask = new SimulationTask(new SimulationJob(sim, newJobStatus.getJobIndex(), this.simulationDispatcherMessaging.simDispatcher.getFieldDataIdentifierSpecs(sim)), newJobStatus.getTaskID());
+//					SimulationTaskMessage taskMsg = new SimulationTaskMessage(newSimTask);
+//					taskMsg.sendSimulationTask(obsoleteJobDispatcher);
+//					// tell client
+//					StatusMessage statusMsg = new StatusMessage(newJobStatus, newSimTask.getUserName(), null, null);
+//					statusMsg.sendToClient(obsoleteJobDispatcher);
+//				}
+//				// start next check after some time
+//				try {
+//					sleep(MessageConstants.INTERVAL_PING_SERVER);
+//				} catch (InterruptedException ex) {
+//					log.exception(ex);
+//				}
+//				
+//			} // first while (true);
+//		}
+//	}
 
-		Object notifyObject = new Object();
-		
-		public SimulationMonitorThread(HtcProxy htcProxy) {
-			super();
-			setDaemon(true);
-			setName("Simulation Monitor Thread");
-		}
-		
-		public void run() {
-			while (true){
-
-				try {
-					killZombieProcesses();
-				} catch (ExecutableException e1) {
-					log.exception(e1);
-				}
-				
-				//
-				// flush the message queue and measure processing time.
-				//
-				long startFlushTimeMS = System.currentTimeMillis();
-				try {
-					flushWorkerEventQueue();
-				} catch (Exception e1) {
-					log.exception(e1);
-				}
-				long endFlushTimeMS = System.currentTimeMillis() - startFlushTimeMS;
-				long messageFlushTimeMS = endFlushTimeMS - startFlushTimeMS;
-				
-				//
-				// abort unresponsive jobs
-				//
-				try {
-					abortStalledSimulationTasks(messageFlushTimeMS);
-				} catch (Exception e1) {
-					log.exception(e1);
-				}
-				
-				//
-				// sleep 30 seconds and try again
-				//
-				try { sleep(MessageConstants.MINUTE_IN_MS*2); } catch (InterruptedException e){}
-			}
-		}
-		
-		private void flushWorkerEventQueue() throws VCMessagingException{
-			VCMessage message = simMonitorThreadSession.createObjectMessage(new Long(VCMongoMessage.getServiceStartupTime()));
-			message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY,MessageConstants.MESSAGE_TYPE_FLUSH_VALUE);
-			simMonitorThreadSession.sendQueueMessage(VCellQueue.WorkerEventQueue, message);
-			synchronized (notifyObject) {
-				try {
-					long waitTime = MessageConstants.MINUTE_IN_MS*5;
-					long startWaitTime = System.currentTimeMillis();
-					notifyObject.wait(waitTime);
-					long endWaitTime = System.currentTimeMillis();
-					if ((endWaitTime-startWaitTime)>=waitTime){
-						throw new VCMessagingException("worker event queue flush timed out (>"+waitTime+" s), considerable message backlog?");
-					}
-				} catch (InterruptedException e) {
-				}
-			}
-		}
-		
-		private void killZombieProcesses() throws ExecutableException{
-			TreeMap<HtcJobID, String> runningSimulations = htcProxy.getRunningSimulationJobIDs();
-			for (HtcJobID htcJobID : runningSimulations.keySet()){
-				try {
-					String simJobName = runningSimulations.get(htcJobID);
-					HtcProxy.SimTaskInfo simTaskInfo = HtcProxy.getSimTaskInfoFromSimJobName(simJobName);
-					SimulationJobStatus simJobStatus = simulationDatabase.getSimulationJobStatus(simTaskInfo.simId, simTaskInfo.jobIndex, simTaskInfo.taskId);
-					boolean killJob = false;
-					if (simJobStatus==null){
-						killJob = true;
-					}else if (simJobStatus.getSchedulerStatus().isDone()){
-						if (simJobStatus.getSimulationExecutionStatus()==null){
-							killJob = true;
-						}else{
-							long elapsedTimeMS = System.currentTimeMillis() - simJobStatus.getSimulationExecutionStatus().getLatestUpdateDate().getTime();
-							if (elapsedTimeMS > 10000){
-								killJob = true;
-							}
-						}
-					}
-					if (killJob){
-						htcProxy.killJob(htcJobID);
-					}
-				}catch (Exception e){
-					log.exception(e);
-				}
-			}
-		}
-		
-		private void abortStalledSimulationTasks(long messageFlushTimeMS) throws SQLException{
-			
-			//
-			// message queue has already been flushed ... and the time it took was recorded in messageFlushTimeMS
-			//
-			// because of this, we don't have to worry about killing jobs prematurely.
-			//
-			
-			SimulationJobStatus[] jobStatusArray = simulationDatabase.getObsoleteSimulations(MessageConstants.INTERVAL_DATABASE_SERVER_FAIL_SECONDS + (messageFlushTimeMS/1000));
-			for (SimulationJobStatus jobStatus : jobStatusArray){
-				String failureMessage = "failed: timed out";
-				simDispatcherEngine.onSystemAbort(jobStatus, failureMessage, simulationDatabase, simMonitorThreadSession, log);
-				if (jobStatus.getSimulationExecutionStatus()!=null && jobStatus.getSimulationExecutionStatus().getHtcJobID()!=null){
-					HtcJobID htcJobId = jobStatus.getSimulationExecutionStatus().getHtcJobID();
-					try {
-						htcProxy.killJob(htcJobId);
-					} catch (HtcJobNotFoundException e) {
-						e.printStackTrace();
-					} catch (ExecutableException e) {
-						e.printStackTrace();
-					} catch (HtcException e) {
-						e.printStackTrace();
-					}
-				}
-			}			
-		}
-	}
-
 	/**
 	 * Scheduler constructor comment.
 	 */
-	public SimulationDispatcher(HtcProxy htcProxy, VCMessagingService vcMessagingService, ServiceInstanceStatus serviceInstanceStatus, SimulationDatabase simulationDatabase, SessionLog log) throws Exception {
+	public SimulationDispatcher(VCMessagingService vcMessagingService, ServiceInstanceStatus serviceInstanceStatus, SimulationDatabase simulationDatabase, SessionLog log) throws Exception {
 		super(vcMessagingService,serviceInstanceStatus,log);
 		this.simulationDatabase = simulationDatabase;
-		this.htcProxy = htcProxy;
 	}
 
 
@@ -302,10 +244,6 @@
 		this.dispatchThread.start();
 		
 		initControlTopicListener();
-		
-		this.simMonitorThreadSession = vcMessagingService.createProducerSession();
-		this.simMonitorThread = new SimulationMonitorThread(htcProxy);
-		this.simMonitorThread.start();
 	}
 
 
@@ -351,25 +289,9 @@
 	 */
 	private void onWorkerEventMessage(VCMessage vcMessage, VCMessageSession session) {
 		try {
-			//
-			// process WorkerEventQueue flush message
-			//
-			if (vcMessage.propertyExists(MessageConstants.MESSAGE_TYPE_PROPERTY) && vcMessage.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY).equals(MessageConstants.MESSAGE_TYPE_FLUSH_VALUE)){
-				if (simMonitorThread!=null){
-					try {
-						synchronized (simMonitorThread.notifyObject){
-							simMonitorThread.notifyObject.notify();
-						}
-					}catch (IllegalMonitorStateException e){
-						e.printStackTrace();
-					}
-					VCMongoMessage.sendInfo("flushed worker event queue");
-				}
-				return;
-			}
-
 			WorkerEventMessage workerEventMessage = new WorkerEventMessage(simulationDatabase, vcMessage);
 			WorkerEvent workerEvent = workerEventMessage.getWorkerEvent();
+
 			simDispatcherEngine.onWorkerEvent(workerEvent, simulationDatabase, session, log);
 
 		} catch (Exception ex) {
@@ -416,8 +338,8 @@
 	 * @param args an array of command-line arguments
 	 */
 	public static void main(java.lang.String[] args) {
-		if (args.length != 3 && args.length != 6) {
-			System.out.println("Missing arguments: " + SimulationDispatcher.class.getName() + " serviceOrdinal (logdir|-) (PBS|SGE) [pbshost userid pswd] ");
+		if (args.length < 1) {
+			System.out.println("Missing arguments: " + SimulationDispatcher.class.getName() + " serviceOrdinal [logdir]");
 			System.exit(1);
 		}
 
@@ -429,33 +351,6 @@
 			if (args.length > 1) {
 				logdir = args[1];
 			}
-			
-			BatchSystemType batchSystemType = BatchSystemType.valueOf(args[2]);
-			CommandService commandService = null;
-			if (args.length==6){
-				String pbsHost = args[3];
-				String pbsUser = args[4];
-				String pbsPswd = args[5];
-				commandService = new CommandServiceSsh(pbsHost,pbsUser,pbsPswd);
-				AbstractSolver.bMakeUserDirs = false; // can't make user directories, they are remote.
-			}else{
-				commandService = new CommandServiceLocal();
-			}
-			HtcProxy htcProxy = null;
-			switch(batchSystemType){
-				case PBS:{
-					htcProxy = new PbsProxy(commandService);
-					break;
-				}
-				case SGE:{
-					htcProxy = new SgeProxy(commandService);
-					break;
-				}
-				default: {
-					throw new RuntimeException("unrecognized batch scheduling option :"+batchSystemType);
-				}
-			}
-			
 			VCMongoMessage.serviceStartup(ServiceName.dispatch, new Integer(serviceOrdinal), args);
 			ServiceInstanceStatus serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), 
 					ServiceType.DISPATCH, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);	
@@ -473,7 +368,7 @@
 
 			VCMessagingService vcMessagingService = VCMessagingService.createInstance();
 
-			SimulationDispatcher simulationDispatcher = new SimulationDispatcher(htcProxy, vcMessagingService, serviceInstanceStatus, simulationDatabase, log);
+			SimulationDispatcher simulationDispatcher = new SimulationDispatcher(vcMessagingService, serviceInstanceStatus, simulationDatabase, log);
 			simulationDispatcher.init();
 		} catch (Throwable e) {
 			e.printStackTrace(System.out);
Index: src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java
===================================================================
--- src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12154)
+++ src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12153)
@@ -20,6 +20,7 @@
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
 import org.vcell.util.document.KeyValue;
+import org.vcell.util.document.VCellServerID;
 
 import cbit.vcell.message.MessagePropertyNotFoundException;
 import cbit.vcell.message.VCMessage;
@@ -34,6 +35,8 @@
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
+import cbit.vcell.solver.Simulation;
+import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.Solver;
 import cbit.vcell.solver.SolverEvent;
@@ -68,12 +71,12 @@
 		public void run() {
 			while (true) {
 				try {
-					sleep(MessageConstants.INTERVAL_PING_SERVER_MS);
+					sleep(MessageConstants.INTERVAL_PING_SERVER);
 				} catch (InterruptedException ex) {
 				}
 		
 				long t = System.currentTimeMillis();
-				if (lastMsgTimeStamp != 0 && t - lastMsgTimeStamp > MessageConstants.INTERVAL_PING_SERVER_MS) {
+				if (lastMsgTimeStamp != 0 && t - lastMsgTimeStamp > MessageConstants.INTERVAL_PING_SERVER) {
 					log.print("@@@@Worker:Sending alive message");
 					sendAlive();
 				}
@@ -277,7 +280,7 @@
 private void sendNewData(double progress, double timeSec, SimulationMessage simulationMessage) {	
 	try {
 		long t = System.currentTimeMillis();
-		if (bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE_MS) { // don't send data message too frequently
+		if (bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE) { // don't send data message too frequently
 			log.print("sendNewData(" + simulationTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");		
 			WorkerEventMessage.sendNewData(workerEventSession, this, simulationTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
 		
@@ -297,7 +300,7 @@
 private void sendProgress(double progress, double timeSec, SimulationMessage simulationMessage) {
 	try {
 		long t = System.currentTimeMillis();
-		if (!bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE_MS 
+		if (!bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE 
 				|| ((int)(progress * 100)) % 25 == 0) { // don't send progress message too frequently
 			log.print("sendProgress(" + simulationTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");
 			WorkerEventMessage.sendProgress(workerEventSession, this, simulationTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
Index: src/cbit/vcell/message/server/sim/HtcSimulationWorker.java
===================================================================
--- src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12154)
+++ src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12153)
@@ -9,21 +9,12 @@
  */
 
 package cbit.vcell.message.server.sim;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_PROPERTY;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE;
-import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
-import static cbit.vcell.message.server.ManageConstants.SERVICE_ID_PROPERTY;
-
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.UnknownHostException;
 import java.util.Date;
 import java.util.StringTokenizer;
-import java.util.TreeMap;
 
 import org.vcell.util.BeanUtils;
 import org.vcell.util.DataAccessException;
@@ -33,7 +24,6 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
-import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.util.xml.XmlUtil;
@@ -44,10 +34,7 @@
 import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.VCMessagingService;
 import cbit.vcell.message.VCQueueConsumer;
-import cbit.vcell.message.VCTopicConsumer;
-import cbit.vcell.message.VCellTopic;
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
-import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellQueue;
 import cbit.vcell.message.messages.SimulationTaskMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
@@ -57,10 +44,8 @@
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
-import cbit.vcell.message.server.htc.HtcException;
 import cbit.vcell.message.server.htc.HtcJobID;
 import cbit.vcell.message.server.htc.HtcJobID.BatchSystemType;
-import cbit.vcell.message.server.htc.HtcJobNotFoundException;
 import cbit.vcell.message.server.htc.HtcProxy;
 import cbit.vcell.message.server.htc.pbs.PbsProxy;
 import cbit.vcell.message.server.htc.sge.SgeProxy;
@@ -85,7 +70,6 @@
 	private HtcProxy htcProxy = null;
 
 	private VCQueueConsumer queueConsumer = null;
-	private VCTopicConsumer serviceControlTopicConsumer = null;
 	/**
 	 * SimulationWorker constructor comment.
 	 * @param argName java.lang.String
@@ -120,7 +104,7 @@
 	HtcJobID jobid = null;
 	
 	String subFile = simTask.getSimulationJob().getSimulationJobID() + htcProxy.getSubmissionFileExtension();
-	String jobname = HtcProxy.createHtcSimJobName(new HtcProxy.SimTaskInfo(simTask.getSimKey(), simTask.getSimulationJob().getJobIndex(), simTask.getTaskID()));   //"S_" + simTask.getSimKey() + "_" + simTask.getSimulationJob().getJobIndex()+ "_" + simTask.getTaskID();
+	String jobname = HtcProxy.createHtcSimJobName(simTask.getSimKey(), simTask.getSimulationJob().getJobIndex());   //"S_" + simTask.getSimKey() + "_" + simTask.getSimulationJob().getJobIndex();
 	
 	Solver realSolver = (AbstractSolver)SolverFactory.createSolver(log, userdir, simTask, true);
 	
@@ -178,76 +162,6 @@
 	return filePath.replace("C:","").replace("D:","").replace("\\","/");
 }
 
-private void initServiceControlTopicListener() {
-	TopicListener listener = new TopicListener() {
-
-		public void onTopicMessage(VCMessage message, VCMessageSession session) {
-			try {
-				String msgType = message.getStringProperty(MESSAGE_TYPE_PROPERTY);
-				
-				if (msgType == null) {
-					return;
-				}
-				
-				if (msgType.equals(MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE)) {			
-					final long simID = message.getLongProperty(MessageConstants.SIMKEY_PROPERTY);
-					final int jobIndex = message.getIntProperty(MessageConstants.JOBINDEX_PROPERTY);
-					final int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
-					String htcJobIdString = null;
-					if (message.propertyExists(MessageConstants.HTCJOBID_PROPERTY)){
-						htcJobIdString = message.getStringProperty(MessageConstants.HTCJOBID_PROPERTY);
-					}
-					final HtcJobID htcJobId = (htcJobIdString!=null) ? HtcJobID.fromDatabase(htcJobIdString) : null;
-					
-					Runnable runnable = new Runnable(){
-						public void run() {
-							HtcProxy threadLocalHtcProxy = htcProxy.cloneThreadsafe();
-							try {
-								try {
-									Thread.sleep(10000); // sleep 10 seconds once ... give job time to kill itself gracefully
-								} catch (InterruptedException e1) {
-								}
-								if (htcJobId!=null){
-									threadLocalHtcProxy.killJob(htcJobId);
-								}else{
-									//
-									// should only return one running job with this name (sim/job/task) (but handles more than one).
-									//
-									String simJobName = HtcProxy.createHtcSimJobName(new HtcProxy.SimTaskInfo(new KeyValue(simID+""), jobIndex, taskID));
-									TreeMap<HtcJobID, String> runningJobs = threadLocalHtcProxy.getRunningJobs(simJobName);
-									for (HtcJobID htcJobID : runningJobs.keySet()){
-										try {
-											threadLocalHtcProxy.killJob(htcJobID);
-										} catch (Exception e) {
-											log.exception(e);
-										}
-									}
-								}
-							} catch (Exception e) {
-								log.exception(e);
-							} finally {
-								threadLocalHtcProxy.getCommandService().close();
-							}
-						}
-					};
-					Thread killSimulationThread = new Thread(runnable, "Kill Simulation Thread (sim="+simID+", job="+jobIndex+", taskid="+taskID);
-					killSimulationThread.setDaemon(true);
-					killSimulationThread.start();
-				}
-			} catch (Exception ex) {
-				log.exception(ex);
-			}	
-		}
-
-	};
-	VCMessageSelector selector = null;
-	String threadName = "Service Control Topic Consumer (for killing sims)";
-	serviceControlTopicConsumer = new VCTopicConsumer(VCellTopic.ServiceControlTopic, listener, selector, threadName);
-	vcMessagingService.addMessageConsumer(serviceControlTopicConsumer);
-}
-
-
-
 private void initQueueConsumer() {
 	QueueListener listener = new QueueListener() {
 		
Index: src/cbit/vcell/message/server/manager/ServerManagerDaemon.java
===================================================================
--- src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12154)
+++ src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12153)
@@ -440,7 +440,7 @@
 }
 
 private void killService(ServiceStatus service) throws ExecutableException, HtcJobNotFoundException, HtcException {
-	 TreeMap<HtcJobID, String>  jobIdMapJobName = htcProxy.getRunningServiceJobIDs(VCellServerID.getSystemServerID());
+	 TreeMap<HtcJobID, String>  jobIdMapJobName = htcProxy.getServiceJobIDs(VCellServerID.getSystemServerID());
 	 HtcJobID foundJobID = null;
 	 for(HtcJobID jobID : jobIdMapJobName.keySet()){
 		 if(jobIdMapJobName.get(jobID).equals(service.getServiceSpec().getID())){
Index: src/cbit/vcell/message/server/htc/test/HtcTest.java
===================================================================
--- src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12154)
+++ src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12153)
@@ -1,5 +1,6 @@
 package cbit.vcell.message.server.htc.test;
 
+import java.util.List;
 import java.util.TreeMap;
 
 import org.vcell.util.ExecutableException;
@@ -12,6 +13,7 @@
 import cbit.vcell.message.server.htc.HtcJobStatus;
 import cbit.vcell.message.server.htc.HtcProxy;
 import cbit.vcell.message.server.htc.pbs.PbsJobID;
+import cbit.vcell.message.server.htc.pbs.PbsProxy;
 import cbit.vcell.message.server.htc.sge.SgeJobID;
 import cbit.vcell.message.server.htc.sge.SgeProxy;
 
@@ -43,7 +45,7 @@
 	private static void testServices(HtcProxy htcProxy, VCellServerID serverID)	throws ExecutableException, HtcException, HtcJobNotFoundException {
 		try {
 			System.out.println("getting services");
-			TreeMap<HtcJobID, String> jobIDs = htcProxy.getRunningServiceJobIDs(serverID);
+			TreeMap<HtcJobID, String> jobIDs = htcProxy.getServiceJobIDs(serverID);
 			for (HtcJobID jobID : jobIDs.keySet()){
 				if (jobID instanceof PbsJobID){
 					System.out.println("serviceJobID : "+((PbsJobID)jobID).getPbsJobID());
Index: src/cbit/vcell/message/server/htc/HtcProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/HtcProxy.java	(revision 12154)
+++ src/cbit/vcell/message/server/htc/HtcProxy.java	(revision 12153)
@@ -3,14 +3,12 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.Serializable;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.util.List;
-import java.util.StringTokenizer;
 import java.util.TreeMap;
 
 import org.vcell.util.ExecutableException;
@@ -38,20 +36,7 @@
 		HTC_SIMULATION_JOB,
 		HTC_SERVICE_JOB;
 	}
-	
-	public static class SimTaskInfo {
-		public final KeyValue simId;
-		public final int jobIndex;
-		public final int taskId;
-	
-		public SimTaskInfo(KeyValue simId, int jobIndex, int taskId){
-			this.simId = simId;
-			this.jobIndex = jobIndex;
-			this.taskId = taskId;
-		}
-	}
-	
-	public final static String HTC_SIMULATION_JOB_NAME_PREFIX = "S_";
+	protected final static String HTC_SIMULATION_JOB_NAME_PREFIX = "S_";
 	protected CommandService commandService = null;
 
 	
@@ -81,46 +66,16 @@
 
 	public abstract HtcProxy cloneThreadsafe();
 	
-	public abstract TreeMap<HtcJobID, String> getRunningServiceJobIDs(VCellServerID serverID) throws ExecutableException;
+	public abstract TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException;
 
-	public abstract TreeMap<HtcJobID, String> getRunningSimulationJobIDs() throws ExecutableException;
-
-	public abstract TreeMap<HtcJobID, String> getRunningJobs(String jobNamePrefix) throws ExecutableException;
-
 	public final CommandService getCommandService() {
 		return commandService;
 	}
 
-	public static SimTaskInfo getSimTaskInfoFromSimJobName(String simJobName) throws HtcException{
-		if (simJobName.startsWith(HTC_SIMULATION_JOB_NAME_PREFIX)){
-			String restOfName = simJobName.substring(HTC_SIMULATION_JOB_NAME_PREFIX.length());
-			StringTokenizer tokens = new StringTokenizer(restOfName,"_");
-			String simIdString = null;
-			if (tokens.hasMoreTokens()){
-				simIdString = tokens.nextToken();
-			}
-			String jobIndexString = null;
-			if (tokens.hasMoreTokens()){
-				jobIndexString = tokens.nextToken();
-			}
-			String taskIdString = null;
-			if (tokens.hasMoreTokens()){
-				taskIdString = tokens.nextToken();
-			}
-			if (simIdString!=null && jobIndexString!=null && taskIdString!=null){
-				KeyValue simId = new KeyValue(simIdString);
-				int jobIndex = Integer.valueOf(jobIndexString);
-				int taskId = Integer.valueOf(taskIdString);
-				return new SimTaskInfo(simId,jobIndex,taskId);
-			}
-		}
-		throw new HtcException("simJobName : "+simJobName+" not in expected format for a simulation job name");
+	public static String createHtcSimJobName(KeyValue simKey, int simJobIndex) {
+		return HTC_SIMULATION_JOB_NAME_PREFIX+simKey.toString()+"_"+simJobIndex;
 	}
 
-	public static String createHtcSimJobName(SimTaskInfo simTaskInfo) {
-		return HTC_SIMULATION_JOB_NAME_PREFIX+simTaskInfo.simId.toString()+"_"+simTaskInfo.jobIndex+"_"+simTaskInfo.taskId;
-	}
-
 	public static void writeUnixStyleTextFile(File file, String javaString)
 			throws IOException {
 				FileChannel fc = new FileOutputStream(file).getChannel();
Index: src/cbit/vcell/message/server/htc/pbs/PbsProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/pbs/PbsProxy.java	(revision 12154)
+++ src/cbit/vcell/message/server/htc/pbs/PbsProxy.java	(revision 12153)
@@ -298,21 +298,11 @@
 	}
 	
 	@Override
-	public TreeMap<HtcJobID, String> getRunningServiceJobIDs(VCellServerID serverID) throws ExecutableException {
-		return getRunningJobs(serverID.toString().toUpperCase()+"_");
-	}
-
-	@Override
-	public TreeMap<HtcJobID, String> getRunningSimulationJobIDs() throws ExecutableException {
-		return getRunningJobs(HTC_SIMULATION_JOB_NAME_PREFIX);
-	}
-
-	@Override
-	public TreeMap<HtcJobID, String> getRunningJobs(String jobNamePrefix) throws ExecutableException {
+	public TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
 		try {
-			String[] cmd = new String[]{JOB_CMD_STATUS, "|", "grep", jobNamePrefix};
+			String[] cmd = new String[]{JOB_CMD_STATUS, "|", "grep", serverID.toString().toUpperCase()+"_"};
 			CommandOutput commandOutput = commandService.command(cmd);
-			TreeMap<HtcJobID, String> pbsJobIDNameMap =
+			TreeMap<HtcJobID, String> pbsJobIDMapServiceType =
 				new TreeMap<HtcJobID, String>(new Comparator<HtcJobID>() {
 					@Override
 					public int compare(HtcJobID o1, HtcJobID o2) {
@@ -325,16 +315,16 @@
 				StringTokenizer st = new StringTokenizer(line," \t");
 				String pbsJobInfo = st.nextToken();
 				Integer pbsJobID = new Integer(pbsJobInfo.substring(0,pbsJobInfo.indexOf('.')));
-				String jobName = st.nextToken();
-				pbsJobIDNameMap.put(new PbsJobID(String.valueOf(pbsJobID)), jobName);
+				String serviceJobName = st.nextToken();
+				pbsJobIDMapServiceType.put(new PbsJobID(String.valueOf(pbsJobID)), serviceJobName);
 			}
-			return pbsJobIDNameMap;
+			return pbsJobIDMapServiceType;
 		} catch (Exception e) {
 			e.printStackTrace();
 			if(e instanceof ExecutableException){
 				throw (ExecutableException)e;
 			}else{
-				throw new ExecutableException("Error getRunningJobs(): "+e.getMessage());
+				throw new ExecutableException("Error getServiceJobIDs: "+e.getMessage());
 			}
 		}
 	}
Index: src/cbit/vcell/message/server/htc/sge/SgeProxy.java
===================================================================
--- src/cbit/vcell/message/server/htc/sge/SgeProxy.java	(revision 12154)
+++ src/cbit/vcell/message/server/htc/sge/SgeProxy.java	(revision 12153)
@@ -1,16 +1,23 @@
 package cbit.vcell.message.server.htc.sge;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
+import java.io.StringReader;
 import java.io.StringWriter;
+import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.StringTokenizer;
 import java.util.TreeMap;
 
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
 import org.jdom.Document;
 import org.jdom.Element;
+import org.jdom.input.SAXBuilder;
 import org.vcell.util.ExecutableException;
 import org.vcell.util.FileUtils;
 import org.vcell.util.document.VCellServerID;
@@ -23,6 +30,8 @@
 import cbit.vcell.message.server.htc.HtcJobNotFoundException;
 import cbit.vcell.message.server.htc.HtcJobStatus;
 import cbit.vcell.message.server.htc.HtcProxy;
+import cbit.vcell.message.server.htc.pbs.PbsJobID;
+import cbit.vcell.xml.XmlHelper;
 
 public class SgeProxy extends HtcProxy {
 	private final static String QDEL_UNKNOWN_JOB_RESPONSE = "does not exist";
@@ -383,21 +392,11 @@
 	}
 
 	@Override
-	public TreeMap<HtcJobID, String> getRunningServiceJobIDs(VCellServerID serverID) throws ExecutableException {
-		return getRunningJobs(serverID.toString().toUpperCase()+"_");
-	}
-
-	@Override
-	public TreeMap<HtcJobID, String> getRunningSimulationJobIDs() throws ExecutableException {
-		return getRunningJobs(HTC_SIMULATION_JOB_NAME_PREFIX);
-	}
-
-	@Override
-	public TreeMap<HtcJobID, String> getRunningJobs(String jobNamePrefix) throws ExecutableException {
+	public TreeMap<HtcJobID, String> getServiceJobIDs(VCellServerID serverID) throws ExecutableException {
 		try{
 			String[] cmd = new String[]{JOB_CMD_STATUS, "-xml"};//get running jobs in XML format
 			CommandOutput commandOutput = commandService.command(cmd);
-			TreeMap<HtcJobID, String> pbsJobIDMapJobName =
+			TreeMap<HtcJobID, String> pbsJobIDMapServiceType =
 				new TreeMap<HtcJobID, String>(new Comparator<HtcJobID>() {
 					@Override
 					public int compare(HtcJobID o1, HtcJobID o2) {
@@ -410,16 +409,16 @@
 			for(Element jobInfoElement : qstatInfoChildren){
 				String jobID = jobInfoElement.getChildText("JB_job_number").trim();
 				String jobName = jobInfoElement.getChildText("JB_name").trim();
-				if(jobName.startsWith(jobNamePrefix))
-				pbsJobIDMapJobName.put(new SgeJobID(jobID), jobName);
+				if(jobName.startsWith(serverID.toString().toUpperCase()+"_"))
+				pbsJobIDMapServiceType.put(new SgeJobID(jobID), jobName);
 			}
-			return pbsJobIDMapJobName;
+			return pbsJobIDMapServiceType;
 		} catch (Exception e) {
 			e.printStackTrace();
 			if(e instanceof ExecutableException){
 				throw (ExecutableException)e;
 			}else{
-				throw new ExecutableException("Error getRunningJobs: "+e.getMessage());
+				throw new ExecutableException("Error getServiceJobIDs: "+e.getMessage());
 			}
 		}
 	}
Index: src/cbit/vcell/modeldb/LocalAdminDbServer.java
===================================================================
--- src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12154)
+++ src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 12153)
@@ -9,11 +9,12 @@
  */
 
 package cbit.vcell.modeldb;
-import java.rmi.RemoteException;
+import java.rmi.*;
 import java.sql.SQLException;
 import java.util.List;
 
 import org.vcell.util.DataAccessException;
+import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.ExternalDataIdentifier;
 import org.vcell.util.document.KeyValue;
@@ -21,8 +22,7 @@
 import org.vcell.util.document.UserInfo;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.sql.ConnectionFactory;
-import cbit.sql.KeyFactory;
+import cbit.sql.*;
 import cbit.vcell.messaging.db.SimpleJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatusInfo;
@@ -97,8 +97,8 @@
 	}
 }
 
-public SimulationJobStatus[] getObsoleteSimulations(long interval) throws SQLException{
-	return adminDbTop.getObsoleteSimulations(interval,true);
+public SimulationJobStatus getNextObsoleteSimulation(long interval) throws SQLException{
+	return adminDbTop.getNextObsoleteSimulation(interval,true);
 }
 
 /**
Index: src/cbit/vcell/modeldb/AdminDBTopLevel.java
===================================================================
--- src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12154)
+++ src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12153)
@@ -9,8 +9,14 @@
  */
 
 package cbit.vcell.modeldb;
+import cbit.vcell.message.server.ServiceStatus;
+import cbit.vcell.solver.ode.gui.SimulationStatus;
 import java.sql.Connection;
 import java.sql.SQLException;
+import cbit.sql.*;
+import cbit.vcell.server.*;
+import cbit.vcell.server.UserLoginInfo.DigestedPassword;
+import cbit.vcell.field.FieldDataDBOperationSpec;
 import java.util.Vector;
 
 import org.vcell.util.DataAccessException;
@@ -22,18 +28,13 @@
 import org.vcell.util.document.UserInfo;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.sql.ConnectionFactory;
-import cbit.vcell.field.FieldDataDBOperationSpec;
-import cbit.vcell.message.server.ServiceStatus;
 import cbit.vcell.messaging.db.ServiceStatusDbDriver;
 import cbit.vcell.messaging.db.SimpleJobStatus;
-import cbit.vcell.messaging.db.SimulationJobDbDriver;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatusInfo;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
+import cbit.vcell.messaging.db.SimulationJobDbDriver;
 import cbit.vcell.mongodb.VCMongoMessage;
-import cbit.vcell.server.UserLoginInfo;
-import cbit.vcell.solver.ode.gui.SimulationStatus;
 
 /**
  * This type was created in VisualAge.
@@ -108,23 +109,23 @@
  * Insert the method's description here.
  * Creation date: (10/6/2005 3:03:51 PM)
  */
-SimulationJobStatus[] getObsoleteSimulations(Connection con, long interval) throws SQLException {
-	SimulationJobStatus[] jobStatusArray = jobDB.getObsoleteSimulations(con, interval);
-	return jobStatusArray;
+SimulationJobStatus getNextObsoleteSimulation(Connection con, long interval) throws SQLException {
+	SimulationJobStatus jobStatus = jobDB.getNextObsoleteSimulation(con, interval);
+	return jobStatus;
 }
 
 
-public SimulationJobStatus[] getObsoleteSimulations(long interval, boolean bEnableRetry) throws java.sql.SQLException {
+public SimulationJobStatus getNextObsoleteSimulation(long interval, boolean bEnableRetry) throws java.sql.SQLException {
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
-		SimulationJobStatus[] jobStatus = jobDB.getObsoleteSimulations(con, interval);
+		SimulationJobStatus jobStatus = jobDB.getNextObsoleteSimulation(con, interval);
 		return jobStatus;
 	} catch (Throwable e) {
 		log.exception(e);
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
-			return getObsoleteSimulations(interval,false);
+			return getNextObsoleteSimulation(interval,false);
 		}else{
 			handle_SQLException(e);
 			return null; // never gets here;
Index: src/cbit/vcell/messaging/db/SimulationJobDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 12154)
+++ src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 12153)
@@ -131,25 +131,25 @@
  * @param user java.lang.String
  * @param imageName java.lang.String
  */
-public SimulationJobStatus[] getObsoleteSimulations(Connection con, long intervalSeconds) throws SQLException {
+public SimulationJobStatus getNextObsoleteSimulation(Connection con, long intervalSeconds) throws SQLException {
 	String sql = new String(standardJobStatusSQL);
 	sql += " AND (sysdate-" + jobTable.latestUpdateDate + ")*86400>" + intervalSeconds
 		+ " AND (" + jobTable.serverID + "='" + VCellServerID.getSystemServerID() + "')"
 		+ " AND (" + jobTable.schedulerStatus + "=" + SchedulerStatus.RUNNING.getDatabaseNumber() // running
 		+ " OR " + jobTable.schedulerStatus + "=" + SchedulerStatus.DISPATCHED.getDatabaseNumber() // worker just accepted it
-		+ ") order by " + jobTable.submitDate;	
+		+ ") and rownum<2 order by " + jobTable.submitDate;	
 			
 	Statement stmt = con.createStatement();
-	ArrayList<SimulationJobStatus> simJobStatusList = new ArrayList<SimulationJobStatus>();
+	SimulationJobStatus simJobStatus = null;
 	try {
 		ResultSet rset = stmt.executeQuery(sql);
-		while (rset.next()){
-			simJobStatusList.add(jobTable.getSimulationJobStatus(rset));
+		if (rset.next()) {
+			simJobStatus = jobTable.getSimulationJobStatus(rset);
 		}
 	} finally {
 		stmt.close();
 	}
-	return simJobStatusList.toArray(new SimulationJobStatus[0]);
+	return simJobStatus;
 }
 
 
Index: src/cbit/vcell/solvers/PBSSolver.java
===================================================================
--- src/cbit/vcell/solvers/PBSSolver.java	(revision 0)
+++ src/cbit/vcell/solvers/PBSSolver.java	(revision 12153)
@@ -0,0 +1,175 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.vcell.solvers;
+import java.io.File;
+import java.util.ArrayList;
+
+import org.vcell.util.ExecutableException;
+import org.vcell.util.SessionLog;
+
+import cbit.vcell.message.server.htc.HtcJobID;
+import cbit.vcell.message.server.htc.HtcProxy;
+import cbit.vcell.messaging.server.SimulationTask;
+import cbit.vcell.mongodb.VCMongoMessage;
+import cbit.vcell.solver.SimulationMessage;
+import cbit.vcell.solver.SolverException;
+import cbit.vcell.solver.SolverStatus;
+
+/**
+ * Insert the type's description here.
+ * Creation date: (4/14/2005 10:47:25 AM)
+ * @author: Fei Gao
+ */
+public class PBSSolver extends HTCSolver {
+	private static String PBS_SUBMIT_FILE_EXT = ".pbs.sub";
+	private HtcProxy htcProxy = null;
+/**
+ * CondorSolver constructor comment.
+ * @param simTask cbit.vcell.messaging.server.SimulationTask
+ * @param directory java.io.File
+ * @param sessionLog cbit.vcell.server.SessionLog
+ * @exception cbit.vcell.solver.SolverException The exception description.
+ */
+public PBSSolver(HtcProxy htcProxy, SimulationTask simTask, java.io.File directory, SessionLog sessionLog) throws cbit.vcell.solver.SolverException {
+	super(simTask, directory, sessionLog);
+	this.htcProxy = htcProxy;
+}
+
+/**
+ * Insert the method's description here.
+ * Creation date: (9/26/2003 2:23:53 PM)
+ * @throws SolverException 
+ * @throws ExecutableException 
+ */
+private HtcJobID submit2PBS() throws Exception {
+	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_SUBMITTING);
+	String cmd = getExecutableCommand();
+	String subFile = new File(getBaseName()).getPath() + PBS_SUBMIT_FILE_EXT;
+	String jobname = HtcProxy.createHtcSimJobName(simulationTask.getSimKey(), simulationTask.getSimulationJob().getJobIndex());  //"S_" + simulationTask.getSimKey() + "_" + simulationTask.getSimulationJob().getJobIndex();
+	ArrayList<String> command = new ArrayList<String>();
+	command.add(cmd);
+	command.addAll(cmdArguments);
+	HtcJobID jobid = htcProxy.submitJob(jobname, subFile, command.toArray(new String[0]), 1, simulationTask.getEstimatedMemorySizeMB());
+	if (jobid == null) {
+		fireSolverAborted(SimulationMessage.jobFailed("Failed. (error message: submitting to job scheduler failed)."));
+		return null;
+	}
+	fireSolverStarting(SimulationMessage.solverEvent_Starting_Submit("submitted to job scheduler, job id is " + jobid, jobid));
+	
+	// babysitPBSSubmission(jobid);
+	
+	return jobid;
+}
+
+/**
+ * the code below was called synchronously within submit2PBS();
+ * 
+ */
+@Deprecated
+//private void babysitPBSSubmission(PbsJobID jobid) throws SolverException{
+//
+//	// if PBS has problem with dispatching jobs, jobs that have been submitted
+//	// but are not running, will be redispatched after 5 minutes. Then we have duplicate
+//	// jobs or "failed" jobs actually running in PBS.
+//	// to avoid this, kill the job, ask the user to try again later if the jobs
+//	// are not in running status 2 minutes after submission.
+//	long t = System.currentTimeMillis();
+//	int status;
+//	while (true) {
+//		try {
+//			Thread.sleep(1000);
+//		} catch (InterruptedException ex) {
+//		}
+//		
+//		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"done waiting 1 second, getting pbs status");
+//		status = PBSUtils.getJobStatus(jobid);
+//		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbsStatus = "+PBSUtils.getJobStatusDescription(status));
+//		if (PBSUtils.isJobExiting(status)){
+//			// pbs command tracejob takes more than 1 minute to get exit status after the job exists. 
+//			// we don't want to spend so much time on a job, especially when the job is very short. 
+//			// However, if dispatcher restarted the simulation, which means the first run failed, 
+//			// we have to find out why.
+//			if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
+//				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
+//				try {
+//					Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
+//				} catch (InterruptedException ex) {
+//				}
+//				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"getting pbs status");
+//				if (!PBSUtils.isJobExecOK(jobid)) {
+//					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
+//					throw new SolverException("Job [" + jobid + "] exited unexpectedly: [" + PBSUtils.getJobExecStatus(jobid));			
+//				}
+//			}
+//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
+//			break;
+//		} else if (PBSUtils.isJobRunning(status)) {
+//			//check to see if it exits soon after it runs
+//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"Job is running, waiting 1 second before getting pbs status");
+//			try {
+//				Thread.sleep(1000);
+//			} catch (InterruptedException ex) {
+//			}
+//			status = PBSUtils.getJobStatus(jobid);
+//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status = "+PBSUtils.getJobStatusDescription(status));
+//			if (PBSUtils.isJobExiting(status)) {
+//				if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
+//					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
+//					try {
+//						Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
+//					} catch (InterruptedException ex) {
+//					}
+//					if (!PBSUtils.isJobExecOK(jobid)) {
+//						VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
+//						throw new SolverException("Job [" + jobid + "] exited unexpectedly: " + PBSUtils.getJobExecStatus(jobid));			
+//					}
+//				}
+//			}
+//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
+//			break;
+//		} else if (System.currentTimeMillis() - t > 4 * MessageConstants.MINUTE_IN_MS) {
+//			String pendingReason = PBSUtils.getPendingReason(jobid);
+//			PBSUtils.killJob(jobid); // kill the job if it takes too long to dispatch the job.
+//			throw new SolverException("PBS Job scheduler timed out. Please try again later. (Job [" + jobid + "]: " + pendingReason + ")");
+//		}
+//	}
+//	System.out.println("It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
+//	VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
+//}
+
+@Override
+public double getCurrentTime() {
+	return 0;
+}
+
+@Override
+public double getProgress() {
+	return 0;
+}
+
+public void startSolver() {
+	try {
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,null, "calling PBSSolver.initialize()");
+		initialize();
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,null, "calling PBSSolver.submit2PBS()");
+		HtcJobID jobID = submit2PBS();
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobID, "PBSSolver.submit2PBS() returned");
+	} catch (Throwable throwable) {
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,null, "PBSSolver.startSolver() exception: "+throwable.getClass().getName()+" "+throwable.getMessage());
+		getSessionLog().exception(throwable);
+		setSolverStatus(new SolverStatus (SolverStatus.SOLVER_ABORTED, SimulationMessage.solverAborted(throwable.getMessage())));
+		fireSolverAborted(SimulationMessage.solverAborted(throwable.getMessage()));		
+	}
+}
+
+public void stopSolver() {
+}
+}
Index: src/org/vcell/util/MessageConstants.java
===================================================================
--- src/org/vcell/util/MessageConstants.java	(revision 12154)
+++ src/org/vcell/util/MessageConstants.java	(revision 12153)
@@ -24,7 +24,6 @@
 	public static final String JOBINDEX_PROPERTY		= "JobIndex";
 	public static final String TASKID_PROPERTY		= "TaskID";
 	public static final String FIELDDATAID_PROPERTY		= "FieldDataID";
-	public static final String HTCJOBID_PROPERTY 	= "HtcJobID";	
 
 	// bitmapped counter so that allows 3 retries for each request (but preserves ordinal nature)
 	// bits 0-3: retry count
@@ -43,7 +42,6 @@
 	public static final String MESSAGE_TYPE_EXPORT_EVENT_VALUE = "ExportEvent";
 	public static final String MESSAGE_TYPE_DATA_EVENT_VALUE = "DataEvent";
 	public static final String MESSAGE_TYPE_STOPSIMULATION_VALUE	= "StopSimulation";	
-	public static final String MESSAGE_TYPE_FLUSH_VALUE = "Flush";
 	
 	public static final String MESSAGE_TYPE_PROPERTY	= "MessageType";
 
@@ -121,10 +119,8 @@
 	public static final int MINUTE_IN_S = 60;
 	public static final int MINUTE_IN_MS = MINUTE_IN_S * SECOND_IN_MS; // in milliseconds
 
-	public static final long INTERVAL_PING_SERVER_MS = 5 * MINUTE_IN_MS; // in milliseconds
-	public static final long INTERVAL_SERVER_FAIL_MS = 10 * MINUTE_IN_MS; // in milliseconds
-	public static final long INTERVAL_DATABASE_SERVER_FAIL_SECONDS = 10 * 60; // in seconds
-	public static final long INTERVAL_PROGRESS_MESSAGE_MS = 5 * SECOND_IN_MS;
-
-
+	public static final long INTERVAL_PING_SERVER = 5 * MINUTE_IN_MS; // in milliseconds
+	public static final long INTERVAL_SERVER_FAIL = 10 * MINUTE_IN_MS; // in milliseconds
+	public static final long INTERVAL_DATABASE_SERVER_FAIL = 10 * 60; // in seconds
+	public static final long INTERVAL_PROGRESS_MESSAGE = 5 * SECOND_IN_MS;	
 }
Index: deployInfo/runservice64
===================================================================
--- deployInfo/runservice64	(revision 12154)
+++ deployInfo/runservice64	(revision 12153)
@@ -61,13 +61,13 @@
 siteLibDir=${siteRootDir}/lib
 logdir=/share/apps/vcell/logs/${site}
 jvmmem=-Xmx500M
-batchSystemType=GENERATED
+
 # define arguments
 
 # pbs pde only
 if [ "${servicetype}" = "PbsC" ] ; then
 	mainclass=cbit.vcell.message.server.sim.HtcSimulationWorker
-	arguments="${ordinal} ${logdir} ${batchSystemType}" 
+	arguments="${ordinal} ${logdir} SGE" 
 fi
 
 # ode and local pde
@@ -101,7 +101,7 @@
 # Dispatch
 if [ "${servicetype}" = "Dsptch" ] ; then
 	mainclass=cbit.vcell.message.server.dispatcher.SimulationDispatcher
-	arguments="${ordinal} ${logdir} ${batchSystemType}"
+	arguments="${ordinal} ${logdir}"
 fi
 serviceid=${site}_${servicetype}_${ordinal}
 # kill running instance
