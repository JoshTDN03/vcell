Index: src/cbit/vcell/message/jms/test/TestBlobMessages.java
===================================================================
--- src/cbit/vcell/message/jms/test/TestBlobMessages.java	(revision 12475)
+++ src/cbit/vcell/message/jms/test/TestBlobMessages.java	(revision 12474)
@@ -11,7 +11,6 @@
 import cbit.vcell.message.VCMessagingService.VCMessagingDelegate;
 import cbit.vcell.message.VCQueueConsumer;
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
-import cbit.vcell.message.jms.VCMessageJms;
 import cbit.vcell.message.VCellQueue;
 
 /**
@@ -55,7 +54,7 @@
 	        for (int i=0;i<NUM_MESSAGES;i++){
 	        	for (int s=0;s<NUM_PRODUCERS;s++){
 	        		VCMessageSession session = sessions.get(s);
-		        	VCMessage message = session.createObjectMessage(new byte[40000*(i+1)]);
+		        	VCMessage message = session.createObjectMessage(new byte[1000]);
 //		        	VCMessage message = session.createObjectMessage(new byte[100000000]);
 		        	session.sendQueueMessage(VCellQueue.JimQueue, message);
 		        	session.commit();
@@ -68,15 +67,7 @@
 	        	QueueListener listener = new QueueListener() {
 	        		public void onQueueMessage(VCMessage vcMessage,	VCMessageSession session) throws RollbackException {
 	        			byte[] byteArray = (byte[])vcMessage.getObjectContent();
-	        			String blobInfo = "<no blob>";
-	        			if (vcMessage.propertyExists(VCMessageJms.BLOB_MESSAGE_FILE_NAME)){
-	        				String objectType = vcMessage.getStringProperty(VCMessageJms.BLOB_MESSAGE_OBJECT_TYPE);
-							int objectSize = vcMessage.getIntProperty(VCMessageJms.BLOB_MESSAGE_OBJECT_SIZE);
-							String fileName = vcMessage.getStringProperty(VCMessageJms.BLOB_MESSAGE_FILE_NAME);
-							String dirName = vcMessage.getStringProperty(VCMessageJms.BLOB_MESSAGE_PRODUCER_TEMPDIR);
-							blobInfo = "BLOB: object="+objectType+", size="+objectSize+", dir="+dirName+", file="+fileName;
-	        			}
-	        			System.out.println("timestampMS="+vcMessage.getTimestampMS()+", "+toString()+",  elapsedTimeS="+((System.currentTimeMillis()-vcMessage.getTimestampMS())/1000.0)+", Received: "+byteArray.length+": "+blobInfo);
+	        			System.out.println("timestampMS="+vcMessage.getTimestampMS()+", "+toString()+",  elapsedTimeS="+((System.currentTimeMillis()-vcMessage.getTimestampMS())/1000.0)+", Received: "+byteArray.length+" bytes");
 	        		}
 	        	};
 	        	VCQueueConsumer queueConsumer = new VCQueueConsumer(VCellQueue.JimQueue, listener, null, "Queue["+VCellQueue.JimQueue.getName()+"] ==== Consumer Thread "+i,1);
Index: src/cbit/vcell/message/jms/MessageProducerSessionJms.java
===================================================================
--- src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 12475)
+++ src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 12474)
@@ -1,10 +1,6 @@
 package cbit.vcell.message.jms;
 
-import java.io.File;
-import java.io.FileOutputStream;
 import java.io.Serializable;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
 
 import javax.jms.Connection;
 import javax.jms.Destination;
@@ -17,9 +13,6 @@
 import javax.jms.Session;
 import javax.jms.TemporaryQueue;
 
-import org.vcell.util.BeanUtils;
-import org.vcell.util.PropertyLoader;
-
 import cbit.vcell.message.VCMessage;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingException;
@@ -90,11 +83,8 @@
 					if (replyMessage == null || !(replyMessage instanceof ObjectMessage)) {
 						throw new JMSException("Server is temporarily not responding, please try again later. If problem persists, contact VCell_Support@uchc.edu." +
 								" (server=" + vcRpcRequest.getRequestedServiceType().getName() + ", method=" + vcRpcRequest.getMethodName() +")");
-					} else {
-						VCMessageJms vcReplyMessage = new VCMessageJms(replyMessage);
-						vcReplyMessage.loadBlobFile();
-						Object returnValue = vcReplyMessage.getObjectContent();
-						vcReplyMessage.removeBlobFile();
+					} else {				
+						Object returnValue = ((ObjectMessage)replyMessage).getObject();
 						if (returnValue instanceof Exception){
 							throw new VCMessagingInvocationTargetException((Exception)returnValue);
 						} else {
@@ -187,50 +177,14 @@
 		}
 		public VCMessage createObjectMessage(Serializable object) {
 			try {
-				// if the serialized object is very large, send it as a BlobMessage (ActiveMQ specific).
-				byte[] serializedBytes = BeanUtils.toSerialized(object);
-				
-				long blobMessageSizeThreshold = Long.parseLong(PropertyLoader.getRequiredProperty(PropertyLoader.jmsBlobMessageMinSize));
-				
-				if (serializedBytes.length > blobMessageSizeThreshold){
-					//
-					// get (or create) directory to store Message BLOBs
-					//
-					File tempdir = new File(PropertyLoader.getRequiredProperty(PropertyLoader.jmsBlobMessageTempDir));
-					if (!tempdir.exists()){
-						tempdir.mkdirs();
-					}
-					
-					//
-					// write serialized message to "temp" file.
-					//
-					File blobFile = File.createTempFile("BlobMessage",".data",tempdir);
-					FileOutputStream fileOutputStream = new FileOutputStream(blobFile);
-					FileChannel channel = fileOutputStream.getChannel();
-					channel.write(ByteBuffer.wrap(serializedBytes));
-					channel.close();
-					fileOutputStream.close();
-
-					ObjectMessage objectMessage = session.createObjectMessage("emptyObject");
-					objectMessage.setStringProperty(VCMessageJms.BLOB_MESSAGE_PRODUCER_TEMPDIR, tempdir.getAbsolutePath());
-					objectMessage.setStringProperty(VCMessageJms.BLOB_MESSAGE_FILE_NAME, blobFile.getName());
-					objectMessage.setStringProperty(VCMessageJms.BLOB_MESSAGE_OBJECT_TYPE, object.getClass().getName());
-					objectMessage.setIntProperty(VCMessageJms.BLOB_MESSAGE_OBJECT_SIZE, serializedBytes.length);
-					return new VCMessageJms(objectMessage,object);
-				}else{
-					ObjectMessage objectMessage = (ObjectMessage)session.createObjectMessage(serializedBytes);
-					return new VCMessageJms(objectMessage);
-				}
+				Message jmsMessage = session.createObjectMessage(object);
+				return new VCMessageJms(jmsMessage);
 			} catch (JMSException e) {
 				e.printStackTrace(System.out);
 				onException(e);
-				throw new RuntimeException("unable to create object message");
-			} catch (Exception e){
-				e.printStackTrace();
-				throw new RuntimeException(e.getMessage());				
+				throw new RuntimeException("unable to create text message");
 			}
 		}
-		
 		public VCMessage createMessage() {
 			try {
 				Message jmsMessage = session.createMessage();
Index: src/cbit/vcell/message/jms/VCMessageJms.java
===================================================================
--- src/cbit/vcell/message/jms/VCMessageJms.java	(revision 12475)
+++ src/cbit/vcell/message/jms/VCMessageJms.java	(revision 12474)
@@ -1,10 +1,5 @@
 package cbit.vcell.message.jms;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.ObjectInputStream;
-import java.io.Serializable;
 import java.util.Enumeration;
 
 import javax.jms.Destination;
@@ -15,8 +10,6 @@
 import javax.jms.TextMessage;
 import javax.jms.Topic;
 
-import org.vcell.util.PropertyLoader;
-
 import cbit.vcell.message.MessagePropertyNotFoundException;
 import cbit.vcell.message.VCDestination;
 import cbit.vcell.message.VCMessage;
@@ -25,107 +18,23 @@
 
 public class VCMessageJms implements VCMessage {
 	
-	public static final String BLOB_MESSAGE_FILE_NAME = "blobMessageFileName";
-	public static final String BLOB_MESSAGE_PRODUCER_TEMPDIR = "blobProducerTempDir";
-	public static final String BLOB_MESSAGE_OBJECT_TYPE = "blobObjectType";
-	public static final String BLOB_MESSAGE_OBJECT_SIZE = "blobObjectSize";
-	
-	private transient Serializable blobObject = null;
-	private transient File blobFile = null;
-	
 	private Message jmsMessage = null;
 		
 	public VCMessageJms(Message jmsMessage){
 		this.jmsMessage = jmsMessage;
 	}
 	
-	public VCMessageJms(Message jmsMessage, Serializable blobObject){
-		this.jmsMessage = jmsMessage;
-		this.blobObject = blobObject;
-	}
-	
 	public Message getJmsMessage(){
 		return jmsMessage;
 	}
 	
-	/**
-	 * see Property jmsBlobMessageMinSize "vcell.jms.blobMessageMinSize"
-	 * see Property jmsBlobMessageTempDir "vcell.jms.blobMessageTempDir"
-	 * see class MessageProducerSessionJms
-	 * 
-	 * 
-	 * 1) Message Producer serializes into byte[] and compares size with PropertyLoader.jmsBlobMessageMinSize.
-	 * 2) For Large Object Messages (> threshold bytes), MessageProducerSessionJms writes bytes to a local file (e.g. MyBlobMessageTempDir/BlobMessage2295645974283237270.data).
-	 * 3) Pass file name as message properties so that receiver can delete file when done.
-	 * 4) consumer-side VCMessage infrastructure receives BlobMessage and invokes VCMessageJms.loadBlobMessage()
-	 * 5) loadBlobMessage() reads object from stream and attempts to delete both original and broker files.
-	 * 6) consumer's message listener calls getObjectContent() not knowing if it was sent as a Blob or not.
-	 * 7) message consumer calls VCMessageJms.removeBlobFile() to clean up disk.
-	 * 
-	 */
-	public void loadBlobFile(){
-		if (blobObject!=null){
-			return;
-		}
-		if (jmsMessage instanceof ObjectMessage && propertyExists(BLOB_MESSAGE_FILE_NAME)){
-			try {				
-				//
-				// read serialized object from inputStream (from Broker's data file)
-				//
-				String blobFileName = jmsMessage.getStringProperty(BLOB_MESSAGE_FILE_NAME);
-				
-				//
-				// get (or create) directory to store Message BLOBs
-				//
-				File blobTempDir = new File(PropertyLoader.getRequiredProperty(PropertyLoader.jmsBlobMessageTempDir));				
-				blobFile = new File(blobTempDir,blobFileName);
-				if (!blobFile.exists()){
-					throw new RuntimeException("Message BLOB file \""+blobFileName+"\" in directory \""+blobTempDir+"\" not found, maybe the message was already read");
-				}
-				FileInputStream fis = new FileInputStream(blobFile);
-				BufferedInputStream bis = new BufferedInputStream(fis);
-				ObjectInputStream ois = new ObjectInputStream(bis);
-				blobObject = (Serializable) ois.readObject();
-				ois.close();
-				bis.close();
-				fis.close();
-			} catch (Exception e) {
-				e.printStackTrace();
-				throw new RuntimeException(e.getMessage(),e);
-			}
-		}
-	}
-	
-	public void removeBlobFile(){
-		if (blobFile!=null){
-			//
-			// remove blob file if it still exists (after a successful commit)
-			//
-			try {
-				if (blobFile.exists()){
-					blobFile.delete();
-				}else{
-					System.out.println("Message BLOB file \""+blobFile.getAbsolutePath()+"\" doesn't exist");
-				}
-			}catch (Exception e){
-				e.printStackTrace(System.out);
-			}
-		}
-	}
-	
-
-
 	public Object getObjectContent(){
 		if (jmsMessage instanceof ObjectMessage){
-			if (propertyExists(BLOB_MESSAGE_FILE_NAME)){
-				return blobObject;
-			}else{
-				try {
-					return ((ObjectMessage)jmsMessage).getObject();
-				} catch (JMSException e) {
-					handleJMSException(e);
-					throw new RuntimeException(e.getMessage());
-				}
+			try {
+				return ((ObjectMessage)jmsMessage).getObject();
+			} catch (JMSException e) {
+				handleJMSException(e);
+				throw new RuntimeException(e.getMessage());
 			}
 		}else{
 			return null;
Index: src/cbit/vcell/message/jms/ConsumerContextJms.java
===================================================================
--- src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12475)
+++ src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12474)
@@ -53,22 +53,18 @@
 //						System.out.println(toString()+"===============message received within "+CONSUMER_POLLING_INTERVAL_MS+" ms");
 					if (vcConsumer instanceof VCQueueConsumer){
 						VCQueueConsumer queueConsumer = (VCQueueConsumer)vcConsumer;
-						VCMessageJms vcMessage = new VCMessageJms(jmsMessage);
-						vcMessage.loadBlobFile();
+						VCMessage vcMessage = new VCMessageJms(jmsMessage);
 						VCMongoMessage.sendJmsMessageReceived(vcMessage,vcConsumer.getVCDestination());
 						MessageProducerSessionJms temporaryMessageProducerSession = new MessageProducerSessionJms(jmsSession);
 						queueConsumer.getQueueListener().onQueueMessage(vcMessage, temporaryMessageProducerSession);
 						jmsSession.commit();
-						vcMessage.removeBlobFile();
 					} else if (vcConsumer instanceof VCTopicConsumer){
 						VCTopicConsumer topicConsumer = (VCTopicConsumer)vcConsumer;
-						VCMessageJms vcMessage = new VCMessageJms(jmsMessage);
-						vcMessage.loadBlobFile();
+						VCMessage vcMessage = new VCMessageJms(jmsMessage);
 						VCMongoMessage.sendJmsMessageReceived(vcMessage,vcConsumer.getVCDestination());
 						MessageProducerSessionJms temporaryMessageProducerSession = new MessageProducerSessionJms(jmsSession);
 						topicConsumer.getTopicListener().onTopicMessage(vcMessage, temporaryMessageProducerSession);
 						jmsSession.commit();
-						vcMessage.removeBlobFile();
 					} else {
 						VCRpcConsumer rpcConsumer = (VCRpcConsumer)vcConsumer;
 						if (!(jmsMessage instanceof ObjectMessage)){
@@ -76,9 +72,7 @@
 							throw new VCMessagingException("expecting ObjectMessage");
 						}
 						ObjectMessage objectMessage = (ObjectMessage)jmsMessage;
-						VCMessageJms rpcVCMessage = new VCMessageJms(objectMessage);
-						rpcVCMessage.loadBlobFile();
-						Serializable object = (Serializable)rpcVCMessage.getObjectContent();
+						Serializable object = objectMessage.getObject();
 						if (!(object instanceof VCRpcRequest)){
 							jmsSession.commit();
 							throw new VCMessagingException("expecting RpcRequest in message");
@@ -126,7 +120,6 @@
 						replyProducer.send(replyMessage);
 						replyProducer.close();
 						jmsSession.commit();		//commit		
-						rpcVCMessage.removeBlobFile();
 						VCMongoMessage.sendRpcRequestProcessed(vcRpcRequest);
 					}
 				}else{
Index: src/org/vcell/util/PropertyLoader.java
===================================================================
--- src/org/vcell/util/PropertyLoader.java	(revision 12475)
+++ src/org/vcell/util/PropertyLoader.java	(revision 12474)
@@ -109,8 +109,6 @@
 	public static final String jmsWorkerEventQueue		= "vcell.jms.queue.workerEvent";
 	public static final String jmsWorkerPrefetchCount	= "vcell.jms.workerPrefetchCount";
 	public static final String jmsServicePrefetchCount	= "vcell.jms.servicePrefetchCount";
-	public static final String jmsBlobMessageMinSize	= "vcell.jms.blobMessageMinSize";
-	public static final String jmsBlobMessageTempDir	= "vcell.jms.blobMessageTempDir";
 
 	public static final String maxOdeJobsPerUser	= "vcell.server.maxOdeJobsPerUser";
 	public static final String maxPdeJobsPerUser	= "vcell.server.maxPdeJobsPerUser";
@@ -240,8 +238,6 @@
 		jmsWorkerEventQueue,
 		jmsWorkerPrefetchCount,
 		jmsServicePrefetchCount,
-		jmsBlobMessageMinSize,
-		jmsBlobMessageTempDir,
 
 		maxOdeJobsPerUser,
 		maxPdeJobsPerUser,
Index: deployInfo/vcell64.properties
===================================================================
--- deployInfo/vcell64.properties	(revision 12475)
+++ deployInfo/vcell64.properties	(revision 12474)
@@ -60,9 +60,6 @@
 #
 # Server configuration
 #
-vcell.jms.blobMessageMinSize = 100000
-vcell.jms.blobMessageTempDir = /share/apps/vcell/blobs/
-
 vcell.primarySimdatadir = /share/apps/vcell/users/
 vcell.secondarySimdatadir = /share/apps/vcell2/users/
 vcell.localSimdatadir = /share/apps/vcell/users/
