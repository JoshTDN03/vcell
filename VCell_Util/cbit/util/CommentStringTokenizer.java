package cbit.util;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CommentStringTokenizer extends StringTokenizer {
	private StringTokenizer lineTokenizer = null;
	private final static String LineComment = "//";
	private final static String QuoteCharacter = "\"";
	private LinkedList tokenLinkedList = new LinkedList();
	private Token lastPoppedToken = null;

/**
 * MathStringTokenizer constructor comment.
 * @param str java.lang.String
 */
public CommentStringTokenizer(String str) {
	super("");
	lineTokenizer = new StringTokenizer(str, " \t\n\r"+QuoteCharacter, true);
	refreshCurrTokenizer();
}


/**
 * This method was created by a SmartGuide.
 * @return int
 */
public int columnIndex() {
	if (lastPoppedToken!=null){
		return lastPoppedToken.getStartColumnIndex();
	}else if (tokenLinkedList.size()>0){
		return ((Token)tokenLinkedList.getFirst()).getStartColumnIndex();
	}else{
		return 0;
	}
}


/**
 * This method was created by a SmartGuide.
 * @return int
 */
public int countTokens() {
	return tokenLinkedList.size();
}


/**
 * This method was created by a SmartGuide.
 * @return boolean
 */
public boolean hasMoreElements() {
	return (tokenLinkedList.size() > 0);
}


/**
 * This method was created by a SmartGuide.
 * @return boolean
 */
public boolean hasMoreTokens() {
	return hasMoreElements();
}


/**
 * This method was created by a SmartGuide.
 * @return int
 */
public int lineIndex() {
	if (lastPoppedToken!=null){
		return lastPoppedToken.getLineIndex();
	}else if (tokenLinkedList.size()>0){
		return ((Token)tokenLinkedList.getFirst()).getLineIndex();
	}else{
		return 0;
	}
}


/**
 * This method was created by a SmartGuide.
 * @return java.lang.Object
 */
public Object nextElement() {
	return nextToken();
}


/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String nextToken() {
	Token token = (Token)tokenLinkedList.removeFirst();
	lastPoppedToken = token;
	refreshCurrTokenizer();
	return token.getValue();
}


/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 1:13:53 PM)
 * @param token java.lang.String
 */
public void pushToken(String token) {
	Token newToken = new Token(token,columnIndex(),lineIndex());
	tokenLinkedList.addFirst(newToken);
}


/**
 * This method was created by a SmartGuide.
 */
private void refreshCurrTokenizer() {
	int currLine = 0;
	int currCol = 0;
	//
	// if tokenLinkedList is empty, fill with tokens from next non-empty line of text
	//
	boolean bInsideQuotes = false;
	boolean bInsideComments = false;
	Token quotedToken = null;
	while (lineTokenizer.hasMoreElements()){
		String nextToken = lineTokenizer.nextToken();
		//
		// consume CR,LF and keep track of line number and column index
		//
		if (nextToken.equals("\n")){
			if (bInsideQuotes){
				throw new RuntimeException("unterminated string, expected a \" before end of line "+(currLine+1));
			}
			currLine++;
			currCol = 0;
			bInsideComments = false;
			continue;
		}
		if (nextToken.equals("\r")){
			continue;
		}
		//
		// comments use the C++/Java convension for line comments "//"
		//
		// flag comments until end of line (reset only by \n)
		// comment token is ignored within quotes
		//
		if (nextToken.startsWith(LineComment) && !bInsideQuotes){
			bInsideComments = true;
		}
		if (bInsideComments){
			continue;
		}

		
		if (nextToken.equals(QuoteCharacter)){
			if (bInsideQuotes){
				//
				// if ending a quoted string,
				// add current quotedToken to the linkedList
				//
				// quotedToken is the accumulator for tokens within the current quoted string.
				// 
				//
				if (quotedToken!=null){
					tokenLinkedList.addLast(quotedToken);
					quotedToken = null;
				}
				bInsideQuotes = false;
			}else{
				bInsideQuotes = true;
			}
			currCol++;
			continue;
		}
		
		Token newToken = new Token(nextToken,currCol,currLine);
		currCol += nextToken.length();
		
		if (bInsideQuotes){
			//
			// start a new quotedToken or append to current one
			// add to linked list after receiving end-quote
			//
			if (quotedToken==null){
				quotedToken = newToken;
			}else{
				quotedToken.join(newToken);
			}
		}else{
			//
			// if not inside quotes, discard spaces and tabs
			//
			if (!newToken.getValue().equals(" ") && !newToken.getValue().equals("\t")){
				tokenLinkedList.addLast(newToken);
			}
		}	
	}	
	if (bInsideQuotes){
		throw new RuntimeException("unterminated string, expected a \" before end of file");
	}
}


/**
 * Insert the method's description here.
 * Creation date: (4/18/2001 2:30:23 PM)
 */
public void show() {
	Iterator iter = tokenLinkedList.iterator();
	while (iter.hasNext()){
		System.out.println(iter.next());
	}
}
}