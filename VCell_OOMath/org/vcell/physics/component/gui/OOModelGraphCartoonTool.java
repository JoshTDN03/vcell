package org.vcell.physics.component.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.Dimension;
import java.awt.Point;

import javax.swing.JViewport;

import org.vcell.physics.component.ModelComponent;
import org.vcell.physics.component.ModelWriter;
import org.vcell.physics.component.OOModel;
import org.vcell.util.gui.DialogUtils;

import cbit.gui.graph.ContainerShape;
import cbit.gui.graph.EdgeShape;
import cbit.gui.graph.ElipseShape;
import cbit.gui.graph.Shape;
import cbit.gui.graph.SimpleGraphCartoonTool;
import cbit.util.xml.XmlUtil;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class OOModelGraphCartoonTool extends SimpleGraphCartoonTool {

	private OOModel fieldModel = null;

/**
 * This method was created by a SmartGuide.
 * @param canvas cbit.vcell.graph.CartoonCanvas
 */
public OOModelGraphCartoonTool () {
	super();
}


/**
 * The firePropertyChange method was generated to support the propertyChange field.
 */
public void firePropertyChange(java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}


/**
 * Gets the reactionModel property (vcell.reactions.gui.ReactionModel) value.
 * @return The reactionModel property value.
 * @see #setReactionModel
 */
public OOModel getModel() {
	return fieldModel;
}


/**
 * This method was created in VisualAge.
 */
public void layout(String layoutName) throws Exception {

	edu.rpi.graphdrawing.Blackboard bb = new edu.rpi.graphdrawing.Blackboard();
	java.util.HashMap nodeShapeMap = new java.util.HashMap();
	//
	// add nodes
	//
	java.util.Enumeration shapeEnum = getGraphModel().getShapes();
	while (shapeEnum.hasMoreElements()){
		Shape shape = (Shape)shapeEnum.nextElement();
		edu.rpi.graphdrawing.Node newNode = null;
		if (shape instanceof ElipseShape){
			newNode = bb.addNode(shape.getLabel());
		}
		//
		// initialize node location to current absolute position
		//
		if (newNode!=null){
			newNode.XY(shape.getAbsLocation().x,shape.getAbsLocation().y);
			nodeShapeMap.put(newNode.label(),shape);
		}
	}

	//
	// add edges
	//
	shapeEnum = getGraphModel().getShapes();
	while (shapeEnum.hasMoreElements()){
		Shape shape = (Shape)shapeEnum.nextElement();
		edu.rpi.graphdrawing.Edge newEdge = null;
		if (shape instanceof ConnectorEdge){
			ConnectorEdge iShape = (ConnectorEdge)shape;
			ElipseShape node1Shape = iShape.getFirstPartnerShape();
			ElipseShape node2Shape = iShape.getSecondPartnerShape();
			newEdge = bb.addEdge(node1Shape.getLabel(),node2Shape.getLabel());
		} else if (shape instanceof ConnectorAnchorEdgeShape){
			ConnectorAnchorEdgeShape bShape = (ConnectorAnchorEdgeShape)shape;
			ElipseShape node1Shape = bShape.getConnectorNode();
			ElipseShape node2Shape = bShape.getDeviceShape();
			newEdge = bb.addEdge(node1Shape.getLabel(),node2Shape.getLabel());
		//} else if (shape instanceof DeviceLocationEdge){
			//DeviceLocationEdge bShape = (DeviceLocationEdge)shape;
			//ElipseShape node1Shape = bShape.getLocationNode();
			//ElipseShape node2Shape = bShape.getDeviceNode();
			//newEdge = bb.addEdge(node1Shape.getLabel(),node2Shape.getLabel());
		//} else if (shape instanceof LocationAdjacencyEdge){
			//LocationAdjacencyEdge bShape = (LocationAdjacencyEdge)shape;
			//ElipseShape node1Shape = bShape.getLocationNode1();
			//ElipseShape node2Shape = bShape.getLocationNode2();
			//newEdge = bb.addEdge(node1Shape.getLabel(),node2Shape.getLabel());
		} else if (shape instanceof EdgeShape){
			System.out.println("layout for edgeShape '"+shape.getClass().getName()+"' not yet supported");
		}
			
	}

	bb.setArea(0,0,getGraphPane().getWidth(),getGraphPane().getHeight());
	bb.globals.D(20);
	
	bb.addEmbedder(ANNEALER,new edu.rpi.graphdrawing.Annealer(bb));
	bb.addEmbedder(CIRCULARIZER,new edu.rpi.graphdrawing.Circularizer(bb));
	bb.addEmbedder(CYCLEIZER,new edu.rpi.graphdrawing.Cycleizer(bb));
	bb.addEmbedder(FORCEDIRECT,new edu.rpi.graphdrawing.ForceDirect(bb));
	bb.addEmbedder(LEVELLER,new edu.rpi.graphdrawing.Leveller(bb));
	bb.addEmbedder(RANDOMIZER,new edu.rpi.graphdrawing.Randomizer(bb));
	bb.addEmbedder(RELAXER,new edu.rpi.graphdrawing.Relaxer(bb));
	bb.addEmbedder(STABILIZER,new edu.rpi.graphdrawing.Stabilizer(bb));

	bb.setEmbedding(layoutName);

java.util.Vector nodeList = bb.nodes();
for (int i = 0; i < nodeList.size(); i++){
	edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
System.out.println("Node "+node.label()+" @ ("+node.x()+","+node.y()+")");
}
	bb.PreprocessNodes();
	
	edu.rpi.graphdrawing.Embedder embedder = bb.embedder();
	embedder.Init();
	for (int i = 0; i < 1000; i++){
		embedder.Embed();
	}

	bb.removeDummies();
	nodeList = bb.nodes();
	//
	// calculate offset and scaling so that resulting graph fits on canvas
	//
	double lowX = 100000;
	double highX = -100000;
	double lowY = 100000;
	double highY = -100000;
	for (int i = 0; i < nodeList.size(); i++){
		edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
		lowX = Math.min(lowX,node.x());
		highX = Math.max(highX,node.x());
		lowY = Math.min(lowY,node.y());
		highY = Math.max(highY,node.y());
	}
	double scaleX = getGraphPane().getWidth()/(1.5*(highX-lowX));
	double scaleY = getGraphPane().getHeight()/(1.5*(highY-lowY));
	int offsetX = getGraphPane().getWidth()/6;
	int offsetY = getGraphPane().getHeight()/6;
	for (int i = 0; i < nodeList.size(); i++){
		edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
		Shape shape = (Shape)nodeShapeMap.get(node.label());
		Point parentLoc = shape.getParent().getAbsLocation();
		shape.setLocation(new Point((int)(scaleX*(node.x()-lowX))+offsetX+parentLoc.x,(int)((scaleY*(node.y()-lowY))+offsetY+parentLoc.y)));
System.out.println("Shape "+shape.getLabel()+" @ "+shape.getAbsLocation());
	}

	getGraphPane().repaint();
}


/**
 * This method calls the glg layout library.
 * Creation date: (8/28/2002 3:44:20 PM)
 */
public void layoutGlg() {
	//
	//Create graph object
	//
	com.genlogic.GraphLayout.GlgGraphLayout graph = new com.genlogic.GraphLayout.GlgGraphLayout();
	graph.SetUntangle(true); //true
	//specify dimensions for the graph! 400x400
	//System.out.println("H:"+getGraphPane().getHeight()+" W"+getGraphPane().getWidth());
	com.genlogic.GraphLayout.GlgCube graphDim = new com.genlogic.GraphLayout.GlgCube();
	com.genlogic.GraphLayout.GlgPoint newPoint = new com.genlogic.GraphLayout.GlgPoint(0,0,0);
	graphDim.p1 = newPoint;
	//newPoint = new com.genlogic.GlgPoint(getGraphPane().getWidth()-20, getGraphPane().getHeight()-10, 0);//400,400,0
	newPoint = new com.genlogic.GraphLayout.GlgPoint(1600,1600, 0);
	graphDim.p2 = newPoint;
	graph.dimensions = graphDim;

	//
	//Add nodes (Vertex) to the graph
	//
	java.util.Enumeration shapeEnum = getGraphModel().getShapes();
	com.genlogic.GraphLayout.GlgGraphNode graphNode;
	java.util.HashMap nodeMap = new java.util.HashMap(); 
	
	while (shapeEnum.hasMoreElements()) {
		Shape shape = (Shape)shapeEnum.nextElement();

		//add to the graph			
		if (shape instanceof ElipseShape) {
			graphNode = graph.AddNode(null, 0, null);
		} else {
			continue;
		}
		
		//add to the hashmap
		nodeMap.put(shape,graphNode);
	}
	//
	//Add edges
	//
	shapeEnum = getGraphModel().getShapes();
	
	while (shapeEnum.hasMoreElements()) {
		Shape shape = (Shape)shapeEnum.nextElement();
		
		if (shape instanceof ConnectorEdge) {
			ConnectorEdge iShape = (ConnectorEdge)shape;
			graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(iShape.getFirstPartnerShape()),
							(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(iShape.getSecondPartnerShape()),null, 0 ,null);
		}else if (shape instanceof ConnectorAnchorEdgeShape) {
			ConnectorAnchorEdgeShape aShape = (ConnectorAnchorEdgeShape)shape;
			graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getConnectorNode()),
							(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getDeviceShape()),null, 0 ,null);
		//} else if (shape instanceof DeviceLocationEdge){
			//DeviceLocationEdge aShape = (DeviceLocationEdge)shape;
			//graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getLocationNode()),
							//(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getDeviceNode()),null, 0 ,null);
		//} else if (shape instanceof LocationAdjacencyEdge){
			//LocationAdjacencyEdge aShape = (LocationAdjacencyEdge)shape;
			//graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getLocationNode1()),
							//(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(aShape.getLocationNode2()),null, 0 ,null);
		} else if (shape instanceof EdgeShape){
			System.out.println("layout for edgeShape '"+shape.getClass().getName()+"' not yet supported");
		}
	}

	//
	//call layout algorithm
	//
	while (!graph.SpringIterate()) {
		;
	}
	graph.Update();

	//
	//resize and scale the graph
	//
	//com.genlogic.GlgObject edgeArray = graph.edge_array;
	java.util.Vector edgeVector = graph.edge_array;
	double distance, minDistance = Double.MAX_VALUE;
	
	for (int i = 0; i < edgeVector.size(); i++){
		com.genlogic.GraphLayout.GlgGraphEdge edge = (com.genlogic.GraphLayout.GlgGraphEdge)edgeVector.elementAt(i);
		distance = java.awt.geom.Point2D.distance(edge.start_node.display_position.x, edge.start_node.display_position.y, edge.end_node.display_position.x, edge.end_node.display_position.y);
		minDistance = distance<minDistance?distance:minDistance;
	}
	double ratio = 1.0;
	if (minDistance > 80) {
		ratio = 80.0/minDistance;
	}
	
	//
	//Update positions
	//
	shapeEnum = getGraphModel().getShapes();
	Point place;
	com.genlogic.GraphLayout.GlgPoint glgPoint;
	while (shapeEnum.hasMoreElements()) {
		Shape shape= (Shape)shapeEnum.nextElement();
		//test if it is contained in the nodeMap
		graphNode = (com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(shape);
		
		if (graphNode!= null) {
			glgPoint = graph.GetNodePosition(graphNode);
			//glgPoint = graphNode.display_position;
			place = new Point();
			place.setLocation(glgPoint.x*ratio+30, glgPoint.y*ratio+30);
			shape.setLocation(place);		
		}
	}	
	
	
	Dimension graphSize = new Dimension((int)(1600*ratio)+50,(int)(1600*ratio)+50);
	getGraphPane().setSize(graphSize);
	getGraphPane().setPreferredSize(graphSize);

	//update the window
	getGraphPane().invalidate();
	((JViewport)getGraphPane().getParent()).revalidate();	
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 3:56:54 PM)
 * @param shape cbit.vcell.graph.Shape
 * @param menuAction java.lang.String
 */
protected void menuAction(Shape shape, String menuAction) {
	try {
		
		if(shape == null){return;}

		// if multiselect, then get them all
		OOModelGraphModel constraintsGraphModel = (OOModelGraphModel)getGraphModel();
		Shape shapes[] = constraintsGraphModel.getAllSelectedShapes();
		//	
		if (menuAction.equals(NEW_MENU_ACTION)){
			//
			// popup the "new" dialog
			//
			DialogUtils.showInfoDialog("new dialog");
		}else if (menuAction.equals(DELETE_MENU_ACTION)){
			//
			// try to delete
			//
			for (int i = 0; i < shapes.length; i++) {
				if (shapes[i].getModelObject() instanceof ModelComponent){
					ModelComponent modelComponent = (ModelComponent)shapes[i].getModelObject();
					getModel().removeModelComponent(modelComponent);				}
			}
			DialogUtils.showInfoDialog("new dialog");
		}else if (menuAction.equals(PROPERTIES_MENU_ACTION)){
			//
			// popup properties dialog
			//
			if (shapes!=null && shapes.length==1){
				if (shapes[0].getModelObject() instanceof ModelComponent){
					ModelComponent modelComponent = (ModelComponent)shapes[0].getModelObject();
					ModelWriter modelWriter = new ModelWriter();
					org.jdom.Element modelComponentElement = modelWriter.getXML(modelComponent);
					String xmlString = XmlUtil.xmlToString(modelComponentElement);
					DialogUtils.showInfoDialog(xmlString);
				}
			}
		}
	}catch (Throwable e){
		DialogUtils.showErrorDialog("Error:\n"+e.getMessage());
	}
}



/**
 * Sets the reactionModel property (vcell.reactions.gui.ReactionModel) value.
 * @param reactionModel The new value for the property.
 * @see #getReactionModel
 */
public void setModel(OOModel oOModel) {
	OOModel oldValue = fieldModel;
	fieldModel = oOModel;
	firePropertyChange("model", oldValue, oOModel);
}


/**
 * Insert the method's description here.
 * Creation date: (12/11/2003 3:21:17 PM)
 * @param reactionModelGraphModel cbit.vcell.complex.gui.ReactionModelGraphModel
 */
public void setPhysicalModelGraphModel(OOModelGraphModel oOModelGraphModel) {
	setGraphModel(oOModelGraphModel);
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 3:47:34 PM)
 * @return boolean
 * @param shape cbit.vcell.graph.Shape
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuAction(Shape shape, String menuAction) {
	if (shape == null){
		return false;
	}
	
	if (menuAction.equals(NEW_MENU_ACTION)){
		if (shape instanceof SimpleContainerShape){
			return true;
		}
	}
	if (menuAction.equals(DELETE_MENU_ACTION)){
		if (shape instanceof DeviceNode || shape instanceof ConnectorEdge){
			return true;
		}
	}
	if (menuAction.equals(PROPERTIES_MENU_ACTION)){
		if (shape instanceof DeviceNode || shape instanceof ConnectorEdge){
			return true;
		}
	}
	return false;
}


/**
 * Insert the method's description here.
 * Creation date: (5/9/2003 9:11:06 AM)
 * @return boolean
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuActionEnabled(Shape shape, java.lang.String menuAction) {
	if (shape == null){
		return false;
	}
	
	if (menuAction.equals(NEW_MENU_ACTION)){
		if (shape instanceof SimpleContainerShape){
			return true;
		}
	}
	if (menuAction.equals(DELETE_MENU_ACTION)){
		if (shape instanceof DeviceNode || shape instanceof ConnectorEdge){
			return true;
		}
	}
	if (menuAction.equals(PROPERTIES_MENU_ACTION)){
		if (shape instanceof DeviceNode || shape instanceof ConnectorEdge){
			return true;
		}
	}

	return false;
}

}