Index: src_vfrap/cbit/vcell/microscopy/FRAPStudy.java
===================================================================
--- src_vfrap/cbit/vcell/microscopy/FRAPStudy.java	(revision 11981)
+++ src_vfrap/cbit/vcell/microscopy/FRAPStudy.java	(revision 11980)
@@ -65,7 +65,6 @@
 import cbit.vcell.math.MathDescription;
 import cbit.vcell.math.ROIDataGenerator;
 import cbit.vcell.math.VariableType;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.microscopy.gui.FRAPStudyPanel;
 import cbit.vcell.model.Feature;
 import cbit.vcell.model.MassActionKinetics;
@@ -716,16 +715,16 @@
 		}
 		
 		int jobIndex = 0;
-		SimulationTask simTask = new SimulationTask(new SimulationJob(sim,jobIndex, fieldDataIdentifierSpecs),0);
+		SimulationJob simJob = new SimulationJob(sim,jobIndex, fieldDataIdentifierSpecs);
 		ResourceUtil.prepareSolverExecutable(sim.getSolverTaskDescription().getSolverDescription());
 		//if we need to check steady state, do the following two lines
 		if(bCheckSteadyState)
 		{
-			simTask.getSimulation().getSolverTaskDescription().setStopAtSpatiallyUniformErrorTolerance(ErrorTolerance.getDefaultSpatiallyUniformErrorTolerance());
+			simJob.getSimulation().getSolverTaskDescription().setStopAtSpatiallyUniformErrorTolerance(ErrorTolerance.getDefaultSpatiallyUniformErrorTolerance());
 //			simJob.getSimulation().getSolverTaskDescription().setErrorTolerance(new ErrorTolerance(1e-6, 1e-2));
 		}
 		
-		FVSolverStandalone fvSolver = new FVSolverStandalone(simTask,simulationDataDir,sessionLog,false);		
+		FVSolverStandalone fvSolver = new FVSolverStandalone(simJob,simulationDataDir,sessionLog,false);		
 		fvSolver.startSolver();
 		
 		SolverStatus status = fvSolver.getSolverStatus();
@@ -777,17 +776,17 @@
 			}
 			
 			int jobIndex = 0;
-			SimulationTask simTask = new SimulationTask(new SimulationJob(sim,jobIndex, fieldDataIdentifierSpecs),0);
+			SimulationJob simJob = new SimulationJob(sim,jobIndex, fieldDataIdentifierSpecs);
 			//if we need to check steady state, do the following two lines
 			if(bCheckSteadyState)
 			{
-				simTask.getSimulation().getSolverTaskDescription().setStopAtSpatiallyUniformErrorTolerance(ErrorTolerance.getDefaultSpatiallyUniformErrorTolerance());
-				simTask.getSimulation().getSolverTaskDescription().setErrorTolerance(new ErrorTolerance(1e-6, 1e-2));
+				simJob.getSimulation().getSolverTaskDescription().setStopAtSpatiallyUniformErrorTolerance(ErrorTolerance.getDefaultSpatiallyUniformErrorTolerance());
+				simJob.getSimulation().getSolverTaskDescription().setErrorTolerance(new ErrorTolerance(1e-6, 1e-2));
 			}
 			
 			ResourceUtil.prepareSolverExecutable(sim.getSolverTaskDescription().getSolverDescription());
 			
-			FVSolverStandalone fvSolver = new FVSolverStandalone(simTask,simulationDataDir,sessionLog,false);		
+			FVSolverStandalone fvSolver = new FVSolverStandalone(simJob,simulationDataDir,sessionLog,false);		
 			fvSolver.startSolver();
 			
 			SolverStatus status = fvSolver.getSolverStatus();
Index: src/cbit/vcell/message/VCMessageSession.java
===================================================================
--- src/cbit/vcell/message/VCMessageSession.java	(revision 11981)
+++ src/cbit/vcell/message/VCMessageSession.java	(revision 11980)
@@ -1,22 +0,0 @@
-package cbit.vcell.message;
-
-import java.io.Serializable;
-
-public interface VCMessageSession {
-	public Object sendRpcMessage(VCellQueue queue, VCRpcRequest vcRpcRequest, boolean returnRequired, long timeoutMS, String[] specialProperties, Object[] specialValues) throws VCMessagingException, VCMessagingInvocationTargetException;	
-	public void sendQueueMessage(VCellQueue queue, VCMessage message) throws VCMessagingException;
-	
-	public void sendTopicMessage(VCellTopic topic, VCMessage message) throws VCMessagingException;
-	
-	void rollback();
-
-	void commit();
-
-	public abstract VCMessage createTextMessage(String text);
-
-	public abstract VCMessage createMessage();
-
-	public abstract VCMessage createObjectMessage(Serializable object);
-
-	public abstract void close();
-}
\ No newline at end of file
Index: src/cbit/vcell/message/VCellTopic.java
===================================================================
--- src/cbit/vcell/message/VCellTopic.java	(revision 11981)
+++ src/cbit/vcell/message/VCellTopic.java	(revision 11980)
@@ -1,40 +0,0 @@
-package cbit.vcell.message;
-
-import org.vcell.util.PropertyLoader;
-
-public class VCellTopic implements VCDestination {
-	public final static VCellTopic ClientStatusTopic = new VCellTopic(PropertyLoader.jmsClientStatusTopic, null);
-	public final static VCellTopic DaemonControlTopic = new VCellTopic(PropertyLoader.jmsDaemonControlTopic, null);
-	public final static VCellTopic ServiceControlTopic = new VCellTopic(PropertyLoader.jmsServiceControlTopic, null);
-
-	private String vcellPropertyName;
-	private String topicName;
-	private VCellTopic(String propertyName, String topicName){
-		this.vcellPropertyName = propertyName;
-		this.topicName = topicName;
-	}
-	
-	public VCellTopic(String topicName){
-		this(null,topicName);
-	}
-	
-	public String getName() {
-		if (topicName!=null){
-			return topicName;
-		}
-		return PropertyLoader.getRequiredProperty(vcellPropertyName);
-	}
-		
-	public boolean equals(Object obj){
-		if (obj instanceof VCellTopic){
-			VCellTopic other = (VCellTopic)obj;
-			return other.getName().equals(getName());
-		}
-		return false;
-	}
-	
-	public int hashCode(){
-		return getName().hashCode();
-	}
-	
-}
\ No newline at end of file
Index: src/cbit/vcell/message/MessagePropertyNotFoundException.java
===================================================================
--- src/cbit/vcell/message/MessagePropertyNotFoundException.java	(revision 11981)
+++ src/cbit/vcell/message/MessagePropertyNotFoundException.java	(revision 11980)
@@ -1,9 +0,0 @@
-package cbit.vcell.message;
-
-public class MessagePropertyNotFoundException extends RuntimeException {
-
-	public MessagePropertyNotFoundException(String message) {
-		super(message);
-	}
-
-}
Index: src/cbit/vcell/message/VCMessagingException.java
===================================================================
--- src/cbit/vcell/message/VCMessagingException.java	(revision 11981)
+++ src/cbit/vcell/message/VCMessagingException.java	(revision 11980)
@@ -1,13 +0,0 @@
-package cbit.vcell.message;
-
-public class VCMessagingException extends Exception {
-
-	public VCMessagingException(String message, Throwable cause) {
-		super(message, cause);
-	}
-
-	public VCMessagingException(String message) {
-		super(message);
-	}
-
-}
Index: src/cbit/vcell/message/VCMessagingInvocationTargetException.java
===================================================================
--- src/cbit/vcell/message/VCMessagingInvocationTargetException.java	(revision 11981)
+++ src/cbit/vcell/message/VCMessagingInvocationTargetException.java	(revision 11980)
@@ -1,10 +0,0 @@
-package cbit.vcell.message;
-
-public class VCMessagingInvocationTargetException extends Exception {
-	public VCMessagingInvocationTargetException(Throwable targetException){
-		super(targetException);
-	}
-	public Throwable getTargetException(){
-		return super.getCause();
-	}
-}
Index: src/cbit/vcell/message/VCRpcRequest.java
===================================================================
--- src/cbit/vcell/message/VCRpcRequest.java	(revision 11981)
+++ src/cbit/vcell/message/VCRpcRequest.java	(revision 11980)
@@ -1,204 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message;
-
-import java.lang.reflect.InvocationTargetException;
-
-import javax.jms.JMSException;
-
-import org.vcell.util.DataAccessException;
-import org.vcell.util.MessageConstants.ServiceType;
-import org.vcell.util.ObjectNotFoundException;
-import org.vcell.util.SessionLog;
-import org.vcell.util.document.User;
-
-import cbit.vcell.messaging.server.RpcRequest;
-
-
-/**
- * Insert the type's description here.
- * Creation date: (5/13/2003 1:41:34 PM)
- * @author: Fei Gao
- */
-public class VCRpcRequest implements java.io.Serializable {
-	private User user = null;
-	private Object[] args = null;
-	private ServiceType requestedServiceType = null; // refer to "databaseServer", "dataServer", "***";
-	private String methodName = null;	
-/**
- * SimpleTask constructor comment.
- * @param argName java.lang.String
- * @param argEstimatedSizeMB double
- * @param argUserid java.lang.String
- */
-public VCRpcRequest(User user0, ServiceType st, String methodName0, Object[] arglist) {
-	user = user0;
-	this.requestedServiceType = st;
-	methodName = methodName0;
-	this.args = arglist;	
-}
-/**
- * Insert the method's description here.
- * Creation date: (5/13/2003 1:56:44 PM)
- * @return java.lang.Object[]
- */
-public Object[] getArguments() {
-	return args;
-}
-/**
- * Insert the method's description here.
- * Creation date: (5/13/2003 2:43:42 PM)
- * @return java.lang.String
- */
-public String getMethodName() {
-	return methodName;
-}
-/**
- * Insert the method's description here.
- * Creation date: (12/30/2003 9:16:45 AM)
- * @return java.lang.String
- */
-public ServiceType getRequestedServiceType() {
-	return requestedServiceType;
-}
-/**
- * Insert the method's description here.
- * Creation date: (3/11/2004 8:50:08 AM)
- * @return java.lang.String
- */
-public org.vcell.util.document.User getUser() {
-	return user;
-}
-/**
- * Insert the method's description here.
- * Creation date: (3/11/2004 8:51:06 AM)
- * @return java.lang.String
- */
-public java.lang.String getUserName() {
-	if (user == null) {
-		return null;
-	}
-	
-	return user.getName();
-}
-/**
- * Insert the method's description here.
- * Creation date: (10/18/2001 5:12:18 PM)
- * @return java.lang.String
- */
-public String toString() {
-	return "[" + user + "," + requestedServiceType + "," + methodName + "]";
-}
-
-public final Object rpc(Object rpcServiceImpl, SessionLog log) throws DataAccessException, JMSException, ObjectNotFoundException {
-	String methodName = getMethodName();
-	Object[] arguments = getArguments();
-	
-	java.lang.reflect.Method methods[] = rpcServiceImpl.getClass().getMethods();
-	java.lang.reflect.Method method = null;
-	for (int i = 0; methods != null && i < methods.length; i ++){
-		if (methods[i].getName().equals(methodName)){
-			method = methods[i];
-			
-			Class<?>[] paramTypes = method.getParameterTypes();
-			if (paramTypes.length != arguments.length) {
-				method = null;
-				continue;
-			}
-
-			// compare types one bye one
-			for (int j = 0; j < paramTypes.length; j ++){
-				// if argument is null, assume type matches
-				if (arguments[j] == null || paramTypes[j].isInstance(arguments[j])) { // if the object is instance of the parameter type, compatible, check next
-					continue;
-				}
-				
-				if (paramTypes[j].isPrimitive()) {	// if not, check if it's primitive type
-					Class<?> c = arguments[j].getClass(); 
-					Class<?> argType = null;
-
-					//unwrap primitive type
-					if (c.equals(Boolean.class)) {
-						argType = Boolean.TYPE;
-					} else if (c.equals(Character.class)) {
-						argType = Character.TYPE;
-					} else if (c.equals(Byte.class)){
-						argType = Byte.TYPE;
-					} else if (c.equals(Short.class)){
-						argType = Short.TYPE;
-					} else if (c.equals(Integer.class)){
-						argType = Integer.TYPE;
-					} else if (c.equals(Long.class)){
-						argType = Long.TYPE;
-					} else if (c.equals(Float.class)){
-						argType = Float.TYPE;
-					} else if (c.equals(Double.class)){
-						argType = Double.TYPE;
-					} else if (c.equals(Void.class)){
-						argType = Void.TYPE;
-					} else {
-						argType = null;
-					}
-
-					if (argType != null && paramTypes[j].equals(argType)) { // if it's primitive type, and the types are equal, compatible, check next
-						continue;
-					}
-				}
-				
-				method = null; // otherwise, these two types are not compatible, break
-				break;				
-			}
-
-			if (method != null) {
-				break;
-			}			
-		}
-	}	
-	
-	try {
-		if (method == null) {
-			String exceptionMessage = "No such method: " + methodName + "(";
-			for (int i = 0; i < arguments.length; i ++) {
-				exceptionMessage += arguments[i].getClass().getName();
-				if (i < arguments.length - 1) {
-					exceptionMessage += ",";
-				}
-			}
-			exceptionMessage += ")";
-			throw new DataAccessException(exceptionMessage);
-		}
-				
-		return method.invoke(rpcServiceImpl, getArguments());
-
-	} catch (InvocationTargetException ex) {
-		log.exception(ex);
-	 	Throwable targetExcepton = ex.getTargetException();
-	 	if (targetExcepton instanceof JMSException) {
-		 	throw (JMSException)targetExcepton;
-	 	} else if (targetExcepton instanceof ObjectNotFoundException) {
-		 	throw (ObjectNotFoundException)targetExcepton;
-	 	} else if (targetExcepton instanceof DataAccessException) {
-		 	throw (DataAccessException)targetExcepton;
-	 	} else {
-		 	throw new RuntimeException(targetExcepton.getMessage());
-	 	}
-	} catch (IllegalAccessException e){
-		log.exception(e);
-		throw new RuntimeException("IllegalAccessException for rpc(method=" + methodName);
-	}
-}
-
-public static VCRpcRequest fromRpcRequest(RpcRequest rpcRequest) {
-	VCRpcRequest vcRpcRequest = new VCRpcRequest(rpcRequest.getUser(), rpcRequest.getRequestedServiceType(), rpcRequest.getMethodName(), rpcRequest.getArguments());
-	return vcRpcRequest;
-}
-
-}
Index: src/cbit/vcell/message/server/pbs/PbsProxyLocal.java
===================================================================
--- src/cbit/vcell/message/server/pbs/PbsProxyLocal.java	(revision 11981)
+++ src/cbit/vcell/message/server/pbs/PbsProxyLocal.java	(revision 11980)
@@ -1,71 +0,0 @@
-package cbit.vcell.message.server.pbs;
-
-import java.io.File;
-import java.io.IOException;
-
-import org.vcell.util.Executable;
-import org.vcell.util.ExecutableException;
-import org.vcell.util.FileUtils;
-
-import cbit.vcell.mongodb.VCMongoMessage;
-
-public class PbsProxyLocal extends PbsProxy {
-	
-	public PbsProxyLocal(){
-		super();
-	}
-
-	@Override
-	public CommandOutput command(String[] command) throws ExecutableException {
-		long timeMS = System.currentTimeMillis();
-		Executable exe = new Executable(command);
-		exe.start();
-		long elapsedTimeMS = System.currentTimeMillis() - timeMS;
-		CommandOutput commandOutput = new CommandOutput(command, exe.getStdoutString(), exe.getStderrString(), exe.getExitValue(), elapsedTimeMS);
-		VCMongoMessage.sendPbsCall(this,commandOutput);
-
-		System.out.println("Command: " + commandOutput.getCommand());
-		System.out.println("Command: stdout = " + commandOutput.getStandardOutput()); 
-		System.out.println("Command: stderr = " + commandOutput.getStandardError()); 
-		System.out.println("Command: exit = " + commandOutput.getExitStatus());
-
-		return commandOutput;
-	}
-
-	@Override
-	public PbsProxy clone() {
-		return new PbsProxyLocal();
-	}
-
-	@Override
-	public void pushFile(File tempFile, String remotePath) throws IOException {
-		FileUtils.copyFile(tempFile, new File(remotePath));
-	}
-
-	public void deleteFile(String remoteFilePath) throws IOException {
-		FileUtils.deleteFile(remoteFilePath);
-	}
-
-//	public static void main(String[] args){
-//		PbsProxyLocal thisProxy = null;
-//		ArrayList<RunningPbsJobRecord> records = null;
-//
-//		thisProxy = new PbsProxyLocal();
-//
-//		try {
-//			 records = thisProxy.getRunningPBSJobs();
-//		} catch (ExecutableException e) {
-//			// TODO Auto-generated catch block
-//			e.printStackTrace();
-//		}
-//		
-//		System.out.println("PBS JobID , SimID");
-//		Iterator<RunningPbsJobRecord> iter = records.iterator();
-//		while (iter.hasNext()){
-//			RunningPbsJobRecord record = iter.next();
-//			System.out.println(record.getPbsJobId()+"   ,    "+record.getPbsJobName());
-//		}
-//		System.out.println("done");
-//	}
-	
-}
Index: src/cbit/vcell/message/server/pbs/PbsProxy.java
===================================================================
--- src/cbit/vcell/message/server/pbs/PbsProxy.java	(revision 11981)
+++ src/cbit/vcell/message/server/pbs/PbsProxy.java	(revision 11980)
@@ -1,436 +0,0 @@
-package cbit.vcell.message.server.pbs;
-
-import static cbit.htc.PBSConstants.JOB_CMD_DELETE;
-import static cbit.htc.PBSConstants.JOB_CMD_HISTORY;
-import static cbit.htc.PBSConstants.JOB_CMD_STATUS;
-import static cbit.htc.PBSConstants.SERVER_CMD_STATUS;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.StringTokenizer;
-
-import org.vcell.util.ExecutableException;
-import org.vcell.util.FileUtils;
-import org.vcell.util.PropertyLoader;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.VCellServerID;
-
-import cbit.htc.PBSConstants;
-import cbit.htc.PBSConstants.PBSJobCategory;
-import cbit.htc.PBSConstants.PBSJobExitCode;
-import cbit.htc.PBSConstants.PBSJobStatus;
-import cbit.htc.PbsJobID;
-
-public abstract class PbsProxy {
-
-	public class PbsJobNotFoundException extends Exception {
-
-		public PbsJobNotFoundException(String message) {
-			super(message);
-		}
-
-	}
-	
-	public class RunningPbsJobRecord {
-		private int pbsJobId;
-		private String pbsJobName;
-		
-		public RunningPbsJobRecord(int pbsJobIdArg, String pbsJobNameArg){
-			pbsJobId = pbsJobIdArg;
-			pbsJobName = pbsJobNameArg;
-		}
-		
-		public String getPbsJobName() {
-			return pbsJobName;
-		}
-		
-		public KeyValue getSimID() {
-			String substring2 = pbsJobName.substring(pbsJobName.indexOf("_")+1);
-			return new KeyValue(substring2.substring(0, substring2.indexOf("_")));
-		}
-		
-		public int getSimJobIndex(){
-			String substring2 = pbsJobName.substring(pbsJobName.indexOf("_")+1);
-			String substring3 = substring2.substring(substring2.indexOf("_")+1);
-			int jobindex = Integer.valueOf(substring3);
-			return jobindex;
-		}
-		
-		public int getPbsJobId(){
-			return pbsJobId;
-		}
-	
-		
-		
-	}
-
-	public static class CommandOutput {
-		private String[] commandStrings;
-		private String standardOutput;
-		private String standardError;
-		private Integer exitStatus;
-		private long elapsedTimeMS;
-
-		public CommandOutput(String[] commandStrings, String standardOutput, String standardError, Integer exitStatus, long elapsedTimeMS) {
-			this.commandStrings = commandStrings;
-			this.standardOutput = standardOutput;
-			this.standardError = standardError;
-			this.exitStatus = exitStatus;
-			this.elapsedTimeMS = elapsedTimeMS;
-		}
-		public String[] getCommandStrings() {
-			return commandStrings;
-		}
-		public String getCommand(){
-			return concatCommandStrings(commandStrings);
-		}
-		public String getStandardOutput() {
-			return standardOutput;
-		}
-		public String getStandardError() {
-			return standardError;
-		}
-		public Integer getExitStatus() {
-			return exitStatus;
-		}
-		public long getElapsedTimeMS() {
-			return elapsedTimeMS;
-		}
-		public static String concatCommandStrings(String[] cmdStrings){
-			StringBuffer cmd = new StringBuffer();
-			for (String cmdStr : cmdStrings){
-				cmd.append(cmdStr);
-				cmd.append(" ");
-			}
-			return cmd.toString().trim();
-		}
-	}
-
-
-	public PbsProxy(){
-	}
-	
-	@Override
-	public abstract PbsProxy clone();
-
-
-	/**
-	 * Insert the method's description here.
-	 * Creation date: (9/29/2003 10:34:36 AM)
-	 * @return int
-	 * @param jobid java.lang.String
-	 */
-	public String checkServerStatus() throws ExecutableException {
-		CommandOutput commandOutput = command(new String[] {SERVER_CMD_STATUS, "-B"});
-
-		String output = commandOutput.getStandardOutput();
-		/*
-	Server             Max   Tot   Que   Run   Hld   Wat   Trn   Ext Status
-	---------------- ----- ----- ----- ----- ----- ----- ----- ----- -----------
-	dll-2-1-1            0     0     0     0     0     0     0     0 Active
-		 */	
-		StringTokenizer st = new StringTokenizer(output, "\n");	
-		st.nextToken();
-		st.nextToken();
-		String line = st.nextToken();
-		st = new StringTokenizer(line, " ");
-		String pbsServer = st.nextToken();			
-
-		return pbsServer;
-	}
-
-	public PBSJobExitCode getPbsTraceJobExitCode(PbsJobID jobid) throws Exception {
-		/*
-	Job: 67.dll-2-1-1
-
-	06/04/2007 10:04:37  S    Job Queued at request of fgao@bigfish.vcell.uchc.edu, owner =
-	                          fgao@bigfish.vcell.uchc.edu, job name = test3.sub, queue = workq
-	06/04/2007 10:04:37  S    Job Run at request of Scheduler@dll-2-1-1.vcell.uchc.edu on hosts
-	                          (dll-2-1-2:ncpus=1)
-	06/04/2007 10:04:37  L    Considering job to run
-	06/04/2007 10:04:37  A    queue=workq
-	06/04/2007 10:04:42  L    Job run
-	06/04/2007 10:04:42  A    user=fgao group="RConsole Users" jobname=test3.sub queue=workq ctime=1180965876
-	                          qtime=1180965877 etime=1180965877 start=1180965882 exec_host=dll-2-1-2/0
-	                          exec_vnode=(dll-2-1-2:ncpus=1) Resource_List.ncpus=1 Resource_List.nodect=1
-	                          Resource_List.place=pack Resource_List.select=1:ncpus=1 resource_assigned.ncpus=1
-	06/04/2007 10:04:42  S    Job Modified at request of Scheduler@dll-2-1-1.vcell.uchc.edu
-	06/04/2007 10:04:42  S    Obit received
-	06/04/2007 10:04:42  S    Exit_status=0 resources_used.cput=00:00:00 resources_used.walltime=00:00:00
-	06/04/2007 10:04:42  A    user=fgao group="RConsole Users" jobname=test3.sub queue=workq ctime=1180965876
-	                          qtime=1180965877 etime=1180965877 start=1180965882 exec_host=dll-2-1-2/0
-	                          exec_vnode=(dll-2-1-2:ncpus=1) Resource_List.ncpus=1 Resource_List.nodect=1
-	                          Resource_List.place=pack Resource_List.select=1:ncpus=1 session=6872
-	                          alt_id=HomeDirectory=Z: end=1180965882 Exit_status=0 resources_used.cput=00:00:00
-	                          resources_used.walltime=00:00:00
-	06/04/2007 10:04:44  S    Post job file processing error
-		 */
-
-		String[] cmd = new String[] {JOB_CMD_HISTORY, "-p", PropertyLoader.getRequiredProperty(PropertyLoader.pbsHomeDir), jobid.getID()};
-		CommandOutput commandOutput = command(cmd);
-
-		String output = commandOutput.getStandardOutput();
-		final String exitStatus = "Exit_status=";
-		int idx = output.indexOf(exitStatus);
-		if (idx < 0) {
-			throw new RuntimeException("Job [" + jobid + "] : unknown status"); 
-		}
-		output = output.substring(idx);
-		StringTokenizer st = new StringTokenizer(output, " =");
-		st.nextToken();
-		int retcode = Integer.parseInt(st.nextToken());
-		PBSJobExitCode pbsJobExitCode = PBSJobExitCode.fromPBSJobExitCode(retcode);
-		if (pbsJobExitCode!=null){
-			return pbsJobExitCode;
-		}	
-		throw new Exception("Unknown PBS tracejob exit code ("+retcode+") for job [" + jobid + "]");
-	}
-	/**
-	 * Insert the method's description here.
-	 * Creation date: (9/29/2003 10:34:36 AM)
-	 * @return int
-	 * @param jobid java.lang.String
-	 */
-	public PBSJobStatus getJobStatus(PbsJobID jobid) throws Exception {		
-		PBSJobStatus iStatus = null;
-
-		String[] cmd = new String[]{JOB_CMD_STATUS, "-s", jobid.getID()};
-		CommandOutput commandOutput = command(cmd);
-
-		String output = commandOutput.getStandardOutput();
-		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
-		String strStatus = "";
-		while (st.hasMoreTokens()) {
-			if (st.nextToken().toLowerCase().trim().startsWith("job id")) {
-				if (st.hasMoreTokens()) {
-					st.nextToken();
-				}
-				if (st.hasMoreTokens()) {
-					strStatus = st.nextToken();
-				}
-				break;
-			}			
-		}
-		if (strStatus.length() == 0) {
-			return iStatus;
-		}
-		/*
-
-	pbssrv: 
-	                                                            Req'd  Req'd   Elap
-	Job ID          Username Queue    Jobname    SessID NDS TSK Memory Time  S Time
-	--------------- -------- -------- ---------- ------ --- --- ------ ----- - -----
-	29908.pbssrv    vcell    workqAlp S_32925452  30022   1   1  100mb   --  R 00:29
-	   Job run at Mon Apr 27 at 08:28 on (dll-2-6-6:ncpus=1:mem=102400kb)
-
-		 */		
-		st = new StringTokenizer(strStatus, " ");
-		String token = "";
-		for (int i = 0; i < 10 && st.hasMoreTokens(); i ++) {
-			token = st.nextToken();
-		}
-		PBSJobStatus status = PBSJobStatus.fromPBSCommandLetter(token);
-		if (status!=null){
-			return status;
-		}
-		throw new Exception("unknown PBS status letter '"+token+"'");
-	}
-
-
-	/**
-	 * Insert the method's description here.
-	 * Creation date: (9/29/2003 10:34:36 AM)
-	 * @return int
-	 * @param jobid java.lang.String
-	 */
-	public String getPendingReason(PbsJobID jobid) throws ExecutableException {
-
-		String[] cmd = new String[]{JOB_CMD_STATUS, "-s", jobid.getID()};
-		CommandOutput commandOutput = command(cmd);
-
-		String output = commandOutput.getStandardOutput();
-
-		/*
-
-		pbssrv: 
-		                                                            Req'd  Req'd   Elap
-		Job ID          Username Queue    Jobname    SessID NDS TSK Memory Time  S Time
-		--------------- -------- -------- ---------- ------ --- --- ------ ----- - -----
-		29908.pbssrv    vcell    workqAlp S_32925452  30022   1   1  100mb   --  R 00:29
-		   Job run at Mon Apr 27 at 08:28 on (dll-2-6-6:ncpus=1:mem=102400kb)
-
-		 */
-		String pendingReason = "unknown pending reason";
-
-		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
-		while (st.hasMoreTokens()) {
-			if (st.nextToken().toLowerCase().trim().startsWith("job id")) {
-				if (st.hasMoreTokens()) {
-					st.nextToken();
-				}
-				if (st.hasMoreTokens()) {
-					st.nextToken();
-				}
-				pendingReason = "";
-				while (st.hasMoreTokens()) {
-					pendingReason += st.nextToken();
-				}
-				break;
-			}			
-		}
-		return pendingReason;
-	}
-
-
-	/**
-	 * Insert the method's description here.
-	 * Creation date: (9/29/2003 10:35:12 AM)
-	 * @param jobid java.lang.String
-	 */
-	public void killJob(PbsJobID jobid) throws ExecutableException, PbsJobNotFoundException {
-		if (jobid == null) {
-			return;
-		}
-
-		String[] cmd = new String[]{JOB_CMD_DELETE, jobid.getID()};
-		try {
-			CommandOutput commandOutput = command(cmd);
-			Integer exitStatus = commandOutput.getExitStatus();
-			String standardError = commandOutput.getStandardError();
-			if (exitStatus!=null && exitStatus!=0 && standardError!=null && standardError.toLowerCase().contains(PBSConstants.UNKNOWN_JOB_ID_QSTAT_RESPONSE.toLowerCase())){
-				throw new PbsJobNotFoundException(standardError);
-			}
-		}catch (ExecutableException e){
-			e.printStackTrace();
-			if (!e.getMessage().toLowerCase().contains(PBSConstants.UNKNOWN_JOB_ID_QSTAT_RESPONSE.toLowerCase())){
-				throw e;
-			}else{
-				throw new PbsJobNotFoundException(e.getMessage());
-			}
-		}
-	}
-
-
-	public PbsJobID submitJob(String computeResource, String jobName, String sub_file, String[] command, int ncpus, double memSize) throws ExecutableException {
-		return submitJob(computeResource, jobName, sub_file, command, ncpus, memSize, PBSJobCategory.PBS_SIMULATION_JOB, null, false);
-	}
-
-	public PbsJobID submitJob(String computeResource, String jobName, String sub_file, String[] command, String[] secondCommand, int ncpus, double memSize) throws ExecutableException {
-		return submitJob(computeResource, jobName, sub_file, command, ncpus, memSize, PBSJobCategory.PBS_SIMULATION_JOB, secondCommand, false);
-	}
-
-	public PbsJobID submitServiceJob(String computeResource, String jobName, String sub_file, String[] command, int ncpus, double memSize) throws ExecutableException {
-		return submitJob(computeResource, jobName, sub_file, command, ncpus, memSize, PBSJobCategory.PBS_SERVICE_JOB, null, true);
-	}
-
-	private PbsJobID submitJob(String computeResource, String jobName, String sub_file, String[] command, int ncpus, double memSize, PBSJobCategory jobCategory, String[] secondCommand, boolean isServiceJob) throws ExecutableException{	
-		try {
-			VCellServerID serverID = VCellServerID.getSystemServerID();
-
-			File tempFile = File.createTempFile("tempSubFile", ".sub");
-			PrintWriter pw = new PrintWriter(new FileOutputStream(tempFile));
-			pw.println("# Generated without file template.");
-			pw.println("#PBS -N " + jobName);
-			pw.println("#PBS -l mem=" + (int)(memSize + PBSConstants.PBS_MEM_OVERHEAD_MB) + "mb");
-
-			switch (jobCategory){
-				case PBS_SIMULATION_JOB:{
-					String pbsWorkQueueNamePrefix = PropertyLoader.getProperty(PropertyLoader.pbsWorkQueuePrefix, PBSConstants.PBS_WORK_QUEUE_PREFIX);
-					pw.println("#PBS -q "+pbsWorkQueueNamePrefix + serverID.toCamelCase());
-					break;
-				}
-				case PBS_SERVICE_JOB:{
-					String pbsServiceQueueNamePrefix = PropertyLoader.getProperty(PropertyLoader.pbsServiceQueuePrefix, PBSConstants.PBS_SERVICE_QUEUE_PREFIX);
-					pw.println("#PBS -q "+pbsServiceQueueNamePrefix + serverID.toCamelCase());
-					break;
-				}
-				default: {
-					pw.close();
-					throw new ExecutableException("Invalid jobCategory: "+jobCategory.name());				
-				}
-			}
-
-			pw.print(PBSConstants.PBS_JOB_TEMPLATE);
-			pw.println();
-			
-			pw.println(CommandOutput.concatCommandStrings(command));
-			if (secondCommand!=null){
-				String secondCommandString = "if [ \"$?\" = \"0\" ] ; then "+CommandOutput.concatCommandStrings(secondCommand);
-				secondCommandString = secondCommandString+" ; fi\n";
-				pw.println(secondCommandString);
-			}
-			pw.close();
-			
-			// move submission file to final location (either locally or remotely).
-			System.out.println("<<<SUBMISSION FILE>>> ... moving local file '"+tempFile.getAbsolutePath()+"' to remote file '"+sub_file+"'");
-			pushFile(tempFile,sub_file);
-			System.out.println("<<<SUBMISSION FILE START>>>\n"+FileUtils.readFileToString(tempFile)+"\n<<<SUBMISSION FILE END>>>\n");
-			tempFile.delete();
-		} catch (IOException ex) {
-			ex.printStackTrace(System.out);
-			return null;
-		}
-
-		String[] completeCommand = new String[] {PBSConstants.JOB_CMD_SUBMIT, sub_file};
-		CommandOutput output = command(completeCommand);
-		String jobid = output.getStandardOutput().trim();
-		
-		if (isServiceJob){
-			try {
-				deleteFile(sub_file);
-			} catch (IOException e) {
-				e.printStackTrace();
-				throw new ExecutableException(e.getMessage());
-			}
-		}
-		
-		return new PbsJobID(jobid);
-	}
-	
-	public abstract void pushFile(File tempFile, String remotePath) throws IOException;
-	
-	public abstract void deleteFile(String remoteFilePath) throws IOException;
- 
-	public abstract CommandOutput command(String[] command) throws ExecutableException;
-	
-	public ArrayList<RunningPbsJobRecord> getRunningPBSJobs() throws ExecutableException {
-		ArrayList<RunningPbsJobRecord> foundRunningPBSJobs = new ArrayList();
-		try{
-			
-			String[] commandArray = new String[]{PBSConstants.QSTAT_FULL_CLUSTER_COMMAND_PATH,"|", "grep "+PBSConstants.PBS_SIMULATION_JOB_NAME_PREFIX};
-			CommandOutput commandOutput = command(commandArray);
-			if (commandOutput.getExitStatus()==1) {return null;} //because Grep returns code 1 if nothing found
-			if (commandOutput.getExitStatus()!=0 || commandOutput.getStandardOutput()==null) {
-				throw new ExecutableException("qstat failed.\nExit Status = "+commandOutput.getExitStatus().toString()+"\n"+
-						"Standard out = \n"+commandOutput.getStandardOutput()+"\n"+
-						"Standard error = \n"+commandOutput.getStandardError());
-			}
-			String[] outputLines =commandOutput.getStandardOutput().split("\n");
-			for (int i=0; i<outputLines.length; i++){
-			 	String foundPbsJobID = outputLines[i].substring(0, outputLines[i].indexOf("."));
-			 	//Do a sanity check.  Does foundPbsJobID string represent an integer?
-			 	try {
-			 		
-				 	String substring2 = outputLines[i].substring(outputLines[i].indexOf(PBSConstants.PBS_SIMULATION_JOB_NAME_PREFIX));
-				 	String foundPbsJobName = substring2.substring(0, substring2.indexOf(" "));
-				 	foundRunningPBSJobs.add(new RunningPbsJobRecord(Integer.parseInt(foundPbsJobID), foundPbsJobName));
-			 	} catch (NumberFormatException nfe){
-			 		throw new ExecutableException("Something's wrong: Non-integer found where an integer PBS Job ID was expected\n"+
-							"Standard out = \n"+commandOutput.getStandardOutput()+"\n"+
-							"Standard error = \n"+commandOutput.getStandardError());
-			 	}
-
-			}
-		}
-		catch (Exception e) {
-			e.printStackTrace();
-			throw new ExecutableException(e.getMessage());
-		}
-		
-		return foundRunningPBSJobs;
-	}
-}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 11981)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 11980)
@@ -1,164 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.server.dispatcher;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-import org.vcell.util.DataAccessException;
-import org.vcell.util.SessionLog;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-import org.vcell.util.document.VCellServerID;
-
-import cbit.rmi.event.WorkerEvent;
-import cbit.vcell.field.FieldDataIdentifierSpec;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.messages.StatusMessage;
-import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatusInfo;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
-import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationMessage;
-import cbit.vcell.solver.VCSimulationIdentifier;
-
-/**
- * Insert the type's description here.
- * Creation date: (10/18/2001 4:31:11 PM)
- * @author: Jim Schaff
- */
-public class SimulationDispatcherEngine {
-
-	private HashMap<KeyValue,ArrayList<SimulationStateMachine>> simStateMachineHash = new HashMap<KeyValue, ArrayList<SimulationStateMachine>>();
-
-	/**
-	 * Scheduler constructor comment.
-	 */
-	public SimulationDispatcherEngine() {
-	}
-
-
-	public SimulationStateMachine getSimulationStateMachine(KeyValue simulationKey, int jobIndex) {
-		ArrayList<SimulationStateMachine> stateMachineList = simStateMachineHash.get(simulationKey);
-		if (stateMachineList==null){
-			stateMachineList = new ArrayList<SimulationStateMachine>();
-			simStateMachineHash.put(simulationKey,stateMachineList);
-		}
-		for (SimulationStateMachine stateMachine : stateMachineList){
-			if (stateMachine.getJobIndex() == jobIndex){
-				return stateMachine;
-			}
-		}
-		SimulationStateMachine newStateMachine = new SimulationStateMachine(simulationKey, jobIndex);
-		stateMachineList.add(newStateMachine);
-		return newStateMachine;
-	}
-
-	public void onDispatch(VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationDatabase simulationDatabase, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException{
-		KeyValue simulationKey = vcSimID.getSimulationKey();
-		SimulationStateMachine simStateMachine = getSimulationStateMachine(simulationKey, jobIndex);
-		
-		simStateMachine.onDispatch(vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
-	}
-	/**
-	 * @param vcMessage
-	 * @param session
-	 * @throws VCMessagingException 
-	 * @throws SQLException 
-	 * @throws DataAccessException 
-	 */
-	public void onStartRequest(VCSimulationIdentifier vcSimID, User user, SimulationDatabase simulationDatabase, VCMessageSession session, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
-		KeyValue simKey = vcSimID.getSimulationKey();
-
-		Simulation simulation = null;
-		try {
-			simulation = simulationDatabase.getSimulation(user, simKey);
-		} catch (DataAccessException ex) {
-			log.alert("Bad simulation " + vcSimID);
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Failed to dispatch simulation: "+ ex.getMessage()), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			return;
-		}
-		if (simulation == null) {
-			log.alert("Can't start, simulation [" + vcSimID + "] doesn't exist in database");
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			return;
-		}
-
-		if (simulation.getScanCount() > Integer.parseInt(org.vcell.util.PropertyLoader.getRequiredProperty(org.vcell.util.PropertyLoader.maxJobsPerScan))) {
-			log.alert("Too many simulations (" + simulation.getScanCount() + ") for parameter scan." + vcSimID);
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Too many simulations (" + simulation.getScanCount() + ") for parameter scan."), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			return;
-		}
-
-		FieldDataIdentifierSpec[] fdis = null;
-		try {
-			simulationDatabase.getFieldDataIdentifierSpecs(simulation);
-		} catch (DataAccessException e) {
-			log.alert("Bad simulation " + vcSimID);
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("Failed to dispatch simulation: "+ e.getMessage()), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			return;
-		}
-
-		for (int jobIndex = 0; jobIndex < simulation.getScanCount(); jobIndex++){
-			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
-			try {
-				simStateMachine.onStartRequest(user, simulation, fdis, simulationDatabase, session, log);
-			}catch (UpdateSynchronizationException e){
-				simStateMachine.onStartRequest(user, simulation, fdis, simulationDatabase, session, log);
-			}
-			SimulationTaskProcessState latestSimTaskProcessState = simStateMachine.getLatestSimTaskProcessState();
-			simStateMachine.onDispatch(vcSimID, latestSimTaskProcessState.taskID, simulationDatabase, dispatcherQueueSession, log);
-		}
-	}
-
-	
-	public void onStopRequest(VCSimulationIdentifier vcSimID, User user, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws DataAccessException, VCMessagingException, SQLException {
-		KeyValue simKey = vcSimID.getSimulationKey();
-
-		int numJobs = simulationDatabase.getNumSimulationJobs(user, simKey);
-		for (int jobIndex = 0; jobIndex < numJobs; jobIndex++){
-			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
-			try {
-				simStateMachine.onStopRequest(user, vcSimID, simulationDatabase, session, log);
-			}catch (UpdateSynchronizationException e){
-				simStateMachine.onStopRequest(user, vcSimID, simulationDatabase, session, log);
-			}
-		}
-	}
-
-	
-
-	/**
-	 * @param vcMessage
-	 * @param session
-	 */
-	public void onWorkerEvent(WorkerEvent workerEvent, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) {
-		try {
-			KeyValue simKey = workerEvent.getVCSimulationDataIdentifier().getSimulationKey();
-			int jobIndex = workerEvent.getJobIndex();
-			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
-			simStateMachine.onWorkerEvent(workerEvent, simulationDatabase, session, log);
-		} catch (Exception ex) {
-			log.exception(ex);
-		}
-	}
-
-}
Index: src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java	(revision 11981)
+++ src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java	(revision 11980)
@@ -1,52 +0,0 @@
-package cbit.vcell.message.server.dispatcher;
-
-import java.util.Date;
-
-import org.vcell.util.document.KeyValue;
-
-//import cbit.htc.PBSConstants.PBSJobExitCode;
-//import cbit.htc.PBSConstants.PBSJobStatus;
-import cbit.htc.PbsJobID;
-
-public class SimulationTaskProcessState {
-	final KeyValue simKey;
-	final int jobIndex;
-	final int taskID;
-	
-	Date startDate = null;
-	Date latestUpdateDate = null;
-	Date endDate = null;
-	
-	Boolean hasData = null;
-	Double progress = null;
-	Double timePoint = null;
-	
-	PbsJobID pbsJobID;
-//	PBSJobStatus pbsJobStatus;
-//	PBSJobExitCode pbsJobExitCode;
-	
-	String computeHost;
-	
-	public SimulationTaskProcessState(KeyValue simKey, int jobIndex, int taskID) {
-		this.simKey = simKey;
-		this.jobIndex = jobIndex;
-		this.taskID = taskID;
-	}
-
-	public SimulationTaskProcessState(SimulationTaskProcessState simTaskProcessState) {
-		this.simKey = simTaskProcessState.simKey;
-		this.jobIndex = simTaskProcessState.jobIndex;
-		this.taskID = simTaskProcessState.taskID;
-		this.startDate = simTaskProcessState.startDate;
-		this.latestUpdateDate = simTaskProcessState.latestUpdateDate;
-		this.endDate = simTaskProcessState.endDate;
-		this.hasData = simTaskProcessState.hasData;
-		this.progress = simTaskProcessState.progress;
-		this.timePoint = simTaskProcessState.timePoint;
-		this.pbsJobID = simTaskProcessState.pbsJobID;
-//		this.pbsJobStatus = simTaskProcessState.pbsJobStatus;
-//		this.pbsJobExitCode = simTaskProcessState.pbsJobExitCode;
-		this.computeHost = simTaskProcessState.computeHost;
-	}
-
-}
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 11981)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 11980)
@@ -1,260 +0,0 @@
-package cbit.vcell.message.server.dispatcher;
-
-import java.sql.SQLException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Vector;
-
-import org.vcell.util.BigString;
-import org.vcell.util.CacheException;
-import org.vcell.util.DataAccessException;
-import org.vcell.util.ObjectNotFoundException;
-import org.vcell.util.SessionLog;
-import org.vcell.util.document.ExternalDataIdentifier;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-import org.vcell.util.document.VCellServerID;
-
-import cbit.sql.DBCacheTable;
-import cbit.vcell.field.FieldDataDBOperationResults;
-import cbit.vcell.field.FieldDataDBOperationSpec;
-import cbit.vcell.field.FieldDataIdentifierSpec;
-import cbit.vcell.field.FieldFunctionArguments;
-import cbit.vcell.field.FieldUtilities;
-import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatusInfo;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
-import cbit.vcell.messaging.server.SimulationTask;
-import cbit.vcell.modeldb.AdminDBTopLevel;
-import cbit.vcell.modeldb.DatabaseServerImpl;
-import cbit.vcell.modeldb.ResultSetCrawler;
-import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationInfo;
-import cbit.vcell.solver.SimulationJob;
-import cbit.vcell.solver.VCSimulationDataIdentifier;
-import cbit.vcell.solver.VCSimulationIdentifier;
-import cbit.vcell.xml.XmlHelper;
-import cbit.vcell.xml.XmlParseException;
-
-public class SimulationDatabase {
-
-	private AdminDBTopLevel adminDbTopLevel = null;
-	private DatabaseServerImpl databaseServerImpl = null;
-	private SessionLog log = null;
-	private Map<KeyValue, FieldDataIdentifierSpec[]> simFieldDataIDMap = Collections.synchronizedMap(new HashMap<KeyValue, FieldDataIdentifierSpec[]>());
-	private DBCacheTable simulationMap = null;
-	private Map<KeyValue, User> simUserMap = Collections.synchronizedMap(new HashMap<KeyValue, User>());
-	protected HashSet<VCSimulationDataIdentifier> resultSetSavedSet = new HashSet<VCSimulationDataIdentifier>();
-	private ResultSetCrawler resultSetCrawler = null;
-
-
-	public SimulationDatabase(ResultSetCrawler resultSetCrawler, AdminDBTopLevel adminDbTopLevel, DatabaseServerImpl databaseServerImpl, SessionLog log){
-		this.resultSetCrawler = resultSetCrawler;
-		this.databaseServerImpl = databaseServerImpl;
-		this.adminDbTopLevel = adminDbTopLevel;
-		this.log = log;
-	}
-
-	public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException {
-		return adminDbTopLevel.getSimulationJobStatusArray(simKey, jobIndex, true);
-	}
-
-	public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException, SQLException {
-		return adminDbTopLevel.getSimulationJobStatus(simKey, jobIndex, taskID, true);
-	}
-
-	public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, SQLException{
-		return adminDbTopLevel.insertSimulationJobStatus(simulationJobStatus,true);
-	}
-
-	public SimulationJobStatusInfo[] getActiveJobs(VCellServerID[] serverIDs) throws DataAccessException, SQLException{
-		SimulationJobStatusInfo[] activeJobs = adminDbTopLevel.getActiveJobs(serverIDs,true);
-		return activeJobs;
-	}
-	public SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws DataAccessException, UpdateSynchronizationException, SQLException {
-		if (oldSimulationJobStatus==null){
-			return adminDbTopLevel.insertSimulationJobStatus(newSimulationJobStatus,true);
-		}else{
-			return adminDbTopLevel.updateSimulationJobStatus(oldSimulationJobStatus,newSimulationJobStatus,true);
-		}
-	}
-
-	public Simulation getSimulation(User user, KeyValue simKey) throws DataAccessException {
-		if (simulationMap == null) {
-			log.print("Initializaing DBCacheTable!");
-			simulationMap = new DBCacheTable(3600 * 1000);
-		}
-
-		log.print("Get simulation [" + simKey + ","  + user + "]");	
-		Simulation sim = (Simulation)simulationMap.getCloned(simKey);
-
-		if (sim != null) {
-			return sim;
-		}
-
-		BigString simstr = databaseServerImpl.getSimulationXML(user,simKey);	
-
-		if (simstr != null){
-			try {
-				sim = XmlHelper.XMLToSim(simstr.toString());
-			}catch (XmlParseException e){
-				log.exception(e);
-				throw new DataAccessException(e.getMessage());
-			}
-			if (sim != null) {
-				try {
-					simulationMap.putProtected(simKey, sim);
-				} catch (CacheException e) {
-					// if can't cache the simulation, it is ok
-					e.printStackTrace();
-				}
-			}
-		}
-
-		return sim;
-	}
-
-	public FieldDataIdentifierSpec[] getFieldDataIdentifierSpecs(Simulation sim) throws DataAccessException {
-		try {		
-			KeyValue simKey = sim.getKey();
-			log.print("Get FieldDataIdentifierSpec for [" + simKey + "]");	
-			FieldDataIdentifierSpec[] fieldDataIDSs = (FieldDataIdentifierSpec[])simFieldDataIDMap.get(simKey);
-
-			if (fieldDataIDSs != null) {
-				return fieldDataIDSs;
-			}
-
-			FieldFunctionArguments[] fieldFuncArgs =  FieldUtilities.getFieldFunctionArguments(sim.getMathDescription());
-			if (fieldFuncArgs == null || fieldFuncArgs.length == 0) {
-				return null;
-			}
-			User owner = sim.getVersion().getOwner();
-			FieldDataDBOperationSpec fieldDataDbOperationSpec = FieldDataDBOperationSpec.createGetExtDataIDsSpec(owner);
-			FieldDataDBOperationResults fieldDataDBOperationResults = databaseServerImpl.fieldDataDBOperation(owner,fieldDataDbOperationSpec);
-			ExternalDataIdentifier[] externalDataIDs = fieldDataDBOperationResults.extDataIDArr;
-			if (externalDataIDs != null && externalDataIDs.length != 0 &&
-					fieldFuncArgs != null && fieldFuncArgs.length>0	) {
-				Vector<FieldDataIdentifierSpec> fieldDataIdV = new Vector<FieldDataIdentifierSpec>();
-				for(int j=0;fieldFuncArgs != null && j<fieldFuncArgs.length;j+= 1){
-					for(int i=0;i<externalDataIDs.length;i+= 1){
-						if(externalDataIDs[i].getName().equals(fieldFuncArgs[j].getFieldName())){
-							fieldDataIdV.add(
-									new FieldDataIdentifierSpec(fieldFuncArgs[j],externalDataIDs[i])
-									);
-							break;
-						}
-					}
-				}
-				if(fieldDataIdV.size() > 0){
-					fieldDataIDSs = new FieldDataIdentifierSpec[fieldDataIdV.size()];
-					fieldDataIdV.copyInto(fieldDataIDSs);
-				}
-			}
-
-			if (fieldDataIDSs != null){
-				simFieldDataIDMap.put(simKey, fieldDataIDSs);		
-			}
-
-			return fieldDataIDSs;
-		} catch (Exception ex) {
-			log.exception(ex);
-			throw new DataAccessException(ex.getMessage());
-		}
-	}
-	
-	public SimulationJobStatus getNextObsoleteSimulation(long interval) throws SQLException{
-		return adminDbTopLevel.getNextObsoleteSimulation(interval,true);
-	}
-
-	public User getUser(KeyValue simKey, String username) throws DataAccessException, SQLException {
-		User user = null;
-
-		synchronized(simUserMap) {
-			user = (User)simUserMap.get(simKey);
-
-			if (user != null && username != null && !user.getName().equals(username)) {
-				throw new DataAccessException("Wrong user [" + user.getName() + "," + username + "] for the simulation [" + simKey + "]");
-			}
-
-			if (user == null) {
-				if (username != null) {
-					user = adminDbTopLevel.getUser(username,true);
-				} else {
-					user = adminDbTopLevel.getUserFromSimulationKey(simKey,true);
-				}
-				if (user != null) {
-					simUserMap.put(simKey, user);
-				}			
-			}
-		}
-
-		return user;
-	}
-
-	public SimulationInfo getSimulationInfo(User user, KeyValue simKey) throws ObjectNotFoundException, DataAccessException {
-		if (simulationMap == null) {
-			log.print("Initializaing DBCacheTable!");
-			simulationMap = new DBCacheTable(3600 * 1000);
-		}
-
-		log.print("Get simulation [" + simKey + ","  + user + "]");	
-		Simulation sim = (Simulation)simulationMap.get(simKey);
-
-		if (sim != null) {
-			return sim.getSimulationInfo();
-		}
-
-		SimulationInfo simInfo = databaseServerImpl.getSimulationInfo(user, simKey);
-
-		return simInfo;
-	}
-
-	/**
-	 * Insert the method's description here.
-	 * Creation date: (2/3/2004 8:34:36 AM)
-	 * @return cbit.vcell.messaging.SimulationTask
-	 * @param simKey cbit.sql.KeyValue
-	 * @throws XmlParseException 
-	 * @throws DataAccessException 
-	 * @throws ObjectNotFoundException 
-	 * @throws SQLException 
-	 */
-	public SimulationTask getSimulationTask(SimulationJobStatus jobStatus) throws XmlParseException, ObjectNotFoundException, DataAccessException, SQLException {
-		VCSimulationIdentifier vcSimID = jobStatus.getVCSimulationIdentifier();
-		User user = getUser(vcSimID.getSimulationKey(), null);				
-		Simulation sim = getSimulation(user, vcSimID.getSimulationKey());
-		SimulationTask simTask = new SimulationTask(new SimulationJob(sim, jobStatus.getJobIndex(), getFieldDataIdentifierSpecs(sim)), jobStatus.getTaskID());
-
-		return simTask;
-	}
-
-	public int getNumSimulationJobs(User user, KeyValue simKey) throws DataAccessException {
-		Simulation sim = getSimulation(user, simKey);
-		return sim.getScanCount();
-	}
-
-	public void dataMoved(VCSimulationDataIdentifier vcSimDataID, User user) {
-		// called by data mover thread after successful move operations
-		try {		
-			if (!resultSetSavedSet.contains(vcSimDataID)){
-				try {
-					resultSetCrawler.updateSimResults(user,vcSimDataID);
-					resultSetSavedSet.add(vcSimDataID);
-				} catch (Throwable exc) {
-					log.exception(exc);
-				}
-			}
-		} catch (Throwable e){
-			log.exception(e);
-		}
-	}
-
-	public SimulationJob getSimulationJob(KeyValue simKey, int jobIndex) throws DataAccessException, SQLException {
-		User user = getUser(simKey, null);				
-		Simulation sim = getSimulation(user, simKey);
-		return new SimulationJob(sim, jobIndex, getFieldDataIdentifierSpecs(sim));
-	}
-
-}
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 11981)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 11980)
@@ -1,640 +0,0 @@
-package cbit.vcell.message.server.dispatcher;
-
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.Date;
-
-import org.vcell.util.DataAccessException;
-import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
-import org.vcell.util.PropertyLoader;
-import org.vcell.util.SessionLog;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-import org.vcell.util.document.VCellServerID;
-
-import cbit.htc.PbsJobID;
-import cbit.rmi.event.WorkerEvent;
-import cbit.vcell.field.FieldDataIdentifierSpec;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.SimulationTaskMessage;
-import cbit.vcell.message.messages.StatusMessage;
-import cbit.vcell.messaging.WorkerEventMessage;
-import cbit.vcell.messaging.db.SimulationExecutionStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
-import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
-import cbit.vcell.messaging.server.SimulationTask;
-import cbit.vcell.mongodb.VCMongoMessage;
-import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationJob;
-import cbit.vcell.solver.SimulationMessage;
-import cbit.vcell.solver.VCSimulationDataIdentifier;
-import cbit.vcell.solver.VCSimulationIdentifier;
-
-public class SimulationStateMachine {
-	private KeyValue simKey;
-	private int jobIndex;
-	private ArrayList<SimulationTaskProcessState> simTaskProcessStates = new ArrayList<SimulationTaskProcessState>();
-	private ArrayList<AbstractStateMachineEvent> stateMachineEvents = new ArrayList<AbstractStateMachineEvent>();
-	
-	//==============================================================
-	//
-	// input events (archived for debugging purposes)
-	//
-	//==============================================================
-	public abstract class AbstractStateMachineEvent {
-		final long timestampMS = System.currentTimeMillis();		
-	}
-	public class WorkerStateMachineEvent extends AbstractStateMachineEvent {
-		final WorkerEvent workerEvent;
-		public WorkerStateMachineEvent(WorkerEvent workerEvent){
-			this.workerEvent = workerEvent;
-		}
-	}
-	public class StartStateMachineEvent extends AbstractStateMachineEvent {
-		final User user;
-		public StartStateMachineEvent(User user){
-			this.user = user;
-		}
-	}
-	public class StopStateMachineEvent extends AbstractStateMachineEvent {
-		final User user;
-		public StopStateMachineEvent(User user){
-			this.user = user;
-		}
-	}
-	public class PreloadStateMachineEvent extends AbstractStateMachineEvent {
-		final SimulationJobStatus simJobStatus;
-		public PreloadStateMachineEvent(SimulationJobStatus simJobStatus){
-			this.simJobStatus = simJobStatus;
-		}
-	}
-	public class DispatchStateMachineEvent extends AbstractStateMachineEvent {
-		public DispatchStateMachineEvent(){
-		}
-	}
-
-	
-	public SimulationStateMachine(KeyValue simKey, int jobIndex){
-		this.simKey = simKey;
-		this.jobIndex = jobIndex;
-	}
-
-	public SimulationStateMachine(SimulationJobStatus[] simJobStatus) {
-		this.simKey = simJobStatus[0].getVCSimulationIdentifier().getSimulationKey();
-		this.jobIndex = simJobStatus[0].getJobIndex();
-		for (SimulationJobStatus simulationJobStatus : simJobStatus){
-			SimulationExecutionStatus simulationExecutionStatus = simulationJobStatus.getSimulationExecutionStatus();
-			if (simulationExecutionStatus!=null){
-				SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(simKey,jobIndex,simulationJobStatus.getTaskID());
-				simTaskProcessState.computeHost = simulationExecutionStatus.getComputeHost();
-				simTaskProcessState.endDate = simulationExecutionStatus.getEndDate();
-				simTaskProcessState.latestUpdateDate = simulationExecutionStatus.getLatestUpdateDate();
-				simTaskProcessState.pbsJobID = simulationExecutionStatus.getPbsJobID();
-				simTaskProcessState.startDate = simulationExecutionStatus.getStartDate();
-				simTaskProcessStates.add(simTaskProcessState);
-			}
-			addStateMachineEvent(new PreloadStateMachineEvent(simulationJobStatus));
-		}
-	}
-	
-	public KeyValue getSimKey() {
-		return simKey;
-	}
-
-	public int getJobIndex() {
-		return jobIndex;
-	}
-
-	public ArrayList<SimulationTaskProcessState> getSimTaskProcessStates() {
-		return simTaskProcessStates;
-	}
-
-	public SimulationTaskProcessState getLatestSimTaskProcessState() {
-		int taskID = -1;
-		SimulationTaskProcessState simTaskProcessState = null;
-		for (SimulationTaskProcessState taskState : simTaskProcessStates){
-			if (taskState.taskID > taskID){
-				taskID = taskState.taskID;
-				simTaskProcessState = taskState;
-			}
-		}
-		return simTaskProcessState;
-	}
-
-	private void addStateMachineEvent(AbstractStateMachineEvent stateMachineEvent){
-		stateMachineEvents.add(stateMachineEvent);
-	}
-	
-	public SimulationTaskProcessState getSimTaskProcessState(int taskID){
-		for (SimulationTaskProcessState taskState : simTaskProcessStates){
-			if (taskState.taskID == taskID){
-				return taskState;
-			}
-		}
-		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(simKey,  jobIndex, taskID);
-		simTaskProcessStates.add(simTaskProcessState);
-		return simTaskProcessState;
-	}
-	
-	private void addOrReplaceSimTaskProcessState(SimulationTaskProcessState newSimTaskProcessState){
-		SimulationTaskProcessState foundSimTaskProcState = null;
-		for (SimulationTaskProcessState taskState : simTaskProcessStates){
-			if (taskState.taskID == newSimTaskProcessState.taskID){
-				foundSimTaskProcState = taskState;
-			}
-		}
-		if (foundSimTaskProcState!=null){
-			simTaskProcessStates.remove(foundSimTaskProcState);
-		}
-		simTaskProcessStates.add(newSimTaskProcessState);
-	}
-
-	private SimulationTaskProcessState getNewTaskState_StopSimulation(int taskID){
-		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
-		simTaskProcessState.endDate = null;
-		simTaskProcessState.hasData = false;
-		simTaskProcessState.latestUpdateDate = new Date();
-		simTaskProcessState.progress = null;
-		simTaskProcessState.startDate = null;
-		return simTaskProcessState;
-	}
-	
-	private SimulationTaskProcessState getNewTaskState_StartSimulation(int taskID){
-		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
-		simTaskProcessState.endDate = null;
-		simTaskProcessState.hasData = false;
-		simTaskProcessState.latestUpdateDate = new Date();
-		simTaskProcessState.progress = null;
-		simTaskProcessState.startDate = null;
-		return simTaskProcessState;
-	}
-	
-	private SimulationTaskProcessState getNewTaskState_WorkerEvent(int taskID, WorkerEvent workerEvent){
-		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
-		if (workerEvent.getHostName()!=null){
-			simTaskProcessState.computeHost = workerEvent.getHostName();
-		}
-		if (workerEvent.getProgress()!=null){
-			simTaskProcessState.progress = workerEvent.getProgress();
-		}
-		if (workerEvent.getTimePoint()!=null){
-			simTaskProcessState.timePoint = workerEvent.getTimePoint();
-		}		
-		return simTaskProcessState;
-	}
-
-	private SimulationTaskProcessState getNewTaskState_Dispatch(int taskID){
-		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
-		simTaskProcessState.endDate = null;
-		simTaskProcessState.hasData = false;
-		simTaskProcessState.latestUpdateDate = new Date();
-		simTaskProcessState.progress = null;
-		simTaskProcessState.startDate = null;
-		return simTaskProcessState;
-	}
-	
-	public synchronized void onWorkerEvent(WorkerEvent workerEvent, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws DataAccessException, VCMessagingException, SQLException {
-		WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-		VCMongoMessage.sendWorkerEvent(workerEventMessage);
-		addStateMachineEvent(new WorkerStateMachineEvent(workerEvent));
-		
-		String userName = workerEvent.getUserName(); // as the filter of the client
-		int taskID = workerEvent.getTaskID();
-		int jobIndex = workerEvent.getJobIndex();
-
-		log.print("onWorkerEventMessage[" + workerEvent.getEventTypeID() + "," + workerEvent.getSimulationMessage() + "][simid=" + workerEvent.getVCSimulationDataIdentifier() + ",job=" + jobIndex + ",task=" + taskID + "]");
-
-		VCSimulationDataIdentifier vcSimDataID = workerEvent.getVCSimulationDataIdentifier();
-		if (vcSimDataID == null) {
-			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent - no SimID in message): "+workerEvent.show());
-			return;
-		}
-		KeyValue simKey = vcSimDataID.getSimulationKey();
-		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
-
-		if (oldSimulationJobStatus == null){
-			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent, no current SimulationJobStatus: "+workerEvent.show());
-			return;
-		}	
-		if (oldSimulationJobStatus == null || oldSimulationJobStatus.getSchedulerStatus().isDone()){
-			VCMongoMessage.sendInfo("onWorkerEvent() ignoring outdated WorkerEvent, (currState="+oldSimulationJobStatus.getSchedulerStatus().getDescription()+"): "+workerEvent.show());
-			return;
-		}	
-		SchedulerStatus oldSchedulerStatus = oldSimulationJobStatus.getSchedulerStatus();
-		
-		//
-		// status information (initialized as if new record)
-		//
-		Date startDate = null;
-		Date lastUpdateDate = null;
-		Date endDate = null;
-		boolean hasData = false;
-		PbsJobID pbsJobID = null;
-		String computeHost = null;
-		VCellServerID vcServerID = VCellServerID.getSystemServerID();
-		Date submitDate = null;
-		Date queueDate = null;
-		int queuePriority = MessageConstants.PRIORITY_DEFAULT;
-		SimulationQueueID simQueueID = SimulationQueueID.QUEUE_ID_WAITING;
-		
-
-		//
-		// update using previously stored status (if available).
-		//
-		SimulationExecutionStatus oldSimExeStatus = oldSimulationJobStatus.getSimulationExecutionStatus();
-		if (oldSimExeStatus!=null && oldSimExeStatus.getStartDate()!=null){
-			startDate = oldSimExeStatus.getStartDate();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getLatestUpdateDate()!=null){
-			startDate = oldSimExeStatus.getLatestUpdateDate();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getEndDate()!=null){
-			endDate = oldSimExeStatus.getEndDate();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.hasData()){
-			hasData = true;
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getComputeHost()!=null){
-			computeHost = oldSimExeStatus.getComputeHost();
-		}
-		if (oldSimExeStatus!=null && oldSimExeStatus.getPbsJobID()!=null){
-			pbsJobID = oldSimExeStatus.getPbsJobID();
-		}
-		vcServerID = oldSimulationJobStatus.getServerID();
-		submitDate = oldSimulationJobStatus.getSubmitDate();
-		SimulationQueueEntryStatus oldQueueStatus = oldSimulationJobStatus.getSimulationQueueEntryStatus();
-		if (oldQueueStatus!=null && oldQueueStatus.getQueueDate()!=null){
-			queueDate = oldQueueStatus.getQueueDate();
-		}
-		if (oldQueueStatus!=null){
-			queuePriority = oldQueueStatus.getQueuePriority();
-		}
-		if (oldQueueStatus!=null && oldQueueStatus.getQueueID()!=null){
-			simQueueID = oldQueueStatus.getQueueID();
-		}
-		
-		//
-		// update using new information from event
-		//
-		if (workerEvent.getPbsJobID()!=null){
-			pbsJobID = workerEvent.getPbsJobID();
-		}
-		if (workerEvent.getHostName()!=null){
-			computeHost = workerEvent.getHostName();
-		}
-		SimulationMessage workerEventSimulationMessage = workerEvent.getSimulationMessage();
-		if (workerEventSimulationMessage.getPbsJobId()!=null){
-			pbsJobID = workerEventSimulationMessage.getPbsJobId();
-		}
-		
-		
-		SimulationJobStatus newJobStatus = null;
-		final SimulationTaskProcessState newTaskState = getNewTaskState_WorkerEvent(taskID, workerEvent);
-
-		if (workerEvent.isAcceptedEvent()) {
-			//
-			// job message accepted by PbsSimulationWorker and sent to PBS (with a pbsJobID) ... previous state should be "WAITING"
-			//
-			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued()) {
-				// new queue status
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-				
-				// new exe status
-				lastUpdateDate = new Date();
-				startDate = lastUpdateDate;
-				endDate = null;
-				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-				
-				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.DISPATCHED,
-						taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-			}
-			
-		} else if (workerEvent.isStartingEvent()) {
-			// only update database when the job event changes from started to running. The later progress event will not be recorded.
-			if ( oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()) {
-				// new queue status
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-				
-				// new exe status
-				lastUpdateDate = new Date();
-				if (startDate == null){
-					startDate = lastUpdateDate;
-				}
-				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-				
-				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
-						taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-			}
-
-		} else if (workerEvent.isNewDataEvent()) {
-			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
-				
-				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
-				
-				
-				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationQueueID.QUEUE_ID_NULL || hasData==false){
-					
-					// new queue status		
-					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-					
-					// new exe status
-					if (startDate == null){
-						startDate = lastUpdateDate;
-					}
-					hasData = true;
-					SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-
-					newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
-							taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-				}
-			}
-
-		} else if (workerEvent.isProgressEvent() || workerEvent.isWorkerAliveEvent()) {
-			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
-				
-				
-				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationQueueID.QUEUE_ID_NULL){
-					// new queue status		
-					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-					
-					// new exe status
-					if (startDate == null){
-						startDate = lastUpdateDate;
-					}
-					SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-
-					newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
-							taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-
-				}else if (oldSchedulerStatus.isRunning()){
-					if (oldSimExeStatus != null) {
-						Date latestUpdate = oldSimExeStatus.getLatestUpdateDate();
-						Date sysDate = oldSimulationJobStatus.getTimeDateStamp();
-						if (sysDate.getTime() - latestUpdate.getTime() >= MessageConstants.INTERVAL_PING_SERVER * 3 / 5) {
-							// new queue status		
-							SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-							SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-
-							newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
-									taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-						}
-					}
-				}
-			}
-
-		} else if (workerEvent.isCompletedEvent()) {			
-			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
-				// new queue status		
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-				
-				// new exe status
-				endDate = new Date();
-				hasData = true;
-
-				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
-				
-				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-
-				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.COMPLETED,
-						taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-
-			}
-
-		} else if (workerEvent.isFailedEvent()) {						
-			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
-				// new queue status		
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
-				
-				// new exe status
-				endDate = new Date();
-				hasData = true;
-
-				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
-				
-				SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-
-				newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
-						taskID, workerEventSimulationMessage, newQueueStatus, newExeStatus);
-
-			}
-		}
-
-		if (newTaskState!=null){
-			addOrReplaceSimTaskProcessState(newTaskState);
-		}
-		if (newJobStatus!=null){
-			SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, newJobStatus);
-
-			if (!newJobStatus.compareEqual(oldSimulationJobStatus) || workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()) {		
-				Double progress = workerEvent.getProgress();
-				Double timepoint = workerEvent.getTimePoint();
-				StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, progress, timepoint);
-				msgForClient.sendToClient(session);
-				log.print("Send status to client: " + msgForClient);
-			} else {
-				StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, null, null);
-				msgForClient.sendToClient(session);
-				log.print("Send status to client: " + msgForClient);
-			}
-		}else if (workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()){
-			Double progress = workerEvent.getProgress();
-			Double timepoint = workerEvent.getTimePoint();
-			StatusMessage msgForClient = new StatusMessage(oldSimulationJobStatus, userName, progress, timepoint);
-			msgForClient.sendToClient(session);
-			log.print("Send status to client: " + msgForClient);
-		}else{
-			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent (currState="+oldSchedulerStatus.getDescription()+"): "+workerEvent.show());
-		}
-	}
-
-	public synchronized void onStartRequest(User user, Simulation simulation, FieldDataIdentifierSpec[] fieldDataIdentifierSpecs, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
-
-		addStateMachineEvent(new StartStateMachineEvent(user));
-
-		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, simulation.getVersion().getOwner());
-		if (!user.equals(vcSimID.getOwner())) {
-			log.alert(user + " is not authorized to start simulation (key=" + simKey + ")");
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("You are not authorized to start this simulation!"), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			VCMongoMessage.sendInfo("onStartRequest("+vcSimID.getID()+") ignoring start simulation request - wrong user): simID="+vcSimID);
-			return;
-		}
-
-		//
-		// get latest simulation job task (if any).
-		//
-		SimulationJobStatus[] oldSimulationJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey, jobIndex);
-		SimulationJobStatus oldSimulationJobStatus = null;
-		int oldTaskID = -1;
-		for (SimulationJobStatus simJobStatus : oldSimulationJobStatusArray){
-			if (simJobStatus.getTaskID() > oldTaskID){
-				oldTaskID = simJobStatus.getTaskID();
-				oldSimulationJobStatus = simJobStatus;
-			}
-		}
-		// if already started by another thread
-		if (oldSimulationJobStatus != null && !oldSimulationJobStatus.getSchedulerStatus().isDone()) {
-			VCMongoMessage.sendInfo("onStartRequest("+vcSimID.getID()+") ignoring start simulation request - (currentSimJobStatus:"+oldSimulationJobStatus.getSchedulerStatus().getDescription()+"): simID="+vcSimID);
-			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + oldTaskID + "] is running already ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
-		}
-		
-		int newTaskID;
-		
-		if (oldTaskID > -1){
-			// calculate new task
-			newTaskID = (oldTaskID & MessageConstants.TASKID_USERCOUNTER_MASK) + MessageConstants.TASKID_USERINCREMENT;
-		}else{
-			// first task, start with 0
-			newTaskID = 0;
-		}
-		
-		addOrReplaceSimTaskProcessState(getNewTaskState_StartSimulation(newTaskID));
-		
-		Date currentDate = new Date();
-		// new queue status
-		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_WAITING);
-		
-		// new exe status
-		Date lastUpdateDate = null;
-		String computeHost = null;
-		Date startDate = null;
-		Date endDate = null;
-		PbsJobID pbsJobID = null;
-		boolean hasData = false;
-		
-		SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, pbsJobID);
-		
-		VCellServerID vcServerID = VCellServerID.getSystemServerID();
-		Date submitDate = currentDate;
-		
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(vcServerID, vcSimID, jobIndex, submitDate, SchedulerStatus.WAITING,
-				newTaskID, SimulationMessage.MESSAGE_JOB_WAITING, newQueueStatus, newExeStatus);
-		
-		SimulationJobStatus updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newJobStatus);
-			
-		StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
-		message.sendToClient(session);
-	}
-	
-
-	public synchronized void onDispatch(VCSimulationIdentifier vcSimID, int taskID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
-
-		addStateMachineEvent(new DispatchStateMachineEvent());
-		
-		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
-		if (oldSimulationJobStatus == null) {
-			VCMongoMessage.sendInfo("onDispatch("+vcSimID.getID()+") Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "], status not found)");
-			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "], status not found)");
-		}
-		if (!oldSimulationJobStatus.getSchedulerStatus().isWaiting()) {
-			VCMongoMessage.sendInfo("onDispatch("+vcSimID.getID()+") Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "] is already dispatched ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
-			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "] is already dispatched ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
-		}
-
-		Simulation simulation = simulationDatabase.getSimulation(vcSimID.getOwner(), vcSimID.getSimulationKey());
-		FieldDataIdentifierSpec[] fieldDataIdentifierSpecs = simulationDatabase.getFieldDataIdentifierSpecs(simulation);
-		SimulationTask simulationTask = new SimulationTask(new SimulationJob(simulation, jobIndex, fieldDataIdentifierSpecs), taskID);
-
-		double requiredMemMB = simulationTask.getEstimatedMemorySizeMB();
-		double allowableMemMB = Double.parseDouble(PropertyLoader.getRequiredProperty(PropertyLoader.limitJobMemoryMB));
-		
-		if (requiredMemMB > allowableMemMB) {						
-			//
-			// fail the simulation
-			//
-			Date currentDate = new Date();
-			// new queue status
-			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_NULL);
-			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
-			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
-					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.FAILED,taskID,
-					SimulationMessage.jobFailed("simulation required "+requiredMemMB+"MB of memory, only "+allowableMemMB+"MB allowed"),
-					newQueueStatus,newSimExeStatus);
-			
-			SimulationJobStatus updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newSimJobStatus);
-			
-			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
-			message.sendToClient(session);
-			
-		}else{
-			//
-			// dispatch the simulation, new queue status
-			//
-			Date currentDate = new Date();
-			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_SIMULATIONJOB);
-			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
-			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
-					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.QUEUED,taskID,
-					SimulationMessage.MESSAGE_JOB_DISPATCHED,
-					newQueueStatus,newSimExeStatus);
-			
-			SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(simulationTask);
-			simTaskMessage.sendSimulationTask(session);
-			
-			SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus,newSimJobStatus);
-			
-			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
-			message.sendToClient(session);
-		
-			addOrReplaceSimTaskProcessState(getNewTaskState_Dispatch(taskID));
-		}
-	}
-
-	public synchronized void onStopRequest(User user, VCSimulationIdentifier vcSimID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
-		
-		addStateMachineEvent(new StopStateMachineEvent(user));
-		
-		if (!user.equals(vcSimID.getOwner())) {
-			log.alert(user + " is not authorized to stop simulation (key=" + simKey + ")");
-			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.workerFailure("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
-			message.sendToClient(session);
-			VCMongoMessage.sendInfo("onStopRequest("+vcSimID.getID()+") ignoring stop simulation request - wrong user)");
-			return;
-		} 
-		// if the job is in simJob queue, get it out
-		KeyValue simKey = vcSimID.getSimulationKey();
-		SimulationJobStatus[] oldJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey, jobIndex);
-		
-		// stop each active task.
-		for (SimulationJobStatus oldJobStatus : oldJobStatusArray){
-			SchedulerStatus schedulerStatus = oldJobStatus.getSchedulerStatus();
-			int taskID = oldJobStatus.getTaskID();
-			addOrReplaceSimTaskProcessState(getNewTaskState_StopSimulation(taskID));
-	
-			if (schedulerStatus.isActive()){
-				SimulationQueueEntryStatus simQueueEntryStatus = oldJobStatus.getSimulationQueueEntryStatus();
-				SimulationExecutionStatus simExeStatus = oldJobStatus.getSimulationExecutionStatus();
-				SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(),vcSimID,jobIndex,oldJobStatus.getSubmitDate(),
-						SchedulerStatus.STOPPED,taskID,SimulationMessage.solverStopped("simulation stopped by user"),simQueueEntryStatus,simExeStatus);
-				
-				if (schedulerStatus.isDispatched() || schedulerStatus.isRunning()){
-					// send stopSimulation to serviceControl topic
-					log.print("send " + MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE + " to " + VCellTopic.ServiceControlTopic.getName() + " topic");
-					VCMessage msg = session.createMessage();
-					msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE);
-					msg.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simKey + ""));
-					msg.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, jobIndex);
-					msg.setIntProperty(MessageConstants.TASKID_PROPERTY, taskID);
-					msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, user.getName());
-					session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
-				}
-				
-				SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
-				
-				// update client
-				StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
-				message.sendToClient(session);
-			}
-		}
-	}
-
-
-
-}
Index: src/cbit/vcell/message/messages/WorkerEventMessage.java
===================================================================
--- src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 11981)
+++ src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 11980)
@@ -1,315 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.messages;
-import java.sql.SQLException;
-
-import org.vcell.util.DataAccessException;
-import org.vcell.util.MessageConstants;
-import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.User;
-
-import cbit.htc.PbsJobID;
-import cbit.rmi.event.WorkerEvent;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.messaging.server.SimulationTask;
-import cbit.vcell.mongodb.VCMongoMessage;
-import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
-import cbit.vcell.solver.SimulationInfo;
-import cbit.vcell.solver.SimulationMessage;
-
-/**
- * Insert the type's description here.
- * Creation date: (2/5/2004 12:35:20 PM)
- * @author: Fei Gao
- */
-public class WorkerEventMessage {
-	private WorkerEvent workerEvent = null;	
-	private static final String MESSAGE_TYPE_WORKEREVENT_VALUE	= "WorkerEvent";
-
-	public static final String WORKEREVENT_STATUS = "WorkerEvent_Status";
-	public static final String WORKEREVENT_PROGRESS = "WorkerEvent_Progress";
-	public static final String WORKEREVENT_TIMEPOINT = "WorkerEvent_TimePoint";
-	public static final String WORKEREVENT_STATUSMSG = "WorkerEvent_StatusMsg";
-	
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public WorkerEventMessage(WorkerEvent event) {
-	workerEvent = event;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- * @throws SQLException 
- * @throws DataAccessException 
- */
-public WorkerEventMessage(SimulationDatabase simulationDatabase, VCMessage message0) throws DataAccessException, SQLException {
-	parseMessage(simulationDatabase, message0);
-}
-
-public static String getWorkerEventSelector_ProgressAndData(){
-	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
-			"("+WORKEREVENT_STATUS+" IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
-}
-
-public static String getWorkerEventSelector_NotProgressAndData(){
-	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
-			"("+WORKEREVENT_STATUS+" NOT IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (3/11/2004 11:32:33 AM)
- * @return cbit.rmi.event.WorkerEvent
- */
-public cbit.rmi.event.WorkerEvent getWorkerEvent() {
-	return workerEvent;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 2:19:48 PM)
- * @param message javax.jms.Message
- * @throws DataAccessException 
- * @throws SQLException 
- */
-private void parseMessage(SimulationDatabase simDatabase, VCMessage message) throws DataAccessException, SQLException {
-	if (message == null) {
-		throw new RuntimeException("Null message");
-	}	
-
-	if (!message.propertyExists(MessageConstants.MESSAGE_TYPE_PROPERTY)){
-		throw new RuntimeException("Wrong message: expecting property "+MessageConstants.MESSAGE_TYPE_PROPERTY);
-	}
-	String msgType = message.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
-	if (!msgType.equals(MESSAGE_TYPE_WORKEREVENT_VALUE)) {
-		throw new RuntimeException("Wrong message type: "+msgType+", expecting: "+MESSAGE_TYPE_WORKEREVENT_VALUE);
-	}
-			
-	Object obj = message.getObjectContent();
-	if (obj!=null){
-		// from Java executable or pbsWorker
-		if (!(obj instanceof WorkerEvent)) {
-			throw new IllegalArgumentException("Expecting object message with object " + WorkerEvent.class.getName() + ", found object :"+obj.getClass().getName());
-		}
-		workerEvent = (WorkerEvent)obj;
-
-	} else {
-		// from c++ executable
-		int status = message.getIntProperty(WORKEREVENT_STATUS);
-		String hostname = message.getStringProperty(MessageConstants.HOSTNAME_PROPERTY);
-		String username = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-		int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
-		int jobIndex = message.getIntProperty(MessageConstants.JOBINDEX_PROPERTY);
-		Long longkey = message.getLongProperty(MessageConstants.SIMKEY_PROPERTY);
-
-		KeyValue simKey = new KeyValue(longkey + "");
-//		Simulation sim = null;
-
-		User user = simDatabase.getUser(simKey, username);
-		SimulationInfo simInfo = simDatabase.getSimulationInfo(user, simKey);			
-		if (simInfo == null) {
-			throw new RuntimeException("Null Simulation"); //wrong message	
-		}
-		
-		String statusMessage = null;
-		Double progress = null;
-		Double timepoint = null;
-		
-		if (message.propertyExists(WORKEREVENT_STATUSMSG)){
-			statusMessage = message.getStringProperty(WORKEREVENT_STATUSMSG);
-		}
-
-		if (message.propertyExists(WORKEREVENT_PROGRESS)){
-			progress = message.getDoubleProperty(WORKEREVENT_PROGRESS);
-		}
-		if (message.propertyExists(WORKEREVENT_TIMEPOINT)){
-			timepoint = message.getDoubleProperty(WORKEREVENT_TIMEPOINT);
-		}
-		
-		SimulationMessage simulationMessage = SimulationMessage.fromSerializedMessage(statusMessage);
-		if (simulationMessage == null) {			
-			switch (status) {
-			case WorkerEvent.JOB_ACCEPTED:
-				throw new RuntimeException("unexpected job_accepted status");
-			case WorkerEvent.JOB_STARTING:
-				if (statusMessage == null) {
-					simulationMessage = SimulationMessage.MESSAGE_WORKEREVENT_STARTING;
-				} else {
-					simulationMessage = SimulationMessage.workerStarting(statusMessage);
-				}
-				break;
-			case WorkerEvent.JOB_DATA:
-				simulationMessage = SimulationMessage.workerData(timepoint);
-				break;
-			case WorkerEvent.JOB_PROGRESS:
-				simulationMessage = SimulationMessage.workerProgress(progress);
-				break;
-			case WorkerEvent.JOB_FAILURE:
-				if (statusMessage == null) {
-					simulationMessage = SimulationMessage.MESSAGE_WORKEREVENT_FAILURE;
-				} else {
-					simulationMessage = SimulationMessage.workerFailure(statusMessage);
-				}
-				break;
-			case WorkerEvent.JOB_COMPLETED:
-				if (statusMessage == null) {
-					simulationMessage = SimulationMessage.MESSAGE_WORKEREVENT_COMPLETED;
-				} else {
-					simulationMessage = SimulationMessage.workerCompleted(statusMessage);
-				}
-				break;
-			case WorkerEvent.JOB_WORKER_ALIVE:
-				simulationMessage = SimulationMessage.MESSAGE_WORKEREVENT_WORKERALIVE;
-				break;
-			default:
-				throw new RuntimeException("unexpected worker event status : " + status);
-			}
-		}
-
-		ServiceName serviceName = VCMongoMessage.getServiceName();
-		workerEvent = new WorkerEvent(status, serviceName, simInfo.getAuthoritativeVCSimulationIdentifier(), jobIndex, hostname, taskID, progress, timepoint, simulationMessage);		
-	}
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- * @throws VCMessagingException 
- */
-public static WorkerEventMessage sendAccepted(VCMessageSession session, Object source, SimulationTask simTask, String hostName, PbsJobID pbsJobID) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_ACCEPTED, source, simTask, hostName, SimulationMessage.MESSAGE_JOB_ACCEPTED);
-	workerEvent.setPbsJobID(pbsJobID);
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendCompleted(VCMessageSession session, Object source, SimulationTask simTask, String hostName, double progress, double timePoint, SimulationMessage simulationMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_COMPLETED, source, simTask, hostName, new Double(progress), new Double(timePoint), simulationMessage);		
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendFailed(VCMessageSession session, Object source, SimulationTask simTask, String hostName, SimulationMessage failMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_FAILURE, source, simTask,	hostName, failMessage);
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendNewData(VCMessageSession session, Object source, SimulationTask simTask, String hostName, double progress, double timePoint, SimulationMessage simulationMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_DATA, source, simTask, hostName, new Double(progress), new Double(timePoint), simulationMessage);		
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendProgress(VCMessageSession session, Object source, SimulationTask simTask, String hostName, double progress, double timePoint, SimulationMessage simulationMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_PROGRESS, source, simTask, hostName, new Double(progress), new Double(timePoint), simulationMessage);		
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendStarting(VCMessageSession session, Object source, SimulationTask simTask, String hostName, SimulationMessage startMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_STARTING, source, simTask, hostName, startMessage);
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public static WorkerEventMessage sendWorkerAlive(VCMessageSession session, Object source, SimulationTask simTask, String hostName, SimulationMessage simulationMessage) throws VCMessagingException {
-	WorkerEvent workerEvent = new WorkerEvent(WorkerEvent.JOB_WORKER_ALIVE, source, simTask, hostName, simulationMessage);
-	WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
-	workerEventMessage.sendWorkerEvent(session);
-
-	return workerEventMessage;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (10/22/2001 11:20:37 PM)
- * @throws VCMessagingException 
- */
-private void sendWorkerEvent(VCMessageSession session) throws VCMessagingException {
-	session.sendQueueMessage(VCellQueue.WorkerEventQueue, toMessage(session));
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (5/20/2003 1:36:36 PM)
- * @return javax.jms.Message
- */
-private VCMessage toMessage(VCMessageSession session) {		
-	VCMessage message = session.createObjectMessage(workerEvent);
-	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_WORKEREVENT_VALUE);
-	return message;
-}
-}
Index: src/cbit/vcell/message/messages/StatusMessage.java
===================================================================
--- src/cbit/vcell/message/messages/StatusMessage.java	(revision 11981)
+++ src/cbit/vcell/message/messages/StatusMessage.java	(revision 11980)
@@ -1,193 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.messages;
-
-import org.vcell.util.MessageConstants;
-
-import cbit.vcell.message.MessagePropertyNotFoundException;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellTopic;
-import cbit.vcell.messaging.db.SimulationJobStatus;
-
-/**
- * Insert the type's description here.
- * Creation date: (2/5/2004 12:35:20 PM)
- * @author: Fei Gao
- */
-public class StatusMessage {
-	private SimulationJobStatus jobStatus = null;
-	private Double timePoint = null;
-	private Double progress = null;
-
-	public static final String SIMULATION_STATUS_PROGRESS_PROPERTY	= "SimulationStatusProgress";
-	public static final String SIMULATION_STATUS_TIMEPOINT_PROPERTY = "SimulationStatusTimePoint";
-	
-	private java.lang.String userName = null;
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public StatusMessage(SimulationJobStatus jobStatus0, String userName0, Double progress0, Double timepoint0) {
-	jobStatus = jobStatus0;
-	userName = userName0;
-	progress = progress0;
-	timePoint = timepoint0;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:53:34 PM)
- * @param param javax.jms.Message
- */
-public StatusMessage(VCMessage message) {
-	parseMessage(message);
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 2:17:03 PM)
- * @return cbit.vcell.messaging.db.SimulationJobStatus
- */
-public SimulationJobStatus getJobStatus() {
-	return jobStatus;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 2:17:03 PM)
- * @return java.lang.Double
- */
-public java.lang.Double getProgress() {
-	return progress;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 12:56:45 PM)
- * @return cbit.vcell.solver.SimulationInfo
- */
-public SimulationJobStatus getSimulationJobStatus() {
-	return jobStatus;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 2:17:03 PM)
- * @return java.lang.Double
- */
-public java.lang.Double getTimePoint() {
-	return timePoint;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/9/2004 10:24:41 AM)
- * @return java.lang.String
- */
-public java.lang.String getUserName() {
-	return userName;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 2:19:48 PM)
- * @param message javax.jms.Message
- */
-private void parseMessage(VCMessage message) {
-	if (message == null) {
-		throw new RuntimeException("Null message");
-	}
-
-	try {
-		String msgType = message.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
-		if (msgType != null && !msgType.equals(MessageConstants.MESSAGE_TYPE_SIMSTATUS_VALUE)) {
-			throw new RuntimeException("Wrong message");
-		}
-	} catch (MessagePropertyNotFoundException ex) {
-		ex.printStackTrace(System.out);
-		throw new RuntimeException("Wrong message");
-	}
-			
-	if (message.getObjectContent()==null){
-		throw new IllegalArgumentException("Expecting object message.");
-	}
-
-	Object obj = message.getObjectContent();
-	if (!(obj instanceof SimulationJobStatus)) {
-		throw new IllegalArgumentException("Expecting " + SimulationJobStatus.class.getName() + " in message.");
-	}
-
-	jobStatus = (SimulationJobStatus)obj;
-	if (message.propertyExists(SIMULATION_STATUS_PROGRESS_PROPERTY)){
-		progress = message.getDoubleProperty(SIMULATION_STATUS_PROGRESS_PROPERTY);
-	}
-	
-	if (message.propertyExists(SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
-		timePoint = message.getDoubleProperty(SIMULATION_STATUS_TIMEPOINT_PROPERTY);
-	}
-	
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 1:59:04 PM)
- * @return javax.jms.Message
- * @param session cbit.vcell.messaging.VCellSession
- * @throws VCMessagingException 
- */
-public void sendToClient(VCMessageSession session) throws VCMessagingException {
-	VCMessage message = toMessage(session);
-	session.sendTopicMessage(VCellTopic.ClientStatusTopic, message);
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/5/2004 1:59:04 PM)
- * @return javax.jms.Message
- * @param session cbit.vcell.messaging.VCellSession
- */
-private VCMessage toMessage(VCMessageSession session) {
-	VCMessage message = session.createObjectMessage(jobStatus);
-	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_SIMSTATUS_VALUE);
-	message.setStringProperty(MessageConstants.USERNAME_PROPERTY, userName);
-	if (progress != null) {
-		message.setDoubleProperty(SIMULATION_STATUS_PROGRESS_PROPERTY, progress.doubleValue());
-	}
-	if (timePoint != null) {
-		message.setDoubleProperty(SIMULATION_STATUS_TIMEPOINT_PROPERTY, timePoint.doubleValue());
-	}
-
-	return message;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/13/2004 9:55:17 AM)
- * @return java.lang.String
- */
-public String toString() {
-	return "StatusMessage [" + jobStatus.getSimulationMessage().getDisplayMessage() + "," + progress + "," + timePoint + "]";
-}
-}
Index: src/cbit/vcell/message/messages/SimulationTaskMessage.java
===================================================================
--- src/cbit/vcell/message/messages/SimulationTaskMessage.java	(revision 11981)
+++ src/cbit/vcell/message/messages/SimulationTaskMessage.java	(revision 11980)
@@ -1,136 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.messages;
-
-import org.vcell.util.MessageConstants;
-
-import cbit.vcell.field.FieldDataIdentifierSpec;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.messaging.server.SimulationTask;
-import cbit.vcell.parser.ExpressionException;
-import cbit.vcell.xml.XmlHelper;
-import cbit.vcell.xml.XmlParseException;
-
-/**
- * Insert the type's description here.
- * Creation date: (12/31/2003 11:39:39 AM)
- * @author: Fei Gao
- */
-public class SimulationTaskMessage {
-	private SimulationTask simTask = null;
-
-/**
- * SimulationMessageHelper constructor comment.
- */
-public SimulationTaskMessage(SimulationTask simTask0) {
-	super();
-	simTask = simTask0;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/20/2004 11:02:09 AM)
- * @param message javax.jms.Message
- */
-public SimulationTaskMessage(VCMessage message) throws XmlParseException {
-	parse(message);
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (2/20/2004 11:01:40 AM)
- * @return cbit.vcell.solver.Simulation
- */
-public SimulationTask getSimulationTask() {
-	return simTask;
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/29/2003 2:51:01 PM)
- * @return cbit.vcell.solver.Simulation
- * @param xml java.lang.String
- * @throws  
- * @throws XmlParseException 
- */
-private void parse(VCMessage message) throws XmlParseException {
-	if (message == null || message.getTextContent()==null){
-		return;
-	}		
-		
-	String xmlString = message.getTextContent();
-	try {
-		simTask = XmlHelper.XMLToSimTask(xmlString);
-	} catch (ExpressionException e) {
-		e.printStackTrace();
-		throw new RuntimeException(e.getMessage(),e);
-	}
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 11:08:17 AM)
- * @return javax.jms.Message
- * @param session cbit.vcell.messaging.VCellSession
- * @throws VCMessagingException 
- */
-public void sendSimulationTask(VCMessageSession session) throws VCMessagingException {
-	session.sendQueueMessage(VCellQueue.SimJobQueue, toMessage(session));
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (12/31/2003 11:08:17 AM)
- * @return javax.jms.Message
- * @param session cbit.vcell.messaging.VCellSession
- * @throws VCMessagingException 
- */
-private VCMessage toMessage(VCMessageSession session) throws VCMessagingException {
-	VCMessage message;
-	try {
-		message = session.createTextMessage(XmlHelper.simTaskToXML(simTask));
-	} catch (XmlParseException e) {
-		e.printStackTrace(System.out);
-		throw new VCMessagingException("failed to restore Simulation Task from XML",e);
-	}		
-
-	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_SIMULATION_JOB_VALUE); // must have
-	message.setIntProperty(MessageConstants.JOBINDEX_PROPERTY, simTask.getSimulationJob().getJobIndex()); // must have
-	message.setIntProperty(MessageConstants.TASKID_PROPERTY, simTask.getTaskID()); // must have
-	
-	message.setStringProperty(MessageConstants.USERNAME_PROPERTY, simTask.getUserName()); // might be used to remove from the job queue when do stopSimulation
-	message.setLongProperty(MessageConstants.SIMKEY_PROPERTY, Long.parseLong(simTask.getSimKey() + "")); // might be used to remove from the job queue when do stopSimulation
-
-	message.setDoubleProperty(MessageConstants.SIZE_MB_PROPERTY, simTask.getEstimatedMemorySizeMB()); // for worker message filter
-	
-	if (simTask.getComputeResource() != null) {
-		message.setStringProperty(MessageConstants.COMPUTE_RESOURCE_PROPERTY, simTask.getComputeResource()); // for worker message filter
-	}
-
-	FieldDataIdentifierSpec[] fieldDataIDs = simTask.getSimulationJob().getFieldDataIdentifierSpecs();
-	if (fieldDataIDs != null && fieldDataIDs.length > 0) {
-		StringBuffer sb = new StringBuffer();
-		for (int i = 0; i < fieldDataIDs.length; i ++) {
-			sb.append(fieldDataIDs[i].toCSVString() + "\n");
-		}
-		message.setStringProperty(MessageConstants.FIELDDATAID_PROPERTY, sb.toString());
-	}
-	return message;
-}
-}
Index: src/cbit/vcell/message/VCDestination.java
===================================================================
--- src/cbit/vcell/message/VCDestination.java	(revision 11981)
+++ src/cbit/vcell/message/VCDestination.java	(revision 11980)
@@ -1,7 +0,0 @@
-package cbit.vcell.message;
-
-public interface VCDestination {
-
-	String getName();
-	
-}
Index: src/cbit/vcell/message/VCellQueue.java
===================================================================
--- src/cbit/vcell/message/VCellQueue.java	(revision 11981)
+++ src/cbit/vcell/message/VCellQueue.java	(revision 11980)
@@ -1,45 +0,0 @@
-package cbit.vcell.message;
-
-import org.vcell.util.PropertyLoader;
-
-public class VCellQueue implements VCDestination {
-	public final static VCellQueue DataRequestQueue = new VCellQueue(PropertyLoader.jmsDataRequestQueue,null);
-	public final static VCellQueue DbRequestQueue = new VCellQueue(PropertyLoader.jmsDbRequestQueue,null);
-	public final static VCellQueue SimJobQueue = new VCellQueue(PropertyLoader.jmsSimJobQueue,null);
-	public final static VCellQueue SimReqQueue = new VCellQueue(PropertyLoader.jmsSimReqQueue,null);
-	public final static VCellQueue WorkerEventQueue = new VCellQueue(PropertyLoader.jmsWorkerEventQueue,null);
-
-	public final static VCellQueue JimQueue = new VCellQueue("JimQueue");
-
-	private String vcellPropertyName;
-	private String queueName;
-	
-	private VCellQueue(String propertyName, String queueName){
-		this.vcellPropertyName = propertyName;
-		this.queueName = queueName;
-	}
-	
-	public VCellQueue(String queueName){
-		this(null,queueName);
-	}
-	
-	public String getName() {
-		if (queueName!=null){
-			return queueName;
-		}
-		return PropertyLoader.getRequiredProperty(vcellPropertyName);
-	}
-	
-	public boolean equals(Object obj){
-		if (obj instanceof VCellQueue){
-			VCellQueue other = (VCellQueue)obj;
-			return other.getName().equals(getName());
-		}
-		return false;
-	}
-	
-	public int hashCode(){
-		return getName().hashCode();
-	}
-
-}
\ No newline at end of file
Index: src/cbit/vcell/message/local/VCMessageBSON.java
===================================================================
--- src/cbit/vcell/message/local/VCMessageBSON.java	(revision 11981)
+++ src/cbit/vcell/message/local/VCMessageBSON.java	(revision 11980)
@@ -1,192 +0,0 @@
-package cbit.vcell.message.local;
-
-import java.util.Enumeration;
-import java.util.Vector;
-
-import org.bson.BasicBSONObject;
-
-import cbit.vcell.message.MessagePropertyNotFoundException;
-import cbit.vcell.message.VCDestination;
-import cbit.vcell.message.VCMessage;
-
-public class VCMessageBSON implements VCMessage {
-	private final String textContent;
-	private final Object objectContent;
-	private BasicBSONObject bsonObject = new BasicBSONObject();
-	private VCDestination replyTo = null;
-	private String correlationID = null;
-	private final String messageID;
-
-	VCMessageBSON(){
-		this.textContent = null;
-		this.objectContent = null;
-		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-	}
-	
-	VCMessageBSON(String textContent){
-		this.textContent = textContent;
-		this.objectContent = null;
-		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-	}
-	
-	VCMessageBSON(Object objectContent){
-		this.textContent = null;
-		this.objectContent = objectContent;
-		this.messageID = "VCMessageBSON("+System.identityHashCode(this)+")";
-	}
-	
-	@Override
-	public Object getObjectContent() {
-		return objectContent;
-	}
-
-	@Override
-	public String getTextContent() {
-		return textContent;
-	}
-
-	@Override
-	public void setBooleanProperty(String propertyName, boolean value) {
-		bsonObject.put(propertyName, new Boolean(value));
-	}
-
-	@Override
-	public void setDoubleProperty(String propertyName, double value) {
-		bsonObject.put(propertyName, new Double(value));
-	}
-
-	@Override
-	public void setIntProperty(String propertyName, int value) {
-		bsonObject.put(propertyName, new Integer(value));
-	}
-
-	@Override
-	public void setLongProperty(String propertyName, long value) {
-		bsonObject.put(propertyName, new Long(value));
-	}
-
-	@Override
-	public void setObjectProperty(String propertyName, Object value) {
-		bsonObject.put(propertyName, value);
-	}
-
-	@Override
-	public void setStringProperty(String propertyName, String value) {
-		bsonObject.put(propertyName, value);
-	}
-
-	@Override
-	public Enumeration<String> getPropertyNames() {
-		Vector<String> propertyNameVector = new Vector<String>(bsonObject.keySet());
-		return propertyNameVector.elements();
-	}
-
-	@Override
-	public boolean getBooleanProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.getBoolean(propertyName);
-	}
-
-	@Override
-	public double getDoubleProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.getDouble(propertyName);
-	}
-
-	@Override
-	public int getIntProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.getInt(propertyName);
-	}
-
-	@Override
-	public long getLongProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.getLong(propertyName);
-	}
-
-	@Override
-	public Object getObjectProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.get(propertyName);
-	}
-
-	@Override
-	public String getStringProperty(String propertyName) throws MessagePropertyNotFoundException {
-		if (!propertyExists(propertyName)){
-			throw new MessagePropertyNotFoundException(propertyName+" not found in message");
-		}
-		return bsonObject.getString(propertyName);
-	}
-
-	@Override
-	public boolean propertyExists(String propertyName) {
-		return bsonObject.containsField(propertyName);
-	}
-
-	@Override
-	public VCDestination getReplyTo() {
-		return replyTo;
-	}
-
-	@Override
-	public String getCorrelationID() {
-		return correlationID;
-	}
-
-	@Override
-	public String getMessageID() {
-		return this.messageID;
-	}
-
-	@Override
-	public void setCorrelationID(String correlationID) {
-		this.correlationID = correlationID;
-	}
-
-	@Override
-	public String show() {
-		StringBuffer buffer = new StringBuffer();
-		java.util.Enumeration enum1 = getPropertyNames();
-		while (enum1.hasMoreElements()){
-			String propName = (String)enum1.nextElement();
-			try {
-				String value = getStringProperty(propName);
-				buffer.append(" " + propName + "='" + value + "'");
-			} catch (MessagePropertyNotFoundException ex) {
-				// definitely should not happen
-			}
-		}
-		int maxContentLength = 120;
-		if (textContent!=null){
-			buffer.append("  textContent='");
-			if (textContent.length()>maxContentLength){
-				buffer.append(textContent.substring(0, maxContentLength-3)+"...");
-			}else{
-				buffer.append(textContent);
-			}
-			buffer.append("'");
-		}else if (objectContent!=null){
-			buffer.append("  objectContent='");
-			String text = objectContent.toString();
-			if (text.length()>maxContentLength){
-				buffer.append(text.substring(0, maxContentLength-3)+"...");
-			}else{
-				buffer.append(text);
-			}
-			buffer.append("'");
-		}
-		return buffer.toString();
-	}
-
-}
Index: src/cbit/vcell/message/local/LocalVCMessageAdapter.java
===================================================================
--- src/cbit/vcell/message/local/LocalVCMessageAdapter.java	(revision 11981)
+++ src/cbit/vcell/message/local/LocalVCMessageAdapter.java	(revision 11980)
@@ -1,51 +0,0 @@
-package cbit.vcell.message.local;
-
-import java.util.ArrayList;
-
-import cbit.vcell.message.VCDestination;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-
-public class LocalVCMessageAdapter extends VCMessageSessionLocal {
-		
-	public interface LocalVCMessageListener {
-		void onLocalVCMessage(VCDestination vcDestination, VCMessage vcMessage);
-	}
-	
-	private ArrayList<MessageRecord> messageRecords = new ArrayList<MessageRecord>();
-	private static class MessageRecord {
-		final VCDestination vcDestination;
-		final VCMessage vcMessage;
-		MessageRecord(VCDestination vcDestination, VCMessage vcMessage){
-			this.vcDestination = vcDestination;
-			this.vcMessage = vcMessage;
-		}
-	}
-	private final LocalVCMessageListener localVCMessageListener;
-	
-	public LocalVCMessageAdapter(LocalVCMessageListener localVCMessageListener){
-		this.localVCMessageListener = localVCMessageListener;
-	}
-	
-	@Override
-	public synchronized void sendQueueMessage(VCellQueue vcQueue, VCMessage vcMessage) throws VCMessagingException {
-		System.out.println("\n ##====>>  ##====>>  ##====>>  ##====>>  ##====>>  ##====>> LocalVCellMessageAdapter queuing message for queue "+vcQueue.getName()+", msg="+vcMessage.show()+"\n");
-		messageRecords.add(new MessageRecord(vcQueue, vcMessage));
-	}
-
-	@Override
-	public synchronized void sendTopicMessage(VCellTopic vcTopic, VCMessage vcMessage) throws VCMessagingException {
-		System.out.println("\n ##====>>  ##====>>  ##====>>  ##====>>  ##====>>  ##====>> LocalVCellMessageAdapter queuing message for topic "+vcTopic.getName()+", msg="+vcMessage.show()+"\n");
-		messageRecords.add(new MessageRecord(vcTopic, vcMessage));
-	}
-
-	public synchronized void deliverAll(){
-		for (MessageRecord messageRecord : messageRecords){
-			System.out.println("\n <<====##  <<====##  <<====##  <<====##  <<====##  <<====## LocalVCellMessageAdapter delivering message for "+messageRecord.vcDestination.getName()+", msg="+messageRecord.vcMessage.show()+"\n");
-			localVCMessageListener.onLocalVCMessage(messageRecord.vcDestination, messageRecord.vcMessage);
-		}
-		messageRecords.clear();
-	}
-}
Index: src/cbit/vcell/message/local/VCMessageSessionLocal.java
===================================================================
--- src/cbit/vcell/message/local/VCMessageSessionLocal.java	(revision 11981)
+++ src/cbit/vcell/message/local/VCMessageSessionLocal.java	(revision 11980)
@@ -1,58 +0,0 @@
-package cbit.vcell.message.local;
-
-import java.io.Serializable;
-
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessageSession;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCMessagingInvocationTargetException;
-import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-
-public abstract class VCMessageSessionLocal implements VCMessageSession {
-
-	@Override
-	public Object sendRpcMessage(VCellQueue queue, VCRpcRequest vcRpcRequest, boolean returnRequired, long timeoutMS, String[] specialProperties, Object[] specialValues) 
-			throws VCMessagingException, VCMessagingInvocationTargetException {
-		throw new RuntimeException("rpc not implemented - must override sendRpcMessage() to implement");
-	}
-
-	@Override
-	public void sendQueueMessage(VCellQueue queue, VCMessage message) throws VCMessagingException {
-		throw new RuntimeException("send Queue Message not implemented - must override sendQueueMessage() to implement");
-	}
-
-	@Override
-	public void sendTopicMessage(VCellTopic topic, VCMessage message) throws VCMessagingException {
-		throw new RuntimeException("send Topic Message not implemented - must override sendTopicMessage() to implement");
-	}
-
-	@Override
-	public void rollback() {
-	}
-
-	@Override
-	public void commit() {
-	}
-
-	@Override
-	public VCMessage createTextMessage(String text) {
-		return new VCMessageBSON(text);
-	}
-
-	@Override
-	public VCMessage createMessage() {
-		return new VCMessageBSON();
-	}
-
-	@Override
-	public VCMessage createObjectMessage(Serializable object) {
-		return new VCMessageBSON(object);
-	}
-
-	@Override
-	public void close() {
-	}
-
-}
Index: src/cbit/vcell/message/VCMessage.java
===================================================================
--- src/cbit/vcell/message/VCMessage.java	(revision 11981)
+++ src/cbit/vcell/message/VCMessage.java	(revision 11980)
@@ -1,52 +0,0 @@
-package cbit.vcell.message;
-
-import java.util.Enumeration;
-
-public abstract interface VCMessage {
-
-	public Object getObjectContent();
-	
-	public String getTextContent();
-	
-	public void setBooleanProperty(String propertyName, boolean value);
-	
-	public void setDoubleProperty(String propertyName, double value);
-	
-	public void setIntProperty(String propertyName, int value);
-	
-	public void setLongProperty(String propertyName, long value);
-	
-	public void setObjectProperty(String propertyName, Object value);
-	
-	public void setStringProperty(String propertyName, String value);
-	
-	public Enumeration<String> getPropertyNames();
-	
-	public boolean getBooleanProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public double getDoubleProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public int getIntProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public long getLongProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public Object getObjectProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public String getStringProperty(String propertyName) throws MessagePropertyNotFoundException;
-
-	public boolean propertyExists(String propertyName);
-
-	public VCDestination getReplyTo();
-	
-	public String getCorrelationID();
-	
-	public String getMessageID();
-	
-//	public void setReplyTo(VCDestination destination);
-	
-	public void setCorrelationID(String correlationID);
-
-	public String show();
-	
-//	public void setMessageID(String messageID);
-}
Index: src/cbit/vcell/modelopt/ParameterEstimationTask.java
===================================================================
--- src/cbit/vcell/modelopt/ParameterEstimationTask.java	(revision 11981)
+++ src/cbit/vcell/modelopt/ParameterEstimationTask.java	(revision 11980)
@@ -26,7 +26,6 @@
 import cbit.vcell.math.MathDescription;
 import cbit.vcell.math.MathException;
 import cbit.vcell.math.Variable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.model.Parameter;
 import cbit.vcell.opt.OdeObjectiveFunction;
 import cbit.vcell.opt.OptimizationResultSet;
@@ -464,7 +463,7 @@
 	}
 	//get input model string
 	StringWriter stringWriter = new StringWriter();
-	IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(stringWriter,true), new SimulationTask(new SimulationJob(simulation, 0, null),0));
+	IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(stringWriter,true), new SimulationJob(simulation, 0, null));
 	idaFileWriter.write();
 	stringWriter.close();
 	StringBuffer buffer = stringWriter.getBuffer();
Index: src/cbit/vcell/opt/solvers/OdeLSFunction.java
===================================================================
--- src/cbit/vcell/opt/solvers/OdeLSFunction.java	(revision 11981)
+++ src/cbit/vcell/opt/solvers/OdeLSFunction.java	(revision 11980)
@@ -22,7 +22,6 @@
 import cbit.vcell.math.Constant;
 import cbit.vcell.math.Function;
 import cbit.vcell.math.MathException;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.opt.OdeObjectiveFunction;
 import cbit.vcell.opt.ReferenceData;
 import cbit.vcell.parser.Expression;
@@ -108,7 +107,7 @@
 		simulation.getSolverTaskDescription().setSolverDescription(SolverDescription.IDA);
 
 		java.io.StringWriter stringWriter = new java.io.StringWriter();
-		IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(stringWriter,true), new SimulationTask(new SimulationJob(simulation, 0, null),0));
+		IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(stringWriter,true), new SimulationJob(simulation, 0, null));
 		idaFileWriter.write(unscaledParameterNames);
 		stringWriter.close();
 		StringBuffer buffer = stringWriter.getBuffer();
Index: src/cbit/vcell/modeldb/LocalAdminDbServer.java
===================================================================
--- src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 11981)
+++ src/cbit/vcell/modeldb/LocalAdminDbServer.java	(revision 11980)
@@ -10,7 +10,6 @@
 
 package cbit.vcell.modeldb;
 import java.rmi.*;
-import java.sql.SQLException;
 import java.util.List;
 
 import org.vcell.util.DataAccessException;
@@ -20,13 +19,10 @@
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 import org.vcell.util.document.UserInfo;
-import org.vcell.util.document.VCellServerID;
 
 import cbit.sql.*;
 import cbit.vcell.messaging.admin.SimpleJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatusInfo;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.server.UserLoginInfo;
 
 /**
@@ -63,14 +59,6 @@
 	}
 }
 
-public SimulationJobStatusInfo[] getActiveJobs(VCellServerID[] serverIDs) throws DataAccessException{
-	try {
-		return adminDbTop.getActiveJobs(serverIDs,true);
-	}catch (Throwable e){
-		log.exception(e);
-		throw new DataAccessException("failure getting ActiveJobs");
-	}
-}
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:34:12 PM)
@@ -79,28 +67,16 @@
  * @param userOnly cbit.vcell.server.User
  * @exception java.rmi.RemoteException The exception description.
  */
-public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws DataAccessException {
+public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex) throws DataAccessException {
 	try {
-		return adminDbTop.getSimulationJobStatusArray(simKey,jobIndex,true);
+		return adminDbTop.getSimulationJobStatus(simKey,jobIndex,true);
 	}catch (Throwable e){
 		log.exception(e);
 		throw new DataAccessException("failure getting SimulationJobStatus");
 	}
 }
 
-public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException {
-	try {
-		return adminDbTop.getSimulationJobStatus(simKey,jobIndex,taskID,true);
-	}catch (Throwable e){
-		log.exception(e);
-		throw new DataAccessException("failure getting SimulationJobStatus");
-	}
-}
 
-public SimulationJobStatus getNextObsoleteSimulation(long interval) throws SQLException{
-	return adminDbTop.getNextObsoleteSimulation(interval,true);
-}
-
 /**
  * getSimulationJobStatus method comment.
  */
@@ -207,11 +183,9 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws DataAccessException {
 	try {
 		return adminDbTop.insertSimulationJobStatus(simulationJobStatus,true);
-	}catch (UpdateSynchronizationException ex){
-		throw ex;
 	}catch (Throwable e){
 		log.exception(e);
 		throw new DataAccessException("failure inserting SimulationJobStatus: "+simulationJobStatus);
Index: src/cbit/vcell/modeldb/DatabaseServerImpl.java
===================================================================
--- src/cbit/vcell/modeldb/DatabaseServerImpl.java	(revision 11981)
+++ src/cbit/vcell/modeldb/DatabaseServerImpl.java	(revision 11980)
@@ -55,7 +55,6 @@
 import cbit.vcell.server.UserRegistrationOP;
 import cbit.vcell.server.UserRegistrationResults;
 import cbit.vcell.solver.Simulation;
-import cbit.vcell.solver.SimulationInfo;
 import cbit.vcell.solver.SolverResultSetInfo;
 import cbit.vcell.solver.ode.gui.SimulationStatus;
 import cbit.vcell.xml.XmlHelper;
@@ -339,18 +338,6 @@
 
 
 /**
- * This method was created in VisualAge.
- * @return SimulationInfo
- * @param key KeyValue
- * @exception org.vcell.util.DataAccessException The exception description.
- * @exception java.rmi.RemoteException The exception description.
- */
-public SimulationInfo getSimulationInfo(User user, KeyValue key) throws DataAccessException, ObjectNotFoundException {
-	return ((SimulationInfo[])getVersionInfos(user, key, VersionableType.Simulation, true, true))[0];
-}
-
-
-/**
  * getVersionable method comment.
  */
 public BioModelMetaData getBioModelMetaData(User user, KeyValue key) throws DataAccessException, ObjectNotFoundException {
@@ -930,10 +917,6 @@
 			VCImageInfo[] imgInfos = new VCImageInfo[vector.size()];
 			vector.copyInto(imgInfos);
 			return imgInfos;
-		} else if (vType.equals(VersionableType.Simulation)) {
-			SimulationInfo[] simInfos = new SimulationInfo[vector.size()];
-			vector.copyInto(simInfos);
-			return simInfos;
 		} else {
 			throw new IllegalArgumentException("Wrong VersinableType vType:" + vType);
 		}		
Index: src/cbit/vcell/modeldb/AdminDBTopLevel.java
===================================================================
--- src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 11981)
+++ src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 11980)
@@ -86,24 +86,6 @@
 	return jobStatusArray;
 }
 
-public SimulationJobStatusInfo[] getActiveJobs(VCellServerID[] serverIDs, boolean bEnableRetry) throws java.sql.SQLException {
-	Object lock = new Object();
-	Connection con = conFactory.getConnection(lock);
-	try {
-		return jobDB.getActiveJobs(con,serverIDs);
-	} catch (Throwable e) {
-		log.exception(e);
-		if (bEnableRetry && isBadConnection(con)) {
-			conFactory.failed(con,lock);
-			return getActiveJobs(serverIDs, false);
-		}else{
-			handle_SQLException(e);
-			return null; // never gets here;
-		}
-	} finally {
-		conFactory.release(con,lock);
-	}
-}
 
 /**
  * Insert the method's description here.
@@ -115,28 +97,6 @@
 }
 
 
-public SimulationJobStatus getNextObsoleteSimulation(long interval, boolean bEnableRetry) throws java.sql.SQLException {
-	Object lock = new Object();
-	Connection con = conFactory.getConnection(lock);
-	try {
-		SimulationJobStatus jobStatus = jobDB.getNextObsoleteSimulation(con, interval);
-		return jobStatus;
-	} catch (Throwable e) {
-		log.exception(e);
-		if (bEnableRetry && isBadConnection(con)) {
-			conFactory.failed(con,lock);
-			return getNextObsoleteSimulation(interval,false);
-		}else{
-			handle_SQLException(e);
-			return null; // never gets here;
-		}
-	} finally {
-		conFactory.release(con,lock);
-	}
-}
-
-
-
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:35:44 PM)
@@ -144,18 +104,18 @@
  * @param bActiveOnly boolean
  * @param owner cbit.vcell.server.User
  */
-public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID, boolean bEnableRetry) throws java.sql.SQLException, DataAccessException {
+SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, boolean bEnableRetry) throws java.sql.SQLException, DataAccessException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
 	try {
-		SimulationJobStatus jobStatus = getSimulationJobStatus(con, simKey, jobIndex, taskID);
+		SimulationJobStatus jobStatus = getSimulationJobStatus(con, simKey, jobIndex);
 		return jobStatus;
 	} catch (Throwable e) {
 		log.exception(e);
 		if (bEnableRetry && isBadConnection(con)) {
 			conFactory.failed(con,lock);
-			return getSimulationJobStatus(simKey,jobIndex,taskID,false);
+			return getSimulationJobStatus(simKey,jobIndex,false);
 		}else{
 			handle_DataAccessException_SQLException(e);
 			return null; // never gets here;
@@ -168,35 +128,6 @@
 
 /**
  * Insert the method's description here.
- * Creation date: (1/31/2003 2:35:44 PM)
- * @return cbit.vcell.solvers.SimulationJobStatus[]
- * @param bActiveOnly boolean
- * @param owner cbit.vcell.server.User
- */
-public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex, boolean bEnableRetry) throws java.sql.SQLException, DataAccessException {
-
-	Object lock = new Object();
-	Connection con = conFactory.getConnection(lock);
-	try {
-		SimulationJobStatus[] jobStatus = getSimulationJobStatusArray(con, simKey, jobIndex);
-		return jobStatus;
-	} catch (Throwable e) {
-		log.exception(e);
-		if (bEnableRetry && isBadConnection(con)) {
-			conFactory.failed(con,lock);
-			return getSimulationJobStatusArray(simKey,jobIndex,false);
-		}else{
-			handle_DataAccessException_SQLException(e);
-			return null; // never gets here;
-		}
-	} finally {
-		conFactory.release(con,lock);
-	}
-}
-
-
-/**
- * Insert the method's description here.
  * Creation date: (9/3/2003 8:59:46 AM)
  * @return java.util.List
  * @param conditions java.lang.String
@@ -226,24 +157,14 @@
  * Insert the method's description here.
  * Creation date: (10/6/2005 3:08:22 PM)
  */
-SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int jobIndex, int taskID) throws SQLException {
-	SimulationJobStatus jobStatus = jobDB.getSimulationJobStatus(con,simKey,jobIndex,taskID,false);
+SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int jobIndex) throws SQLException {
+	SimulationJobStatus jobStatus = jobDB.getSimulationJobStatus(con,simKey,jobIndex,false);
 	return jobStatus;
 }
 
 
 /**
  * Insert the method's description here.
- * Creation date: (10/6/2005 3:08:22 PM)
- */
-SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, int jobIndex) throws SQLException {
-	SimulationJobStatus[] jobStatus = jobDB.getSimulationJobStatusArray(con,simKey,jobIndex,false);
-	return jobStatus;
-}
-
-
-/**
- * Insert the method's description here.
  * Creation date: (1/31/2003 2:35:44 PM)
  * @return cbit.vcell.solvers.SimulationJobStatus[]
  * @param bActiveOnly boolean
@@ -431,7 +352,7 @@
  * @exception java.sql.SQLException The exception description.
  * @exception cbit.sql.RecordChangedException The exception description.
  */
-public User getUserFromSimulationKey(KeyValue simKey, boolean bEnableRetry) throws DataAccessException, java.sql.SQLException {
+User getUserFromSimulationKey(KeyValue simKey, boolean bEnableRetry) throws DataAccessException, java.sql.SQLException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
@@ -540,7 +461,7 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-public SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException, UpdateSynchronizationException {
+SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
@@ -574,14 +495,15 @@
  * Creation date: (10/3/2005 3:33:09 PM)
  */
 SimulationJobStatus insertSimulationJobStatus(Connection con, SimulationJobStatus simulationJobStatus) throws SQLException, UpdateSynchronizationException {
-	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),simulationJobStatus.getTaskID(),false);
+	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),false);
 	if (currentSimulationJobStatus != null){
+		con.rollback();
 		VCMongoMessage.sendSimJobStatusInsertedAlready(simulationJobStatus, currentSimulationJobStatus);
 		log.alert("AdminDbTopLevel.insertSimulationJobStatus() : current Job Status = " + currentSimulationJobStatus + ", job status database record already exists");
-		throw new UpdateSynchronizationException("Job Status database record already exists:" + currentSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey()+" job: "+currentSimulationJobStatus.getJobIndex()+" taskID: "+currentSimulationJobStatus.getTaskID());
+		throw new UpdateSynchronizationException("Job Status database record already exists:" + currentSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey()+" job: "+currentSimulationJobStatus.getJobIndex());
 	}
 	jobDB.insertSimulationJobStatus(con,simulationJobStatus, DbDriver.getNewKey(con));
-	SimulationJobStatus newSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),simulationJobStatus.getTaskID(),false);
+	SimulationJobStatus newSimulationJobStatus = jobDB.getSimulationJobStatus(con,simulationJobStatus.getVCSimulationIdentifier().getSimulationKey(), simulationJobStatus.getJobIndex(),false);
 	VCMongoMessage.sendSimJobStatusInsert(simulationJobStatus, newSimulationJobStatus);
 	return newSimulationJobStatus;
 }
@@ -629,7 +551,7 @@
  * @return cbit.sql.UserInfo
  * @param newUserInfo cbit.sql.UserInfo
  */
-public SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException {
+SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus, boolean bEnableRetry) throws SQLException, DataAccessException {
 
 	Object lock = new Object();
 	Connection con = conFactory.getConnection(lock);
@@ -663,14 +585,14 @@
  * Creation date: (10/6/2005 3:20:41 PM)
  */
 SimulationJobStatus updateSimulationJobStatus(Connection con, SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws SQLException, UpdateSynchronizationException {
-	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),newSimulationJobStatus.getTaskID(),true);
+	SimulationJobStatus currentSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),true);
 	if (!currentSimulationJobStatus.compareEqual(oldSimulationJobStatus)){
 		VCMongoMessage.sendSimJobStatusUpdateCacheMiss(oldSimulationJobStatus, currentSimulationJobStatus, newSimulationJobStatus);
 		log.print("AdminDbTopLevel.updateSimulationJobStatus() : current Job Status = "+currentSimulationJobStatus+", old Job Status = "+oldSimulationJobStatus);
 		throw new UpdateSynchronizationException("current Job Status doesn't match argument for Simulation :"+currentSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey()+" job: "+currentSimulationJobStatus.getJobIndex());
 	}
 	jobDB.updateSimulationJobStatus(con,newSimulationJobStatus);
-	SimulationJobStatus updatedSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),newSimulationJobStatus.getTaskID(),false);
+	SimulationJobStatus updatedSimulationJobStatus = jobDB.getSimulationJobStatus(con,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey(),newSimulationJobStatus.getJobIndex(),false);
 	VCMongoMessage.sendSimJobStatusUpdate(oldSimulationJobStatus,newSimulationJobStatus,updatedSimulationJobStatus);
 	return updatedSimulationJobStatus;
 }
@@ -851,8 +773,7 @@
 		try {
 			newServiceStatus = serviceOP.doOperation(oldServiceStatus);
 		} catch (Exception ex) {
-			log.exception(ex);
-			throw new RuntimeException("transactional operation failed for " + newServiceStatus + " : " + ex.getMessage());
+			throw new UpdateSynchronizationException("transactional operation failed for " + newServiceStatus + " : " + ex.getMessage());
 		}
 		serviceStatusDB.updateServiceStatus(con,newServiceStatus);
 		con.commit();
Index: src/cbit/vcell/modeldb/AdminDatabaseServerXAImpl.java
===================================================================
--- src/cbit/vcell/modeldb/AdminDatabaseServerXAImpl.java	(revision 11981)
+++ src/cbit/vcell/modeldb/AdminDatabaseServerXAImpl.java	(revision 11980)
@@ -84,9 +84,9 @@
  * @param jobIndex int
  * @exception org.vcell.util.DataAccessException The exception description.
  */
-public SimulationJobStatus[] getSimulationJobStatusArray(java.sql.Connection con, org.vcell.util.document.KeyValue simKey, int jobIndex) throws DataAccessException {
+public SimulationJobStatus getSimulationJobStatus(java.sql.Connection con, org.vcell.util.document.KeyValue simKey, int jobIndex) throws DataAccessException {
 	try {
-		SimulationJobStatus[] jobStatus = adminDbTop.getSimulationJobStatusArray(con, simKey, jobIndex);
+		SimulationJobStatus jobStatus = adminDbTop.getSimulationJobStatus(con, simKey, jobIndex);
 		return jobStatus;
 	}catch (Throwable e){
 		log.exception(e);
@@ -94,17 +94,7 @@
 	}
 }
 
-public SimulationJobStatus getSimulationJobStatus(java.sql.Connection con, org.vcell.util.document.KeyValue simKey, int jobIndex, int taskID) throws DataAccessException {
-	try {
-		SimulationJobStatus jobStatus = adminDbTop.getSimulationJobStatus(con, simKey, jobIndex, taskID);
-		return jobStatus;
-	}catch (Throwable e){
-		log.exception(e);
-		throw new DataAccessException("failure getting SimulationJobStatus for ["+simKey+"]["+jobIndex+"]");
-	}
-}
 
-
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:34:12 PM)
Index: src/cbit/vcell/modeldb/ResultSetCrawler.java
===================================================================
--- src/cbit/vcell/modeldb/ResultSetCrawler.java	(revision 11981)
+++ src/cbit/vcell/modeldb/ResultSetCrawler.java	(revision 11980)
@@ -41,7 +41,7 @@
  * @author: Jim Schaff
  */
 public class ResultSetCrawler {
-	private AdminDBTopLevel adminDbTopLevel = null;
+	private AdminDatabaseServer adminDbServer = null;
 	private cbit.sql.ConnectionFactory conFactory = null;
 	private org.vcell.util.SessionLog log = null;
 	private cbit.vcell.modeldb.ResultSetDBTopLevel resultSetDbTopLevel = null;
@@ -74,18 +74,18 @@
 /**
  * ResultSetCrawler constructor comment.
  */
-public ResultSetCrawler(ConnectionFactory argConFactory, AdminDBTopLevel adminDbTopLevel, SessionLog argSessionLog) throws SQLException {
-	this(argConFactory, adminDbTopLevel, argSessionLog, null);
+public ResultSetCrawler(ConnectionFactory argConFactory, AdminDatabaseServer argAdminDbServer, SessionLog argSessionLog) throws SQLException {
+	this(argConFactory, argAdminDbServer, argSessionLog, null);
 }
 
 
 /**
  * ResultSetCrawler constructor comment.
  */
-private ResultSetCrawler(ConnectionFactory argConFactory, AdminDBTopLevel adminDbTopLevel, SessionLog argSessionLog, String argOutputDirName) throws SQLException {
+private ResultSetCrawler(ConnectionFactory argConFactory, AdminDatabaseServer argAdminDbServer, SessionLog argSessionLog, String argOutputDirName) throws SQLException {
 	this.conFactory = argConFactory;
 	this.log = argSessionLog;
-	this.adminDbTopLevel = adminDbTopLevel;
+	this.adminDbServer = argAdminDbServer;
 	this.resultSetDbTopLevel = new ResultSetDBTopLevel(conFactory,log);
 	dataRootDir = new File(PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty));
 	outputDirName = argOutputDirName;
@@ -296,10 +296,10 @@
 		SessionLog log = new org.vcell.util.StdoutSessionLog("ResultSetCrawler");		
 		conFactory = new cbit.sql.OraclePoolingConnectionFactory(log);
 		cbit.sql.KeyFactory keyFactory = new cbit.sql.OracleKeyFactory();
-		DbDriver.setKeyFactory(keyFactory);
-		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory,log);
+		
+		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
 			
-		ResultSetCrawler crawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log, outputdir);
+		ResultSetCrawler crawler = new ResultSetCrawler(conFactory, adminDbServer, log, outputdir);
 		if (SCAN_SINGLE) {
 			crawler.scanAUser(username, SCAN_ONLY);
 		} else {
@@ -468,7 +468,7 @@
 	File userDirs[] = dataRootDir.listFiles();
 	log.print("Total user directories: " + userDirs.length);
 
-	org.vcell.util.document.UserInfo userInfos[] = adminDbTopLevel.getUserInfos(true);	
+	org.vcell.util.document.UserInfo userInfos[] = adminDbServer.getUserInfos();	
 	DBTopLevel dbTopLevel = new DBTopLevel(conFactory,log);
 
 	File userDir = null;
@@ -505,7 +505,7 @@
 			// find all the user simulations
 			Vector simInfoList = dbTopLevel.getVersionableInfos(user,null,org.vcell.util.document.VersionableType.Simulation,false,false, true);
 			SolverResultSetInfo[] resultSetInfos = resultSetDbTopLevel.getResultSetInfos(user, false, false);
-			ExternalDataIdentifier[] extDataIDArr = adminDbTopLevel.getExternalDataIdentifiers(user,true);
+			ExternalDataIdentifier[] extDataIDArr = adminDbServer.getExternalDataIdentifiers(user);
 			scan(userDir, extDataIDArr,simInfoList, resultSetInfos, outputDir, bScanOnly);
 		} catch (Exception ex) {
 			log.exception(ex);
@@ -532,7 +532,7 @@
 		log.print("----------------------------------------------------------");
 		log.print("USER: " + userDir.getName());
 
-		User user = adminDbTopLevel.getUser(username,true);
+		User user = adminDbServer.getUser(username);
 		
 		if (user == null) {
 			log.alert("User " + user + " doesn't exit!!");
@@ -544,7 +544,7 @@
 		// find all the user simulations
 		Vector simInfoList = dbTopLevel.getVersionableInfos(user,null,org.vcell.util.document.VersionableType.Simulation,false,false, true);
 		SolverResultSetInfo[] resultSetInfos = resultSetDbTopLevel.getResultSetInfos(user, false, false);
-		ExternalDataIdentifier[] extDataIDArr = adminDbTopLevel.getExternalDataIdentifiers(user,true);
+		ExternalDataIdentifier[] extDataIDArr = adminDbServer.getExternalDataIdentifiers(user);
 		scan(userDir, extDataIDArr,simInfoList, resultSetInfos, outputDir, bScanOnly);
 		log.print("----------------------------------------------------------");
 	} catch (Exception ex) {
Index: src/cbit/vcell/server/LocalVCellServerFactory.java
===================================================================
--- src/cbit/vcell/server/LocalVCellServerFactory.java	(revision 11981)
+++ src/cbit/vcell/server/LocalVCellServerFactory.java	(revision 11980)
@@ -18,12 +18,8 @@
 
 import cbit.sql.ConnectionFactory;
 import cbit.sql.KeyFactory;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.messaging.JmsConnectionFactory;
-import cbit.vcell.modeldb.AdminDBTopLevel;
-import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.LocalAdminDbServer;
-import cbit.vcell.modeldb.ResultSetCrawler;
 /**
  * This type was created in VisualAge.
  */
@@ -51,14 +47,8 @@
 				throw new PermissionException("userid "+userid+" does not have sufficient privilage");
 			}
 		}
-		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, sessionLog);
-		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, sessionLog);
-		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, sessionLog);
-		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, sessionLog);
-		
-		vcServer = new LocalVCellServer(hostName, jmsConnFactory, adminDbServer, simulationDatabase);
+		vcServer = new LocalVCellServer(hostName, jmsConnFactory, adminDbServer);
 	} catch (java.rmi.RemoteException e){
-		e.printStackTrace(System.out);
 	}
 }
 /**
Index: src/cbit/vcell/server/LocalVCellServer.java
===================================================================
--- src/cbit/vcell/server/LocalVCellServer.java	(revision 11981)
+++ src/cbit/vcell/server/LocalVCellServer.java	(revision 11980)
@@ -16,10 +16,8 @@
 import java.util.Date;
 import java.util.Vector;
 
-import javax.jms.JMSException;
 
 
-
 import org.vcell.util.BeanUtils;
 import org.vcell.util.CacheStatus;
 import org.vcell.util.DataAccessException;
@@ -29,7 +27,6 @@
 import org.vcell.util.document.User;
 
 import cbit.vcell.export.server.ExportServiceImpl;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.messaging.JmsConnectionFactory;
 import cbit.vcell.messaging.server.LocalVCellConnectionMessaging;
 import cbit.vcell.mongodb.VCMongoMessage;
@@ -52,7 +49,6 @@
 	private JmsConnectionFactory fieldJmsConnFactory = null;
 	private ExportServiceImpl exportServiceImpl = null;
 	private java.util.Date bootTime = new java.util.Date();
-	private SimulationDatabase simulationDatabase = null;
 
 	private long CLEANUP_INTERVAL = 600*1000;	
 	
@@ -60,7 +56,7 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public LocalVCellServer(String argHostName, JmsConnectionFactory jmsConnFactory, AdminDatabaseServer dbServer, SimulationDatabase simulationDatabase) throws RemoteException, FileNotFoundException {
+public LocalVCellServer(String argHostName, JmsConnectionFactory jmsConnFactory, AdminDatabaseServer dbServer) throws RemoteException, FileNotFoundException {
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellServer,0));
 	this.hostName = argHostName;
 	this.fieldJmsConnFactory = jmsConnFactory;
@@ -70,8 +66,7 @@
 	this.dscImpl = new DataSetControllerImpl(sessionLog,dataCachetable, 
 			new File(PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty)), 
 			new File(PropertyLoader.getRequiredProperty(PropertyLoader.secondarySimDataDirProperty)));
-	this.simulationDatabase = simulationDatabase;
-//	this.simControllerImpl = new SimulationControllerImpl(sessionLog, this.simulationDatabase, this);
+	this.simControllerImpl = new SimulationControllerImpl(sessionLog,adminDbServer, this);
 	this.exportServiceImpl = new ExportServiceImpl(sessionLog);
 	
 	if (fieldJmsConnFactory != null) {
@@ -89,13 +84,12 @@
  * This method was created in VisualAge.
  * @param userid java.lang.String
  * @param password java.lang.String
- * @throws JMSException 
  */
-private synchronized void addVCellConnection(UserLoginInfo userLoginInfo) throws RemoteException, java.sql.SQLException, FileNotFoundException, JMSException {
+private synchronized void addVCellConnection(UserLoginInfo userLoginInfo) throws RemoteException, java.sql.SQLException, FileNotFoundException, javax.jms.JMSException {
 	if (getVCellConnection0(userLoginInfo) == null) {
 		VCellConnection localConn = null;
 		if (fieldJmsConnFactory == null){
-			localConn = new LocalVCellConnection(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), simulationDatabase, getDataSetControllerImpl(), getExportServiceImpl());
+			localConn = new LocalVCellConnection(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), this);
 		} else {
 			localConn = new LocalVCellConnectionMessaging(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), fieldJmsConnFactory, this);
 			VCMongoMessage.sendClientConnectionNew(localConn.getUserLoginInfo());
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 11981)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 11980)
@@ -19,32 +19,26 @@
 
 import org.vcell.util.ConfigurationException;
 import org.vcell.util.DataAccessException;
-import org.vcell.util.MessageConstants;
 import org.vcell.util.PermissionException;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
-import org.vcell.util.document.KeyValue;
+import org.vcell.util.document.ExternalDataIdentifier;
+import org.vcell.util.document.User;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.rmi.event.SimulationJobStatusEvent;
 import cbit.rmi.event.SimulationJobStatusListener;
 import cbit.rmi.event.WorkerEvent;
 import cbit.rmi.event.WorkerEventListener;
-import cbit.vcell.message.VCDestination;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCMessagingException;
-import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.local.LocalVCMessageAdapter;
-import cbit.vcell.message.local.LocalVCMessageAdapter.LocalVCMessageListener;
-import cbit.vcell.message.messages.SimulationTaskMessage;
-import cbit.vcell.message.messages.StatusMessage;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
-import cbit.vcell.message.server.dispatcher.SimulationDispatcherEngine;
+import cbit.vcell.field.FieldDataDBOperationSpec;
+import cbit.vcell.field.FieldDataIdentifierSpec;
+import cbit.vcell.field.FieldFunctionArguments;
+import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
+import cbit.vcell.messaging.db.UpdateSynchronizationException;
+import cbit.vcell.messaging.server.DispatcherDbManager;
 import cbit.vcell.messaging.server.LocalDispatcherDbManager;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationInfo;
 import cbit.vcell.solver.SimulationJob;
@@ -53,6 +47,7 @@
 import cbit.vcell.solver.SolverStatus;
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.solvers.LocalSolverController;
+import cbit.vcell.solvers.SimExecutionException;
 import cbit.vcell.solvers.SolverController;
 
 /**
@@ -61,65 +56,22 @@
  * @author: Jim Schaff
  */
 public class SimulationControllerImpl implements WorkerEventListener {
-	public class SimulationTaskInfo {
-		public final KeyValue simKey;
-		public final int jobIndex;
-		public final int taskID;
-		public SimulationTaskInfo(KeyValue simKey,int jobIndex,int taskID){
-			this.simKey = simKey;
-			this.jobIndex = jobIndex;
-			this.taskID = taskID;
-		}
-		public SimulationTaskInfo(SimulationTask simTask){
-			this.simKey = simTask.getSimulation().getKey();
-			this.jobIndex = simTask.getSimulationJob().getJobIndex();
-			this.taskID = simTask.getTaskID();
-		}
-		public SimulationTaskInfo(SimulationJob simulationJob ,int taskID){
-			this.simKey = simulationJob.getSimulation().getKey();
-			this.jobIndex = simulationJob.getJobIndex();
-			this.taskID = taskID;
-		}
-		public SimulationTaskInfo(SimulationInfo simulationInfo, int jobIndex ,int taskID){
-			this.simKey = simulationInfo.getSimulationVersion().getVersionKey();
-			this.jobIndex = jobIndex;
-			this.taskID = taskID;
-		}
-		@Override
-		public boolean equals(Object obj){
-			if (obj instanceof SimulationTaskInfo){
-				return toString().equals(((SimulationTaskInfo)obj).toString());
-			}
-			return false;
-		}
-		@Override
-		public int hashCode(){
-			return toString().hashCode();
-		}
-		@Override
-		public String toString(){
-			return "SimTaskInfo("+simKey.toString()+","+jobIndex+","+taskID+")";
-		}
-	}
-	private java.util.Hashtable<SimulationTaskInfo, SolverController> solverControllerHash = new java.util.Hashtable<SimulationTaskInfo, SolverController>();
+	private java.util.Hashtable<String, SolverController> solverControllerHash = new java.util.Hashtable<String, SolverController>();
 	private SessionLog adminSessionLog = null;
-	private LocalVCellConnection localVCellConnection = null;
-	private SimulationDatabase simulationDatabase = null;
+	private LocalVCellServer fieldLocalVCellServer = null;
+	private AdminDatabaseServer adminDbServer = null;
 	private EventListenerList listenerList = new javax.swing.event.EventListenerList();
-	
-	LocalDispatcherDbManager dispatcherDbManager;
-	
-	private SimulationDispatcherEngine simulationDispatcherEngine = new SimulationDispatcherEngine();
-	
 
+	private DispatcherDbManager dispatcherDbManager = new LocalDispatcherDbManager();
+
 /**
  * SimulationControllerImpl constructor comment.
  */
-public SimulationControllerImpl(SessionLog argAdminSessionLog, SimulationDatabase simulationDatabase, LocalVCellConnection localVCellConnection) {
+public SimulationControllerImpl(SessionLog argAdminSessionLog, AdminDatabaseServer argAdminDbServer, LocalVCellServer argLocalVCellServer) {
 	super();
 	adminSessionLog = argAdminSessionLog;
-	this.localVCellConnection = localVCellConnection;
-	this.simulationDatabase = simulationDatabase;
+	fieldLocalVCellServer = argLocalVCellServer;
+	adminDbServer = argAdminDbServer;
 }
 
 /**
@@ -129,54 +81,33 @@
 	listenerList.add(SimulationJobStatusListener.class, listener);
 }
 
-private void onClientStatusTopic_SimulationJobStatus(VCMessage simJobStatusMessage){
-	Double progress = null;
-	if (simJobStatusMessage.propertyExists(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY)){
-		progress = simJobStatusMessage.getDoubleProperty(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY);
-	}
-	Double timepoint = null;
-	if (simJobStatusMessage.propertyExists(StatusMessage.SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
-		timepoint = simJobStatusMessage.getDoubleProperty(StatusMessage.SIMULATION_STATUS_TIMEPOINT_PROPERTY);
-	}
-	SimulationJobStatus simJobStatus = (SimulationJobStatus)simJobStatusMessage.getObjectContent();
-	
-	SimulationJobStatusEvent simulationJobStatusEvent = new SimulationJobStatusEvent(
-			SimulationControllerImpl.this, simJobStatus.getVCSimulationIdentifier().getID(), 
-			simJobStatus, progress, timepoint);
 
-	fireSimulationJobStatusEvent(simulationJobStatusEvent);
-}
-
-public SimulationDatabase getSimulationDatabase(){
-	return this.simulationDatabase;
-}
 /**
  * Insert the method's description here.
  * Creation date: (6/28/01 1:19:54 PM)
  * @return cbit.vcell.solvers.SolverController
  * @param simulation cbit.vcell.solver.Simulation
- * @throws RemoteException 
  * @throws JMSException 
  * @throws AuthenticationException 
  * @throws DataAccessException 
  * @throws SQLException 
  * @throws FileNotFoundException 
- * @throws SolverException 
- * @throws ConfigurationException 
  */
-private SolverController createNewSolverController(SimulationTask simTask, SessionLog userSessionLog) throws RemoteException, FileNotFoundException, DataAccessException, AuthenticationException, SQLException, ConfigurationException, SolverException  {
+private SolverController createNewSolverController(UserLoginInfo userLoginInfo, SimulationJob simulationJob, SessionLog userSessionLog) throws RemoteException, SimExecutionException, SolverException, FileNotFoundException, SQLException, DataAccessException, AuthenticationException, JMSException {
 	//
 	// either no appropriate slave server or THIS IS A SLAVE SERVER (can't pass the buck).
 	//
+	User user = userLoginInfo.getUser();
+	LocalVCellConnection localVCellConnection = (LocalVCellConnection)getLocalVCellServer().getVCellConnection(userLoginInfo);
 	LocalSolverController localSolverController = new LocalSolverController(
 		localVCellConnection,
 		userSessionLog,
-		simTask,
-		getUserSimulationDirectory(PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty))
+		simulationJob,
+		getUserSimulationDirectory(user, PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty))
 		);
 
 	localSolverController.addWorkerEventListener(this);
-	userSessionLog.alert("returning local SolverController for "+simTask.getSimulationJobID());
+	userSessionLog.alert("returning local SolverController for "+simulationJob.getSimulationJobID());
 	return localSolverController;
 }
 
@@ -202,30 +133,36 @@
 
 
 /**
+ * Insert the method's description here.
+ * Creation date: (6/28/01 4:33:49 PM)
+ * @return cbit.vcell.server.LocalVCellServer
+ */
+public LocalVCellServer getLocalVCellServer() {
+	return fieldLocalVCellServer;
+}
+
+/**
  * This method was created by a SmartGuide.
- * @throws SolverException 
- * @throws DataAccessException 
- * @throws ConfigurationException 
  * @exception java.rmi.RemoteException The exception description.
  * @throws JMSException 
  * @throws AuthenticationException 
  * @throws SQLException 
  * @throws FileNotFoundException 
  */
-SolverController getSolverController(SimulationTask simTask, SessionLog userSessionLog) throws RemoteException, FileNotFoundException, ConfigurationException, DataAccessException, AuthenticationException, SQLException, SolverException  {
-	Simulation simulation = simTask.getSimulation();
+SolverController getSolverController(UserLoginInfo userLoginInfo, SimulationJob simulationJob, SessionLog userSessionLog) throws RemoteException, SimExecutionException, SolverException, PermissionException, DataAccessException, FileNotFoundException, SQLException, AuthenticationException, JMSException {
+	User user = userLoginInfo.getUser();
+	Simulation simulation = simulationJob.getSimulation();
 	VCSimulationIdentifier vcSimID = simulation.getSimulationInfo().getAuthoritativeVCSimulationIdentifier();
 	if (vcSimID == null){
 		throw new IllegalArgumentException("cannot run an unsaved simulation");
 	}
-	if (!simulation.getVersion().getOwner().equals(localVCellConnection.getUserLoginInfo().getUser())){
+	if (!simulation.getVersion().getOwner().equals(user)){
 		throw new PermissionException("insufficient privilege: startSimulation()");
 	}
-	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simTask);
-	SolverController solverController = solverControllerHash.get(simTaskInfo);
+	SolverController solverController = solverControllerHash.get(simulationJob.getSimulationJobID());
 	if (solverController==null){
-		solverController = createNewSolverController(simTask,userSessionLog);
-		solverControllerHash.put(simTaskInfo,solverController);
+		solverController = createNewSolverController(userLoginInfo,simulationJob,userSessionLog);
+		solverControllerHash.put(simulationJob.getSimulationJobID(),solverController);
 	}
 	return solverController;
 }
@@ -235,9 +172,8 @@
  * @return java.lang.String
  * @exception java.rmi.RemoteException The exception description.
  */
-public SolverStatus getSolverStatus(SimulationInfo simulationInfo, int jobIndex, int taskID) throws RemoteException, PermissionException, DataAccessException {
-	SimulationTaskInfo simTaskInfo = new SimulationTaskInfo(simulationInfo, jobIndex, taskID);
-	SolverController solverController = solverControllerHash.get(simTaskInfo);
+public SolverStatus getSolverStatus(User user, SimulationInfo simulationInfo, int jobIndex) throws RemoteException, PermissionException, DataAccessException {
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(simulationInfo.getAuthoritativeVCSimulationIdentifier().getSimulationKey()),jobIndex));
 	if (solverController==null){
 		return new SolverStatus(SolverStatus.SOLVER_READY, SimulationMessage.MESSAGE_SOLVER_READY);
 	}
@@ -245,9 +181,8 @@
 }
 
 
-private File getUserSimulationDirectory(String simDataRoot) {
-	String userName = localVCellConnection.getUserLoginInfo().getUserName();
-	File directory = new File(new File(simDataRoot), userName);
+private File getUserSimulationDirectory(User user, String simDataRoot) {
+	File directory = new File(new File(simDataRoot), user.getName());
 	if (!directory.exists()){
 		if (!directory.mkdirs()){
 			String msg = "could not create directory "+directory;
@@ -258,36 +193,93 @@
 	return directory;
 }
 
+
 /**
  * Insert the method's description here.
+ * Creation date: (2/11/2004 11:26:21 AM)
+ * @param ex java.lang.Exception
+ */
+private void handleException(VCSimulationIdentifier vcSimulationIdentifier, int jobIndex, Exception ex) {
+	VCellServerID serverID = VCellServerID.getSystemServerID();
+	try {
+		SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(vcSimulationIdentifier.getSimulationKey(), jobIndex);
+		if (oldJobStatus != null) {
+			serverID = oldJobStatus.getServerID();
+		}
+		SimulationJobStatus newJobStatus = updateFailedJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, SimulationMessage.solverAborted(ex.getMessage()));
+		if (newJobStatus == null) {
+			newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(ex.getMessage()), null, null);
+		}
+		
+		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
+		fireSimulationJobStatusEvent(event);
+	} catch (DataAccessException e) {
+		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
+		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
+		fireSimulationJobStatusEvent(event);
+	} catch (RemoteException e) {
+		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
+		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
+		fireSimulationJobStatusEvent(event);
+	}	
+}
+
+
+/**
+ * Insert the method's description here.
  * Creation date: (3/11/2004 10:44:18 AM)
  * @param newJobStatus cbit.vcell.messaging.db.SimulationJobStatus
  * @param progress java.lang.Double
  * @param timePoint java.lang.Double
  */
-public void onWorkerEvent(WorkerEvent workerEvent) {
+public void onWorkerEvent(WorkerEvent workerEvent) {	
 	try {
+		VCSimulationIdentifier vcSimulationIdentifier = workerEvent.getVCSimulationDataIdentifier().getVcSimID();
+		int jobIndex = workerEvent.getJobIndex();
+		SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(vcSimulationIdentifier.getSimulationKey(), jobIndex);
+		SimulationJobStatus newJobStatus = null;
+
+		if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone()) {
+			return;
+		}
 		
-		LocalVCMessageListener localVCMessageListener = new LocalVCMessageListener(){
+		if (workerEvent.isCompletedEvent()) {
+			newJobStatus = updateCompletedJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, workerEvent.getSimulationMessage());			
 			
-			public void onLocalVCMessage(VCDestination destination, VCMessage objectMessage) {
-				if (destination == VCellTopic.ClientStatusTopic && objectMessage.getObjectContent() instanceof SimulationJobStatus){
-					onClientStatusTopic_SimulationJobStatus(objectMessage);
-				}else{
-					throw new RuntimeException("SimulationControllerImpl.onWorkerEvent().localMessageListener::  expecting object message with SimulationJobStatus to topic "+VCellTopic.ClientStatusTopic.getName()+": received \""+objectMessage.show()+"\"");
-				}
-			}
+		} else if (workerEvent.isFailedEvent()) {
+			newJobStatus = updateFailedJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, workerEvent.getSimulationMessage());			
 			
-		};
-		
-		LocalVCMessageAdapter vcMessageSession = new LocalVCMessageAdapter(localVCMessageListener);
-		simulationDispatcherEngine.onWorkerEvent(workerEvent, simulationDatabase, vcMessageSession, adminSessionLog);
-		vcMessageSession.deliverAll();
-	}catch (Exception e){
-		adminSessionLog.exception(e);
+		} else if (workerEvent.isNewDataEvent()) {
+			newJobStatus = updateRunningJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, true, workerEvent.getSimulationMessage());
+			
+		} else if (workerEvent.isProgressEvent()) {
+			newJobStatus = updateRunningJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, false, workerEvent.getSimulationMessage());
+			
+		} else if (workerEvent.isStartingEvent()) {
+			if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
+				newJobStatus = updateRunningJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, false, workerEvent.getSimulationMessage());
+			} else if (oldJobStatus.getSchedulerStatus().isRunning()) {
+				newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), oldJobStatus.getVCSimulationIdentifier(), oldJobStatus.getJobIndex(), oldJobStatus.getSubmitDate(), 
+					oldJobStatus.getSchedulerStatus(), oldJobStatus.getTaskID(), workerEvent.getSimulationMessage(), oldJobStatus.getSimulationQueueEntryStatus(), oldJobStatus.getSimulationExecutionStatus());
+			}				
+		}
+		if (workerEvent.isStartingEvent() && newJobStatus != null) {
+			SimulationJobStatusEvent newEvent = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
+			fireSimulationJobStatusEvent(newEvent);
+		} else 	if (newJobStatus != null && (!newJobStatus.compareEqual(oldJobStatus) || workerEvent.isProgressEvent() || workerEvent.isNewDataEvent())) {
+			Double progress = workerEvent.getProgress();
+			Double timepoint = workerEvent.getTimePoint();
+			SimulationJobStatusEvent newEvent = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, progress, timepoint);
+			fireSimulationJobStatusEvent(newEvent);
+		}	
+	} catch (DataAccessException ex) {
+		adminSessionLog.exception(ex);
+	} catch (RemoteException ex) {
+		adminSessionLog.exception(ex);
 	}
 }
 
+
 /**
  * removeSimulationStatusEventListener method comment.
  */
@@ -295,81 +287,64 @@
 	listenerList.remove(SimulationJobStatusListener.class, listener);
 }
 
-private void onSimJobQueue_SimulationTask(VCMessage vcMessage) {
-	SimulationTask simTask = null;
-	try {
-		
-		SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(vcMessage);
-		simTask = simTaskMessage.getSimulationTask();
-		
-		SolverController solverController = getSolverController(simTask,adminSessionLog);
-		
-		solverController.startSimulationJob(); // can only start after updating the database is done
-		
-	} catch (Exception e) {
-		adminSessionLog.exception(e);
-		KeyValue simKey = simTask.getSimKey();
-		VCSimulationIdentifier vcSimID = simTask.getSimulationJob().getVCDataIdentifier().getVcSimID();
-		int jobIndex = simTask.getSimulationJob().getJobIndex();
-		int taskID = simTask.getTaskID();
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, null, SchedulerStatus.FAILED, taskID, SimulationMessage.jobFailed(e.getMessage()), null, null);
-		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null);
-		fireSimulationJobStatusEvent(event);
-	}
-}
 
 /**
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public void startSimulation(Simulation simulation, SessionLog userSessionLog) throws RemoteException, Exception {
-
-	LocalVCMessageListener localVCMessageListener = new LocalVCMessageListener(){
-		
-		public void onLocalVCMessage(VCDestination destination, VCMessage vcMessage) {
-			if (destination == VCellTopic.ClientStatusTopic && vcMessage.getObjectContent() instanceof SimulationJobStatus){
-				onClientStatusTopic_SimulationJobStatus(vcMessage);
-			}else if (destination == VCellQueue.SimJobQueue && vcMessage.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY).equals(MessageConstants.MESSAGE_TYPE_SIMULATION_JOB_VALUE)){
-				onSimJobQueue_SimulationTask(vcMessage);
-			}else{
-				throw new RuntimeException("SimulationControllerImpl.startSimulation().objectMessageListener:: expecting object message with SimulationJobStatus to topic "+VCellTopic.ClientStatusTopic.getName()+": received \""+vcMessage.show()+"\"");
+public void startSimulation(UserLoginInfo userLoginInfo, Simulation simulation, SessionLog userSessionLog) throws RemoteException, Exception {
+	User user = userLoginInfo.getUser();
+	LocalVCellConnection localVCellConnection = (LocalVCellConnection)getLocalVCellServer().getVCellConnection(userLoginInfo);
+	removeSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+	addSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+	
+	FieldFunctionArguments[] fieldFuncArgs = FieldUtilities.getFieldFunctionArguments(simulation.getMathDescription());
+	FieldDataIdentifierSpec[] fieldDataIDs = new FieldDataIdentifierSpec[fieldFuncArgs.length];
+	if (fieldFuncArgs.length != 0) {
+		ExternalDataIdentifier[]  qualifiedSpecs =
+			getLocalVCellServer().
+				getVCellConnection(userLoginInfo).
+					getUserMetaDbServer().
+						fieldDataDBOperation(
+								FieldDataDBOperationSpec.createGetExtDataIDsSpec(user)).extDataIDArr;
+		for(int i=0;i<fieldFuncArgs.length;i+= 1){
+			for(int j=0;j<qualifiedSpecs.length;j+= 1){
+				if(fieldFuncArgs[i].getFieldName().equals(qualifiedSpecs[j].getName())){
+					fieldDataIDs[i] = new FieldDataIdentifierSpec(fieldFuncArgs[i],qualifiedSpecs[j]);
+					break;
+				}
 			}
+			if(fieldDataIDs[i] == null){
+				throw new DataAccessException("Failed to resolve FieldData name "+fieldFuncArgs[i].getFieldName()+" for sim "+simulation.getName());
+			}
 		}
-		
-	};
+	} 
 	
-	LocalVCMessageAdapter vcMessageSession = new LocalVCMessageAdapter(localVCMessageListener);
+	boolean serialParameterScan = simulation.isSerialParameterScan();
+	int scanCount = simulation.getScanCount();
+	for (int i = 0; i < scanCount; i++){
+		SimulationJob simJob = new SimulationJob(simulation, i, fieldDataIDs);
+		VCSimulationIdentifier vcSimID = simJob.getVCDataIdentifier().getVcSimID();
+		try {
 
-	removeSimulationJobStatusListener(localVCellConnection.getMessageCollector());
-	addSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+			SolverController solverController = getSolverController(userLoginInfo,simJob,userSessionLog);
+			SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(simulation.getKey(),i);	
+			SimulationJobStatus newJobStatus = updateDispatchedJobStatus(oldJobStatus, vcSimID, i);
+			
+			if (newJobStatus != null) {
+				SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, simulation.getSimulationID(), newJobStatus, null, null);
+				fireSimulationJobStatusEvent(event);
+			}
 
-	VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simulation.getKey(), simulation.getVersion().getOwner());
-	simulationDispatcherEngine.onStartRequest(vcSimID, localVCellConnection.getUserLoginInfo().getUser(), simulationDatabase, vcMessageSession, vcMessageSession, adminSessionLog);
-	vcMessageSession.deliverAll();
+			if (!serialParameterScan || i == 0 ) {
+				solverController.startSimulationJob(); // can only start after updating the database is done
+			}
+		} catch (Exception ex) {
+			handleException(vcSimID,i,ex);
+		}	
+	}
 }
 
-private void onServiceControlTopic_StopSimulation(VCMessage message){
-	KeyValue simKey = new KeyValue(String.valueOf(message.getLongProperty(MessageConstants.SIMKEY_PROPERTY)));
-	int jobIndex = message.getIntProperty(MessageConstants.JOBINDEX_PROPERTY);
-	int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
-	SimulationTask simTask = null;
-	
-	try {
-		simTask = new SimulationTask(simulationDatabase.getSimulationJob(simKey,jobIndex),taskID);
-		
-		SolverController solverController = getSolverController(simTask,adminSessionLog);
-		
-		solverController.stopSimulationJob(); // can only start after updating the database is done
-		
-	} catch (Exception e) {
-		adminSessionLog.exception(e);
-		VCSimulationIdentifier vcSimID = simTask.getSimulationJob().getVCDataIdentifier().getVcSimID();
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, null, SchedulerStatus.FAILED, taskID, SimulationMessage.jobFailed(e.getMessage()), null, null);
-		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null);
-		fireSimulationJobStatusEvent(event);
-	}
-	
-}
 /**
  * This method was created by a SmartGuide.
  * @throws JMSException 
@@ -378,30 +353,158 @@
  * @throws SQLException 
  * @throws FileNotFoundException 
  * @exception java.rmi.RemoteException The exception description.
- * @throws VCMessagingException 
  */
-public void stopSimulation(Simulation simulation) throws RemoteException, FileNotFoundException, SQLException, DataAccessException, AuthenticationException, JMSException, VCMessagingException {	
-	LocalVCMessageListener localVCMessageListener = new LocalVCMessageListener(){
-		
-		public void onLocalVCMessage(VCDestination destination, VCMessage objectMessage) {
-			String messageTypeProperty = MessageConstants.MESSAGE_TYPE_PROPERTY;
-			String stopSimulationValue = MessageConstants.MESSAGE_TYPE_STOPSIMULATION_VALUE;
-			if (destination == VCellTopic.ClientStatusTopic && objectMessage.getObjectContent() instanceof SimulationJobStatus){
-				onClientStatusTopic_SimulationJobStatus(objectMessage);
-			}else if (destination == VCellTopic.ServiceControlTopic && objectMessage.getStringProperty(messageTypeProperty).equals(stopSimulationValue)){
-				onServiceControlTopic_StopSimulation(objectMessage);
-			}else{
-				throw new RuntimeException("SimulationControllerImpl.startSimulation().objectMessageListener:: expecting message with SimulationJobStatus to topic "+VCellTopic.ClientStatusTopic.getName()+": received \""+objectMessage.show()+"\" on destination \""+destination+"\"");
+public void stopSimulation(UserLoginInfo userLoginInfo, Simulation simulation) throws RemoteException, FileNotFoundException, SQLException, DataAccessException, AuthenticationException, JMSException {	
+	User user = userLoginInfo.getUser();
+	LocalVCellConnection localVCellConnection = (LocalVCellConnection)getLocalVCellServer().getVCellConnection(userLoginInfo);
+	removeSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+	addSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+	for (int i = 0; i < simulation.getScanCount(); i++){
+		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simulation.getKey(),simulation.getVersion().getOwner());
+		try {
+			if (!vcSimID.getOwner().equals(user)){
+				throw new PermissionException("insufficient privilege: stopSimulation()");
 			}
+			SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(vcSimID.getSimulationKey(), i);	
+			SimulationJobStatus newJobStatus = updateStoppedJobStatus(oldJobStatus, vcSimID, i);
+			if (newJobStatus != null) {
+				SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, simulation.getSimulationID(), newJobStatus, null, null);
+				fireSimulationJobStatusEvent(event);
+			}
+				
+			SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimID.getSimulationKey()), i));
+			if (solverController != null){
+				solverController.stopSimulationJob();
+			}
+		} catch (Exception ex) {
+			handleException(vcSimID,i,ex);
 		}
+	}
+}
+
+
+/**
+ * This method was created by a SmartGuide.
+ * @exception java.rmi.RemoteException The exception description.
+ */
+public void stopSimulation(UserLoginInfo userLoginInfo, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage simulationMessage) {	
+	try {
+		LocalVCellConnection localVCellConnection = (LocalVCellConnection)getLocalVCellServer().getVCellConnection(userLoginInfo);
+		removeSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+		addSimulationJobStatusListener(localVCellConnection.getMessageCollector());
+		if (!vcSimID.getOwner().equals(userLoginInfo.getUser())){
+			throw new PermissionException("insufficient privilege: stopSimulation()");
+		}
+		SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(vcSimID.getSimulationKey(),jobIndex);	
+		SimulationJobStatus newJobStatus = updateStoppedJobStatus(oldJobStatus, vcSimID, jobIndex);
+		if (newJobStatus != null) {
+			SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimID.getSimulationKey()), newJobStatus, null, null);
+			fireSimulationJobStatusEvent(event);
+		}
+			
+		SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimID.getSimulationKey()), jobIndex));
+		if (solverController != null){
+			solverController.stopSimulationJob();
+		}
+	} catch (Exception ex) {
+		handleException(vcSimID,jobIndex,ex);
+	}
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (11/5/2003 11:50:34 AM)
+ * @param sim cbit.vcell.solver.Simulation
+ * @param jobStatus cbit.vcell.messaging.db.SimulationJobStatus
+ */
+private SimulationJobStatus updateCompletedJobStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimulationIdentifier, int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, RemoteException {
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), jobIndex));
+	if (solverController == null) {
+		return null;
+	}
+
+	synchronized (solverController) {
+		String host = (solverController != null) ? solverController.getHost() : null;
 		
-	};
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SchedulerStatus.COMPLETED, simulationMessage);		
+	}
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (5/28/2003 3:39:37 PM)
+ * @param simKey cbit.sql.KeyValue
+ */
+private SimulationJobStatus updateDispatchedJobStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimulationIdentifier, int jobIndex) throws RemoteException, DataAccessException, UpdateSynchronizationException {
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), jobIndex));
+	if (solverController == null) {
+		return null;
+	}
+
+	synchronized (solverController) {	
+		String host = (solverController != null) ? solverController.getHost() : null;
+		
+		return dispatcherDbManager.updateDispatchedStatus(oldJobStatus, adminDbServer, host, vcSimulationIdentifier, jobIndex, SimulationMessage.MESSAGE_JOB_DISPATCHED);
+	}
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (11/5/2003 11:50:34 AM)
+ * @param sim cbit.vcell.solver.Simulation
+ * @param jobStatus cbit.vcell.messaging.db.SimulationJobStatus
+ */
+private SimulationJobStatus updateFailedJobStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimulationIdentifier, int jobIndex, SimulationMessage solverMsg) throws DataAccessException, RemoteException {
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), jobIndex));
+	if (solverController == null) {
+		return null;
+	}
 	
-	LocalVCMessageAdapter vcMessageSession = new LocalVCMessageAdapter(localVCMessageListener);
+	synchronized (solverController) {		
+		String host = (solverController != null) ? solverController.getHost() : null;
+		
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SchedulerStatus.FAILED, solverMsg);
+	}
+}
 
-	VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simulation.getKey(), simulation.getVersion().getOwner());
-	simulationDispatcherEngine.onStopRequest(vcSimID, localVCellConnection.getUserLoginInfo().getUser(), simulationDatabase, vcMessageSession, adminSessionLog);
-	vcMessageSession.deliverAll();
+
+/**
+ * Insert the method's description here.
+ * Creation date: (11/5/2003 11:50:34 AM)
+ * @param sim cbit.vcell.solver.Simulation
+ * @param jobStatus cbit.vcell.messaging.db.SimulationJobStatus
+ */
+private SimulationJobStatus updateRunningJobStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimulationIdentifier, int jobIndex, boolean hasData, SimulationMessage solverMsg) throws DataAccessException, RemoteException {
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), jobIndex));
+	if (solverController == null) {
+		return null;
+	}
+
+	synchronized (solverController) {
+		String host = (solverController != null) ? solverController.getHost() : null;
+		
+		return dispatcherDbManager.updateRunningStatus(oldJobStatus, adminDbServer, host, vcSimulationIdentifier, jobIndex, hasData, solverMsg);
+	}
 }
 
+
+/**
+ * Insert the method's description here.
+ * Creation date: (11/5/2003 11:50:34 AM)
+ * @param sim cbit.vcell.solver.Simulation
+ * @param jobStatus cbit.vcell.messaging.db.SimulationJobStatus
+ */
+private SimulationJobStatus updateStoppedJobStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimID, int jobIndex) throws DataAccessException, RemoteException {	
+	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimID.getSimulationKey()), jobIndex));
+	if (solverController != null) {
+		synchronized (solverController) {
+			return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
+		}
+	} else {
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
+	}	
 }
+}
Index: src/cbit/vcell/server/LocalVCellBootstrap.java
===================================================================
--- src/cbit/vcell/server/LocalVCellBootstrap.java	(revision 11981)
+++ src/cbit/vcell/server/LocalVCellBootstrap.java	(revision 11980)
@@ -28,14 +28,10 @@
 import cbit.sql.ConnectionFactory;
 import cbit.sql.KeyFactory;
 import cbit.sql.OraclePoolingConnectionFactory;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.messaging.JmsConnectionFactory;
 import cbit.vcell.messaging.JmsConnectionFactoryImpl;
-import cbit.vcell.modeldb.AdminDBTopLevel;
 import cbit.vcell.modeldb.DatabasePolicySQL;
-import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.modeldb.LocalAdminDbServer;
-import cbit.vcell.modeldb.ResultSetCrawler;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
 /**
@@ -51,10 +47,10 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-private LocalVCellBootstrap(String hostName, AdminDatabaseServer adminDbServer, JmsConnectionFactory jmsConnFactory,  SimulationDatabase simulationDatabase) throws RemoteException, FileNotFoundException, DataAccessException {
+private LocalVCellBootstrap(String hostName, AdminDatabaseServer adminDbServer, JmsConnectionFactory jmsConnFactory) throws RemoteException, FileNotFoundException, DataAccessException {
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellBootstrap,0));
 	this.adminDbServer = adminDbServer;
-	this.localVCellServer = new LocalVCellServer(hostName, jmsConnFactory, adminDbServer, simulationDatabase);
+	this.localVCellServer = new LocalVCellServer(hostName, jmsConnFactory, adminDbServer);
 }
 /**
  * This method was created by a SmartGuide.
@@ -190,12 +186,7 @@
 		LocalVCellConnection.setDatabaseResources(conFactory,keyFactory);
 		
 		AdminDatabaseServer adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
-		AdminDBTopLevel adminDbTopLevel = new AdminDBTopLevel(conFactory, log);
-		ResultSetCrawler resultSetCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);
-		DatabaseServerImpl databaseServerImpl = new DatabaseServerImpl(conFactory, keyFactory, log);
-		SimulationDatabase simulationDatabase = new SimulationDatabase(resultSetCrawler, adminDbTopLevel, databaseServerImpl, log);
-
-		LocalVCellBootstrap localVCellBootstrap = new LocalVCellBootstrap(host+":"+rmiPort,adminDbServer,jmsConnFactory, simulationDatabase);
+		LocalVCellBootstrap localVCellBootstrap = new LocalVCellBootstrap(host+":"+rmiPort,adminDbServer,jmsConnFactory);
 		
 		//
 		// spawn the WatchdogMonitor (which spawns the RMI registry, and binds the localVCellBootstrap)
Index: src/cbit/vcell/server/AdminDatabaseServerXA.java
===================================================================
--- src/cbit/vcell/server/AdminDatabaseServerXA.java	(revision 11981)
+++ src/cbit/vcell/server/AdminDatabaseServerXA.java	(revision 11980)
@@ -47,12 +47,9 @@
  * @param jobIndex int
  * @exception org.vcell.util.DataAccessException The exception description.
  */
-SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int jobIndex, int taskID) throws DataAccessException;
+SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int jobIndex) throws DataAccessException;
 
 
-SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, int jobIndex) throws DataAccessException;
-
-
 /**
  * Insert the method's description here.
  * Creation date: (2/14/2006 4:08:59 PM)
Index: src/cbit/vcell/server/LocalVCellConnection.java
===================================================================
--- src/cbit/vcell/server/LocalVCellConnection.java	(revision 11981)
+++ src/cbit/vcell/server/LocalVCellConnection.java	(revision 11980)
@@ -31,10 +31,7 @@
 import cbit.rmi.event.SimpleMessageService;
 import cbit.sql.ConnectionFactory;
 import cbit.sql.KeyFactory;
-import cbit.vcell.export.server.ExportServiceImpl;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.modeldb.LocalUserMetaDbServer;
-import cbit.vcell.simdata.DataSetControllerImpl;
 import cbit.vcell.simdata.LocalDataSetController;
 import cbit.vcell.visit.VisitConnectionInfo;
 /**
@@ -46,9 +43,6 @@
 @SuppressWarnings("serial")
 public class LocalVCellConnection extends UnicastRemoteObject implements VCellConnection, ExportListener, DataJobListener {
 	private SimulationController simulationController = null;
-	private SimulationControllerImpl simulationControllerImpl = null;
-	private ExportServiceImpl exportServiceImpl = null;
-	private DataSetControllerImpl dataSetControllerImpl = null;
 	private UserMetaDbServer userMetaDbServer = null;
 	private SimpleMessageService messageService = new SimpleMessageService();
 	private SimpleMessageCollector messageCollector = new SimpleMessageCollector();
@@ -63,6 +57,7 @@
 
 	
 	private SessionLog fieldSessionLog = null;
+	private LocalVCellServer fieldLocalVCellServer = null;
 	private String fieldHost = null;
 	private PerformanceMonitoringFacility performanceMonitoringFacility;
 	private LocalDataSetController localDataSetController;
@@ -71,20 +66,18 @@
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
-public LocalVCellConnection(UserLoginInfo userLoginInfo, String host, SessionLog sessionLog, SimulationDatabase simulationDatabase, DataSetControllerImpl dataSetControllerImpl, ExportServiceImpl exportServiceImpl) throws RemoteException, java.sql.SQLException, FileNotFoundException {
+public LocalVCellConnection(UserLoginInfo userLoginInfo, String host, SessionLog sessionLog, LocalVCellServer aLocalVCellServer) throws RemoteException, java.sql.SQLException, FileNotFoundException {
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellConnection,0));
 	this.userLoginInfo = userLoginInfo;
 	this.fieldHost = host;
 	this.fieldSessionLog = sessionLog;
-	this.simulationControllerImpl = new SimulationControllerImpl(sessionLog, simulationDatabase, this);
+	this.fieldLocalVCellServer = aLocalVCellServer;
 	sessionLog.print("new LocalVCellConnection(" + userLoginInfo.getUserName() + ")");
 	
 	messageCollector.addMessageListener(messageService);
 	
-	this.exportServiceImpl = exportServiceImpl;
-	this.dataSetControllerImpl = dataSetControllerImpl;
-	this.exportServiceImpl.addExportListener(this);
-	this.dataSetControllerImpl.addDataJobListener(this);
+	getLocalVCellServer().getExportServiceImpl().addExportListener(this);
+	getLocalVCellServer().getDataSetControllerImpl().addDataJobListener(this);
 
 	performanceMonitoringFacility = new PerformanceMonitoringFacility(this.userLoginInfo.getUser(), sessionLog);	
 }
@@ -116,7 +109,7 @@
 public DataSetController getDataSetController() throws RemoteException, DataAccessException {
 	getSessionLog().print("LocalVCellConnection.getDataSetController()");
 	if (localDataSetController == null) {
-		localDataSetController = new LocalDataSetController(this, getSessionLog(), dataSetControllerImpl, exportServiceImpl, getUserLoginInfo().getUser());
+		localDataSetController = new LocalDataSetController(this, getSessionLog(), getLocalVCellServer().getDataSetControllerImpl(), getLocalVCellServer().getExportServiceImpl(), getUserLoginInfo().getUser());
 	}
 
 	return localDataSetController;
@@ -135,6 +128,17 @@
 
 /**
  * Insert the method's description here.
+ * Creation date: (8/29/2000 1:14:39 PM)
+ * @author: John Wagner
+ * @return: the <code>LocalVCellServer</code> associated with this connection.
+ */
+private LocalVCellServer getLocalVCellServer() {
+	return (fieldLocalVCellServer);
+}
+
+
+/**
+ * Insert the method's description here.
  * Creation date: (6/29/01 10:33:49 AM)
  * @return cbit.rmi.event.SimpleMessageService
  */
@@ -163,7 +167,11 @@
  */
 public SimulationController getSimulationController() throws RemoteException {
 	if (simulationController == null){
-		simulationController = new LocalSimulationController(getUserLoginInfo().getUser(),simulationControllerImpl,getSessionLog());
+		try {
+			simulationController = new LocalSimulationController(getUserLoginInfo(),getSessionLog(),getLocalVCellServer().getAdminDatabaseServer(), getLocalVCellServer().getSimulationControllerImpl(),getUserMetaDbServer());
+		}catch (DataAccessException e){
+			throw new RuntimeException("DataAccessException creating LocalSimulationController, :"+e.getMessage());
+		}
 	}
 	return simulationController;
 }
Index: src/cbit/vcell/server/LocalSimulationController.java
===================================================================
--- src/cbit/vcell/server/LocalSimulationController.java	(revision 11981)
+++ src/cbit/vcell/server/LocalSimulationController.java	(revision 11980)
@@ -15,9 +15,6 @@
 import org.vcell.util.ObjectNotFoundException;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
-import org.vcell.util.document.User;
-
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.solver.*;
 /**
  * Insert the type's description here.
@@ -26,30 +23,53 @@
  */
 public class LocalSimulationController extends java.rmi.server.UnicastRemoteObject implements SimulationController {
 	private SessionLog sessionLog = null;
+	private UserLoginInfo userLoginInfo = null;
 	private SimulationControllerImpl simulationControllerImpl = null;
-	private User user = null;
+	private UserMetaDbServer userMetaDbServer = null;
+	private AdminDatabaseServer adminDbServer = null;
 
 /**
  * LocalSimulationController constructor comment.
  * @exception java.rmi.RemoteException The exception description.
  */
-protected LocalSimulationController(User user, SimulationControllerImpl simulationControllerImpl, SessionLog argSessionLog) throws java.rmi.RemoteException {
+protected LocalSimulationController(UserLoginInfo argUserLoginInfo, SessionLog argSessionLog, AdminDatabaseServer adminDbServer0, SimulationControllerImpl argSimulationControllerImpl, UserMetaDbServer argUserMetaDbServer) throws java.rmi.RemoteException {
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortSimulationController,0));
-	this.sessionLog = argSessionLog;
-	this.simulationControllerImpl = simulationControllerImpl;
-	this.user = user;
+	sessionLog = argSessionLog;
+	userLoginInfo = argUserLoginInfo;
+	adminDbServer = adminDbServer0;
+	simulationControllerImpl = argSimulationControllerImpl;
+	userMetaDbServer = argUserMetaDbServer;
 }
 
 
 /**
+ * Insert the method's description here.
+ * Creation date: (6/28/01 1:30:46 PM)
+ * @return cbit.vcell.solver.Simulation
+ * @param simulationInfo cbit.vcell.solver.SimulationInfo
+ */
+private Simulation getSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws DataAccessException, ObjectNotFoundException, RemoteException {
+	String simulationXML = userMetaDbServer.getSimulationXML(vcSimulationIdentifier.getSimulationKey()).toString();
+	Simulation simulation = null;
+	try {
+		simulation = cbit.vcell.xml.XmlHelper.XMLToSim(simulationXML);
+	}catch (cbit.vcell.xml.XmlParseException e){
+		e.printStackTrace(System.out);
+		throw new DataAccessException(e.getMessage());
+	}
+	return simulation;
+}
+
+
+/**
  * This method was created by a SmartGuide.
  * @exception java.rmi.RemoteException The exception description.
  */
 public void startSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws java.rmi.RemoteException {
 	sessionLog.print("LocalSimulationController.startSimulation(simInfo="+vcSimulationIdentifier+")");
 	try {
-		Simulation simulation = simulationControllerImpl.getSimulationDatabase().getSimulation(user,vcSimulationIdentifier.getSimulationKey());
-		simulationControllerImpl.startSimulation(simulation,sessionLog);
+		Simulation simulation = getSimulation(vcSimulationIdentifier);
+		simulationControllerImpl.startSimulation(userLoginInfo,simulation,sessionLog);
 	}catch (RemoteException e){
 		sessionLog.exception(e);
 		throw e;
@@ -70,8 +90,8 @@
 public void stopSimulation(VCSimulationIdentifier vcSimulationIdentifier) throws java.rmi.RemoteException {
 	sessionLog.print("LocalSimulationController.getSolverStatus(simInfo="+vcSimulationIdentifier+")");
 	try {
-		Simulation simulation = simulationControllerImpl.getSimulationDatabase().getSimulation(user,vcSimulationIdentifier.getSimulationKey());
-		simulationControllerImpl.stopSimulation(simulation);
+		Simulation simulation = getSimulation(vcSimulationIdentifier);
+		simulationControllerImpl.stopSimulation(userLoginInfo,simulation);
 	}catch (RemoteException e){
 		sessionLog.exception(e);
 		throw e;
Index: src/cbit/vcell/server/AdminDatabaseServer.java
===================================================================
--- src/cbit/vcell/server/AdminDatabaseServer.java	(revision 11981)
+++ src/cbit/vcell/server/AdminDatabaseServer.java	(revision 11980)
@@ -20,7 +20,6 @@
 
 import cbit.vcell.messaging.admin.SimpleJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.UpdateSynchronizationException;
 
 /**
  * This type was created in VisualAge.
@@ -38,12 +37,8 @@
  * @exception java.rmi.RemoteException The exception description.
  */
 
-SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex) throws RemoteException, DataAccessException;
-
-SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws RemoteException, DataAccessException;
-
-
-java.util.List<SimpleJobStatus> getSimulationJobStatus(String conditions) throws RemoteException, DataAccessException;
+SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex) throws RemoteException, DataAccessException;
+	public java.util.List<SimpleJobStatus> getSimulationJobStatus(String conditions) throws RemoteException, DataAccessException;
 /**
  * Insert the method's description here.
  * Creation date: (1/31/2003 2:33:54 PM)
@@ -95,7 +90,7 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws RemoteException, DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus insertSimulationJobStatus(SimulationJobStatus simulationJobStatus) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
@@ -110,7 +105,7 @@
  * @param simulationJobStatus cbit.vcell.solvers.SimulationJobStatus
  * @exception java.rmi.RemoteException The exception description.
  */
-SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws RemoteException, DataAccessException, UpdateSynchronizationException;
+SimulationJobStatus updateSimulationJobStatus(SimulationJobStatus oldSimulationJobStatus, SimulationJobStatus newSimulationJobStatus) throws RemoteException, DataAccessException;
 /**
  * This method was created in VisualAge.
  * @return cbit.vcell.server.User
Index: src/cbit/vcell/solver/stoch/NetCDFWriter.java
===================================================================
--- src/cbit/vcell/solver/stoch/NetCDFWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/stoch/NetCDFWriter.java	(revision 11980)
@@ -36,7 +36,6 @@
 import cbit.vcell.math.VarIniCount;
 import cbit.vcell.math.Variable;
 import cbit.vcell.messaging.JmsUtils;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.Simulation;
@@ -60,7 +59,7 @@
 public class NetCDFWriter {
 
 	private String filename = null;
-	private SimulationTask simTask = null;
+	private SimulationJob simJob = null;
 	// to store variables and their orders in the reactions. It is set to global in this
 	// class, since it is useful in a few functions and we don't want to calculate it 
 	// again and again. it is calculated in function getReactionRateLaws.
@@ -71,9 +70,9 @@
 	 * another constructor
 	 * @param arg_simulation
 	 */
-	public NetCDFWriter(SimulationTask simTask, String fn, boolean argMessaging) 
+	public NetCDFWriter(SimulationJob arg_simulationJob, String fn, boolean argMessaging) 
 	{
-		this.simTask = simTask;
+		simJob = arg_simulationJob;
 		filename = fn;
 		bMessaging = argMessaging;
 	}
@@ -87,7 +86,7 @@
 	 */
 	public boolean initialize() throws Exception
 	{
-		Simulation simulation = simTask.getSimulation();	
+		Simulation simulation = simJob.getSimulation();	
 		//check variables
 		if(!simulation.getMathDescription().getVariables().hasMoreElements())
 		{
@@ -128,8 +127,8 @@
 	 */
 	public void writeHybridInputFile(String[] parameterNames) throws Exception,cbit.vcell.parser.ExpressionException,IOException, MathException, InvalidRangeException
 	{
-		Simulation simulation = simTask.getSimulation();
-		SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+		Simulation simulation = simJob.getSimulation();
+		SimulationSymbolTable simSymbolTable = simJob.getSimulationSymbolTable();
 		if(initialize())
 		{
 			//we need to get model and control information first
@@ -270,7 +269,7 @@
 					ArrayInt.D0 scalarJMS = new ArrayInt.D0();
 					scalarJMS.set(Integer.parseInt(simulation.getVersion().getVersionKey()+""));
 					ncfile.write("SIMULATION_KEY", scalarJMS);
-					scalarJMS.set(simTask.getSimulationJob().getJobIndex());
+					scalarJMS.set(simJob.getJobIndex());
 					ncfile.write("JOB_INDEX", scalarJMS);
 				}
 
@@ -569,7 +568,7 @@
 	 */		
 	private  ReactionRateLaw[] getReactionRateLaws(Expression[] probs) throws ExpressionException, MathException
 	{
-		SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+		SimulationSymbolTable simSymbolTable = simJob.getSimulationSymbolTable();
 		
 		ReactionRateLaw[] results = new ReactionRateLaw[probs.length];
 		varInProbOrderHash = new Hashtable[probs.length];
@@ -712,7 +711,7 @@
 		
 	private String[] getVariableSymbols(String[] symbols)
 	{
-		Simulation simulation = simTask.getSimulation();
+		Simulation simulation = simJob.getSimulation();
 		
 		Vector<String> vars = new Vector<String>();
 		if(symbols != null)
Index: src/cbit/vcell/solver/stoch/GibsonSolver.java
===================================================================
--- src/cbit/vcell/solver/stoch/GibsonSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/stoch/GibsonSolver.java	(revision 11980)
@@ -25,7 +25,6 @@
 import cbit.vcell.math.MathException;
 import cbit.vcell.math.VariableType;
 import cbit.vcell.math.Variable.Domain;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.AnnotatedFunction;
@@ -51,8 +50,8 @@
 	private int saveToFileInterval = 6;	// seconds
 	private long lastSavedMS = 0; // milliseconds since last save
 
-public GibsonSolver(SimulationTask simTask, java.io.File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
-	super(simTask, directory, sessionLog, bMessaging);
+public GibsonSolver(SimulationJob simulationJob, java.io.File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
+	super(simulationJob, directory, sessionLog, bMessaging);
 }
 
 
@@ -176,7 +175,7 @@
 	Add appropriate Function columns to result set if the stochastic simulation is to display the trajectory.
 	No function columns for the results of multiple stochastic trials
 	*/
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	if(simSymbolTable.getSimulation().getSolverTaskDescription().getStochOpt().getNumOfTrials() == 1)
 	{
 		Function functions[] = simSymbolTable.getFunctions();
@@ -218,7 +217,8 @@
 	writeFunctionsFile();
 	writeLogFile();
 
-	String inputFilename = getInputFilename();
+	String inputFilename = getBaseName() + STOCHINPUT_DATA_EXTENSION;	
+	String outputFileName = getBaseName() + IDA_DATA_EXTENSION;
 	sessionLog.print("StochSolver.initialize() baseName = " + getBaseName());
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING, SimulationMessage.MESSAGE_SOLVER_RUNNING_INPUT_FILE));
@@ -227,7 +227,7 @@
 	PrintWriter pw = null;
 	try {
 		pw = new PrintWriter(inputFilename);
-		StochFileWriter stFileWriter = new StochFileWriter(pw, simTask, bMessaging);
+		StochFileWriter stFileWriter = new StochFileWriter(pw, simulationJob, bMessaging);
 		stFileWriter.write();
 	} catch (Exception e) {
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_ABORTED, SimulationMessage.solverAborted("Could not generate input file: " + e.getMessage())));
@@ -241,26 +241,12 @@
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));	
 	//get executable path+name.
-	setMathExecutable(new MathExecutable(getMathExecutableCommand()));	
+	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.stochExecutableProperty);
+	setMathExecutable(new MathExecutable(new String[] {executableName, "gibson", inputFilename, outputFileName}));	
 	//setMathExecutable(new cbit.vcell.solvers.MathExecutable(executableName + " gibson " + getBaseName() + ".stochInput" + " " + getBaseName() + ".stoch"));
 }
 
-private String getInputFilename(){
-	return getBaseName() + STOCHINPUT_DATA_EXTENSION;	
-}
 
-private String getOutputFilename(){
-	return getBaseName() + IDA_DATA_EXTENSION;
-}
-
-@Override
-public String[] getMathExecutableCommand() {
-	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.stochExecutableProperty);
-	String inputFilename = getInputFilename();
-	String outputFilename = getOutputFilename();
-	return new String[] { executableName, "gibson", inputFilename, outputFilename };
-}
-
 /**
  * Write out the log file and result binary file.
  * Creation date: (8/15/2006 9:44:06 AM)
@@ -285,7 +271,7 @@
 //	cbit.vcell.solver.ode.ODESimData.writeODEDataFile(stSimData, dataFile);
 //	stSimData.writeODELogFile(logFile, dataFile);
 	// fire event to inform that solver has data printed. however, for gibson multiple trial and hybrid solvers, we don't show intermediate results
-	if(simTask.getSimulation().getSolverTaskDescription().getStochOpt().getNumOfTrials() == 1)
+	if(simulationJob.getSimulation().getSolverTaskDescription().getStochOpt().getNumOfTrials() == 1)
 		fireSolverPrinted(getCurrentTime());
 }
 
@@ -372,7 +358,7 @@
 	//
 	Vector<AnnotatedFunction> funcList = new Vector<AnnotatedFunction>();
 	
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Function functions[] = simSymbolTable.getFunctions();
 	for (int i = 0; i < functions.length; i++){
 		if (SimulationSymbolTable.isFunctionSaved(functions[i])){
Index: src/cbit/vcell/solver/stoch/HybridSolver.java
===================================================================
--- src/cbit/vcell/solver/stoch/HybridSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/stoch/HybridSolver.java	(revision 11980)
@@ -27,7 +27,6 @@
 import cbit.vcell.math.MathException;
 import cbit.vcell.math.VariableType;
 import cbit.vcell.math.Variable.Domain;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.AnnotatedFunction;
@@ -66,8 +65,8 @@
 	private int integratorType = EMIntegrator;
 
 
-public HybridSolver(SimulationTask simTask, java.io.File directory, SessionLog sessionLog, int type, boolean b_Msging) throws cbit.vcell.solver.SolverException {
-	super(simTask, directory, sessionLog, b_Msging);
+public HybridSolver(SimulationJob simulationJob, java.io.File directory, SessionLog sessionLog, int type, boolean b_Msging) throws cbit.vcell.solver.SolverException {
+	super(simulationJob, directory, sessionLog, b_Msging);
 	integratorType = type;
 }
 
@@ -269,7 +268,7 @@
 	 *No function columns for the results of multiple stochastic trials.
 	 *In stochastic simulation the functions include probability functions and clamped variable.
 	 */
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	if(simSymbolTable.getSimulation().getSolverTaskDescription().getStochOpt().getNumOfTrials() == 1)
 	{
 		Function functions[] = simSymbolTable.getFunctions();
@@ -331,12 +330,13 @@
 	writeFunctionsFile();
 	writeLogFile();
 	
+	
 	//
-	String inputFilename = getInputFilename();//file used by precompiled solver.
+	String inputFilename = getBaseName() + ".nc";//file used by precompiled solver.
 	//
 	sessionLog.print("HybridSolver.initialize() baseName = " + getBaseName());
 	//
-	NetCDFWriter ncWriter = new NetCDFWriter(simTask,inputFilename, bMessaging);
+	NetCDFWriter ncWriter = new NetCDFWriter(simulationJob,inputFilename, bMessaging);
 	try {
 		ncWriter.initialize();
 	} catch (Exception e) {
@@ -359,15 +359,6 @@
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));	
 	//get executable path+name.
 	//Hybrid solver's usage: ProgramName <NetCDF Filename> <epsilon> <lambda> <MSR_Tolerance> <SDE_Tolerance> <SDE_dt> [-R <Random Seed>] [-OV]
-	setMathExecutable(new MathExecutable(getMathExecutableCommand()));
-}
-
-private String getInputFilename(){
-	return getBaseName() + ".nc";//file used by precompiled solver.
-}
-
-@Override
-public String[] getMathExecutableCommand() {
 	String executableName = "";
 	String randomNumber = "";
 	//if one of the following paras is applied, all the paras in front of it must be set.
@@ -378,7 +369,7 @@
 	String SDE_dt = " 0.1";
 	String paraString = "";
 
-	SolverTaskDescription solverTaskDescription = simTask.getSimulation().getSolverTaskDescription();
+	SolverTaskDescription solverTaskDescription = simulationJob.getSimulation().getSolverTaskDescription();
 	if(solverTaskDescription.getStochOpt() instanceof StochHybridOptions)
 	{
 		StochHybridOptions sho = ((StochHybridOptions)solverTaskDescription.getStochOpt());
@@ -409,13 +400,13 @@
 	
 	ArrayList<String> commandList = new ArrayList<String>();
 	commandList.add(executableName);
-	commandList.add(getInputFilename());
+	commandList.add(inputFilename);
 	String argumentString = paraString.toLowerCase() +randomNumber + " -OV";
 	StringTokenizer st = new StringTokenizer(argumentString);
 	while (st.hasMoreTokens()) {
 		commandList.add(st.nextToken());
 	}	
-	return commandList.toArray(new String[0]);
+	setMathExecutable(new MathExecutable(commandList.toArray(new String[0])));
 }
 
 
@@ -530,7 +521,7 @@
 	//
 	Vector<AnnotatedFunction> funcList = new Vector<AnnotatedFunction>();
 	
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	Function functions[] = simSymbolTable.getFunctions();
 	for (int i = 0; i < functions.length; i++){
Index: src/cbit/vcell/solver/stoch/StochFileWriter.java
===================================================================
--- src/cbit/vcell/solver/stoch/StochFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/stoch/StochFileWriter.java	(revision 11980)
@@ -23,7 +23,6 @@
 import cbit.vcell.math.SubDomain;
 import cbit.vcell.math.VarIniCondition;
 import cbit.vcell.math.VarIniCount;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.DefaultOutputTimeSpec;
@@ -46,9 +45,9 @@
 /**
  * StochFileWriter constructor comment.
  */
-public StochFileWriter(PrintWriter pw, SimulationTask simTask, boolean bMessaging) 
+public StochFileWriter(PrintWriter pw, SimulationJob arg_simulationJob, boolean bMessaging) 
 {
-	super(pw, simTask, bMessaging);
+	super(pw, arg_simulationJob, bMessaging);
 }
 
 
@@ -73,7 +72,7 @@
 			if(!process.compareEqual(processList.get(i)))//to avoid comparing with it's own
 			{
 				Expression probExp = processList.get(i).getProbabilityRate();
-				probExp = simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(probExp).flatten();
+				probExp = simulationJob.getSimulationSymbolTable().substituteFunctions(probExp).flatten();
 				String[] vars = probExp.getSymbols();
 				if((vars != null)&&(vars.length>0))
 				{				
@@ -117,7 +116,7 @@
  */
 public void initialize() throws Exception
 {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	//check variables
 	if(!simulation.getMathDescription().getVariables().hasMoreElements())
 	{
@@ -145,7 +144,7 @@
  */
 public boolean isValidProbabilityExpression(Expression probExp)
 {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	
 	String[] symbols = probExp.getSymbols();
 	for(int i=0; symbols != null && i<symbols.length; i++)
@@ -164,8 +163,8 @@
  */
 public void write(String[] parameterNames) throws Exception,ExpressionException
 {
-	Simulation simulation = simTask.getSimulation();
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable(); 
+	Simulation simulation = simulationJob.getSimulation();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable(); 
 	
 	initialize();
 	
Index: src/cbit/vcell/solver/SolverFactory.java
===================================================================
--- src/cbit/vcell/solver/SolverFactory.java	(revision 11981)
+++ src/cbit/vcell/solver/SolverFactory.java	(revision 11980)
@@ -15,7 +15,6 @@
 import org.vcell.solver.smoldyn.SmoldynSolver;
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.ode.AdamsMoultonFiveSolver;
 import cbit.vcell.solver.ode.CVodeSolverStandalone;
 import cbit.vcell.solver.ode.ForwardEulerSolver;
@@ -39,44 +38,44 @@
 /**
  * create Solvers according to the solver description.
  */
-public static Solver createSolver(SessionLog sessionLog, File directory, SimulationTask simTask, boolean bMessaging) throws SolverException {
-	SolverDescription solverDescription = simTask.getSimulationJob().getSimulation().getSolverTaskDescription().getSolverDescription();
+public static Solver createSolver(SessionLog sessionLog, File directory, SimulationJob simJob, boolean bMessaging) throws SolverException {
+	SolverDescription solverDescription = simJob.getSimulation().getSolverTaskDescription().getSolverDescription();
 	if (solverDescription == null) {
 		throw new IllegalArgumentException("SolverDescription cannot be null");
 	}
 	Solver solver = null;
 	if (solverDescription.equals(SolverDescription.ForwardEuler)) {
-		solver = new ForwardEulerSolver(simTask, directory, sessionLog);
+		solver = new ForwardEulerSolver(simJob, directory, sessionLog);
 	} else if (solverDescription.equals(SolverDescription.RungeKutta2)) {
-		solver = new RungeKuttaTwoSolver(simTask, directory, sessionLog);
+		solver = new RungeKuttaTwoSolver(simJob, directory, sessionLog);
 	} else if (solverDescription.equals(SolverDescription.RungeKutta4)) {
-		solver = new RungeKuttaFourSolver(simTask, directory, sessionLog);
+		solver = new RungeKuttaFourSolver(simJob, directory, sessionLog);
 	} else if (solverDescription.equals(SolverDescription.AdamsMoulton)) {
-		solver = new AdamsMoultonFiveSolver(simTask, directory, sessionLog);
+		solver = new AdamsMoultonFiveSolver(simJob, directory, sessionLog);
 	} else if (solverDescription.equals(SolverDescription.RungeKuttaFehlberg)) {
-		solver = new RungeKuttaFehlbergSolver(simTask, directory, sessionLog);
+		solver = new RungeKuttaFehlbergSolver(simJob, directory, sessionLog);
 	} else if (solverDescription.equals(SolverDescription.IDA)) {
-		solver = new IDASolverStandalone(simTask, directory, sessionLog, bMessaging);
+		solver = new IDASolverStandalone(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.CVODE)) {
-		solver = new CVodeSolverStandalone(simTask, directory, sessionLog, bMessaging);
+		solver = new CVodeSolverStandalone(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.CombinedSundials)) {
-		solver = new CombinedSundialsSolver(simTask, directory, sessionLog, bMessaging);
+		solver = new CombinedSundialsSolver(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.FiniteVolume)) {
-		solver = new FVSolver(simTask, directory, sessionLog, bMessaging);
+		solver = new FVSolver(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.FiniteVolumeStandalone)) {
-		solver = new FVSolverStandalone(simTask, directory, sessionLog, bMessaging);
+		solver = new FVSolverStandalone(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.SundialsPDE)) {
-		solver = new FVSolverStandalone(simTask, directory, sessionLog, bMessaging);
+		solver = new FVSolverStandalone(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.StochGibson)) {
-		solver = new GibsonSolver(simTask, directory, sessionLog, bMessaging);
+		solver = new GibsonSolver(simJob, directory, sessionLog, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.HybridEuler)) {
-		solver = new cbit.vcell.solver.stoch.HybridSolver(simTask, directory, sessionLog, HybridSolver.EMIntegrator, bMessaging);
+		solver = new cbit.vcell.solver.stoch.HybridSolver(simJob, directory, sessionLog, HybridSolver.EMIntegrator, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.HybridMilstein)) {
-		solver = new cbit.vcell.solver.stoch.HybridSolver(simTask, directory, sessionLog, HybridSolver.MilsteinIntegrator, bMessaging);
+		solver = new cbit.vcell.solver.stoch.HybridSolver(simJob, directory, sessionLog, HybridSolver.MilsteinIntegrator, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.HybridMilAdaptive)) {
-		solver = new cbit.vcell.solver.stoch.HybridSolver(simTask, directory, sessionLog, HybridSolver.AdaptiveMilsteinIntegrator, bMessaging);
+		solver = new cbit.vcell.solver.stoch.HybridSolver(simJob, directory, sessionLog, HybridSolver.AdaptiveMilsteinIntegrator, bMessaging);
 	} else if (solverDescription.equals(SolverDescription.Smoldyn)) {
-		solver = new SmoldynSolver(simTask, directory, sessionLog, bMessaging);
+		solver = new SmoldynSolver(simJob, directory, sessionLog, bMessaging);
 	}
 	else {
 		throw new SolverException("Unknown solver: " + solverDescription);
Index: src/cbit/vcell/solver/test/HybridSolverTester.java
===================================================================
--- src/cbit/vcell/solver/test/HybridSolverTester.java	(revision 11981)
+++ src/cbit/vcell/solver/test/HybridSolverTester.java	(revision 11980)
@@ -41,7 +41,6 @@
 import cbit.vcell.field.FieldFunctionArguments;
 import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.mathmodel.MathModel;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.microscopy.FRAPStudy;
 import cbit.vcell.microscopy.LocalWorkspace;
 import cbit.vcell.mongodb.VCMongoMessage;
@@ -109,10 +108,10 @@
 				sim.getSolverTaskDescription().getSmoldynSimulationOptions().setRandomSeed(new Integer(startTrialNo + i));
 				//create sim job
 				int jobIndex = startTrialNo + i;
-				SimulationTask simTask = new SimulationTask(new SimulationJob(sim,jobIndex, null),0);
+				SimulationJob simJob = new SimulationJob(sim,jobIndex, null);
 				ResourceUtil.prepareSolverExecutable(sim.getSolverTaskDescription().getSolverDescription());
 				
-				FVSolverStandalone fvSolver = new FVSolverStandalone(simTask,simDataDir,new StdoutSessionLog(sim.getVersion().getOwner().getName()),false);		
+				FVSolverStandalone fvSolver = new FVSolverStandalone(simJob,simDataDir,new StdoutSessionLog(sim.getVersion().getOwner().getName()),false);		
 				fvSolver.startSolver();
 				
 				SolverStatus status = fvSolver.getSolverStatus();
Index: src/cbit/vcell/solver/SolverFileWriter.java
===================================================================
--- src/cbit/vcell/solver/SolverFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/SolverFileWriter.java	(revision 11980)
@@ -12,7 +12,6 @@
 import java.io.*;
 
 import cbit.vcell.messaging.JmsUtils;
-import cbit.vcell.messaging.server.SimulationTask;
 /**
  * Insert the type's description here.
  * Creation date: (3/8/00 10:29:24 PM)
@@ -21,8 +20,8 @@
 public abstract class SolverFileWriter {
 	protected PrintWriter printWriter = null;
 	protected boolean bUseMessaging = true;
-	protected final SimulationTask simTask;
-	
+	protected final SimulationJob simulationJob;
+
 	enum SolverInputFileKeyword {
 		JMS_PARAM_BEGIN,
 		JMS_BROKER,
@@ -37,9 +36,9 @@
 /**
  * OdeFileCoder constructor comment.
  */
-public SolverFileWriter(PrintWriter pw, SimulationTask simTask, boolean messaging) {
+public SolverFileWriter(PrintWriter pw, SimulationJob simJob, boolean messaging) {
 	printWriter = pw;
-	this.simTask = simTask;
+	simulationJob = simJob;
 	bUseMessaging = messaging;
 }
 
@@ -70,17 +69,17 @@
 	    printWriter.println(SolverInputFileKeyword.JMS_USER + " " + JmsUtils.getJmsUserID() + " " + JmsUtils.getJmsPassword());
 	    printWriter.println(SolverInputFileKeyword.JMS_QUEUE + " " + JmsUtils.getQueueWorkerEvent());  
 		printWriter.println(SolverInputFileKeyword.JMS_TOPIC + " " + JmsUtils.getTopicServiceControl());
-		printWriter.println(SolverInputFileKeyword.VCELL_USER + " " + simTask.getSimulation().getVersion().getOwner().getName());
-		printWriter.println(SolverInputFileKeyword.SIMULATION_KEY + " " + simTask.getSimulation().getVersion().getVersionKey());
-		printWriter.println(SolverInputFileKeyword.JOB_INDEX + " " + simTask.getSimulationJob().getJobIndex());
+		printWriter.println(SolverInputFileKeyword.VCELL_USER + " " + simulationJob.getSimulation().getVersion().getOwner().getName());
+		printWriter.println(SolverInputFileKeyword.SIMULATION_KEY + " " + simulationJob.getSimulation().getVersion().getVersionKey());
+		printWriter.println(SolverInputFileKeyword.JOB_INDEX + " " + simulationJob.getJobIndex());
 		printWriter.println(SolverInputFileKeyword.JMS_PARAM_END);
 		printWriter.println();
 	}
 }
 
-public SimulationTask getSimulationTask()
+public SimulationJob getSimulationJob()
 {
-	return simTask;
+	return simulationJob;
 }
 
 }
Index: src/cbit/vcell/solver/ode/AbstractJavaSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/AbstractJavaSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/AbstractJavaSolver.java	(revision 11980)
@@ -14,7 +14,6 @@
 
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.DefaultOutputTimeSpec;
 import cbit.vcell.solver.OutputTimeSpec;
 import cbit.vcell.solver.Simulation;
@@ -44,8 +43,8 @@
 /**
  * AbstractIntegrator constructor comment.
  */
-public AbstractJavaSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
-	super(simTask, directory, sessionLog);
+public AbstractJavaSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog) throws SolverException {
+	super(simulationJob, directory, sessionLog);
 }
 
 
@@ -134,7 +133,7 @@
 			// write file and fire event
 			if (this instanceof ODESolver) {
 				ODESolverResultSet odeSolverResultSet = ((ODESolver)this).getODESolverResultSet();
-				Simulation simulation = simTask.getSimulationJob().getSimulation();
+				Simulation simulation = simulationJob.getSimulation();
 				OutputTimeSpec outputTimeSpec = simulation.getSolverTaskDescription().getOutputTimeSpec();
 				if (outputTimeSpec.isDefault()) {
 					odeSolverResultSet.trimRows(((DefaultOutputTimeSpec)outputTimeSpec).getKeepAtMost());
Index: src/cbit/vcell/solver/ode/IDASolverStandalone.java
===================================================================
--- src/cbit/vcell/solver/ode/IDASolverStandalone.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/IDASolverStandalone.java	(revision 11980)
@@ -16,7 +16,6 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.SolverException;
@@ -35,8 +34,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @exception cbit.vcell.solver.SolverException The exception description.
  */
-public IDASolverStandalone(SimulationTask simTask, File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
-	super(simTask, directory, sessionLog, bMessaging);
+public IDASolverStandalone(SimulationJob simulationJob, File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
+	super(simulationJob, directory, sessionLog, bMessaging);
 }
 /**
  *  This method takes the place of the old runUnsteady()...
@@ -46,14 +45,15 @@
 	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_INIT);
 	super.initialize();
 	
-	String inputFilename = getInputFilename();
+	String inputFilename = getBaseName() + IDAINPUT_DATA_EXTENSION;
+	String outputFilename = getBaseName() + IDA_DATA_EXTENSION;
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING, SimulationMessage.MESSAGE_SOLVER_RUNNING_INPUT_FILE));
 	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_INPUT_FILE);
 
 	PrintWriter pw = null;
 	try {
 		pw = new PrintWriter(inputFilename);
-		IDAFileWriter idaFileWriter = new IDAFileWriter(pw, simTask, bMessaging);
+		IDAFileWriter idaFileWriter = new IDAFileWriter(pw, simulationJob, bMessaging);
 		idaFileWriter.write();
 	} catch (Exception e) {
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_ABORTED, SimulationMessage.solverAborted("Could not generate input file: " + e.getMessage())));
@@ -67,24 +67,7 @@
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));	
 	
-	setMathExecutable(new MathExecutable(getMathExecutableCommand()));
-}
-
-private String getInputFilename(){
-	return getBaseName() + IDAINPUT_DATA_EXTENSION;
-}
-
-private String getOutputFilename(){
-	return getBaseName() + IDA_DATA_EXTENSION;
-}
-
-@Override
-public String[] getMathExecutableCommand() {
 	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.sundialsSolverExecutableProperty);
-	String inputFilename = getInputFilename();
-	String outputFilename = getOutputFilename();
-	return new String[] { executableName, inputFilename, outputFilename };
+	setMathExecutable(new MathExecutable(new String[] {executableName, inputFilename, outputFilename}));
 }
-
-
 }
Index: src/cbit/vcell/solver/ode/CVodeSolverStandalone.java
===================================================================
--- src/cbit/vcell/solver/ode/CVodeSolverStandalone.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/CVodeSolverStandalone.java	(revision 11980)
@@ -15,7 +15,7 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
+import cbit.vcell.math.MathDescription;
 import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.SolverException;
@@ -34,18 +34,20 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @exception cbit.vcell.solver.SolverException The exception description.
  */
-public CVodeSolverStandalone(SimulationTask simTask, java.io.File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
-	super(simTask, directory, sessionLog, bMessaging);
+public CVodeSolverStandalone(SimulationJob simulationJob, java.io.File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
+	super(simulationJob, directory, sessionLog, bMessaging);
 }
 /**
  *  This method takes the place of the old runUnsteady()...
  */
 protected void initialize() throws SolverException {
+	MathDescription mathDescription = getSimulationJob().getSimulation().getMathDescription();
 	
 	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_INIT);
 	super.initialize();
 
-	String inputFilename = getInputFilename();
+	String inputFilename = getBaseName() + CVODEINPUT_DATA_EXTENSION;
+	String outputFilename = getBaseName() + IDA_DATA_EXTENSION;
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING, SimulationMessage.MESSAGE_SOLVER_RUNNING_INPUT_FILE));
 	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_INPUT_FILE);
@@ -53,7 +55,7 @@
 	PrintWriter pw = null;
 	try {
 		pw = new java.io.PrintWriter(inputFilename);
-		CVodeFileWriter cvodeFileWriter = new CVodeFileWriter(pw, simTask, bMessaging);
+		CVodeFileWriter cvodeFileWriter = new CVodeFileWriter(pw, simulationJob, bMessaging);
 		cvodeFileWriter.write();
 	} catch (Exception e) {
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_ABORTED, SimulationMessage.solverAborted("CVODE solver could not generate input file: " + e.getMessage())));
@@ -67,22 +69,7 @@
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));	
 	
-	setMathExecutable(new MathExecutable(getMathExecutableCommand()));
-}
-
-private String getInputFilename(){
-	return getBaseName() + CVODEINPUT_DATA_EXTENSION;
-}
-
-private String getOutputFilename(){
-	return getBaseName() + IDA_DATA_EXTENSION;
-}
-
-@Override
-public String[] getMathExecutableCommand() {
 	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.sundialsSolverExecutableProperty);
-	String inputFilename = getInputFilename();
-	String outputFilename = getOutputFilename();
-	return new String[] { executableName, inputFilename, outputFilename };
+	setMathExecutable(new MathExecutable(new String[] {executableName, inputFilename, outputFilename}));
 }
 }
Index: src/cbit/vcell/solver/ode/OdeFileWriter.java
===================================================================
--- src/cbit/vcell/solver/ode/OdeFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/OdeFileWriter.java	(revision 11980)
@@ -29,7 +29,6 @@
 import cbit.vcell.math.VolVariable;
 import cbit.vcell.math.Event.Delay;
 import cbit.vcell.math.Event.EventAssignment;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Discontinuity;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
@@ -40,6 +39,7 @@
 import cbit.vcell.solver.ExplicitOutputTimeSpec;
 import cbit.vcell.solver.OutputTimeSpec;
 import cbit.vcell.solver.Simulation;
+import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationSymbolTable;
 import cbit.vcell.solver.SolverFileWriter;
 import cbit.vcell.solver.SolverTaskDescription;
@@ -60,8 +60,8 @@
 /**
  * OdeFileCoder constructor comment.
  */
-public OdeFileWriter(PrintWriter pw, SimulationTask simTask, boolean messaging) {
-	super(pw, simTask, messaging);
+public OdeFileWriter(PrintWriter pw, SimulationJob simJob, boolean messaging) {
+	super(pw, simJob, messaging);
 }
 
 public Discontinuity getSubsitutedAndFlattened(Discontinuity discontinuity, SymbolTable st) throws ExpressionException {		
@@ -85,7 +85,7 @@
 	varsSymbolTable.addVar(ReservedVariable.TIME); // SymbolTableEntry.index doesn't matter ... just code generating binding by var names not index.
 	int count = 0;
 	
-	Variable variables[] = simTask.getSimulationJob().getSimulationSymbolTable().getVariables();
+	Variable variables[] = simulationJob.getSimulationSymbolTable().getVariables();
 	
 	for (int i = 0; i < variables.length; i++) {
 		if (variables[i] instanceof VolVariable) {
@@ -113,7 +113,7 @@
 	// Get the vector of sensVariables, needed for creating SensStateVariables 
 	Vector<SensStateVariable> sensVars = new Vector<SensStateVariable>();
 	for (int i = 0; i < getStateVariableCount(); i++) {
-		if (simTask.getSimulation().getSolverTaskDescription().getSensitivityParameter() != null) {
+		if (simulationJob.getSimulation().getSolverTaskDescription().getSensitivityParameter() != null) {
 			if (getStateVariable(i) instanceof SensStateVariable) {
 				sensVars.addElement((SensStateVariable)getStateVariable(i));
 			}
@@ -143,14 +143,14 @@
 
 
 private void createStateVariables() throws Exception {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 
 	MathDescription mathDescription = simulation.getMathDescription();
 	SolverTaskDescription solverTaskDescription = simulation.getSolverTaskDescription();
 
 	// get Ode's from MathDescription and create ODEStateVariables
 	Enumeration<Equation> enum1 = mathDescription.getSubDomains().nextElement().getEquations();
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	while (enum1.hasMoreElements()) {
 		Equation equation = enum1.nextElement();
 		if (equation instanceof OdeEquation) {
@@ -203,7 +203,7 @@
 	createStateVariables();
 	createSymbolTable();
 	
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	
 	if (simulation.getSolverTaskDescription().getUseSymbolicJacobian()){
 		throw new RuntimeException("symbolic jacobian option not yet supported in interpreted Stiff solver");
@@ -257,7 +257,7 @@
 }
 
 private String writeEvents(HashMap<Discontinuity, String> discontinuityNameMap) throws ExpressionException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	
 	StringBuffer sb = new StringBuffer();
 	MathDescription mathDescription = simulation.getMathDescription();
Index: src/cbit/vcell/solver/ode/DefaultODESolver.java
===================================================================
--- src/cbit/vcell/solver/ode/DefaultODESolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/DefaultODESolver.java	(revision 11980)
@@ -28,7 +28,6 @@
 import cbit.vcell.math.SubDomain;
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VolVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.DefaultOutputTimeSpec;
@@ -65,9 +64,9 @@
  * is not to be performed...
  * @param simContext cbit.vcell.math.MathDescription
  */
-public DefaultODESolver(SimulationTask simTask, File directory, SessionLog sessionLog, int valueVectorCount)  throws SolverException {
-	super(simTask, directory, sessionLog);
-	if (simTask.getSimulation().isSpatial()) {
+public DefaultODESolver(SimulationJob simJob, File directory, SessionLog sessionLog, int valueVectorCount)  throws SolverException {
+	super(simJob, directory, sessionLog);
+	if (simulationJob.getSimulation().isSpatial()) {
 		throw new SolverException("Cannot use DefaultODESolver on spatial simulation");
 	}
 	fieldValueVectorCount = valueVectorCount;
@@ -108,7 +107,7 @@
  * This method was created in VisualAge.
  */
 private Vector<Variable> createIdentifiers() throws MathException, ExpressionException {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	// create list of possible identifiers (including reserved x,y,z,t)
 	Vector<Variable> identifiers = new Vector<Variable>();
@@ -154,7 +153,7 @@
 /**
  */
 private ODESolverResultSet createODESolverResultSet() throws ExpressionException {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	//
 	// create symbol table for binding expression
@@ -249,7 +248,7 @@
  * This method was created in VisualAge.
  */
 private Vector<StateVariable> createStateVariables() throws MathException, ExpressionException {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Simulation sim = simSymbolTable.getSimulation();
 	
 	Vector<StateVariable> stateVariables = new Vector<StateVariable>();
@@ -351,7 +350,7 @@
  * @return double
  */
 public double getProgress() {
-	Simulation sim = simTask.getSimulation();
+	Simulation sim = simulationJob.getSimulation();
 
 	double currTime = getCurrentTime();
 	TimeBounds timeBounds = sim.getSolverTaskDescription().getTimeBounds();
@@ -373,7 +372,7 @@
  * @see #setSensitivityParameter
  */
 public Constant getSensitivityParameter() {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	Constant origSensParam = simSymbolTable.getSimulation().getSolverTaskDescription().getSensitivityParameter();
 	//
@@ -426,7 +425,7 @@
  * @return The timeIndex property value.
  */
 protected SubDomain getSubDomain() {
-	return ((SubDomain) simTask.getSimulation().getMathDescription().getSubDomains().nextElement());
+	return ((SubDomain) simulationJob.getSimulation().getMathDescription().getSubDomains().nextElement());
 }
 
 
@@ -474,7 +473,7 @@
  * @exception SolverException The exception description.
  */
 protected void initialize() throws SolverException {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Simulation sim = simSymbolTable.getSimulation();
 	try {
 		// create a fast system if necessary
@@ -530,7 +529,7 @@
  */
 protected void integrate() throws SolverException, UserStopException, IOException {
 	try {
-		SolverTaskDescription taskDescription = simTask.getSimulation().getSolverTaskDescription();
+		SolverTaskDescription taskDescription = simulationJob.getSimulation().getSolverTaskDescription();
 		double timeStep = taskDescription.getTimeStep().getDefaultTimeStep();
 		fieldCurrentTime = taskDescription.getTimeBounds().getStartingTime();
 		// before computation begins, settle fast equilibrium
@@ -606,7 +605,7 @@
 		results.addRow (values);
 	}
 	//setSolverStatus(new SolverStatus (SolverStatus.SOLVER_RUNNING));
-	Simulation sim = simTask.getSimulation();
+	Simulation sim = simulationJob.getSimulation();
 	double t = getCurrentTime();
 	TimeBounds timeBounds = sim.getSolverTaskDescription().getTimeBounds();
 	double t0 = timeBounds.getStartingTime();
Index: src/cbit/vcell/solver/ode/AdamsMoultonFiveSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/AdamsMoultonFiveSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/AdamsMoultonFiveSolver.java	(revision 11980)
@@ -16,7 +16,6 @@
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.math.MathException;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.DefaultOutputTimeSpec;
 import cbit.vcell.solver.SimulationJob;
@@ -37,8 +36,8 @@
  * @param valueVectorCount int
  * @param temporaryVectorCount int
  */
-public AdamsMoultonFiveSolver(SimulationTask simTask, File directory, SessionLog sessionLog)  throws SolverException {
-	super(simTask, directory, sessionLog, 2, 5);
+public AdamsMoultonFiveSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog)  throws SolverException {
+	super(simulationJob, directory, sessionLog, 2, 5);
 }
 protected void initialize() throws SolverException {
 	super.initialize();
@@ -52,7 +51,7 @@
  */
 protected void integrate() throws SolverException, UserStopException, IOException {
 	try {
-		SolverTaskDescription taskDescription = simTask.getSimulation().getSolverTaskDescription();
+		SolverTaskDescription taskDescription = simulationJob.getSimulation().getSolverTaskDescription();
 		double timeStep = taskDescription.getTimeStep().getDefaultTimeStep();
 		fieldCurrentTime = taskDescription.getTimeBounds().getStartingTime();
 
Index: src/cbit/vcell/solver/ode/SundialsSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/SundialsSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/SundialsSolver.java	(revision 11980)
@@ -32,7 +32,6 @@
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VariableType;
 import cbit.vcell.math.VolVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.AnnotatedFunction;
@@ -62,9 +61,9 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @param simulation cbit.vcell.solver.Simulation
  */
-public SundialsSolver(SimulationTask simTask, File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
-	super(simTask, directory, sessionLog, bMessaging);
-	if (simTask.getSimulation().isSpatial()) {
+public SundialsSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog, boolean bMessaging) throws SolverException {
+	super(simulationJob, directory, sessionLog, bMessaging);
+	if (simulationJob.getSimulation().isSpatial()) {
 		throw new SolverException("Cannot use SundialsSolver on spatial simulation");
 	}
 }
@@ -94,7 +93,7 @@
 private StateVariable[] createStateVariables() throws MathException, ExpressionException {
 	Vector<StateVariable> stateVariables = new Vector<StateVariable>();
 	// get Ode's from MathDescription and create ODEStateVariables
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	MathDescription mathDescription = simSymbolTable.getSimulation().getMathDescription();
 	Enumeration<Equation> enum1 = ((SubDomain)mathDescription.getSubDomains().nextElement()).getEquations();
@@ -157,7 +156,7 @@
 	if (message.startsWith(PROGRESS_PREFIX)){
 		String progressString = message.substring(message.lastIndexOf(SEPARATOR)+1,message.indexOf("%"));
 		double progress = Double.parseDouble(progressString)/100.0;
-		TimeBounds timeBounds = simTask.getSimulation().getSolverTaskDescription().getTimeBounds();
+		TimeBounds timeBounds = simulationJob.getSimulation().getSolverTaskDescription().getTimeBounds();
 		double startTime = timeBounds.getStartingTime();
 		double endTime = timeBounds.getEndingTime();
 		setCurrentTime(startTime + (endTime-startTime)*progress);
@@ -188,7 +187,7 @@
 	//
 	// add appropriate Function columns to result set
 	//
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Function functions[] = simSymbolTable.getFunctions();
 	for (int i = 0; i < functions.length; i++){
 		if (SimulationSymbolTable.isFunctionSaved(functions[i])){
@@ -270,7 +269,7 @@
  * @return int
  */
 public Constant getSensitivityParameter() {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Constant origSensParam = simSymbolTable.getSimulation().getSolverTaskDescription().getSensitivityParameter();
 	//
 	// sensitivity parameter from solverTaskDescription will have the non-overridden nominal value.
@@ -427,7 +426,7 @@
 	//
 	// add appropriate Function columns to result set
 	//
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Vector<AnnotatedFunction> funcList = new Vector<AnnotatedFunction>();
 	
 	cbit.vcell.math.Function functions[] = simSymbolTable.getFunctions();
@@ -499,7 +498,7 @@
 		pw.println(IDA_DATA_IDENTIFIER);
 		pw.println(IDA_DATA_FORMAT_ID);
 		pw.println(ideDataFileName);
-		OutputTimeSpec outputTimeSpec = simTask.getSimulation().getSolverTaskDescription().getOutputTimeSpec();
+		OutputTimeSpec outputTimeSpec = simulationJob.getSimulation().getSolverTaskDescription().getOutputTimeSpec();
 		if (outputTimeSpec.isDefault()) {	
 			pw.println(KEEP_MOST + " " + ((DefaultOutputTimeSpec)outputTimeSpec).getKeepAtMost());
 		}		
Index: src/cbit/vcell/solver/ode/RungeKuttaTwoSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/RungeKuttaTwoSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/RungeKuttaTwoSolver.java	(revision 11980)
@@ -15,7 +15,6 @@
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.solver.*;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 /**
  * Insert the class' description here.
@@ -29,8 +28,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @param numVectors int
  */
-public RungeKuttaTwoSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
-	super(simTask, directory, sessionLog, 2, 2);
+public RungeKuttaTwoSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog) throws SolverException {
+	super(simulationJob, directory, sessionLog, 2, 2);
 }
 /**
  * Integrate over time step using the forward Euler method (1st order explicit)
Index: src/cbit/vcell/solver/ode/AdamsSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/AdamsSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/AdamsSolver.java	(revision 11980)
@@ -14,7 +14,6 @@
 
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.*;
 /**
  * Insert the class' description here.
@@ -31,8 +30,8 @@
  * @param valueVectorCount int
  * @param temporaryVectorCount int
  */
-public AdamsSolver(SimulationTask simTask, File directory, SessionLog sessionLog, int valueVectorCount, int workArrayCount)  throws SolverException {
-	super(simTask, directory, sessionLog, valueVectorCount);
+public AdamsSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog, int valueVectorCount, int workArrayCount)  throws SolverException {
+	super(simulationJob, directory, sessionLog, valueVectorCount);
 	fieldWorkArrayCount = workArrayCount;
 }
 protected void initialize() throws cbit.vcell.solver.SolverException {
Index: src/cbit/vcell/solver/ode/RungeKuttaFourSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/RungeKuttaFourSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/RungeKuttaFourSolver.java	(revision 11980)
@@ -15,7 +15,6 @@
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.solver.*;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 /**
  * Insert the class' description here.
@@ -29,8 +28,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @param numVectors int
  */
-public RungeKuttaFourSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
-	super(simTask, directory, sessionLog, 2, 4);
+public RungeKuttaFourSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog) throws SolverException {
+	super(simulationJob, directory, sessionLog, 2, 4);
 }
 /**
  * Integrate over time step using the forward Euler method (1st order explicit)
Index: src/cbit/vcell/solver/ode/RungeKuttaFehlbergSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/RungeKuttaFehlbergSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/RungeKuttaFehlbergSolver.java	(revision 11980)
@@ -16,7 +16,6 @@
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.math.MathException;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.DefaultOutputTimeSpec;
 import cbit.vcell.solver.SimulationJob;
@@ -46,8 +45,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @param numVectors int
  */
-public RungeKuttaFehlbergSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
-	super(simTask, directory, sessionLog, 3, 6);
+public RungeKuttaFehlbergSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog) throws SolverException {
+	super(simulationJob, directory, sessionLog, 3, 6);
 }
 public double calculateErrorTerm(int i) {
 	int I = getVariableIndex(i);
@@ -60,7 +59,7 @@
 		final double epsilon = DBL_EPSILON;
 		final double twentySixEpsilon = 26 * epsilon;
 		//
-		SolverTaskDescription taskDescription = simTask.getSimulation().getSolverTaskDescription();
+		SolverTaskDescription taskDescription = simulationJob.getSimulation().getSolverTaskDescription();
 		double startingTime = taskDescription.getTimeBounds().getStartingTime();
 		double endingTime = taskDescription.getTimeBounds().getEndingTime();
 		double relativeErrorTolerance = taskDescription.getErrorTolerance().getRelativeErrorTolerance();
Index: src/cbit/vcell/solver/ode/RungeKuttaSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/RungeKuttaSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/RungeKuttaSolver.java	(revision 11980)
@@ -14,7 +14,6 @@
 
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.*;
 /**
  * Insert the class' description here.
@@ -31,8 +30,8 @@
  * @param valueVectorCount int
  * @param temporaryVectorCount int
  */
-public RungeKuttaSolver(SimulationTask simTask, File directory, SessionLog sessionLog, int valueVectorCount, int workArrayCount)  throws SolverException {
-	super(simTask, directory, sessionLog, valueVectorCount);
+public RungeKuttaSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog, int valueVectorCount, int workArrayCount)  throws SolverException {
+	super(simulationJob, directory, sessionLog, valueVectorCount);
 	fieldWorkArrayCount = workArrayCount;
 }
 protected void initialize() throws cbit.vcell.solver.SolverException {
Index: src/cbit/vcell/solver/ode/IDAFileWriter.java
===================================================================
--- src/cbit/vcell/solver/ode/IDAFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/IDAFileWriter.java	(revision 11980)
@@ -28,7 +28,6 @@
 import cbit.vcell.matrix.MatrixException;
 import cbit.vcell.matrix.RationalExp;
 import cbit.vcell.matrix.RationalExpMatrix;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Discontinuity;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
@@ -45,20 +44,20 @@
 /**
  * OdeFileCoder constructor comment.
  */
-public IDAFileWriter(PrintWriter pw, SimulationTask simTask) {
-	this(pw, simTask, false);
+public IDAFileWriter(PrintWriter pw, SimulationJob simJob) {
+	this(pw, simJob, false);
 }
 
 
-public IDAFileWriter(PrintWriter pw, SimulationTask simTask, boolean bUseMessaging) {
-	super(pw, simTask, bUseMessaging);
+public IDAFileWriter(PrintWriter pw, SimulationJob simJob, boolean bUseMessaging) {
+	super(pw, simJob, bUseMessaging);
 }
 /**
  * Insert the method's description here.
  * Creation date: (3/8/00 10:31:52 PM)
  */
 protected String writeEquations(HashMap<Discontinuity, String> discontinuityNameMap) throws MathException, ExpressionException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 		
 	StringBuffer sb = new StringBuffer();
 	MathDescription mathDescription = simulation.getMathDescription();
@@ -66,7 +65,7 @@
 		//
 		// define vector of original variables
 		//
-		SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+		SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 		
 		CompartmentSubDomain subDomain = (CompartmentSubDomain)mathDescription.getSubDomains().nextElement();
 		FastSystem fastSystem = subDomain.getFastSystem();
Index: src/cbit/vcell/solver/ode/ForwardEulerSolver.java
===================================================================
--- src/cbit/vcell/solver/ode/ForwardEulerSolver.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/ForwardEulerSolver.java	(revision 11980)
@@ -13,8 +13,6 @@
 import java.io.*;
 
 import org.vcell.util.SessionLog;
-
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.*;
 /**
@@ -29,8 +27,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @param numVectors int
  */
-public ForwardEulerSolver(SimulationTask simTask, File directory, SessionLog sessionLog)  throws SolverException {
-	super(simTask, directory, sessionLog, 2);
+public ForwardEulerSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog)  throws SolverException {
+	super(simulationJob, directory, sessionLog, 2);
 }
 /**
  * Integrate over time step using the forward Euler method (1st order explicit)
Index: src/cbit/vcell/solver/ode/CVodeFileWriter.java
===================================================================
--- src/cbit/vcell/solver/ode/CVodeFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solver/ode/CVodeFileWriter.java	(revision 11980)
@@ -16,7 +16,6 @@
 import cbit.vcell.math.MathException;
 import cbit.vcell.math.MathUtilities;
 import cbit.vcell.math.ReservedVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Discontinuity;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
@@ -29,12 +28,12 @@
  */
 public class CVodeFileWriter extends OdeFileWriter {
 
-public CVodeFileWriter(PrintWriter pw, SimulationTask simTask) {
-	super(pw, simTask, false);
+public CVodeFileWriter(PrintWriter pw, SimulationJob simJob) {
+	super(pw, simJob, false);
 }
 	
-public CVodeFileWriter(PrintWriter pw, SimulationTask simTask, boolean bUseMessaging) {
-	super(pw, simTask, bUseMessaging);
+public CVodeFileWriter(PrintWriter pw, SimulationJob simJob, boolean bUseMessaging) {
+	super(pw, simJob, bUseMessaging);
 }
 
 /**
Index: src/cbit/vcell/messaging/db/SimulationJobDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 11981)
+++ src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 11980)
@@ -222,17 +222,16 @@
  * @param user java.lang.String
  * @param imageName java.lang.String
  */
-public SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int jobIndex, int taskID, boolean lockRowForUpdate) throws SQLException {
+public SimulationJobStatus getSimulationJobStatus(Connection con, KeyValue simKey, int index, boolean lockRowForUpdate) throws SQLException {
 	//log.print("SchedulerDbDriver.getSimulationJobStatus(SimKey="+simKey+")");
 	String sql = new String(standardJobStatusSQL);	
 	sql += " AND " + simTable.id.getQualifiedColName() + " = " + simKey;
-	sql += " AND " + jobTable.jobIndex.getQualifiedColName() + " = " + jobIndex;
-	sql += " AND " + jobTable.taskID.getQualifiedColName() + " = " + taskID;
+	sql += " AND " + jobTable.jobIndex.getQualifiedColName() + " = " + index;
 		
 	if (lockRowForUpdate){
 		sql += " FOR UPDATE OF " + jobTable.getTableName() + ".id";
 	}
-//	log.print(sql);
+	//log.print(sql);
 	Statement stmt = con.createStatement();
 	SimulationJobStatus simJobStatus = null;
 	try {
@@ -243,41 +242,10 @@
 	} finally {
 		stmt.close();
 	}
-	log.print("retrieved simJobStatus = "+simJobStatus);
 	return simJobStatus;
 }
 
-/**
- * This method was created in VisualAge.
- * @return int
- * @param user java.lang.String
- * @param imageName java.lang.String
- */
-public SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, int jobIndex, boolean lockRowForUpdate) throws SQLException {
-	//log.print("SchedulerDbDriver.getSimulationJobStatus(SimKey="+simKey+")");
-	String sql = new String(standardJobStatusSQL);	
-	sql += " AND " + simTable.id.getQualifiedColName() + " = " + simKey;
-	sql += " AND " + jobTable.jobIndex.getQualifiedColName() + " = " + jobIndex;
-		
-	if (lockRowForUpdate){
-		sql += " FOR UPDATE OF " + jobTable.getTableName() + ".id";
-	}
-	//log.print(sql);
-	Statement stmt = con.createStatement();
-	ArrayList<SimulationJobStatus> simulationJobStatusArrayList = new ArrayList<SimulationJobStatus>();
-	try {
-		ResultSet rset = stmt.executeQuery(sql);
-		while (rset.next()) {
-			SimulationJobStatus simJobStatus = jobTable.getSimulationJobStatus(rset);
-			simulationJobStatusArrayList.add(simJobStatus);
-		}
-	} finally {
-		stmt.close();
-	}
-	return simulationJobStatusArrayList.toArray(new SimulationJobStatus[0]);
-}
 
-
 /**
  * Insert the method's description here.
  * Creation date: (9/3/2003 8:59:46 AM)
@@ -409,7 +377,7 @@
 	String sql = "INSERT INTO " + jobTable.getTableName() + " " + jobTable.getSQLColumnList() + " VALUES " 
 		+ jobTable.getSQLValueList(key, simulationJobStatus);
 
-	log.print(sql);			
+	//log.print(sql);			
 	executeUpdate(con,sql);
 }
 
@@ -429,8 +397,7 @@
 	
 	String sql = "UPDATE " + jobTable.getTableName() +	" SET "  + jobTable.getSQLUpdateList(simulationJobStatus) + 
 			" WHERE " + jobTable.simRef + "=" + simulationJobStatus.getVCSimulationIdentifier().getSimulationKey() +
-			" AND " + jobTable.jobIndex + "=" + simulationJobStatus.getJobIndex() +
-			" AND " + jobTable.taskID + "=" + simulationJobStatus.getTaskID();
+			" AND " + jobTable.jobIndex + "=" + simulationJobStatus.getJobIndex();
 	//log.print(sql);			
 	executeUpdate(con,sql);
 }
Index: src/cbit/vcell/messaging/WorkerMessaging.java
===================================================================
--- src/cbit/vcell/messaging/WorkerMessaging.java	(revision 11981)
+++ src/cbit/vcell/messaging/WorkerMessaging.java	(revision 11980)
@@ -153,7 +153,7 @@
 
 	// have to keep sending the messages because it's important
 	try {
-		log.print("sendComplete(" + currentTask.getSimulationJobID() + ")");
+		log.print("sendComplete(" + currentTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendCompleted(workerEventSession, this, currentTask, ManageUtils.getHostName(),  progress, timeSec, simulationMessage);
 		
 		lastMsgTimeStamp = System.currentTimeMillis();
@@ -173,7 +173,7 @@
 	}
 		
 	try {
-		log.print("sendFailure(" + currentTask.getSimulationJobID() + "," + failureMessage +")");
+		log.print("sendFailure(" + currentTask.getSimulationJobIdentifier() + "," + failureMessage +")");
 		WorkerEventMessage.sendFailed(workerEventSession, this, currentTask, ManageUtils.getHostName(), failureMessage);
 		
 		lastMsgTimeStamp = System.currentTimeMillis();
@@ -195,7 +195,7 @@
 	try {
 		long t = System.currentTimeMillis();
 		if (bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE) { // don't send data message too frequently
-			log.print("sendNewData(" + currentTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");		
+			log.print("sendNewData(" + currentTask.getSimulationJobIdentifier() + "," + (progress * 100) + "%," + timeSec + ")");		
 			WorkerEventMessage.sendNewData(workerEventSession, this, currentTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
 		
 			lastMsgTimeStamp = System.currentTimeMillis();
@@ -220,7 +220,7 @@
 		long t = System.currentTimeMillis();
 	if (!bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE 
 		|| ((int)(progress * 100)) % 25 == 0) { // don't send progress message too frequently
-			log.print("sendProgress(" + currentTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");
+			log.print("sendProgress(" + currentTask.getSimulationJobIdentifier() + "," + (progress * 100) + "%," + timeSec + ")");
 			WorkerEventMessage.sendProgress(workerEventSession, this, currentTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
 			
 			lastMsgTimeStamp = System.currentTimeMillis();
@@ -242,7 +242,7 @@
 	}
 	
 	try {
-		log.print("sendStarting(" + currentTask.getSimulationJobID() + ")");
+		log.print("sendStarting(" + currentTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendStarting(workerEventSession, this, currentTask, ManageUtils.getHostName(), startingMessage);
 		
 		lastMsgTimeStamp = System.currentTimeMillis();
@@ -263,7 +263,7 @@
 
 	// have to keep sending the messages because it's important
 	try {
-		log.print("sendWorkerAlive(" + currentTask.getSimulationJobID() + ")");
+		log.print("sendWorkerAlive(" + currentTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendWorkerAlive(workerEventSession, this, currentTask, ManageUtils.getHostName(), SimulationMessage.MESSAGE_WORKEREVENT_WORKERALIVE);
 		
 		lastMsgTimeStamp = System.currentTimeMillis();
Index: src/cbit/vcell/messaging/JmsUtils.java
===================================================================
--- src/cbit/vcell/messaging/JmsUtils.java	(revision 11981)
+++ src/cbit/vcell/messaging/JmsUtils.java	(revision 11980)
@@ -162,4 +162,7 @@
 }
 
 
+public static final String getQueueBNGReq() {
+	return PropertyLoader.getRequiredProperty(PropertyLoader.jmsBNGRequestQueue);
 }
+}
Index: src/cbit/vcell/messaging/WorkerEventMessage.java
===================================================================
--- src/cbit/vcell/messaging/WorkerEventMessage.java	(revision 11981)
+++ src/cbit/vcell/messaging/WorkerEventMessage.java	(revision 11980)
@@ -9,8 +9,6 @@
  */
 
 package cbit.vcell.messaging;
-import java.sql.SQLException;
-
 import cbit.vcell.messaging.server.SimulationDispatcher;
 import cbit.vcell.messaging.server.SimulationTask;
 import javax.jms.*;
@@ -53,9 +51,8 @@
  * Insert the method's description here.
  * Creation date: (12/31/2003 12:53:34 PM)
  * @param param javax.jms.Message
- * @throws SQLException 
  */
-public WorkerEventMessage(SimulationDispatcher dispatcher, Message message0) throws JMSException, DataAccessException, SQLException {
+public WorkerEventMessage(SimulationDispatcher dispatcher, Message message0) throws JMSException, DataAccessException {
 	parseMessage(dispatcher, message0);
 }
 
@@ -74,9 +71,8 @@
  * Insert the method's description here.
  * Creation date: (2/5/2004 2:19:48 PM)
  * @param message javax.jms.Message
- * @throws SQLException 
  */
-private void parseMessage(SimulationDispatcher dispatcher, Message message) throws JMSException, SQLException {
+private void parseMessage(SimulationDispatcher dispatcher, Message message) throws JMSException {
 	if (message == null) {
 		throw new RuntimeException("Null message");
 	}	
Index: src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java	(revision 11980)
@@ -12,9 +12,9 @@
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.server.AdminDatabaseServerXA;
+import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 
 import java.sql.Connection;
 import java.util.Date;
@@ -44,12 +44,12 @@
  * updateDispatchedStatus method comment.
  */
 public SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-		String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage startMsg) 
+		String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) 
 			throws DataAccessException, UpdateSynchronizationException {
 
 	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 		
-		SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, taskID, startMsg);
+		SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, startMsg);
 
 		newJobStatus = adminDbXA.updateSimulationJobStatus(con, oldJobStatus, newJobStatus);
 
@@ -66,11 +66,11 @@
  * @param simKey cbit.sql.KeyValue
  */
 public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, String hostName, SchedulerStatus status, SimulationMessage solverMsg) 
+		VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) 
 			throws DataAccessException, UpdateSynchronizationException {
 	if (oldJobStatus == null ||  oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {		
 
-		SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, taskID, hostName, status, solverMsg);
+		SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, hostName, status, solverMsg);
 
 		if (oldJobStatus == null) {
 			newJobStatus = adminDbXA.insertSimulationJobStatus(con, newJobStatus);
@@ -89,11 +89,11 @@
  * updateLatestUpdateDate method comment.
  */
 public void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
+		VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 
 	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 
-		SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, taskID, simulationMessage);
+		SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, simulationMessage);
 		
 		if (newJobStatus != null) {
 			adminDbXA.updateSimulationJobStatus(con, oldJobStatus, newJobStatus);
@@ -109,7 +109,7 @@
  * @param simKey cbit.sql.KeyValue
  */
 public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDb, Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationQueueID queueID, boolean firstSubmit) 
+		VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) 
 			throws DataAccessException, UpdateSynchronizationException {
 	if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone() || oldJobStatus.getSchedulerStatus().isWaiting()) {	
 		// no job for the same simulation running						
@@ -143,13 +143,13 @@
  * updateRunningStatus method comment.
  */
 public SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, String hostName, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, boolean hasData, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+		VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 
 		SimulationJobStatus newJobStatus = getNewStatus_updateRunningStatus(oldJobStatus, hostName, vcSimID, jobIndex, hasData, solverMsg);
 
 		if (oldJobStatus == newJobStatus) { // running statuses, don't always store into the database		
-			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, taskID, solverMsg);
+			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, solverMsg);
 			return oldJobStatus;
 		} else {
 			newJobStatus = adminDbXA.updateSimulationJobStatus(con, oldJobStatus, newJobStatus);
Index: src/cbit/vcell/messaging/server/SimulationTask.java
===================================================================
--- src/cbit/vcell/messaging/server/SimulationTask.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/SimulationTask.java	(revision 11980)
@@ -9,9 +9,7 @@
  */
 
 package cbit.vcell.messaging.server;
-import org.vcell.util.Compare;
 import org.vcell.util.ISize;
-import org.vcell.util.Matchable;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 
@@ -30,7 +28,7 @@
  * Creation date: (10/24/2001 10:44:09 PM)
  * @author: Jim Schaff
  */
-public class SimulationTask implements java.io.Serializable, Matchable {
+public class SimulationTask implements java.io.Serializable {
 	private SimulationJob simulationJob = null;
 	private int taskID = 0;
 	private String computeResource = null;
@@ -131,7 +129,7 @@
  * Creation date: (10/24/2001 10:45:58 PM)
  * @return cbit.vcell.solver.Simulation
  */
-public String getSimulationJobID() {
+public String getSimulationJobIdentifier() {
 	return simulationJob.getSimulationJobID();
 }
 
@@ -177,31 +175,10 @@
  * @return java.lang.String
  */
 public String toString() {
-	return "[" + getSimulationJobID() + "," + taskID + "]";
+	return "[" + getSimulationJobIdentifier() + "," + taskID + "]";
 }
 
 public String getComputeResource() {
 	return computeResource;
 }
-
-public boolean compareEqual(Matchable obj) {
-	if (obj instanceof SimulationTask){
-		SimulationTask other = (SimulationTask)obj;
-		if (!Compare.isEqual(getSimulationJob(), other.getSimulationJob())){
-			return false;
-		}
-		if (!Compare.isEqual(getTaskID(), other.getTaskID())){
-			return false;
-		}
-		if (!Compare.isEqualOrNull(getComputeResource(), other.getComputeResource())){
-			return false;
-		}
-		return true;
-	}
-	return false;
 }
-
-public Simulation getSimulation() {
-	return getSimulationJob().getSimulation();
-}
-}
Index: src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java	(revision 11980)
@@ -10,7 +10,6 @@
 
 package cbit.vcell.messaging.server;
 import cbit.htc.PbsJobID;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
@@ -18,8 +17,6 @@
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
 import cbit.vcell.messaging.db.SimulationExecutionStatus;
-
-import java.sql.SQLException;
 import java.util.Date;
 
 import org.vcell.util.DataAccessException;
@@ -48,7 +45,7 @@
  * updateDispatchedStatus method comment.
  */
 SimulationJobStatus getNewStatus_updateDispatchedStatus(SimulationJobStatus oldJobStatus, String computeHost, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
+		int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
 
 	// new queue status
 	SimulationQueueEntryStatus oldQueueStatus = oldJobStatus.getSimulationQueueEntryStatus();
@@ -60,7 +57,7 @@
 
 	// new job status
 	SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), vcSimID, jobIndex, oldJobStatus.getSubmitDate(), SchedulerStatus.DISPATCHED,
-			taskID, startMsg, newQueueStatus, newExeStatus);
+			oldJobStatus.getTaskID(), startMsg, newQueueStatus, newExeStatus);
 
 	return newJobStatus;
 }
@@ -71,7 +68,7 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-SimulationJobStatus getNewStatus_updateEndStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimID, int jobIndex, int taskID,
+SimulationJobStatus getNewStatus_updateEndStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimID, int jobIndex, 
 		String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 
 	// new queue status
@@ -106,7 +103,7 @@
 
 	// new job status
 	SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, 
-		oldJobStatus == null ? null : oldJobStatus.getSubmitDate(), status, taskID, solverMsg,
+		oldJobStatus == null ? null : oldJobStatus.getSubmitDate(), status, oldJobStatus == null ? 0 : oldJobStatus.getTaskID(), solverMsg,
 		newQueueStatus, newExeStatus);
 	
 	return newJobStatus;
@@ -119,7 +116,7 @@
  * @param simKey cbit.sql.KeyValue
  */
 SimulationJobStatus getNewStatus_updateLatestUpdateDate(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
+		int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 
 	SimulationExecutionStatus oldExeStatus = oldJobStatus.getSimulationExecutionStatus();
 	if (oldExeStatus == null) {
@@ -190,10 +187,10 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus[] getSimulationJobStatusArray(SimulationDatabase simDb, KeyValue simKey, int jobIndex) throws DataAccessException {
+public SimulationJobStatus getSimulationJobStatus(AdminDatabaseServer adminDb, KeyValue simKey, int jobIndex) throws DataAccessException {
 	try {		
-		return simDb.getSimulationJobStatusArray(simKey, jobIndex);
-	} catch (SQLException ex) {
+		return adminDb.getSimulationJobStatus(simKey, jobIndex);
+	} catch (java.rmi.RemoteException ex) {
 		throw new DataAccessException("updateDispatchedStatus " + ex.getMessage());
 	}
 }
@@ -204,22 +201,22 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus,	SimulationDatabase simDb, String computeHost, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus,	AdminDatabaseServer adminDb, String computeHost, 
+		VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
 	try {
 
 		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 			
-			SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, taskID, startMsg);
+			SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, startMsg);
 
-			newJobStatus = simDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+			newJobStatus = adminDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 
 			return newJobStatus;
 		}
 
 		return oldJobStatus;
 		
-	} catch (SQLException ex) {
+	} catch (java.rmi.RemoteException ex) {
 		throw new DataAccessException("updateEndStatus " + ex.getMessage());
 	}
 }
@@ -230,20 +227,20 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
+		int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 	try {
 		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {		
 
-			SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, taskID, hostName, status, solverMsg);
+			SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, hostName, status, solverMsg);
 			
-			newJobStatus = simDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+			newJobStatus = adminDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 
 			return newJobStatus;
 		}
 
 		return oldJobStatus;
-	} catch (SQLException ex) {
+	} catch (java.rmi.RemoteException ex) {
 		throw new DataAccessException("updateEndStatus " + ex.getMessage());
 	}
 }
@@ -254,18 +251,18 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
+public void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
+		int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 	try {
 		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 
-			SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, taskID, simulationMessage);
+			SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, simulationMessage);
 			
 			if (newJobStatus != null) {
-				simDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+				adminDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 			}
 		}
-	} catch (SQLException ex) {
+	} catch (java.rmi.RemoteException ex) {
 		throw new DataAccessException("updateLatestUpdateDate " + ex.getMessage());
 	}
 }
@@ -276,23 +273,23 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, String hostName, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String hostName, 
+		VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException {
 	try {
 		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
 
 			SimulationJobStatus newJobStatus = getNewStatus_updateRunningStatus(oldJobStatus, hostName, vcSimID, jobIndex, hasData, solverMsg);
 			if (oldJobStatus == newJobStatus) { // running statuses, don't always store into the database				
-				updateLatestUpdateDate(oldJobStatus, simDb, vcSimID, jobIndex, taskID, solverMsg);
+				updateLatestUpdateDate(oldJobStatus, adminDb, vcSimID, jobIndex, solverMsg);
 				return oldJobStatus;
 			} else {
-				newJobStatus = simDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+				newJobStatus = adminDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
 				return newJobStatus;
 			}
 		}
 
 		return oldJobStatus;
-	} catch (SQLException ex) {
+	} catch (java.rmi.RemoteException ex) {
 		throw new DataAccessException("updateRunningStatus " + ex.getMessage());
 	}		
 }
Index: src/cbit/vcell/messaging/server/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/messaging/server/SimulationDispatcher.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/SimulationDispatcher.java	(revision 11980)
@@ -31,7 +31,6 @@
 
 import cbit.vcell.solver.Simulation;
 
-import java.sql.SQLException;
 import java.util.Date;
 import java.util.Map;
 import java.util.HashMap;
@@ -42,8 +41,7 @@
 import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.field.FieldFunctionArguments;
 import cbit.vcell.field.FieldUtilities;
-import cbit.vcell.modeldb.AdminDBTopLevel;
-import cbit.vcell.modeldb.DbDriver;
+import cbit.vcell.modeldb.LocalAdminDbServer;
 import cbit.sql.ConnectionFactory;
 import cbit.sql.KeyFactory;
 import cbit.sql.DBCacheTable;
@@ -77,7 +75,7 @@
 	private ConnectionFactory conFactory = null;
 	private KeyFactory keyFactory = null;
 	private JmsClientMessaging clientMessaging = null;
-	private AdminDBTopLevel adminDbTopLevel = null;
+	private LocalAdminDbServer adminDbServer = null;
 	
 	private boolean bStop = false;		
 	private SimulationDispatcherMessaging dispatcherMessaging = null;
@@ -93,16 +91,16 @@
  * Scheduler constructor comment.
  */
 public SimulationDispatcher(int serviceOrdinal, String logdir) throws Exception {	
-	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), ServiceType.DISPATCH, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);	
+	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), 
+			ServiceType.DISPATCH, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);	
 	initLog(logdir);
 
 	log = new StdoutSessionLog(serviceInstanceStatus.getID());
 	
 	conFactory = new OraclePoolingConnectionFactory(log);
 	keyFactory = new OracleKeyFactory();		
-	DbDriver.setKeyFactory(keyFactory);
-	adminDbTopLevel = new AdminDBTopLevel(conFactory,log);
-	rsCrawler = new ResultSetCrawler(conFactory, adminDbTopLevel, log);	
+	adminDbServer = new LocalAdminDbServer(conFactory,keyFactory,log);
+	rsCrawler = new ResultSetCrawler(conFactory, adminDbServer, log);	
 
 	dispatcherMessaging = new SimulationDispatcherMessaging(this, conFactory, keyFactory, log);	
 }
@@ -257,9 +255,8 @@
  * Creation date: (2/3/2004 8:34:36 AM)
  * @return cbit.vcell.messaging.SimulationTask
  * @param simKey cbit.sql.KeyValue
- * @throws SQLException 
  */
-public SimulationTask getSimulationTask(SimulationJobStatus jobStatus) throws DataAccessException, JMSException, SQLException {
+public SimulationTask getSimulationTask(SimulationJobStatus jobStatus) throws DataAccessException, JMSException {
 	VCSimulationIdentifier vcSimID = jobStatus.getVCSimulationIdentifier();
 	User user = getUser(vcSimID.getSimulationKey(), null);				
 	Simulation sim = getSimulation(user, vcSimID.getSimulationKey());
@@ -274,9 +271,8 @@
  * Creation date: (6/3/2003 2:56:43 PM)
  * @return cbit.vcell.server.User
  * @param simKey cbit.sql.KeyValue
- * @throws SQLException 
  */
-public User getUser(KeyValue simKey, String username) throws DataAccessException, SQLException {
+public User getUser(KeyValue simKey, String username) throws DataAccessException {
 	User user = null;
 
 	synchronized(simUserMap) {
@@ -288,9 +284,9 @@
 			
 		if (user == null) {
 			if (username != null) {
-				user = adminDbTopLevel.getUser(username,true);
+				user = adminDbServer.getUser(username);
 			} else {
-				user = adminDbTopLevel.getUserFromSimulationKey(simKey,true);
+				user = adminDbServer.getUserFromSimulationKey(simKey);
 			}
 			if (user != null) {
 				simUserMap.put(simKey, user);
@@ -339,7 +335,7 @@
 	
 	try {
 		workerEventMessage = new WorkerEventMessage(this, receivedMsg);
-	} catch (Exception ex) {
+	} catch (RuntimeException ex) {
 		// parse error, wrong message
 		log.exception(ex);
 		return;
@@ -360,7 +356,7 @@
 		return;
 	}		
 	KeyValue simKey = vcSimDataID.getSimulationKey();
-	SimulationJobStatus oldJobStatus = adminDbXA.getSimulationJobStatus(con, simKey, jobIndex, taskID);	
+	SimulationJobStatus oldJobStatus = adminDbXA.getSimulationJobStatus(con, simKey, jobIndex);	
 	
 	if (oldJobStatus == null || taskID != oldJobStatus.getTaskID() || oldJobStatus.getSchedulerStatus().isDone()){
 		log.print("Outdated message: taskID=" + taskID + "::" + oldJobStatus);
@@ -371,14 +367,14 @@
 	
 	if (workerEvent.isAcceptedEvent()) {
 		if (!oldJobStatus.getSchedulerStatus().isRunning()) {			
-			newJobStatus = updateDispatchedStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, taskID, workerEvent.getSimulationMessage());
+			newJobStatus = updateDispatchedStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 		
 	} else if (workerEvent.isStartingEvent()) {
 		// only update database when the job event changes from started to runinng. The later progress event will not be recorded.
 		SimulationMessage startMsg = workerEvent.getSimulationMessage();
 		if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
-			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, taskID, false, startMsg);
+			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, false, startMsg);
 		} else if (oldJobStatus.getSchedulerStatus().isRunning()) {
 			newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), oldJobStatus.getVCSimulationIdentifier(), oldJobStatus.getJobIndex(), oldJobStatus.getSubmitDate(), 
 				oldJobStatus.getSchedulerStatus(), oldJobStatus.getTaskID(), startMsg, oldJobStatus.getSimulationQueueEntryStatus(), oldJobStatus.getSimulationExecutionStatus());
@@ -387,27 +383,27 @@
 	} else if (workerEvent.isNewDataEvent()) {
 		if (workerEvent.getTimePoint() != null) {
 			dataMoved(vcSimDataID, workerEvent.getUser(), workerEvent.getTimePoint().doubleValue());
-			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, taskID, true, workerEvent.getSimulationMessage());
+			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, true, workerEvent.getSimulationMessage());
 		}
 			
 	} else if (workerEvent.isProgressEvent()) {
 		newJobStatus = oldJobStatus;
 		if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
-			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, taskID, false, workerEvent.getSimulationMessage());
+			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, false, workerEvent.getSimulationMessage());
 		} else {
-			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, taskID, workerEvent.getSimulationMessage());
+			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 		
 	} else if (workerEvent.isCompletedEvent()) {			
-		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, taskID, hostName, SchedulerStatus.COMPLETED, workerEvent.getSimulationMessage());
+		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SchedulerStatus.COMPLETED, workerEvent.getSimulationMessage());
 
 	} else if (workerEvent.isFailedEvent()) {						
 		SimulationMessage failMsg = workerEvent.getSimulationMessage();
-		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, taskID, hostName, SchedulerStatus.FAILED, failMsg);	
+		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SchedulerStatus.FAILED, failMsg);	
 			
 	} else if (workerEvent.isWorkerAliveEvent()) {
 		if (oldJobStatus.getSchedulerStatus().isRunning()) {
-			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, taskID, workerEvent.getSimulationMessage());
+			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 	}
 
@@ -467,9 +463,9 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-private SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
+private SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateDispatchedStatus[" + vcSimID + "][" + jobIndex + "]");
-	return dispatcherDbManager.updateDispatchedStatus(oldJobStatus, adminDbXA, con, computeHost, vcSimID, jobIndex, taskID, startMsg);
+	return dispatcherDbManager.updateDispatchedStatus(oldJobStatus, adminDbXA, con, computeHost, vcSimID, jobIndex, startMsg);
 }
 
 
@@ -478,9 +474,9 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateEndStatus[" + vcSimID + "][" + jobIndex + "]");
-	return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, taskID, hostName, status, solverMsg);
+	return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, hostName, status, solverMsg);
 }
 
 
@@ -490,9 +486,9 @@
  * @param simKey cbit.sql.KeyValue
  */
 private void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
+		VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateLatestUpdateDate[" + vcSimID + "][" + jobIndex + "]");
-	dispatcherDbManager.updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, taskID, simulationMessage);
+	dispatcherDbManager.updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, simulationMessage);
 }
 
 
@@ -501,9 +497,9 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationQueueID queueID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateQueueStatus[" + vcSimID + "][" + jobIndex + "]");
-	return dispatcherDbManager.updateQueueStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, taskID, queueID, firstSubmit);		// update SimulationJobTable
+	return dispatcherDbManager.updateQueueStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, queueID, taskID, firstSubmit);		// update SimulationJobTable
 }
 
 
@@ -512,8 +508,8 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-private SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, String hostName, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException {
+private SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, String hostName, VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateExeRunningStatus[" + vcSimID + "][" + jobIndex + "]");
-	return dispatcherDbManager.updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimID, jobIndex, taskID, hasData, solverMsg);
+	return dispatcherDbManager.updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimID, jobIndex, hasData, solverMsg);
 }
 }
Index: src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java	(revision 11980)
@@ -15,12 +15,12 @@
 import org.vcell.util.document.VCellServerID;
 
 import cbit.vcell.messaging.db.SimulationJobStatus;
+import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 
 /**
  * Insert the type's description here.
@@ -35,4 +35,34 @@
 	super();
 }
 
+/**
+ * Insert the method's description here.
+ * Creation date: (5/28/2003 3:39:37 PM)
+ * @param simKey cbit.sql.KeyValue
+ */
+public SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
+	try {
+		if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone()) {	
+			int taskID = 0;
+			VCellServerID serverID = VCellServerID.getSystemServerID();
+			if (oldJobStatus != null) {
+				taskID = oldJobStatus.getTaskID() + 1;
+			}
+			// no job for the same simulation running				
+			// update the job status in the database and local memory
+			SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimID, jobIndex, null, SchedulerStatus.DISPATCHED, taskID, startMsg, 
+				new SimulationQueueEntryStatus(null, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_NULL), null);
+				
+			if (oldJobStatus == null) {
+				newJobStatus = adminDb.insertSimulationJobStatus(newJobStatus);
+			} else {
+				newJobStatus = adminDb.updateSimulationJobStatus(oldJobStatus, newJobStatus);
+			}
+			return newJobStatus;
+		}
+		return oldJobStatus;
+	} catch (java.rmi.RemoteException ex) {
+		throw new DataAccessException("updateDispatchedStatus " + ex.getMessage());
+	}
 }
+}
Index: src/cbit/vcell/messaging/server/SimulationWorker.java
===================================================================
--- src/cbit/vcell/messaging/server/SimulationWorker.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/SimulationWorker.java	(revision 11980)
@@ -22,7 +22,7 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.document.KeyValue;
 
-import cbit.vcell.message.server.pbs.PbsProxyLocal;
+import cbit.htc.PBSUtils;
 import cbit.vcell.messaging.JmsUtils;
 import cbit.vcell.messaging.MessagePropertyNotFoundException;
 import cbit.vcell.mongodb.VCMongoMessage;
@@ -120,7 +120,7 @@
 //}
 
 private void doSolverJob(File userdir) throws SolverException {
-	currentSolver = cbit.vcell.solver.SolverFactory.createSolver(log,userdir,currentTask, true);
+	currentSolver = cbit.vcell.solver.SolverFactory.createSolver(log,userdir,currentTask.getSimulationJob(), true);
 	currentSolver.addSolverListener(this);
 	currentSolver.startSolver();
 	
@@ -178,7 +178,7 @@
 		int serviceOrdinal = Integer.parseInt(args[1]);	
 		
 		if (args[0].equalsIgnoreCase("-pbs")) { // submit everything to PBS
-			new PbsProxyLocal().checkServerStatus();
+			PBSUtils.checkServerStatus();
 			workerType = ServiceType.PBSCOMPUTE;
 			VCMongoMessage.serviceStartup(ServiceName.pbsWorker, new Integer(serviceOrdinal), args);
 		} else if (args[0].equalsIgnoreCase("-local")) { // run everything locally
@@ -233,7 +233,7 @@
  * Creation date: (12/9/2003 8:07:04 AM)
  */
 private void doPBSJob(File userdir) throws XmlParseException, SolverException, JMSException {
-	currentSolver = new PBSSolver(new PbsProxyLocal(), currentTask, userdir,log);
+	currentSolver = new PBSSolver(currentTask, userdir,log);
 	currentSolver.addSolverListener(this);
 	currentSolver.startSolver();
 }
Index: src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java	(revision 11980)
@@ -28,21 +28,21 @@
  */
 public interface MessagingDispatcherDbManager extends DispatcherDbManager {
 	SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-			String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException;
+			String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
 	SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
 	void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException;
 
 
 	SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDb, Connection con, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationQueueID queueID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException;
 
 
 	SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, String hostName, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException;
 }
Index: src/cbit/vcell/messaging/server/DispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/DispatcherDbManager.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/DispatcherDbManager.java	(revision 11980)
@@ -13,9 +13,9 @@
 import org.vcell.util.document.KeyValue;
 
 import cbit.vcell.solver.VCSimulationIdentifier;
-import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
+import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.SimulationMessage;
 
@@ -25,21 +25,21 @@
  * @author: Fei Gao
  */
 public interface DispatcherDbManager {
-	SimulationJobStatus[] getSimulationJobStatusArray(SimulationDatabase simDb, KeyValue simKey, int jobIndex) throws DataAccessException;
+	SimulationJobStatus getSimulationJobStatus(AdminDatabaseServer adminDb, KeyValue simKey, int jobIndex) throws DataAccessException;
 
 
-	SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, String computeHost, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException;
+	SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String computeHost, 
+			VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
-	SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
+	SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
+		int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
-	void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, VCSimulationIdentifier vcSimID, 
-			int jobIndex, int taskID, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException;
+	void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
+			int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException;
 
 
-	SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, SimulationDatabase simDb, String hostName, 
-			VCSimulationIdentifier vcSimID, int jobIndex, int taskID, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException;
+	SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String hostName, 
+			VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException;
 }
Index: src/cbit/vcell/messaging/server/JavaSimulationExecutable.java
===================================================================
--- src/cbit/vcell/messaging/server/JavaSimulationExecutable.java	(revision 11981)
+++ src/cbit/vcell/messaging/server/JavaSimulationExecutable.java	(revision 11980)
@@ -120,7 +120,7 @@
 		Simulation simulation = XmlHelper.XMLToSim(xmlString);
 		simulationTask = new SimulationTask(new SimulationJob(simulation, jobIndex, null), taskID);
 		
-		log = new StdoutSessionLog(simulationTask.getSimulationJobID());	
+		log = new StdoutSessionLog(simulationTask.getSimulationJobIdentifier());	
 		
 		log.print("Start keep alive thread");
 		new KeepAliveThread().start();
@@ -151,7 +151,7 @@
 }
 
 private void runSimulation() throws SolverException {
-	solver = SolverFactory.createSolver(log, new File(userDirectory), simulationTask, true);
+	solver = SolverFactory.createSolver(log, new File(userDirectory), simulationTask.getSimulationJob(), true);
 	solver.addSolverListener(this);
 	solver.startSolver();
 	
@@ -220,7 +220,7 @@
 private void sendAlive() {
 	// have to keep sending the messages because it's important
 	try {
-		log.print("sendWorkerAlive(" + simulationTask.getSimulationJobID() + ")");
+		log.print("sendWorkerAlive(" + simulationTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendWorkerAlive(workerEventSession, this, simulationTask, ManageUtils.getHostName(), SimulationMessage.MESSAGE_WORKEREVENT_WORKERALIVE);
 		
 		lastMsgTimeStamp = System.currentTimeMillis();
@@ -231,7 +231,7 @@
 
 private void sendFailed(SimulationMessage failureMessage) {		
 	try {
-		log.print("sendFailure(" + simulationTask.getSimulationJobID() + "," + failureMessage +")");
+		log.print("sendFailure(" + simulationTask.getSimulationJobIdentifier() + "," + failureMessage +")");
 		WorkerEventMessage.sendFailed(workerEventSession, this, simulationTask, ManageUtils.getHostName(), failureMessage);
 	} catch (JMSException ex) {
         log.exception(ex);
@@ -242,7 +242,7 @@
 	try {
 		long t = System.currentTimeMillis();
 		if (bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE) { // don't send data message too frequently
-			log.print("sendNewData(" + simulationTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");		
+			log.print("sendNewData(" + simulationTask.getSimulationJobIdentifier() + "," + (progress * 100) + "%," + timeSec + ")");		
 			WorkerEventMessage.sendNewData(workerEventSession, this, simulationTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
 		
 			lastMsgTimeStamp = System.currentTimeMillis();
@@ -263,7 +263,7 @@
 		long t = System.currentTimeMillis();
 		if (!bProgress || t - lastMsgTimeStamp > MessageConstants.INTERVAL_PROGRESS_MESSAGE 
 				|| ((int)(progress * 100)) % 25 == 0) { // don't send progress message too frequently
-			log.print("sendProgress(" + simulationTask.getSimulationJobID() + "," + (progress * 100) + "%," + timeSec + ")");
+			log.print("sendProgress(" + simulationTask.getSimulationJobIdentifier() + "," + (progress * 100) + "%," + timeSec + ")");
 			WorkerEventMessage.sendProgress(workerEventSession, this, simulationTask, ManageUtils.getHostName(), progress, timeSec, simulationMessage);
 			
 			lastMsgTimeStamp = System.currentTimeMillis();
@@ -277,7 +277,7 @@
 private void sendCompleted(double progress, double timeSec, SimulationMessage simulationMessage) {
 	// have to keep sending the messages because it's important
 	try {
-		log.print("sendComplete(" + simulationTask.getSimulationJobID() + ")");
+		log.print("sendComplete(" + simulationTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendCompleted(workerEventSession, this, simulationTask, ManageUtils.getHostName(),  progress, timeSec, simulationMessage);
 	} catch (JMSException jmse) {
         log.exception(jmse);
@@ -286,7 +286,7 @@
 
 private void sendStarting(SimulationMessage startingMessage) {
 	try {
-		log.print("sendStarting(" + simulationTask.getSimulationJobID() + ")");
+		log.print("sendStarting(" + simulationTask.getSimulationJobIdentifier() + ")");
 		WorkerEventMessage.sendStarting(workerEventSession, this, simulationTask, ManageUtils.getHostName(), startingMessage);
 	} catch (JMSException e) {
         log.exception(e);
Index: src/cbit/vcell/messaging/SimulationDispatcherMessaging.java
===================================================================
--- src/cbit/vcell/messaging/SimulationDispatcherMessaging.java	(revision 11981)
+++ src/cbit/vcell/messaging/SimulationDispatcherMessaging.java	(revision 11980)
@@ -314,7 +314,7 @@
 							double requiredMemMB = simTask.getEstimatedMemorySizeMB();
 							if (requiredMemMB > Double.parseDouble(PropertyLoader.getRequiredProperty(PropertyLoader.limitJobMemoryMB))) {						
 								SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(jobStatus, jobAdminXA, waitingJobDbConnection.getConnection(), 
-										jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getTaskID(), null, SchedulerStatus.FAILED, 
+										jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), null, SchedulerStatus.FAILED, 
 										SimulationMessage.jobFailed("Simulation [" + simTask.getSimulationInfo().getName() + ", " + jobStatus.getJobIndex() + "] requires approximately " + requiredMemMB + "mb memory. Exceeds current memory limit."));
 								
 								// tell client
@@ -326,7 +326,7 @@
 								taskMsg.sendSimulationTask(waitingJobDispatcher);
 								//update database
 								SimulationJobStatus newJobStatus = simDispatcher.updateQueueStatus(jobStatus, jobAdminXA, waitingJobDbConnection.getConnection(), 
-									jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getJobIndex(), SimulationQueueID.QUEUE_ID_SIMULATIONJOB, false);						
+									jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), SimulationQueueID.QUEUE_ID_SIMULATIONJOB, simTask.getTaskID(), false);						
 								// tell client
 								StatusMessage statusMsg = new StatusMessage(newJobStatus, simTask.getUserName(), null, null);
 								statusMsg.sendToClient(waitingJobDispatcher);
@@ -513,12 +513,12 @@
  * @param simulation cbit.vcell.solver.Simulation
  */
 private void do_failed(Connection con, SimulationJobStatus oldJobStatus, String username, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID, SimulationMessage failMsg) throws JMSException, DataAccessException, UpdateSynchronizationException {
+		int jobIndex, SimulationMessage failMsg) throws JMSException, DataAccessException, UpdateSynchronizationException {
 	
 	// if the job is in simJob queue, get it out	
 	
 	// update database
-	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, taskID, null, SchedulerStatus.FAILED, failMsg);
+	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, null, SchedulerStatus.FAILED, failMsg);
 	
 	// tell client
 	StatusMessage message = new StatusMessage(newJobStatus, username, null, null);
@@ -537,14 +537,14 @@
 	if (queueID == SimulationQueueID.QUEUE_ID_SIMULATIONJOB) {
 		SimulationTaskMessage taskMsg = new SimulationTaskMessage(simTask);
 		taskMsg.sendSimulationTask(mainJobDispatcher);
-		log.print("do_start(): send job " + simTask.getSimulationJobID() + " to simJob queue");
+		log.print("do_start(): send job " + simTask.getSimulationJobIdentifier() + " to simJob queue");
 	} else {
-		log.print("do_start(): job " + simTask.getSimulationJobID() + " pending");
+		log.print("do_start(): job " + simTask.getSimulationJobIdentifier() + " pending");
 	}
 
 	// update database
 	VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simTask.getSimKey(), simTask.getSimulationJob().getSimulation().getVersion().getOwner());
-	SimulationJobStatus newJobStatus = simDispatcher.updateQueueStatus(oldJobStatus, jobAdminXA, con, vcSimID, simTask.getSimulationJob().getJobIndex(), simTask.getTaskID(), queueID, true);
+	SimulationJobStatus newJobStatus = simDispatcher.updateQueueStatus(oldJobStatus, jobAdminXA, con, vcSimID, simTask.getSimulationJob().getJobIndex(), queueID, simTask.getTaskID(), true);
 
 	// tell client
 	if (!newJobStatus.compareEqual(oldJobStatus)) {
@@ -560,7 +560,7 @@
  * @param simulation cbit.vcell.solver.Simulation
  */
 private void do_stop(Connection con, SimulationJobStatus oldJobStatus, String username, VCSimulationIdentifier vcSimID, 
-		int jobIndex, int taskID) throws JMSException, DataAccessException, UpdateSynchronizationException {
+		int jobIndex) throws JMSException, DataAccessException, UpdateSynchronizationException {
 	
 	// if the job is in simJob queue, get it out
 	KeyValue simKey = vcSimID.getSimulationKey();
@@ -574,7 +574,7 @@
 	}
 	
 	// update database
-	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, taskID, null, 
+	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, null, 
 			SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
 	
 	// tell client
@@ -720,7 +720,7 @@
 	if (!user.equals(vcSimID.getOwner())) {
 		log.alert(user + " is not authorized to start simulation " + vcSimID);
 		StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.MESSAGE_JOB_FAILED_NOTAUTHORIZED, null, null), user.getName(), null, null);
+			SchedulerStatus.FAILED, 0, SimulationMessage.MESSAGE_JOB_FAILED_NOTAUTHORIZED, null, null), user.getName(), null, null);
 		message.sendToClient(mainJobDispatcher);
 	} else {
 		KeyValue simKey = vcSimID.getSimulationKey();
@@ -731,7 +731,7 @@
 		} catch (DataAccessException ex) {
 			log.alert("Bad simulation " + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Failed to dispatch simuation: " + ex.getMessage()), null, null), user.getName(), null, null);
+				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Failed to dispatch simuation: " + ex.getMessage()), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 			return;
 		}
@@ -739,37 +739,27 @@
 			if (simulation.getScanCount() > Integer.parseInt(PropertyLoader.getRequiredProperty(PropertyLoader.maxJobsPerScan))) {
 				log.alert("Too many simulations (" + simulation.getScanCount() + ") for parameter scan." + vcSimID);
 				StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-						SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Too many simulations (" + simulation.getScanCount() 
+					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Too many simulations (" + simulation.getScanCount() 
 							+ ") for parameter scan."), null, null), user.getName(), null, null);
 				message.sendToClient(mainJobDispatcher);
 				return;
 			}
-			for (int jobID = 0; jobID < simulation.getScanCount(); jobID++){
+			for (int i = 0; i < simulation.getScanCount(); i++){
 				// right now, we submit a regular task for each scan job...
 				// should get smarter in the future for load balancing, quotas, priorities...
-				SimulationJobStatus[] oldJobStatusArray = jobAdminXA.getSimulationJobStatusArray(con, simKey, jobID);
-				int taskID = -1;
-				SimulationJobStatus oldJobStatus = null;
-				if (oldJobStatusArray!=null){
-					for (SimulationJobStatus simulationJobStatus : oldJobStatusArray){
-						if (simulationJobStatus.getTaskID() > taskID){
-							taskID = simulationJobStatus.getTaskID();
-							oldJobStatus = simulationJobStatus;
-						}
-					}
-				}
+				SimulationJobStatus oldJobStatus = jobAdminXA.getSimulationJobStatus(con, simKey, i);
 				try {
 					fdis = simDispatcher.getFieldDataIdentifierSpecs(simulation);
 				} catch (DataAccessException ex) {
-					do_failed(con, oldJobStatus, user.getName(), vcSimID, jobID, taskID, SimulationMessage.jobFailed(ex.getMessage()));
+					do_failed(con, oldJobStatus, user.getName(), vcSimID, i, SimulationMessage.jobFailed(ex.getMessage()));
 					return;
 				}
 				// if already started by another thread
 				if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
-					log.alert("Can't start, simulation[" + vcSimID + "] job [" + jobID + "] is running already");
+					log.alert("Can't start, simulation[" + vcSimID + "] job [" + i + "] is running already");
 				} else {
 					int newTaskID = oldJobStatus == null ? 0 : (oldJobStatus.getTaskID() & MessageConstants.TASKID_USERCOUNTER_MASK) + MessageConstants.TASKID_USERINCREMENT;
-					SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, jobID, fdis), newTaskID);
+					SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, i, fdis), newTaskID);
 					SimulationQueueID queueID = SimulationQueueID.QUEUE_ID_WAITING;
 					// put all the jobs to waiting first, let dispatch thread decide which to dispatch
 					do_start(con, oldJobStatus, simTask, queueID);
@@ -778,7 +768,7 @@
 		} else {
 			log.alert("Can't start, simulation [" + vcSimID + "] doesn't exist in database");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
+				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 		}
 	}
@@ -811,7 +801,7 @@
 	if (!user.equals(vcSimID.getOwner())) {
 		log.alert(user + " is not authorized to stop simulation " + vcSimID);
 		StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
+			SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
 		message.sendToClient(mainJobDispatcher);			
 	} else {
 		KeyValue simKey = vcSimID.getSimulationKey();
@@ -821,30 +811,28 @@
 		} catch (DataAccessException ex) {
 			log.alert("Bad simulation " + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed(ex.getMessage()), null, null), user.getName(), null, null);
+				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed(ex.getMessage()), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 			return;
 		}
 		if (simulation != null) {
-			for (int jobID = 0; jobID < simulation.getScanCount(); jobID++){
-				SimulationJobStatus[] jobStatusArray = jobAdminXA.getSimulationJobStatusArray(con, vcSimID.getSimulationKey(), jobID);
+			for (int i = 0; i < simulation.getScanCount(); i++){
+				SimulationJobStatus jobStatus = jobAdminXA.getSimulationJobStatus(con, vcSimID.getSimulationKey(), i);
 
-				if (jobStatusArray != null) {
-					for (SimulationJobStatus simulationJobStatus : jobStatusArray){
-						if (!simulationJobStatus.getSchedulerStatus().isDone()) {
-							do_stop(con, simulationJobStatus, user.getName(), vcSimID, jobID, simulationJobStatus.getTaskID());
-						} else {
-							log.alert("Can't stop, simulation [" + vcSimID + "] job [" + jobID + "] already finished");
-						}			
-					}
+				if (jobStatus != null) {
+					if (!jobStatus.getSchedulerStatus().isDone()) {
+						do_stop(con, jobStatus, user.getName(), vcSimID, i);
+					} else {
+						log.alert("Can't stop, simulation [" + vcSimID + "] job [" + i + "] already finished");
+					}			
 				}  else {
-					log.alert("Can't stop, simulation [" + vcSimID + "] job [" + jobID + "] never ran");
+					log.alert("Can't stop, simulation [" + vcSimID + "] job [" + i + "] never ran");
 				}
 			}
 		} else {
 			log.alert("Can't stop, simulation [" + vcSimID + "] doesn't exist in database");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't stop, simulation [" + 
+				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't stop, simulation [" + 
 						vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 		}
Index: src/cbit/vcell/messaging/admin/ServerManagerDaemon.java
===================================================================
--- src/cbit/vcell/messaging/admin/ServerManagerDaemon.java	(revision 11981)
+++ src/cbit/vcell/messaging/admin/ServerManagerDaemon.java	(revision 11980)
@@ -9,59 +9,25 @@
  */
 
 package cbit.vcell.messaging.admin;
-import static cbit.vcell.messaging.admin.ManageConstants.INTERVAL_PING_RESPONSE;
-import static cbit.vcell.messaging.admin.ManageConstants.INTERVAL_PING_SERVICE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_PROPERTY;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
-import static cbit.vcell.messaging.admin.ManageConstants.SERVICE_ID_PROPERTY;
-import static cbit.vcell.messaging.admin.ManageConstants.SERVICE_STARTUPTYPE_AUTOMATIC;
-import static cbit.vcell.messaging.admin.ManageConstants.SERVICE_STATUS_FAILED;
-import static cbit.vcell.messaging.admin.ManageConstants.SERVICE_STATUS_RUNNING;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.PrintStream;
+import static cbit.vcell.messaging.admin.ManageConstants.*;
+import java.io.*;
 import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
+import javax.jms.*;
 
-import javax.jms.JMSException;
-import javax.jms.Message;
-import javax.jms.ObjectMessage;
-
-import org.vcell.util.ConfigurationException;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ExecutableException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.StdoutSessionLog;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.htc.PBSConstants.PBSJobStatus;
+import cbit.htc.PBSUtils;
 import cbit.htc.PbsJobID;
 import cbit.sql.ConnectionFactory;
 import cbit.sql.KeyFactory;
-import cbit.vcell.message.server.pbs.PbsProxy;
-import cbit.vcell.message.server.pbs.PbsProxy.PbsJobNotFoundException;
-import cbit.vcell.message.server.pbs.PbsProxyLocal;
-import cbit.vcell.messaging.ControlMessageCollector;
-import cbit.vcell.messaging.ControlTopicListener;
-import cbit.vcell.messaging.JmsConnection;
-import cbit.vcell.messaging.JmsConnectionFactory;
-import cbit.vcell.messaging.JmsConnectionFactoryImpl;
-import cbit.vcell.messaging.JmsSession;
-import cbit.vcell.messaging.JmsUtils;
-import cbit.vcell.messaging.MessagePropertyNotFoundException;
+import cbit.vcell.messaging.*;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.modeldb.AdminDBTopLevel;
 import cbit.vcell.modeldb.DbDriver;
@@ -74,7 +40,6 @@
  * @author: Fei Gao
  */
 public class ServerManagerDaemon implements ControlTopicListener {
-	private PbsProxy pbsProxy = new PbsProxyLocal();
 	private org.vcell.util.SessionLog log = null;
 	private JmsConnection jmsConn = null;
 	private JmsConnectionFactory jmsConnFactory = null;
@@ -109,9 +74,6 @@
 	} catch (InstantiationException e) {
 		e.printStackTrace(System.out);
 		throw new RuntimeException(e.getMessage());
-	} catch (ConfigurationException e) {
-		e.printStackTrace();
-		throw new RuntimeException(e.getMessage());
 	}
 	keyFactory = new cbit.sql.OracleKeyFactory();	
 	DbDriver.setKeyFactory(keyFactory);
@@ -197,24 +159,24 @@
 				newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, "unknown pbs exception",	jobid);
 			} else {
 				long t = System.currentTimeMillis();
-				PBSJobStatus status;
+				int status;
 				while (true) {
 					try {
 						Thread.sleep(1000);
 					} catch (InterruptedException ex) {
 					}
 					
-					status = pbsProxy.getJobStatus(jobid);
-					if (status!=null && status.isExiting()){
+					status = PBSUtils.getJobStatus(jobid);
+					if (PBSUtils.isJobExiting(status)){
 						// should never happen
 						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, "exit immediately after submit", jobid);	
 						break;
-					} else if (status!=null && status.isRunning()) {						
+					} else if (PBSUtils.isJobRunning(status)) {						
 						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_RUNNING, "running", jobid);	
 						break;
 					} else if (System.currentTimeMillis() - t > 30 * MessageConstants.SECOND_IN_MS) {
-						String pendingReason = pbsProxy.getPendingReason(jobid);
-						pbsProxy.killJob(jobid); // kill the job if it takes too long to dispatch the job.
+						String pendingReason = PBSUtils.getPendingReason(jobid);
+						PBSUtils.killJob(jobid); // kill the job if it takes too long to dispatch the job.
 						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, 
 								"PBS Job scheduler timed out. Please try again later. (Job [" + jobid + "]: " + pendingReason + ")",
 								jobid);						
@@ -229,27 +191,19 @@
 	adminDbTop.updateServiceStatus(service, tso, true);
 }	
 
-private PbsJobID submit2PBS(ServiceStatus service) throws IOException, ExecutableException {
-	try {
-		killService(service);
-	}catch (PbsJobNotFoundException e){
-		log.alert(service.toString()+" not found, cannot kill job");
-	}
+private PbsJobID submit2PBS(ServiceStatus service) throws Exception {
+	killService(service);
 	
 	String executable = PropertyLoader.getRequiredProperty(PropertyLoader.serviceSubmitScript);
 	
 	ServiceType type = service.getServiceSpec().getType();
 	int ordinal = service.getServiceSpec().getOrdinal();
-	// site, type, ordinal, memory
-	String[] command = new String[] {
-			executable,
-			VCellServerID.getSystemServerID().toString().toLowerCase(),
-			type.getName(),
-			String.valueOf(ordinal),
-			String.valueOf(service.getServiceSpec().getMemoryMB())};
+	String cmdArguments = VCellServerID.getSystemServerID().toString().toLowerCase() + " " 
+		+ type.getName() + " " + ordinal + " " + service.getServiceSpec().getMemoryMB(); // site, type, ordinal, memory
+	
 	File sub_file = File.createTempFile("service", ".pbs.sub");
 	log.print("PBS sub file  for service " + service.getServiceSpec() + " is " + sub_file.getAbsolutePath());
-	return pbsProxy.submitServiceJob((String)null, service.getServiceSpec().getID(), sub_file.getAbsolutePath(), command, 1, service.getServiceSpec().getMemoryMB());
+	return PBSUtils.submitServiceJob((String)null, service.getServiceSpec().getID(), sub_file.getAbsolutePath(), executable, cmdArguments, 1, service.getServiceSpec().getMemoryMB());
 }
 /**
  * This method was created in VisualAge.
@@ -281,6 +235,7 @@
 			log.print("sending reply [" + JmsUtils.toString(reply) + "]");			
 		} else if (msgType.equals(MESSAGE_TYPE_IAMALIVE_VALUE)) {
 			on_iamalive(message);			
+		} else if (msgType.equals(MESSAGE_TYPE_STARTSERVICE_VALUE)) {
 		} else if (msgType.equals(MESSAGE_TYPE_STOPSERVICE_VALUE)) {
 			on_stopservice(message);
 		} else if (msgType.equals(MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE)) {
@@ -354,22 +309,14 @@
 				ServiceStatus service = iter.next();		
 				if (service.getServiceSpec().getID().equals(serviceID)) {
 					PbsJobID pbsJobId = service.getPbsJobId();
-					if (pbsJobId != null){
+					if (pbsJobId != null && PBSUtils.isJobRunning(pbsJobId)) {
 						try {
-							PBSJobStatus pbsJobStatus = pbsProxy.getJobStatus(pbsJobId);
-							if (pbsJobStatus!=null && pbsJobStatus.isRunning()) {
-								try {
-									Thread.sleep(5 * MessageConstants.SECOND_IN_MS); // wait 5 seconds
-								} catch (InterruptedException ex) {							
-								}					
-								// if the service is not stopped, kill it from PBS
-								pbsJobStatus = pbsProxy.getJobStatus(pbsJobId);
-								if (pbsJobStatus!=null && pbsJobStatus.isRunning()) {
-									pbsProxy.killJob(pbsJobId);
-								}
-							}
-						} catch (Exception e) {
-							log.exception(e);
+							Thread.sleep(5 * MessageConstants.SECOND_IN_MS); // wait 5 seconds
+						} catch (InterruptedException ex) {							
+						}					
+						// if the service is not stopped, kill it from PBS
+						if (PBSUtils.isJobRunning(pbsJobId)) {
+							PBSUtils.killJob(pbsJobId);
 						}
 					}
 					break;
@@ -437,9 +384,9 @@
 	}
 }
 
-private void killService(ServiceStatus service) throws ExecutableException, PbsJobNotFoundException {
+private void killService(ServiceStatus service) {
 	if (service.getPbsJobId() != null) {
-		pbsProxy.killJob(service.getPbsJobId());
+		PBSUtils.killJob(service.getPbsJobId());
 	}
 }
 /**
Index: src/cbit/vcell/mongodb/VCMongoDbDriver.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 11981)
+++ src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 11980)
@@ -27,7 +27,6 @@
 	private SessionLog log = new StdoutSessionLog("mongoDbDriver");
 	private ConcurrentLinkedQueue<VCMongoMessage> messageOutbox = new ConcurrentLinkedQueue<VCMongoMessage>();
 	private boolean processing = false;
-	private Thread messageProcessingThread = null;
 
 	public static VCMongoDbDriver getInstance(){
 		if (mongoDriverSingleton == null){
@@ -48,12 +47,12 @@
 		return log;
 	}
 	
-	private synchronized void sendMessages() {
+	private void sendMessages() {
     	VCMongoMessage[] queuedMessages = messageOutbox.toArray(new VCMongoMessage[0]);
    		
    		if (queuedMessages!=null && queuedMessages.length>0){
    			try {
-	   			// remove the messages whether the save is successful or not.
+	   			// remove the messages whether the save is sucessfull or not.
 	   			messageOutbox.removeAll(Arrays.asList(queuedMessages));
 	 
 	   			// create DBObjects for each message (to send to MongoDB)
@@ -145,7 +144,7 @@
         if(!processing )
         {
             processing = true;
-            messageProcessingThread = new Thread(this,"MongoDB Process Thread");
+            Thread messageProcessingThread = new Thread(this,"MongoDB Process Thread");
             messageProcessingThread.setDaemon(true);
             messageProcessingThread.start();
         }
@@ -161,7 +160,7 @@
         return processing;
     }
     
-    public void addMessage(VCMongoMessage message)
+    public synchronized void addMessage(VCMongoMessage message)
     {
     	messageOutbox.add(message);
     	log.print("VCMongoMessage queued : "+message);
@@ -170,16 +169,9 @@
     	}
     }
     
-    public void flush() {
-    	if (!processing){
-    		return;
-    	}
-    	if (this.messageProcessingThread!=null){
-    		this.messageProcessingThread.interrupt();
-    	}
-        sendMessages();
-    }
-    
+
+
+
 	/**
 	 * @param args
 	 */
@@ -221,5 +213,6 @@
 		}
 	}
 
+	
 
 }
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 11981)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 11980)
@@ -5,21 +5,13 @@
 import java.net.UnknownHostException;
 import java.util.Arrays;
 import java.util.Date;
-import java.util.Enumeration;
 
-import org.vcell.util.MessageConstants;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.htc.PbsJobID;
 import cbit.rmi.event.MessageEvent;
 import cbit.rmi.event.SimulationJobStatusEvent;
 import cbit.rmi.event.WorkerEvent;
-import cbit.vcell.message.VCDestination;
-import cbit.vcell.message.VCMessage;
-import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.messages.StatusMessage;
-import cbit.vcell.message.server.pbs.PbsProxy;
-import cbit.vcell.message.server.pbs.PbsProxy.CommandOutput;
 import cbit.vcell.messaging.WorkerEventMessage;
 import cbit.vcell.messaging.db.SimulationExecutionStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
@@ -31,11 +23,9 @@
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.SimulationMessage.DetailedState;
 import cbit.vcell.solver.SolverEvent;
-import cbit.vcell.solver.SolverStatus;
 import cbit.vcell.solver.VCSimulationDataIdentifier;
 import cbit.vcell.solver.VCSimulationDataIdentifierOldStyle;
 import cbit.vcell.solver.VCSimulationIdentifier;
-import cbit.vcell.solver.ode.gui.SimulationStatus;
 import cbit.vcell.solvers.AbstractSolver;
 
 import com.mongodb.BasicDBObject;
@@ -54,8 +44,7 @@
 		simData,
 		export,
 		database,
-		serverManager,
-		solverPreprocessor
+		serverManager
 	};
 	
 	private static ServiceName serviceName = ServiceName.unknown;
@@ -79,10 +68,6 @@
 	public final static String MongoMessage_msgtype_exception							= "exception";
 	public final static String MongoMessage_msgtype_clientConnect						= "clientConnect";
 	public final static String MongoMessage_msgtype_clientTimeout						= "clientTimeout";
-	public final static String MongoMessage_msgtype_jmsMessageReceived					= "jmsMessageReceived";
-	public final static String MongoMessage_msgtype_jmsMessageSent						= "jmsMessageSent";
-	public final static String MongoMessage_msgtype_pbsCall								= "pbsCall";
-	public final static String MongoMessage_msgtype_infoMsg								= "infoMsg";
 	public final static String MongoMessage_msgTime				= "msgTime";
 	public final static String MongoMessage_msgTimeNice			= "msgTimeNice";
 	
@@ -142,15 +127,7 @@
 	public final static String MongoMessage_osName				= "osName";
 	public final static String MongoMessage_osVersion			= "osVersion";
 	public final static String MongoMessage_vcSoftwareVersion	= "vcSoftwareVersion";
-	public final static String MongoMessage_destination			= "destination";
-	public final static String MongoMessage_jmsMessage			= "jmsMessage";
-	public final static String MongoMessage_shellCmd			= "shellCmd";
-	public final static String MongoMessage_cmdString			= "cmdString";
-	public final static String MongoMessage_elapsedTimeMS		= "elapsedTimeMS";
-	public final static String MongoMessage_stdout				= "stdout";
-	public final static String MongoMessage_stderr				= "stderr";
-	public final static String MongoMessage_exitCode			= "exitCode";
-	public final static String MongoMessage_info				= "info";
+
 	private BasicDBObject doc = null;
 	
 	VCMongoMessage(BasicDBObject doc){
@@ -216,23 +193,6 @@
 		dbObject.put(MongoMessage_host,java.net.InetAddress.getLocalHost().getHostName());
 	}
 
-	public static void sendInfo(String infoString) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-	
-			addHeader(dbObject,MongoMessage_msgtype_infoMsg);
-			
-			dbObject.put(MongoMessage_info, infoString);
-							
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e); 
-		}
-	}
-
 	public static void sendClientConnectionNew(UserLoginInfo userLoginInfo) {
 		if (!enabled){
 			return;
@@ -289,31 +249,6 @@
 							
 			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
 		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
-
-	public static void sendException(Throwable exception) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-	
-			addHeader(dbObject,MongoMessage_msgtype_exception);
-			
-			ByteArrayOutputStream bos = new ByteArrayOutputStream();
-			PrintWriter pw = new PrintWriter(bos);
-			exception.printStackTrace(pw);
-			pw.close();
-			String stack = bos.toString();
-
-			dbObject.put(MongoMessage_exceptionMessage,exception.getMessage());
-			dbObject.put(MongoMessage_exceptionStack,stack);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
 			VCMongoDbDriver.getInstance().getSessionLog().exception(e); 
 		}
 	}
@@ -489,23 +424,6 @@
 		}
 	}
 
-	public static void sendWorkerEvent(cbit.vcell.message.messages.WorkerEventMessage workerEventMessage) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_workerEventMessage);
-
-			addObject(dbObject,workerEventMessage.getWorkerEvent());
-				
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
 	public static void sendPBSWorkerMessage(SimulationTask simulationTask, PbsJobID pbsJobID, String pbsWorkerMsg) {
 		if (!enabled){
 			return;
@@ -527,62 +445,8 @@
 			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
 		}
 	}
-	
-	public static void sendJmsMessageReceived(VCMessage vcMessage,	VCDestination vcDestination) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
 
-			addHeader(dbObject,MongoMessage_msgtype_jmsMessageReceived);
 
-			dbObject.put(MongoMessage_destination, vcDestination.getName());
-
-			addObject(dbObject, vcMessage);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
-	public static void sendJmsMessageSent(VCMessage vcMessage,	VCDestination vcDestination) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_jmsMessageSent);
-
-			dbObject.put(MongoMessage_destination, vcDestination.getName());
-
-			addObject(dbObject, vcMessage);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
-	public static void sendPbsCall(PbsProxy pbsProxyLocal, CommandOutput commandOutput) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_pbsCall);
-
-			addObject(dbObject, commandOutput);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
 	public static void sendRpcRequestReceived(RpcRequest rpcRequest) {
 		if (!enabled){
 			return;
@@ -600,23 +464,6 @@
 		}
 	}
 
-	public static void sendRpcRequestReceived(VCRpcRequest rpcRequest) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_rpcRequestReceived);
-
-			addObject(dbObject,rpcRequest);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
 	public static void sendRpcRequestSent(RpcRequest rpcRequest, UserLoginInfo userLoginInfo) {
 		if (!enabled){
 			return;
@@ -637,26 +484,6 @@
 		}
 	}
 
-	public static void sendRpcRequestSent(VCRpcRequest rpcRequest, UserLoginInfo userLoginInfo) {
-		if (!enabled){
-			return;
-		}
-		try {
-			
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_rpcRequestSent);
-
-			addObject(dbObject,rpcRequest);
-			
-			addObject(dbObject,userLoginInfo);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
 	public static void sendClientMessageEventQueued(MessageEvent messageEvent) {
 		if (!enabled || !(messageEvent instanceof SimulationJobStatusEvent)){
 			return;
@@ -731,29 +558,6 @@
 		dbObject.put(MongoMessage_clientInfo, dbObjectClientInfo);
 	}
 	
-	private static void addObject(BasicDBObject dbObject, CommandOutput commandOutput){
-		if (commandOutput == null){
-			return;
-		}
-		BasicDBObject dbObjectShellCmd = new BasicDBObject();
-		
-		if (commandOutput.getCommandStrings()!=null){
-			dbObjectShellCmd.put(MongoMessage_cmdString, commandOutput.getCommand());
-		}
-		dbObjectShellCmd.put(MongoMessage_elapsedTimeMS, commandOutput.getElapsedTimeMS());
-		if (commandOutput.getStandardOutput()!=null){
-			dbObjectShellCmd.put(MongoMessage_stdout, commandOutput.getStandardOutput());
-		}
-		if (commandOutput.getStandardError()!=null){
-			dbObjectShellCmd.put(MongoMessage_stderr, commandOutput.getStandardError());
-		}
-		if (commandOutput.getExitStatus()!=null){
-			dbObjectShellCmd.put(MongoMessage_exitCode, commandOutput.getExitStatus());
-		}
-		
-		dbObject.put(MongoMessage_shellCmd, dbObjectShellCmd);
-	}
-	
 	private static void addObject(BasicDBObject dbObject, SimulationJobStatusEvent simJobStatusEvent){
 		addObject(dbObject, simJobStatusEvent.getSimulationMessage());
 		addObject(dbObject, simJobStatusEvent.getJobStatus());
@@ -787,25 +591,6 @@
 		dbObject.put(MongoMessage_userName,rpcRequest.getUserName());
 	}
 	
-	private static void addObject(BasicDBObject dbObject, VCRpcRequest rpcRequest){
-		dbObject.put(MongoMessage_rpcRequestArgs,Arrays.asList(rpcRequest.getArguments()).toString());
-		for (Object arg : rpcRequest.getArguments()){
-			//
-			// look for simulation IDs in rpcRequest arguments ... add to field.
-			//
-			if (arg instanceof VCSimulationIdentifier){
-				dbObject.put(MongoMessage_simId, ((VCSimulationIdentifier)arg).getSimulationKey().toString());
-			}else if (arg instanceof VCSimulationDataIdentifier){
-				dbObject.put(MongoMessage_simId, ((VCSimulationDataIdentifier)arg).getSimulationKey().toString());
-			}else if (arg instanceof VCSimulationDataIdentifierOldStyle){
-				dbObject.put(MongoMessage_simId, ((VCSimulationDataIdentifierOldStyle)arg).getSimulationKey().toString());
-			}
-		}
-		dbObject.put(MongoMessage_rpcRequestMethod,rpcRequest.getMethodName());
-		dbObject.put(MongoMessage_rpcRequestService,rpcRequest.getRequestedServiceType().getName());
-		dbObject.put(MongoMessage_userName,rpcRequest.getUserName());
-	}
-		
 	private static void addObject(BasicDBObject dbObject, SimulationTask simulationTask){
 		dbObject.put(MongoMessage_simId,simulationTask.getSimulationJob().getVCDataIdentifier().getSimulationKey().toString());
 		dbObject.put(MongoMessage_jobIndex, simulationTask.getSimulationJob().getJobIndex());
@@ -815,31 +600,6 @@
 	}
 	
 
-	private static void addObject(BasicDBObject dbObject, VCMessage message){
-		Object objectContent = message.getObjectContent();
-		if (objectContent instanceof WorkerEvent){
-			addObject(dbObject, (WorkerEvent)objectContent);
-		}else if (objectContent instanceof SimulationJobStatus){
-			addObject(dbObject, (SimulationJobStatus)objectContent);
-		}
-		dbObject.put(MongoMessage_jmsMessage, message.show());
-		if (message.propertyExists(MessageConstants.SIMKEY_PROPERTY)){
-			dbObject.put(MongoMessage_simId,String.valueOf(message.getLongProperty(MessageConstants.SIMKEY_PROPERTY)));
-		}
-		if (message.propertyExists(MessageConstants.JOBINDEX_PROPERTY)){
-			dbObject.put(MongoMessage_jobIndex, message.getIntProperty(MessageConstants.JOBINDEX_PROPERTY));
-		}
-		if (message.propertyExists(MessageConstants.TASKID_PROPERTY)){
-			dbObject.put(MongoMessage_taskId, message.getIntProperty(MessageConstants.TASKID_PROPERTY));
-		}
-		if (message.propertyExists(MessageConstants.USERNAME_PROPERTY)){
-			dbObject.put(MongoMessage_userName, message.getStringProperty(MessageConstants.USERNAME_PROPERTY));
-		}
-		if (message.propertyExists(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY)){
-			dbObject.put(MongoMessage_simProgress, message.getDoubleProperty(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY));
-		}
-	}
-	
 	private static void addObject(BasicDBObject dbObject, WorkerEventMessage workerEventMessage){
 		WorkerEvent workerEvent = workerEventMessage.getWorkerEvent();
 		dbObject.put(MongoMessage_computeHost, workerEvent.getHostName());
@@ -854,22 +614,6 @@
 		dbObject.put(MongoMessage_simTime,workerEvent.getTimePoint());
 	}
 	
-	private static void addObject(BasicDBObject dbObject, WorkerEvent workerEvent){
-		dbObject.put(MongoMessage_computeHost, workerEvent.getHostName());
-		dbObject.put(MongoMessage_simId,workerEvent.getVCSimulationDataIdentifier().getSimulationKey().toString());
-		dbObject.put(MongoMessage_jobIndex, workerEvent.getJobIndex());
-		dbObject.put(MongoMessage_taskId, workerEvent.getTaskID());
-		if (workerEvent.getPbsJobID()!=null){
-			dbObject.put(MongoMessage_pbsJobID, workerEvent.getPbsJobID().toString());
-		}
-		//workerEvent.getEventTypeID();
-		//workerEvent.getMessageData();
-		//workerEvent.getMessageSource();
-		addObject(dbObject, workerEvent.getSimulationMessage());
-		dbObject.put(MongoMessage_simProgress,workerEvent.getProgress());
-		dbObject.put(MongoMessage_simTime,workerEvent.getTimePoint());
-	}
-	
 	private static void addObject(BasicDBObject dbObject, SolverEvent solverEvent){
 		AbstractSolver solver = (AbstractSolver)solverEvent.getSource();
 		dbObject.put(MongoMessage_simProgress,solverEvent.getProgress());
@@ -943,13 +687,9 @@
 			dbObject.put(MongoMessage_simQueueEntryDate,simQueueEntryStatus.getQueueDate().getTime());
 			dbObject.put(MongoMessage_simQueueEntryDateNice,simQueueEntryStatus.getQueueDate().toString());
 		}
-		dbObject.put(MongoMessage_simQueueEntryId,simQueueEntryStatus.getQueueID().name());
+		dbObject.put(MongoMessage_simQueueEntryId,simQueueEntryStatus.getQueueID());
 		dbObject.put(MongoMessage_simQueueEntryPriority,simQueueEntryStatus.getQueuePriority());
 	}
 
-	public static void flush() {
-		VCMongoDbDriver.getInstance().flush();
-	}
 
-
 }
\ No newline at end of file
Index: src/cbit/vcell/solvers/SolverControllerImpl.java
===================================================================
--- src/cbit/vcell/solvers/SolverControllerImpl.java	(revision 11981)
+++ src/cbit/vcell/solvers/SolverControllerImpl.java	(revision 11980)
@@ -9,11 +9,11 @@
  */
 
 package cbit.vcell.solvers;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.server.LocalVCellConnection;
 import cbit.vcell.solver.SolverListener;
 import java.io.*;
 import java.util.*;
+import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.Solver;
 /**
  * This interface was generated by a SmartGuide.
@@ -26,7 +26,7 @@
 	private LocalVCellConnection vcConn = null;
 	private SolverListener solverListener = null;
 	
-	private SimulationTask simulationTask = null;
+	private SimulationJob simulationJob = null;
 	private org.vcell.util.SessionLog sessionLog = null;
 	private Solver solver = null;
 	private File directory = null;
@@ -40,15 +40,15 @@
  * @param directory java.lang.String
  * @param simIdentifier java.lang.String
  */
-public SolverControllerImpl (LocalVCellConnection argVCellConnection, org.vcell.util.SessionLog sessionLog, SimulationTask simulationTask, java.io.File directory) throws cbit.vcell.solver.SolverException {
-	this.simulationTask = simulationTask;
+public SolverControllerImpl (LocalVCellConnection argVCellConnection, org.vcell.util.SessionLog sessionLog, SimulationJob argSimulationJob, java.io.File directory) throws cbit.vcell.solver.SolverException {
+	this.simulationJob = argSimulationJob;
 	this.directory = directory;
 	this.sessionLog = sessionLog;
 	this.vcConn = argVCellConnection;
 	//
 	// instantiate an appropriate solver
 	//
-	this.solver = cbit.vcell.solver.SolverFactory.createSolver(sessionLog,directory,simulationTask, false);
+	this.solver = cbit.vcell.solver.SolverFactory.createSolver(sessionLog,directory,argSimulationJob, false);
 }
 
 
@@ -65,8 +65,8 @@
  * This method was created by a SmartGuide.
  * @return cbit.vcell.math.MathDescription
  */
-public SimulationTask getSimulationTask() {
-	return simulationTask;
+public SimulationJob getSimulationJob() {
+	return simulationJob;
 }
 
 
Index: src/cbit/vcell/solvers/FVSolver.java
===================================================================
--- src/cbit/vcell/solvers/FVSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/FVSolver.java	(revision 11980)
@@ -31,7 +31,6 @@
 import cbit.vcell.geometry.Geometry;
 import cbit.vcell.geometry.surface.GeometrySurfaceDescription;
 import cbit.vcell.math.Variable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.simdata.DataSetControllerImpl;
@@ -65,13 +64,13 @@
  * @param simID java.lang.String
  * @param clientProxy cbit.vcell.solvers.ClientProxy
  */
-public FVSolver (SimulationTask simTask, File dir, SessionLog sessionLog, boolean bMsging) throws SolverException {
-	super(simTask, dir, sessionLog, bMsging);
-	if (! simTask.getSimulation().isSpatial()) {
+public FVSolver (SimulationJob argSimulationJob, File dir, SessionLog sessionLog, boolean bMsging) throws SolverException {
+	super(argSimulationJob, dir, sessionLog, bMsging);
+	if (! simulationJob.getSimulation().isSpatial()) {
 		throw new SolverException("Cannot use FVSolver on non-spatial simulation");
 	}
-	this.simResampleInfoProvider = (VCSimulationDataIdentifier)simTask.getSimulationJob().getVCDataIdentifier();
-	this.cppCoderVCell = new CppCoderVCell((new File(getBaseName())).getName(), getSaveDirectory(), simTask);
+	this.simResampleInfoProvider = (VCSimulationDataIdentifier)argSimulationJob.getVCDataIdentifier();
+	this.cppCoderVCell = new CppCoderVCell((new File(getBaseName())).getName(), getSaveDirectory(), argSimulationJob);
 }
 
 
@@ -288,14 +287,14 @@
 	//Try to save existing user defined functions
 	Vector<AnnotatedFunction> annotatedFunctionVector = new Vector<AnnotatedFunction>();
 	try{
-		annotatedFunctionVector = simTask.getSimulationJob().getSimulationSymbolTable().createAnnotatedFunctionsList(simTask.getSimulation().getMathDescription());
+		annotatedFunctionVector = simulationJob.getSimulationSymbolTable().createAnnotatedFunctionsList(simulationJob.getSimulation().getMathDescription());
 		String functionFileName = getBaseName() + FUNCTIONFILE_EXTENSION;
 		File existingFunctionFile = new File(functionFileName);
 		if(existingFunctionFile.exists()){
 			Vector<AnnotatedFunction> oldUserDefinedFunctions =
 				new Vector<AnnotatedFunction>();
 			Vector<AnnotatedFunction> allOldFunctionV =
-				FunctionFileGenerator.readFunctionsFile(existingFunctionFile, simTask.getSimulationJob().getSimulationJobID());
+				FunctionFileGenerator.readFunctionsFile(existingFunctionFile, simulationJob.getSimulationJobID());
 			for(int i = 0; i < allOldFunctionV.size(); i += 1){
 				if(allOldFunctionV.elementAt(i).isOldUserDefined()){
 					oldUserDefinedFunctions.add(allOldFunctionV.elementAt(i));
@@ -329,8 +328,8 @@
 	}else if (message.startsWith(PROGRESS_PREFIX)){
 		String progressString = message.substring(message.lastIndexOf(SEPARATOR)+1,message.indexOf("%"));
 		double progress = Double.parseDouble(progressString)/100.0;
-		double startTime = simTask.getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime();
-		double endTime = simTask.getSimulation().getSolverTaskDescription().getTimeBounds().getEndingTime();
+		double startTime = simulationJob.getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime();
+		double endTime = simulationJob.getSimulation().getSolverTaskDescription().getTimeBounds().getEndingTime();
 		setCurrentTime(startTime + (endTime-startTime)*progress);
 		return new ApplicationMessage(ApplicationMessage.PROGRESS_MESSAGE,progress,-1,null,message);
 	}else{
@@ -361,9 +360,9 @@
 	
 	autoCode(false);
 	
-//	String baseName = cppCoderVCell.getBaseFilename();
-//	String exeSuffix = System.getProperty(PropertyLoader.exesuffixProperty); // ".exe";
-//	File exeFile = new File(getSaveDirectory(), baseName + exeSuffix);
+	String baseName = cppCoderVCell.getBaseFilename();
+	String exeSuffix = System.getProperty(PropertyLoader.exesuffixProperty); // ".exe";
+	File exeFile = new File(getSaveDirectory(), baseName + exeSuffix);
 	boolean bCORBA = false;
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));
@@ -376,28 +375,18 @@
 		throw new RuntimeException("MathExecutableCORBA not supported");
 		//executable = new MathExecutableCORBA(exeFile,mathDesc.getSimulationID(),getSessionLog());
 	}else{
-		setMathExecutable(new MathExecutable(getMathExecutableCommand()));
+		setMathExecutable(new MathExecutable(new String[] {exeFile.getAbsolutePath()}));
 	}
 
 }
 
-@Override
-public String[] getMathExecutableCommand() {
-	String exeSuffix = System.getProperty(PropertyLoader.exesuffixProperty); // ".exe";
-	String baseName = cppCoderVCell.getBaseFilename();
-	File exeFile = new File(getSaveDirectory(), baseName + exeSuffix);
-	return new String[] { exeFile.getAbsolutePath() };
-}
-
-
-
 public Geometry getResampledGeometry() throws SolverException {
 	if (resampledGeometry == null) {
 		// clone and resample geometry
 		try {
-			resampledGeometry = (Geometry) BeanUtils.cloneSerializable(simTask.getSimulation().getMathDescription().getGeometry());
+			resampledGeometry = (Geometry) BeanUtils.cloneSerializable(simulationJob.getSimulation().getMathDescription().getGeometry());
 			GeometrySurfaceDescription geoSurfaceDesc = resampledGeometry.getGeometrySurfaceDescription();
-			ISize newSize = simTask.getSimulation().getMeshSpecification().getSamplingSize();
+			ISize newSize = simulationJob.getSimulation().getMeshSpecification().getSamplingSize();
 			geoSurfaceDesc.setVolumeSampleSize(newSize);
 			geoSurfaceDesc.updateAll();		
 		} catch (Exception e) {
@@ -413,18 +402,18 @@
 	
 	try {
 		// write subdomains file
-		SubdomainInfo.write(new File(getSaveDirectory(), cppCoderVCell.getBaseFilename() + SimDataConstants.SUBDOMAINS_FILE_SUFFIX), simTask.getSimulation().getMathDescription());
+		SubdomainInfo.write(new File(getSaveDirectory(), cppCoderVCell.getBaseFilename() + SimDataConstants.SUBDOMAINS_FILE_SUFFIX), simulationJob.getSimulation().getMathDescription());
 		
 		PrintWriter pw = new PrintWriter(new FileWriter(new File(getSaveDirectory(), cppCoderVCell.getBaseFilename()+SimDataConstants.VCG_FILE_EXTENSION)));
 		GeometryFileWriter.write(pw, getResampledGeometry());
 		pw.close();
 				
-		FieldDataIdentifierSpec[] argFieldDataIDSpecs = simTask.getSimulationJob().getFieldDataIdentifierSpecs();
+		FieldDataIdentifierSpec[] argFieldDataIDSpecs = simulationJob.getFieldDataIdentifierSpecs();
 		if(argFieldDataIDSpecs != null && argFieldDataIDSpecs.length > 0){
 			fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_RESAMPLE_FD);
 			
 			FieldFunctionArguments psfFieldFunc = null;
-			Variable var = simTask.getSimulationJob().getSimulationSymbolTable().getVariable(SimDataConstants.PSF_FUNCTION_NAME);
+			Variable var = simulationJob.getSimulationSymbolTable().getVariable(SimDataConstants.PSF_FUNCTION_NAME);
 			if (var != null) {
 				FieldFunctionArguments[] ffas = FieldUtilities.getFieldFunctionArguments(var.getExpression());
 				if (ffas == null || ffas.length == 0) {
@@ -447,7 +436,7 @@
 			boolean bResample[] = new boolean[argFieldDataIDSpecs.length];
 			Arrays.fill(bResample, true);
 			for (int i = 0; i < argFieldDataIDSpecs.length; i++) {
-				argFieldDataIDSpecs[i].getFieldFuncArgs().getTime().bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+				argFieldDataIDSpecs[i].getFieldFuncArgs().getTime().bindExpression(simulationJob.getSimulationSymbolTable());
 				if (argFieldDataIDSpecs[i].getFieldFuncArgs().equals(psfFieldFunc)) {
 					bResample[i] = false;
 				}
@@ -456,7 +445,7 @@
 			int numMembraneElements = getResampledGeometry().getGeometrySurfaceDescription().getSurfaceCollection().getTotalPolygonCount();
 			CartesianMesh simpleMesh = CartesianMesh.createSimpleCartesianMesh(getResampledGeometry().getOrigin(), 
 					getResampledGeometry().getExtent(),
-					simTask.getSimulation().getMeshSpecification().getSamplingSize(),
+					simulationJob.getSimulation().getMeshSpecification().getSamplingSize(),
 					getResampledGeometry().getGeometrySurfaceDescription().getRegionImage());
 			String secondarySimDataDir = PropertyLoader.getProperty(PropertyLoader.secondarySimDataDirProperty, null);			
 			DataSetControllerImpl dsci = new DataSetControllerImpl(new NullSessionLog(), null, getSaveDirectory().getParentFile(),
Index: src/cbit/vcell/solvers/AbstractCompiledSolver.java
===================================================================
--- src/cbit/vcell/solvers/AbstractCompiledSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/AbstractCompiledSolver.java	(revision 11980)
@@ -15,7 +15,6 @@
 
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.AnnotatedFunction;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
@@ -40,10 +39,10 @@
 /**
  * AbstractPDESolver constructor comment.
  */
-public AbstractCompiledSolver(SimulationTask simTask, File directory, SessionLog sessionLog, boolean bMsging) throws SolverException {
-	super(simTask, directory, sessionLog);
+public AbstractCompiledSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog, boolean bMsging) throws SolverException {
+	super(simulationJob, directory, sessionLog);
 	bMessaging = bMsging;
-	setCurrentTime(simTask.getSimulationJob().getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime());
+	setCurrentTime(simulationJob.getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime());
 }
 /**
  * Insert the method's description here.
@@ -70,7 +69,7 @@
  * Creation date: (6/26/2001 5:03:04 PM)
  * @return cbit.vcell.solvers.MathExecutable
  */
-public MathExecutable getMathExecutable() {
+protected MathExecutable getMathExecutable() {
 	return mathExecutable;
 }
 /**
@@ -79,7 +78,7 @@
  * @return double
  */
 public double getProgress() {
-	Simulation simulation = simTask.getSimulationJob().getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	TimeBounds timeBounds = simulation.getSolverTaskDescription().getTimeBounds();
 	double startTime = timeBounds.getStartingTime();
 	double endTime = timeBounds.getEndingTime();
@@ -126,7 +125,7 @@
 private void runSolver() {
 	try {
 		fieldRunning = true;
-		setCurrentTime(simTask.getSimulationJob().getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime());
+		setCurrentTime(simulationJob.getSimulation().getSolverTaskDescription().getTimeBounds().getStartingTime());
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_STARTING, SimulationMessage.MESSAGE_SOLVER_STARTING_INIT));
 		// fireSolverStarting("initializing");
 		// depends on solver; the initialize() method in actual solver will fire detailed messages
@@ -224,7 +223,4 @@
 		throw new RuntimeException("Error creating .function file for "+functionFileGenerator.getBasefileName()+e.getMessage());
 	}		
 }
-
-public abstract String[] getMathExecutableCommand();
-
 }
Index: src/cbit/vcell/solvers/CppClassCoderContourVarContext.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderContourVarContext.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderContourVarContext.java	(revision 11980)
@@ -19,8 +19,8 @@
 import cbit.vcell.math.ReservedVariable;
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VolVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
+import cbit.vcell.solver.SimulationJob;
 /**
  * This class was generated by a SmartGuide.
  * 
@@ -35,10 +35,10 @@
 protected CppClassCoderContourVarContext(CppCoderVCell argCppCoderVCell,
 												Equation argEquation,
 												FilamentSubDomain argFilamentSubDomain,
-												SimulationTask simTask, 
+												SimulationJob argSimulationJob, 
 												String argParentClass) throws Exception
 {
-	super(argCppCoderVCell,argEquation,argFilamentSubDomain,simTask,argParentClass);
+	super(argCppCoderVCell,argEquation,argFilamentSubDomain,argSimulationJob,argParentClass);
 	this.compartmentSubDomain = argFilamentSubDomain.getOutsideCompartment();
 }
 
Index: src/cbit/vcell/solvers/CombinedSundialsSolver.java
===================================================================
--- src/cbit/vcell/solvers/CombinedSundialsSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/CombinedSundialsSolver.java	(revision 11980)
@@ -10,7 +10,6 @@
 
 package cbit.vcell.solvers;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.*;
 import cbit.vcell.solver.ode.CVodeSolverStandalone;
 import cbit.vcell.solver.ode.IDASolverStandalone;
@@ -34,12 +33,12 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @exception cbit.vcell.solver.SolverException The exception description.
  */
-public CombinedSundialsSolver(SimulationTask simTask, File directory, SessionLog sessionLog, boolean bMessaging) throws cbit.vcell.solver.SolverException {
-	super(simTask, directory, sessionLog, bMessaging);
-	if (simTask.getSimulation().getMathDescription().hasFastSystems()) {
-		realSolver = new IDASolverStandalone(simTask, directory, sessionLog, bMessaging);
+public CombinedSundialsSolver(SimulationJob simJob, File directory, SessionLog sessionLog, boolean bMessaging) throws cbit.vcell.solver.SolverException {
+	super(simJob, directory, sessionLog, bMessaging);
+	if (simulationJob.getSimulation().getMathDescription().hasFastSystems()) {
+		realSolver = new IDASolverStandalone(simJob, directory, sessionLog, bMessaging);
 	} else {
-		realSolver = new CVodeSolverStandalone(simTask, directory, sessionLog, bMessaging);
+		realSolver = new CVodeSolverStandalone(simJob, directory, sessionLog, bMessaging);
 	}
 	realSolver.addSolverListener(new SolverListener() {
 		public final void solverAborted(SolverEvent event) {		
@@ -91,7 +90,7 @@
 }
 
 @Override
-public MathExecutable getMathExecutable() {	
+protected MathExecutable getMathExecutable() {	
 	return realSolver.getMathExecutable();
 }
 
@@ -99,9 +98,4 @@
 public Vector<AnnotatedFunction> createFunctionList() {
 	return realSolver.createFunctionList();
 }
-
-@Override
-public String[] getMathExecutableCommand() {
-	return realSolver.getMathExecutableCommand();
 }
-}
Index: src/cbit/vcell/solvers/CppClassCoderMembraneRegionVarContext.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderMembraneRegionVarContext.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderMembraneRegionVarContext.java	(revision 11980)
@@ -23,7 +23,6 @@
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VolVariable;
 import cbit.vcell.math.VolumeRegionVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.SimulationJob;
@@ -39,10 +38,10 @@
 protected CppClassCoderMembraneRegionVarContext(CppCoderVCell argCppCoderVCell,
 												Equation argEquation,
 												MembraneSubDomain argMembraneSubDomain,
-												SimulationTask simTask, 
+												SimulationJob argSimulationJob, 
 												String argParentClass) throws Exception
 {
-	super(argCppCoderVCell,argEquation,argMembraneSubDomain,simTask,argParentClass);
+	super(argCppCoderVCell,argEquation,argMembraneSubDomain,argSimulationJob,argParentClass);
 }
 
 
@@ -92,7 +91,7 @@
 	out.println("{");
 	try {
 		Expression ic = getEquation().getInitialExpression();
-		ic.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+		ic.bindExpression(simulationJob.getSimulationSymbolTable());
 		double value = ic.evaluateConstant();
 		out.println("\tinitialValue = new double;");
 		out.println("\t*initialValue = " + value + ";");
@@ -131,7 +130,7 @@
 
 	try {
 		Expression ic = getEquation().getInitialExpression();
-		ic.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+		ic.bindExpression(simulationJob.getSimulationSymbolTable());
 		double value = ic.evaluateConstant();
 	}catch (Exception e){
 		out.println("\tvirtual double getInitialValue(MembraneElement *memElement);");
Index: src/cbit/vcell/solvers/SolverController.java
===================================================================
--- src/cbit/vcell/solvers/SolverController.java	(revision 11981)
+++ src/cbit/vcell/solvers/SolverController.java	(revision 11980)
@@ -32,11 +32,11 @@
 public double getProgress() throws RemoteException, SolverNotRunningException, org.vcell.util.DataAccessException;	
 
 
-///**
-// * This method was created by a SmartGuide.
-// * @return cbit.vcell.solver.Simulation
-// */
-//public cbit.vcell.solver.SimulationJob getSimulationJob() throws RemoteException, org.vcell.util.DataAccessException;
+/**
+ * This method was created by a SmartGuide.
+ * @return cbit.vcell.solver.Simulation
+ */
+public cbit.vcell.solver.SimulationJob getSimulationJob() throws RemoteException, org.vcell.util.DataAccessException;
 
 
 /**
Index: src/cbit/vcell/solvers/LocalSolverController.java
===================================================================
--- src/cbit/vcell/solvers/LocalSolverController.java	(revision 11981)
+++ src/cbit/vcell/solvers/LocalSolverController.java	(revision 11980)
@@ -10,7 +10,6 @@
 
 package cbit.vcell.solvers;
 import java.io.File;
-import java.rmi.RemoteException;
 import java.util.HashSet;
 
 import javax.swing.event.EventListenerList;
@@ -21,7 +20,6 @@
 
 import cbit.rmi.event.WorkerEvent;
 import cbit.rmi.event.WorkerEventListener;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.server.LocalVCellConnection;
 import cbit.vcell.solver.SimulationJob;
 import cbit.vcell.solver.SimulationMessage;
@@ -50,13 +48,12 @@
 /**
  * LocalMathController constructor comment.
  * @exception java.rmi.RemoteException The exception description.
- * @throws SolverException 
  */
-public LocalSolverController(LocalVCellConnection vcellConnection, SessionLog sessionLog, SimulationTask simTask, File dataDirectory) throws RemoteException, SolverException {
+public LocalSolverController(LocalVCellConnection vcellConnection, SessionLog sessionLog, SimulationJob simJob, File dataDirectory) throws java.rmi.RemoteException, SolverException {
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortSolverController,0));
 	this.log = sessionLog;
 	this.vcConn = vcellConnection;
-	solverControllerImpl = new SolverControllerImpl(vcellConnection, sessionLog, simTask, dataDirectory);
+	solverControllerImpl = new SolverControllerImpl(vcellConnection, sessionLog, simJob, dataDirectory);
 	solverControllerImpl.getSolver().addSolverListener(this);
 }
 
@@ -134,9 +131,9 @@
 /**
  * getMathDescriptionVCML method comment.
  */
-public SimulationTask getSimulationTask() throws DataAccessException {
+public SimulationJob getSimulationJob() throws DataAccessException {
 	try {
-		return solverControllerImpl.getSimulationTask();
+		return solverControllerImpl.getSimulationJob();
 	}catch (Throwable e){
 		log.exception(e);
 		throw new DataAccessException(e.getMessage());
@@ -182,12 +179,12 @@
 public void solverAborted(SolverEvent event) {
 	try {
 		log.print("LocalSolverController Caught solverAborted("+event.getSource().toString()+",error='"+event.getSimulationMessage()+"')");
-		SimulationJob simJob = getSimulationTask().getSimulationJob();
+		SimulationJob simJob = getSimulationJob();
 		if (serialParameterScanJobIndex >= 0) {
-			SimulationTask newSimTask = new SimulationTask(new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs()),getSimulationTask().getTaskID());
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_FAILURE, this, newSimTask, vcConn.getHost(), event.getSimulationMessage()));
+			SimulationJob newSimJob = new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs());
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_FAILURE, this, newSimJob, vcConn.getHost(), event.getSimulationMessage()));
 		} else {
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_FAILURE, this, getSimulationTask(), vcConn.getHost(), event.getSimulationMessage()));
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_FAILURE, this, getSimulationJob(), vcConn.getHost(), event.getSimulationMessage()));
 		}
 	}catch (Throwable e){
 		log.exception(e);
@@ -202,12 +199,12 @@
 public void solverFinished(SolverEvent event) {
 	try {
 		log.print("LocalSolverController Caught solverFinished("+event.getSource().toString()+")");
-		SimulationJob simJob = getSimulationTask().getSimulationJob();
+		SimulationJob simJob = getSimulationJob();
 		if (serialParameterScanJobIndex >= 0) {
-			SimulationTask newSimTask = new SimulationTask(new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs()),getSimulationTask().getTaskID());
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, newSimTask, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
+			SimulationJob newSimJob = new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs());
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, newSimJob, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
 		} else {
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, getSimulationTask(), vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));	
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, simJob, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));	
 		}		
 	}catch (Throwable e){
 		log.exception(e);
@@ -223,7 +220,7 @@
 	try {
 		// don't log progress and data events; data events at larger interval, since more expensive on client side
 		if (System.currentTimeMillis() - timeOfLastDataMessage > 4000 * getMessagingInterval()) {
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_DATA, this, getSimulationTask(), vcConn.getHost(), event.getProgress(), new Double(event.getTimePoint()), event.getSimulationMessage()));
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_DATA, this, getSimulationJob(), vcConn.getHost(), event.getProgress(), new Double(event.getTimePoint()), event.getSimulationMessage()));
 		}
 	}catch (Throwable e){
 		log.exception(e);
@@ -239,15 +236,16 @@
 	try {
 		// don't log progress and data events
 		if (System.currentTimeMillis() - timeOfLastProgressMessage > 1000 * getMessagingInterval()) {
+			SimulationJob simJob = getSimulationJob();
 			if (serialParameterScanJobIndex >= 0) {
-				SimulationTask newSimTask = new SimulationTask(new SimulationJob(getSimulationTask().getSimulation(), serialParameterScanJobIndex, getSimulationTask().getSimulationJob().getFieldDataIdentifierSpecs()),getSimulationTask().getTaskID());
-				fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_PROGRESS, this, newSimTask, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
+				SimulationJob newSimJob = new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs());
+				fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_PROGRESS, this, newSimJob, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
 				if (event.getProgress() >= 1) {
-					fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, newSimTask, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), SimulationMessage.MESSAGE_JOB_COMPLETED));
+					fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_COMPLETED, this, newSimJob, vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), SimulationMessage.MESSAGE_JOB_COMPLETED));
 					serialParameterScanJobIndex ++;
 				}
 			} else {
-				fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_PROGRESS, this, getSimulationTask(), vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
+				fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_PROGRESS, this, getSimulationJob(), vcConn.getHost(), new Double(event.getProgress()), new Double(event.getTimePoint()), event.getSimulationMessage()));
 			}
 		}
 	}catch (Throwable e){
@@ -263,11 +261,12 @@
 public void solverStarting(SolverEvent event) {
 	try {
 		log.print("LocalSolverController Caught solverStarting("+event.getSource().toString()+")");
+		SimulationJob simJob = getSimulationJob();
 		if (serialParameterScanJobIndex >= 0) {
-			SimulationTask newSimTask = new SimulationTask(new SimulationJob(getSimulationTask().getSimulation(), serialParameterScanJobIndex, getSimulationTask().getSimulationJob().getFieldDataIdentifierSpecs()),getSimulationTask().getTaskID());
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_STARTING, this, newSimTask, vcConn.getHost(), event.getSimulationMessage()));
+			SimulationJob newSimJob = new SimulationJob(simJob.getSimulation(), serialParameterScanJobIndex, simJob.getFieldDataIdentifierSpecs());
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_STARTING, this, newSimJob, vcConn.getHost(), event.getSimulationMessage()));
 		} else {
-			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_STARTING, this, getSimulationTask(), vcConn.getHost(), event.getSimulationMessage()));
+			fireWorkerEvent(new WorkerEvent(WorkerEvent.JOB_STARTING, this, simJob, vcConn.getHost(), event.getSimulationMessage()));
 		}
 	}catch (Throwable e){
 		log.exception(e);
@@ -294,8 +293,8 @@
  */
 public void startSimulationJob() throws SimExecutionException, DataAccessException {
 	try {
-		resultSetSavedSet.remove(getSimulationTask().getSimulationJob().getVCDataIdentifier());
-		if (getSimulationTask().getSimulation().isSerialParameterScan()) {
+		resultSetSavedSet.remove(getSimulationJob().getVCDataIdentifier());
+		if (getSimulationJob().getSimulation().isSerialParameterScan()) {
 			serialParameterScanJobIndex = 0;
 		}
 		solverControllerImpl.startSimulationJob();
Index: src/cbit/vcell/solvers/CppClassCoderSimulation.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderSimulation.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderSimulation.java	(revision 11980)
@@ -20,7 +20,6 @@
 import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.math.*;
 import cbit.vcell.messaging.JmsUtils;
-import cbit.vcell.messaging.server.SimulationTask;
 
 /**
  * This class was generated by a SmartGuide.
@@ -34,9 +33,9 @@
  * VarContextCppCoder constructor comment.
  * @param name java.lang.String
  */
-protected CppClassCoderSimulation(CppCoderVCell cppCoderVCell, SimulationTask simTask, String baseDataName) 
+protected CppClassCoderSimulation(CppCoderVCell cppCoderVCell, SimulationJob argSimulationJob, String baseDataName) 
 {
-	super(simTask, cppCoderVCell,"UserSimulation", "Simulation");
+	super(argSimulationJob, cppCoderVCell,"UserSimulation", "Simulation");
 	this.baseDataName = baseDataName;
 }
 
@@ -68,7 +67,7 @@
 	out.println("\tdouble pcgRelTol = SimTool::getInstance()->getPCGRelativeErrorTolerance();");
 	out.println();
 
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	MathDescription mathDescription = simSymbolTable.getSimulation().getMathDescription();
 	
 	Variable variables[] = simSymbolTable.getVariables();
@@ -249,7 +248,7 @@
  */
 protected void writeGetSimTool(java.io.PrintWriter out) throws Exception {
 
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	SolverTaskDescription taskDesc = simulation.getSolverTaskDescription();
 	if (taskDesc==null){
 		throw new Exception("task description not defined");
@@ -274,7 +273,7 @@
 	out.println();
 	
 	out.println("\tSimTool::create();");	
-	out.println("\tsprintf(tempString, \"%s%c" + simTask.getSimulationJob().getSimulationJobID() + "\\0\", outputPath, DIRECTORY_SEPARATOR);");
+	out.println("\tsprintf(tempString, \"%s%c" + simulationJob.getSimulationJobID() + "\\0\", outputPath, DIRECTORY_SEPARATOR);");
 	out.println("\tSimTool::getInstance()->setBaseFilename(tempString);");
 	
 	double defaultTimeStep = taskDesc.getTimeStep().getDefaultTimeStep();
@@ -310,7 +309,7 @@
 	out.println();
 	
 	out.println("\tSimulationMessaging::getInstVar()->setWorkerEvent(new WorkerEvent(JOB_STARTING, \"initializing mesh...\"));");
-	out.println("\tsprintf(tempString, \"%s%c" + simTask.getSimulationJob().getSimulationJobID() + ".vcg\\0\", outputPath, DIRECTORY_SEPARATOR);");
+	out.println("\tsprintf(tempString, \"%s%c" + simulationJob.getSimulationJobID() + ".vcg\\0\", outputPath, DIRECTORY_SEPARATOR);");
 	out.println("\tCartesianMesh* mesh = new CartesianMesh();");
 	out.println("\tifstream ifs(tempString);");
 	out.println("\tif (!ifs.is_open()){");
@@ -366,7 +365,7 @@
  */
 protected void writeMain(java.io.PrintWriter out) throws Exception {
 
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	FieldFunctionArguments[] fieldFuncArgs = FieldUtilities.getFieldFunctionArguments(simulation.getMathDescription());
 	//FieldDataIdentifierSpec[] fieldDataIDSs = simulationJob.getFieldDataIdentifierSpecs();
 	SolverTaskDescription taskDesc = simulation.getSolverTaskDescription();
@@ -488,7 +487,7 @@
 	out.println("\t\t\tchar* tname = \"" + JmsUtils.getTopicServiceControl() + "\";");
 	out.println("\t\t\tchar* vcusername = \"" + simulation.getVersion().getOwner().getName() + "\";");
 	out.println("\t\t\tjint simKey = " + simulation.getVersion().getVersionKey() + ";");
-	out.println("\t\t\tjint jobIndex = " + simTask.getSimulationJob().getJobIndex() + ";");
+	out.println("\t\t\tjint jobIndex = " + simulationJob.getJobIndex() + ";");
 	out.println("\t\t\tSimulationMessaging::create(broker, smqusername, password, qname, tname, vcusername, simKey, jobIndex, taskID);");
 	out.println("#endif");
 	out.println("\t\t}");
@@ -496,7 +495,7 @@
 	out.println("\t\tSimulationMessaging::getInstVar()->start(); // start the thread");
 	out.println("#endif");
 
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	if (fieldFuncArgs != null && fieldFuncArgs.length > 0) {
 		FieldFunctionArguments psfFieldFunc = null;
Index: src/cbit/vcell/solvers/CppClassCoderFeature.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderFeature.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderFeature.java	(revision 11980)
@@ -15,7 +15,6 @@
 import cbit.vcell.math.BoundaryConditionType;
 import cbit.vcell.math.CompartmentSubDomain;
 import cbit.vcell.math.MembraneSubDomain;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.SimulationJob;
 /**
  * This class was generated by a SmartGuide.
@@ -28,10 +27,10 @@
  * VarContextCppCoder constructor comment.
  * @param name java.lang.String
  */
-protected CppClassCoderFeature(CppCoderVCell cppCoderVCell, SimulationTask simTask, 
+protected CppClassCoderFeature(CppCoderVCell cppCoderVCell, SimulationJob argSimulationJob, 
 										CompartmentSubDomain volSubDomain, MembraneSubDomain memSubDomain) 
 {
-	super(simTask, cppCoderVCell,"Feature"+volSubDomain.getName(), "Feature");
+	super(argSimulationJob, cppCoderVCell,"Feature"+volSubDomain.getName(), "Feature");
 	this.volumeSubDomain = volSubDomain;
 	this.membraneSubDomain = memSubDomain;
 }
@@ -47,7 +46,7 @@
  * @param out java.io.PrintWriter
  */
 protected void writeConstructor(java.io.PrintWriter out) throws Exception {
-	int handle = simTask.getSimulation().getMathDescription().getHandle(volumeSubDomain);	
+	int handle = simulationJob.getSimulation().getMathDescription().getHandle(volumeSubDomain);	
 	out.println(getClassName()+"::"+getClassName()+"(string& Aname, int priority)");
 	out.println(": Feature(Aname, "+handle+", priority)");
  	out.println("{");
Index: src/cbit/vcell/solvers/FiniteVolumeFileWriter.java
===================================================================
--- src/cbit/vcell/solvers/FiniteVolumeFileWriter.java	(revision 11981)
+++ src/cbit/vcell/solvers/FiniteVolumeFileWriter.java	(revision 11980)
@@ -74,7 +74,6 @@
 import cbit.vcell.math.VolumeRandomVariable;
 import cbit.vcell.math.VolumeRegionEquation;
 import cbit.vcell.math.VolumeRegionVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Discontinuity;
 import cbit.vcell.parser.DivideByZeroException;
 import cbit.vcell.parser.Expression;
@@ -192,19 +191,19 @@
 		GAUSSIAN_CONVOLUTION_DATA_GENERATOR,
 	}
 
-public FiniteVolumeFileWriter(PrintWriter pw, SimulationTask simTask, Geometry geo, File dir) {	// for optimization only, no messaging
-	this (pw, simTask, geo, dir, false);
+public FiniteVolumeFileWriter(PrintWriter pw, SimulationJob simJob, Geometry geo, File dir) {	// for optimization only, no messaging
+	this (pw, simJob, geo, dir, false);
 	bInlineVCG = true; 
 }
 
-public FiniteVolumeFileWriter(PrintWriter pw, SimulationTask simTask, Geometry geo, File dir, boolean arg_bMessaging) {
-	super(pw, simTask, arg_bMessaging);
+public FiniteVolumeFileWriter(PrintWriter pw, SimulationJob simJob, Geometry geo, File dir, boolean arg_bMessaging) {
+	super(pw, simJob, arg_bMessaging);
 	resampledGeometry = geo;
 	userDirectory = dir;
 }
 
 private Expression subsituteExpression(Expression exp, VariableDomain variableDomain) throws ExpressionException  {
-	return subsituteExpression(exp, simTask.getSimulationJob().getSimulationSymbolTable(), variableDomain);
+	return subsituteExpression(exp, simulationJob.getSimulationSymbolTable(), variableDomain);
 }
 /**
  * Insert the method's description here.
@@ -238,9 +237,9 @@
  */
 public void write(String[] parameterNames) throws Exception {
 	Variable originalVars[] = null;
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	MathDescription mathDesc = simulation.getMathDescription();
-	if (simTask.getSimulation().isSerialParameterScan()) {
+	if (simulationJob.getSimulation().isSerialParameterScan()) {
 		originalVars = (Variable[])BeanUtils.getArray(mathDesc.getVariables(),Variable.class);
 		Variable allVars[] = (Variable[])BeanUtils.getArray(mathDesc.getVariables(),Variable.class);
 		MathOverrides mathOverrides = simulation.getMathOverrides();	
@@ -286,12 +285,12 @@
 }
 
 private void writeSmoldyn() throws Exception {
-	String baseName =  new File(userDirectory, simTask.getSimulationJob().getSimulationJobID()).getPath();
+	String baseName =  new File(userDirectory, simulationJob.getSimulationJobID()).getPath();
 	String inputFilename = baseName + SimDataConstants.SMOLDYN_INPUT_FILE_EXTENSION;
 	PrintWriter pw = null;
 	try {
 		pw = new PrintWriter(inputFilename);
-		SmoldynFileWriter stFileWriter = new SmoldynFileWriter(pw, false, baseName, simTask, bUseMessaging);
+		SmoldynFileWriter stFileWriter = new SmoldynFileWriter(pw, false, baseName, simulationJob, bUseMessaging);
 		stFileWriter.write();
 	} finally {
 		if (pw != null) {
@@ -307,7 +306,7 @@
 }
 
 private void writePostProcessingBlock() throws Exception{ // SolverException, ExpressionException and exceptions from roiDataGenerator.getROIDataGeneratorDescription()
-	PostProcessingBlock postProcessingBlock = simTask.getSimulation().getMathDescription().getPostProcessingBlock();
+	PostProcessingBlock postProcessingBlock = simulationJob.getSimulation().getMathDescription().getPostProcessingBlock();
 	if (postProcessingBlock.getNumDataGenerators() == 0) { // to make c++ code write default var statisitcs, without the token it won't write anything
 		printWriter.println(FVInputFileKeyword.POST_PROCESSING_BLOCK_BEGIN);
 		printWriter.println(FVInputFileKeyword.POST_PROCESSING_BLOCK_END);
@@ -348,7 +347,7 @@
 			DATA_PROCESSOR_END
 			*/
 			ROIDataGenerator roiDataGenerator = (ROIDataGenerator) dataGenerator;
-			printWriter.println(roiDataGenerator.getROIDataGeneratorDescription(userDirectory, simTask.getSimulationJob())); 
+			printWriter.println(roiDataGenerator.getROIDataGeneratorDescription(userDirectory, simulationJob)); 
 		} else {
 			throw new SolverException(dataGenerator.getClass() + " : data generator not supported yet.");
 		}
@@ -359,7 +358,7 @@
 
 
 /*private void writeDataProcessor() throws DataAccessException, IOException, MathException, DivideByZeroException, ExpressionException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	DataProcessingInstructions dpi = simulation.getDataProcessingInstructions();
 	if (dpi == null) {
 		printWriter.println("DATA_PROCESSOR_BEGIN " + DataProcessingInstructions.ROI_TIME_SERIES);
@@ -440,7 +439,7 @@
 	if (fastSystem == null) {
 		return;
 	}
-	FastSystemAnalyzer fs_analyzer = new FastSystemAnalyzer(fastSystem, simTask.getSimulationJob().getSimulationSymbolTable());
+	FastSystemAnalyzer fs_analyzer = new FastSystemAnalyzer(fastSystem, simulationJob.getSimulationSymbolTable());
 	int numIndep = fs_analyzer.getNumIndependentVariables();
 	int numDep = fs_analyzer.getNumDependentVariables();
 	int numPseudo = fs_analyzer.getNumPseudoConstants();	
@@ -529,12 +528,12 @@
  * @throws ExpressionException 
  */
 private void writeCompartment_VarContext(CompartmentSubDomain volSubDomain) throws ExpressionException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	//
 	// get list of volVariables participating in PDEs (anywhere).
 	//
 	Vector<VolVariable> pdeVolVariableList = new Vector<VolVariable>();
-	Variable[] variables = simTask.getSimulationJob().getSimulationSymbolTable().getVariables();
+	Variable[] variables = simulationJob.getSimulationSymbolTable().getVariables();
 	for (int i = 0; i < variables.length; i++){
 		if (variables[i] instanceof VolVariable && simulation.getMathDescription().isPDE((VolVariable)variables[i])){
 			pdeVolVariableList.add((VolVariable)variables[i]);
@@ -670,7 +669,7 @@
  * @throws MathException 
 */
 private void writeCompartments() throws ExpressionException, MathException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	MathDescription mathDesc = simulation.getMathDescription();
 	Enumeration<SubDomain> enum1 = mathDesc.getSubDomains();
 	while (enum1.hasMoreElements()) {		
@@ -739,7 +738,7 @@
 	}
 }
 
-public static String replaceVolumeVariable(SimulationTask simTask, MembraneSubDomain msd, Expression exp) throws MathException, ExpressionException {
+public static String replaceVolumeVariable(SimulationJob simulationJob, MembraneSubDomain msd, Expression exp) throws MathException, ExpressionException {
 	Expression fluxExpr = new Expression(exp);
 	String symbols[] = exp.getSymbols();
 	String flux = null;
@@ -748,7 +747,7 @@
 		flux = exp.infix();
 	} else {
 		for (String symbol : symbols) {
-			Variable var = simTask.getSimulationJob().getSimulationSymbolTable().getVariable(symbol);
+			Variable var = simulationJob.getSimulationSymbolTable().getVariable(symbol);
 			if (var instanceof VolVariable || var instanceof VolumeRegionVariable) {
 				fluxExpr.substituteInPlace(new Expression(var.getName()), new Expression(var.getName() + "_" + var.getDomain().getName() + "_membrane"));
 			}
@@ -779,7 +778,7 @@
 		if (jc.getVariable().getDomain() == null || jc.getVariable().getDomain().getName().equals(msd.getInsideCompartment().getName())) 
 		{
 			Expression flux = subsituteExpression(jc.getInFluxExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE);
-			String infix = replaceVolumeVariable(getSimulationTask(), msd, flux);
+			String infix = replaceVolumeVariable(getSimulationJob(), msd, flux);
 			printWriter.println("FLUX " + msd.getInsideCompartment().getName() + " " + infix + ";");
 		}
 		
@@ -787,7 +786,7 @@
 		{
 			// outflux
 			Expression flux = subsituteExpression(jc.getOutFluxExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE);
-			String infix = replaceVolumeVariable(simTask, msd, flux);
+			String infix = replaceVolumeVariable(getSimulationJob(), msd, flux);
 			printWriter.println("FLUX " + msd.getOutsideCompartment().getName() + " " + infix + ";");
 		}		
 		printWriter.println("JUMP_CONDITION_END");
@@ -837,7 +836,7 @@
 	printWriter.println("INITIAL " + subsituteExpression(equation.getInitialExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE).infix() + ";");
 	
 	Expression rateExp = subsituteExpression(((MembraneRegionEquation)equation).getMembraneRateExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE);
-	String rateStr = replaceVolumeVariable(simTask, memSubDomain, rateExp);
+	String rateStr = replaceVolumeVariable(getSimulationJob(), memSubDomain, rateExp);
 	printWriter.println("RATE " + rateStr + ";");
 	
 	printWriter.println("UNIFORMRATE " + subsituteExpression(((MembraneRegionEquation)equation).getUniformRateExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE).infix() + ";");
@@ -902,7 +901,7 @@
  * @throws MathException 
  */
 private void writeMembranes() throws ExpressionException, MathException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	MathDescription mathDesc = simulation.getMathDescription();
 	Enumeration<SubDomain> enum1 = mathDesc.getSubDomains();
 	while (enum1.hasMoreElements()) {		
@@ -936,7 +935,7 @@
  * @throws MathException 
 */
 private void writeModelDescription() throws MathException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	
 	printWriter.println("# Model description: FEATURE name handle boundary_conditions");
 	printWriter.println(FVInputFileKeyword.MODEL_BEGIN);
@@ -960,8 +959,8 @@
 
 
 private void getDiscontinuityTimes(Vector<Discontinuity> discontinuities, TreeSet<Double> discontinuityTimes) throws ExpressionException, MathException {
-	Simulation simulation = simTask.getSimulation();
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	Simulation simulation = simulationJob.getSimulation();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	for (Discontinuity discontinuity : discontinuities) {
 		Expression rfexp = discontinuity.getRootFindingExp();
@@ -992,8 +991,8 @@
 		}
 	}
 	
-	/*Simulation simulation = simTask.getSimulation();
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	/*Simulation simulation = simulationJob.getSimulation();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	MonadicFunctionRootFinder rootFinder = new Bisection();
 	
 	for (Discontinuity discontinuity : discontinuities) {
@@ -1141,7 +1140,7 @@
  * @throws ExpressionException 
 */
 private void writeSimulationParamters() throws ExpressionException, MathException {	
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	SolverTaskDescription solverTaskDesc = simulation.getSolverTaskDescription();
 	
 	printWriter.println("# Simulation Parameters");
@@ -1163,7 +1162,7 @@
 			Enumeration<Equation> enum_equ = sd.getEquations();
 			while (enum_equ.hasMoreElements()){
 				Equation equation = enum_equ.nextElement();
-				equation.getDiscontinuities(simTask.getSimulationJob().getSimulationSymbolTable(), discontinuities);
+				equation.getDiscontinuities(simulationJob.getSimulationSymbolTable(), discontinuities);
 			}
 		}
 		getDiscontinuityTimes(discontinuities, discontinuityTimes);
@@ -1177,7 +1176,7 @@
 	} else { 
 		printWriter.println(FVInputFileKeyword.SOLVER + " " + FVInputFileKeyword.FV_SOLVER + " " + solverTaskDesc.getErrorTolerance().getRelativeErrorTolerance());
 	}
-	printWriter.println(FVInputFileKeyword.BASE_FILE_NAME + " " + new File(userDirectory, simTask.getSimulationJob().getSimulationJobID()).getAbsolutePath());
+	printWriter.println(FVInputFileKeyword.BASE_FILE_NAME + " " + new File(userDirectory, simulationJob.getSimulationJobID()).getAbsolutePath());
     printWriter.println(FVInputFileKeyword.ENDING_TIME + " " + solverTaskDesc.getTimeBounds().getEndingTime());    
     OutputTimeSpec outputTimeSpec = solverTaskDesc.getOutputTimeSpec();	
 	if (solverTaskDesc.getSolverDescription().equals(SolverDescription.SundialsPDE)) {
@@ -1227,7 +1226,7 @@
 	if (bInlineVCG) {
 		GeometryFileWriter.write(printWriter, resampledGeometry);
 	} else {
-		printWriter.println(FVInputFileKeyword.VCG_FILE + " " + new File(userDirectory, simTask.getSimulationJobID() + SimDataConstants.VCG_FILE_EXTENSION).getAbsolutePath());
+		printWriter.println(FVInputFileKeyword.VCG_FILE + " " + new File(userDirectory, simulationJob.getSimulationJobID() + SimDataConstants.VCG_FILE_EXTENSION).getAbsolutePath());
 	}	
 	printWriter.println(FVInputFileKeyword.MESH_END);
 	printWriter.println();
@@ -1298,7 +1297,7 @@
  * @throws IOException 
  */
 private void writeVariables() throws MathException, ExpressionException, IOException {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	printWriter.println("# Variables : type name domain time_dependent_flag advection_flag grad_flag solve_whole_mesh_flag solve_regions");
 	printWriter.println(FVInputFileKeyword.VARIABLE_BEGIN);
@@ -1344,7 +1343,7 @@
 			 		}
 			  	}
 				if (totalNumCompartments == listOfSubDomains.size()
-						|| listOfSubDomains.size() == 0 && simTask.getSimulation().getSolverTaskDescription().getSolverDescription().equals(SolverDescription.SundialsPDE)) {
+						|| listOfSubDomains.size() == 0 && simulationJob.getSimulation().getSolverTaskDescription().getSolverDescription().equals(SolverDescription.SundialsPDE)) {
 					printWriter.print(" true");
 				} else {
 					printWriter.print(" false");
@@ -1380,7 +1379,7 @@
 	
 	int numRandomVariables = rvList.size();
 	if (numRandomVariables > 0) {
-		ISize samplingSize = simTask.getSimulation().getMeshSpecification().getSamplingSize();
+		ISize samplingSize = simulationJob.getSimulation().getMeshSpecification().getSamplingSize();
 		String[] varNameArr = new String[numRandomVariables];
 		VariableType[] varTypeArr = new VariableType[numRandomVariables];
 		double[][] dataArr = new double[numRandomVariables][];
@@ -1402,7 +1401,7 @@
 			printWriter.println(" " + varNameArr[i]);
 			dataArr[i] = generateRandomNumbers(rv, numRandomNumbers);
 		}
-		File rvFile = new File(userDirectory, simTask.getSimulationJobID() + RANDOM_VARIABLE_FILE_EXTENSION);
+		File rvFile = new File(userDirectory, simulationJob.getSimulationJobID() + RANDOM_VARIABLE_FILE_EXTENSION);
 		DataSet.writeNew(rvFile, varNameArr, varTypeArr, samplingSize, dataArr);
 	}
 	printWriter.println(FVInputFileKeyword.VARIABLE_END);
@@ -1429,7 +1428,7 @@
 }
 
 private void writeSerialParameterScans() throws ExpressionException,  DivideByZeroException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	if (!simulation.isSerialParameterScan()) {
 		return;
 	}
@@ -1471,7 +1470,7 @@
 */
 
 private void writeFieldData() throws FileNotFoundException, ExpressionException, DataAccessException {
-	FieldDataIdentifierSpec[] fieldDataIDSpecs = simTask.getSimulationJob().getFieldDataIdentifierSpecs();
+	FieldDataIdentifierSpec[] fieldDataIDSpecs = simulationJob.getFieldDataIdentifierSpecs();
 	if (fieldDataIDSpecs == null || fieldDataIDSpecs.length == 0) {
 		return;
 	}
@@ -1486,7 +1485,7 @@
 	
 	FieldFunctionArguments psfFieldFunc = null;
 	
-	Variable var = simTask.getSimulationJob().getSimulationSymbolTable().getVariable(SimDataConstants.PSF_FUNCTION_NAME);
+	Variable var = simulationJob.getSimulationSymbolTable().getVariable(SimDataConstants.PSF_FUNCTION_NAME);
 	if (var != null) {
 		FieldFunctionArguments[] ffas = FieldUtilities.getFieldFunctionArguments(var.getExpression());
 		if (ffas == null || ffas.length == 0) {
@@ -1507,7 +1506,7 @@
 		if(!uniqueFieldDataIDSpecs.contains(fieldDataIDSpecs[i])){
 			FieldFunctionArguments ffa = fieldDataIDSpecs[i].getFieldFuncArgs();
 			File newResampledFieldDataFile = new File(userDirectory,
-					SimulationData.createCanonicalResampleFileName((VCSimulationDataIdentifier)simTask.getSimulationJob().getVCDataIdentifier(),
+					SimulationData.createCanonicalResampleFileName((VCSimulationDataIdentifier)simulationJob.getVCDataIdentifier(),
 							fieldDataIDSpecs[i].getFieldFuncArgs())
 				);
 			uniqueFieldDataIDSpecs.add(fieldDataIDSpecs[i]);
@@ -1561,7 +1560,7 @@
 	printWriter.println("EQUATION_BEGIN " + equation.getVariable().getName());
 	printWriter.println("INITIAL " + subsituteExpression(equation.getInitialExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE).infix() + ";");
 	Expression rateExpression = subsituteExpression(equation.getRateExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE);
-	printWriter.println("RATE " + replaceVolumeVariable(simTask, memSubDomain, rateExpression) + ";");
+	printWriter.println("RATE " + replaceVolumeVariable(getSimulationJob(), memSubDomain, rateExpression) + ";");
 	if (equation instanceof PdeEquation) {
 		printWriter.println("DIFFUSION " + subsituteExpression(((PdeEquation)equation).getDiffusionExpression(), VariableDomain.VARIABLEDOMAIN_MEMBRANE).infix() + ";");
 		
Index: src/cbit/vcell/solvers/CppClassCoderFastSystem.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderFastSystem.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderFastSystem.java	(revision 11980)
@@ -21,7 +21,6 @@
 import cbit.vcell.math.ReservedVariable;
 import cbit.vcell.math.SubDomain;
 import cbit.vcell.math.Variable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.solver.SimulationJob;
 /**
@@ -36,11 +35,11 @@
  * @param name java.lang.String
  */
 protected CppClassCoderFastSystem(CppCoderVCell cppCoderVCell, FastSystem fastSystem,
-								SubDomain subDomain,SimulationTask simTask,String parentClass) throws Exception
+								SubDomain subDomain,SimulationJob arg_simJob,String parentClass) throws Exception
 {
-	super(simTask, cppCoderVCell,parentClass+subDomain.getName(), parentClass);
+	super(arg_simJob, cppCoderVCell,parentClass+subDomain.getName(), parentClass);
 	this.subDomain = subDomain;
-	this.fs_analyzer = new FastSystemAnalyzer(fastSystem, simTask.getSimulationJob().getSimulationSymbolTable());
+	this.fs_analyzer = new FastSystemAnalyzer(fastSystem, simulationJob.getSimulationSymbolTable());
 }
 /**
  * This method was created by a SmartGuide.
@@ -231,7 +230,7 @@
 	Enumeration<PseudoConstant> enum2 = fs_analyzer.getPseudoConstants();
 	while (enum2.hasMoreElements()){
 		PseudoConstant pc = (PseudoConstant)enum2.nextElement();
-		out.println("\t" + CppClassCoder.getEscapedFieldVariableName_C(pc.getName()) + " = " + infix_C(simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(pc.getPseudoExpression()).flatten())+";");
+		out.println("\t" + CppClassCoder.getEscapedFieldVariableName_C(pc.getName()) + " = " + infix_C(simulationJob.getSimulationSymbolTable().substituteFunctions(pc.getPseudoExpression()).flatten())+";");
 		invariantCount++;
 	}
 		
@@ -358,7 +357,7 @@
 		out.println("\tdouble " + CppClassCoder.getEscapedLocalVariableName_C(pc.getName()) + " = " + CppClassCoder.getEscapedFieldVariableName_C(pc.getName()) + ";");
 	}
 	
-	FieldFunctionArguments[] fieldFuncArgs = FieldUtilities.getFieldFunctionArguments(simTask.getSimulationJob().getSimulationSymbolTable().getSimulation().getMathDescription());
+	FieldFunctionArguments[] fieldFuncArgs = FieldUtilities.getFieldFunctionArguments(simulationJob.getSimulationSymbolTable().getSimulation().getMathDescription());
 
 	for (int i = 0; fieldFuncArgs != null && i < fieldFuncArgs.length; i ++) {
 		String localvarname = CppClassCoder.getEscapedLocalFieldVariableName_C(fieldFuncArgs[i]);
Index: src/cbit/vcell/solvers/HTCSolver.java
===================================================================
--- src/cbit/vcell/solvers/HTCSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/HTCSolver.java	(revision 11980)
@@ -13,7 +13,6 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.PrintWriter;
-import java.util.ArrayList;
 
 import org.vcell.util.Executable;
 import org.vcell.util.PropertyLoader;
@@ -35,7 +34,7 @@
  */
 public abstract class HTCSolver extends AbstractSolver {
 	protected AbstractSolver realSolver = null;
-	protected ArrayList<String> cmdArguments = new ArrayList<String>();
+	protected java.lang.String cmdArguments = "";
 	protected SimulationTask simulationTask = null;
 
 /**
@@ -46,10 +45,10 @@
  * @exception cbit.vcell.solver.SolverException The exception description.
  */
 public HTCSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
-	super(simTask, directory, sessionLog);
+	super(simTask.getSimulationJob(), directory, sessionLog);
 	simulationTask = simTask;
-	if (!simTask.getSimulation().getSolverTaskDescription().getSolverDescription().isJavaSolver()) {
-		realSolver = (AbstractSolver)SolverFactory.createSolver(sessionLog, directory, simTask, true);
+	if (!simulationJob.getSimulation().getSolverTaskDescription().getSolverDescription().isJavaSolver()) {
+		realSolver = (AbstractSolver)SolverFactory.createSolver(sessionLog, directory, simTask.getSimulationJob(), true);
 		realSolver.addSolverListener(new SolverListener() {
 			public final void solverAborted(SolverEvent event) {		
 				fireSolverAborted(event.getSimulationMessage());
@@ -82,15 +81,14 @@
 			
 		});	
 	}
-	cmdArguments.add("-tid");
-	cmdArguments.add(String.valueOf(simTask.getTaskID()));
+	cmdArguments = "-tid " + String.valueOf(simTask.getTaskID());
 }
 
 /**
  *  This method takes the place of the old runUnsteady()...
  */
 protected void initialize() throws SolverException {
-	if (simTask.getSimulation().getSolverTaskDescription().getSolverDescription().isJavaSolver()) {
+	if (simulationJob.getSimulation().getSolverTaskDescription().getSolverDescription().isJavaSolver()) {
 		writeJavaInputFile();
 	} else {
 		realSolver.initialize(); 
@@ -102,7 +100,7 @@
 	try {
 		File inputFile = new File(getBaseName() + JAVA_INPUT_EXTENSION);
 		if (!inputFile.exists()) {	// write input file which is just xml				
-			String xmlString = XmlHelper.simToXML(simTask.getSimulation());
+			String xmlString = XmlHelper.simToXML(simulationJob.getSimulation());
 			pw = new PrintWriter(inputFile);
 			pw.println(xmlString);
 			pw.close();
Index: src/cbit/vcell/solvers/CppClassCoderMembraneVarContext.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderMembraneVarContext.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderMembraneVarContext.java	(revision 11980)
@@ -12,7 +12,6 @@
 
 
 import cbit.vcell.math.*;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.*;
 import cbit.vcell.solver.*;
 /**
@@ -27,10 +26,10 @@
 protected CppClassCoderMembraneVarContext(CppCoderVCell argCppCoderVCell,
 												Equation argEquation,
 												MembraneSubDomain argMembraneSubDomain,
-												SimulationTask simTask, 
+												SimulationJob argSimulationJob, 
 												String argParentClass) throws Exception
 {
-	super(argCppCoderVCell,argEquation,argMembraneSubDomain,simTask,argParentClass);
+	super(argCppCoderVCell,argEquation,argMembraneSubDomain,argSimulationJob,argParentClass);
 }
 
 
@@ -79,7 +78,7 @@
 	out.println("{");
 	try {
 		Expression ic = getEquation().getInitialExpression();
-		ic.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+		ic.bindExpression(simulationJob.getSimulationSymbolTable());
 		double value = ic.evaluateConstant();
 		out.println("\tinitialValue = new double;");
 		out.println("\t*initialValue = "+value+";");
@@ -117,7 +116,7 @@
 	out.println("\tvirtual void resolveReferences(Simulation *sim);");
 
 	BoundaryConditionType bc = null;
-	int dimension = simTask.getSimulation().getMathDescription().getGeometry().getDimension();
+	int dimension = simulationJob.getSimulation().getMathDescription().getGeometry().getDimension();
 	if (getEquation() instanceof PdeEquation){
 		PdeEquation pdeEqu = (PdeEquation)getEquation();
 		if (pdeEqu.getBoundaryXm()!=null){
@@ -184,7 +183,7 @@
 	}		
 	try {
 		Expression ic = getEquation().getInitialExpression();
-		ic.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+		ic.bindExpression(simulationJob.getSimulationSymbolTable());
 		double value = ic.evaluateConstant();
 	}catch (Exception e){
 		out.println("\tvirtual double getInitialValue(MembraneElement *memElement);");
@@ -243,7 +242,7 @@
 		writeMembraneFunction(out,"getMembraneDiffusionRate", new Expression(0.0), bFlippedInsideOutside);
 	}
 	out.println("");
-	MathDescription mathDesc = simTask.getSimulation().getMathDescription();
+	MathDescription mathDesc = simulationJob.getSimulation().getMathDescription();
 	int dimension = mathDesc.getGeometry().getDimension();
 	if (getEquation() instanceof PdeEquation){
 		PdeEquation pde = (PdeEquation)getEquation();
Index: src/cbit/vcell/solvers/FVSolverStandalone.java
===================================================================
--- src/cbit/vcell/solvers/FVSolverStandalone.java	(revision 11981)
+++ src/cbit/vcell/solvers/FVSolverStandalone.java	(revision 11980)
@@ -17,7 +17,6 @@
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.AnnotatedFunction;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
@@ -41,12 +40,12 @@
  * @param simID java.lang.String
  * @param clientProxy cbit.vcell.solvers.ClientProxy
  */
-public FVSolverStandalone (SimulationTask simTask, File dir, SessionLog sessionLog) throws SolverException {
-	this(simTask, dir, sessionLog, true);
+public FVSolverStandalone (SimulationJob argSimulationJob, File dir, SessionLog sessionLog) throws SolverException {
+	this(argSimulationJob, dir, sessionLog, true);
 }
 	
-public FVSolverStandalone (SimulationTask simTask, File dir, SessionLog sessionLog, boolean arg_bMessaging) throws SolverException {
-	super(simTask, dir, sessionLog, arg_bMessaging);
+public FVSolverStandalone (SimulationJob argSimulationJob, File dir, SessionLog sessionLog, boolean arg_bMessaging) throws SolverException {
+	super(argSimulationJob, dir, sessionLog, arg_bMessaging);
 }
 
 /**
@@ -54,21 +53,21 @@
  */
 protected void initialize() throws SolverException {
 	try {
-		Simulation sim = simTask.getSimulation();
+		Simulation sim = simulationJob.getSimulation();
 		if (sim.isSerialParameterScan()) {
 			//write functions file for all the simulations in the scan
 			for (int scan = 0; scan < sim.getScanCount(); scan ++) {
-				SimulationJob simJob = new SimulationJob(sim, scan, simTask.getSimulationJob().getFieldDataIdentifierSpecs());
+				SimulationJob simJob = new SimulationJob(sim, scan, simulationJob.getFieldDataIdentifierSpecs());
 				// ** Dumping the functions of a simulation into a '.functions' file.
 				String basename = new File(getSaveDirectory(), simJob.getSimulationJobID()).getPath();
 				String functionFileName = basename + FUNCTIONFILE_EXTENSION;
 				
-				Vector<AnnotatedFunction> funcList = simJob.getSimulationSymbolTable().createAnnotatedFunctionsList(simTask.getSimulation().getMathDescription());				
+				Vector<AnnotatedFunction> funcList = simJob.getSimulationSymbolTable().createAnnotatedFunctionsList(simulationJob.getSimulation().getMathDescription());				
 				//Try to save existing user defined functions	
 				try{
 					File existingFunctionFile = new File(functionFileName);
 					if (existingFunctionFile.exists()){
-						Vector<AnnotatedFunction> oldFuncList = FunctionFileGenerator.readFunctionsFile(existingFunctionFile, simTask.getSimulationJobID());
+						Vector<AnnotatedFunction> oldFuncList = FunctionFileGenerator.readFunctionsFile(existingFunctionFile, simulationJob.getSimulationJobID());
 						for(AnnotatedFunction func : oldFuncList){
 							if(func.isOldUserDefined()){
 								funcList.add(func);
@@ -101,33 +100,22 @@
 	
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING, SimulationMessage.MESSAGE_SOLVER_RUNNING_INPUT_FILE));
 			
-		File fvinputFile = new File(getInputFilename());
+		File fvinputFile = new File(getSaveDirectory(), cppCoderVCell.getBaseFilename()+".fvinput");
 		PrintWriter pw = null;
 		try {
 			pw = new PrintWriter(new FileWriter(fvinputFile));
-			new FiniteVolumeFileWriter(pw, simTask, getResampledGeometry(), getSaveDirectory(), bMessaging).write();
+			new FiniteVolumeFileWriter(pw, simulationJob, getResampledGeometry(), getSaveDirectory(), bMessaging).write();
 		} finally {
 			if (pw != null) {
 				pw.close();
 			}
 		}
 	
-		setMathExecutable(new MathExecutable(getMathExecutableCommand()));
+		String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.finiteVolumeExecutableProperty);
+		setMathExecutable(new MathExecutable(new String[] {executableName, fvinputFile.getAbsolutePath()}));
 	} catch (Exception ex) {
 		ex.printStackTrace(System.out);
 		throw new SolverException(ex.getMessage());
 	}
 }
-
-private String getInputFilename(){
-	return new File(getSaveDirectory(),cppCoderVCell.getBaseFilename()+".fvinput").getAbsolutePath();
 }
-
-@Override
-public String[] getMathExecutableCommand() {
-	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.finiteVolumeExecutableProperty);
-	String inputFilename = getInputFilename();
-	return new String[] { executableName, inputFilename };
-}
-
-}
Index: src/cbit/vcell/solvers/PBSSolver.java
===================================================================
--- src/cbit/vcell/solvers/PBSSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/PBSSolver.java	(revision 11980)
@@ -10,14 +10,13 @@
 
 package cbit.vcell.solvers;
 import java.io.File;
-import java.util.ArrayList;
 
 import org.vcell.util.ExecutableException;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.SessionLog;
 
-import cbit.htc.PBSConstants;
+import cbit.htc.PBSUtils;
 import cbit.htc.PbsJobID;
-import cbit.vcell.message.server.pbs.PbsProxy;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.solver.SimulationMessage;
@@ -31,7 +30,6 @@
  */
 public class PBSSolver extends HTCSolver {
 	private static String PBS_SUBMIT_FILE_EXT = ".pbs.sub";
-	private PbsProxy pbsProxy = null;
 /**
  * CondorSolver constructor comment.
  * @param simTask cbit.vcell.messaging.server.SimulationTask
@@ -39,9 +37,8 @@
  * @param sessionLog cbit.vcell.server.SessionLog
  * @exception cbit.vcell.solver.SolverException The exception description.
  */
-public PBSSolver(PbsProxy pbsProxy, SimulationTask simTask, java.io.File directory, SessionLog sessionLog) throws cbit.vcell.solver.SolverException {
+public PBSSolver(SimulationTask simTask, java.io.File directory, SessionLog sessionLog) throws cbit.vcell.solver.SolverException {
 	super(simTask, directory, sessionLog);
-	this.pbsProxy = pbsProxy;
 }
 
 /**
@@ -54,11 +51,9 @@
 	fireSolverStarting(SimulationMessage.MESSAGE_SOLVEREVENT_STARTING_SUBMITTING);
 	String cmd = getExecutableCommand();
 	String subFile = new File(getBaseName()).getPath() + PBS_SUBMIT_FILE_EXT;
-	String jobname = PBSConstants.createPBSSimJobName(simulationTask.getSimKey(), simulationTask.getSimulationJob().getJobIndex());  //"S_" + simulationTask.getSimKey() + "_" + simulationTask.getSimulationJob().getJobIndex();
-	ArrayList<String> command = new ArrayList<String>();
-	command.add(cmd);
-	command.addAll(cmdArguments);
-	PbsJobID jobid = pbsProxy.submitJob(simulationTask.getComputeResource(), jobname, subFile, command.toArray(new String[0]), 1, simulationTask.getEstimatedMemorySizeMB());
+	String jobname = "S_" + simulationTask.getSimKey() + "_" + simulationTask.getSimulationJob().getJobIndex();
+	
+	PbsJobID jobid = PBSUtils.submitJob(simulationTask.getComputeResource(), jobname, subFile, cmd, cmdArguments, 1, simulationTask.getEstimatedMemorySizeMB());
 	if (jobid == null) {
 		fireSolverAborted(SimulationMessage.jobFailed("Failed. (error message: submitting to job scheduler failed)."));
 		return null;
@@ -75,77 +70,77 @@
  * 
  */
 @Deprecated
-//private void babysitPBSSubmission(PbsJobID jobid) throws SolverException{
-//
-//	// if PBS has problem with dispatching jobs, jobs that have been submitted
-//	// but are not running, will be redispatched after 5 minutes. Then we have duplicate
-//	// jobs or "failed" jobs actually running in PBS.
-//	// to avoid this, kill the job, ask the user to try again later if the jobs
-//	// are not in running status 2 minutes after submission.
-//	long t = System.currentTimeMillis();
-//	int status;
-//	while (true) {
-//		try {
-//			Thread.sleep(1000);
-//		} catch (InterruptedException ex) {
-//		}
-//		
-//		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"done waiting 1 second, getting pbs status");
-//		status = PBSUtils.getJobStatus(jobid);
-//		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbsStatus = "+PBSUtils.getJobStatusDescription(status));
-//		if (PBSUtils.isJobExiting(status)){
-//			// pbs command tracejob takes more than 1 minute to get exit status after the job exists. 
-//			// we don't want to spend so much time on a job, especially when the job is very short. 
-//			// However, if dispatcher restarted the simulation, which means the first run failed, 
-//			// we have to find out why.
-//			if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
-//				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
-//				try {
-//					Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
-//				} catch (InterruptedException ex) {
-//				}
-//				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"getting pbs status");
-//				if (!PBSUtils.isJobExecOK(jobid)) {
-//					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
-//					throw new SolverException("Job [" + jobid + "] exited unexpectedly: [" + PBSUtils.getJobExecStatus(jobid));			
-//				}
-//			}
-//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
-//			break;
-//		} else if (PBSUtils.isJobRunning(status)) {
-//			//check to see if it exits soon after it runs
-//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"Job is running, waiting 1 second before getting pbs status");
-//			try {
-//				Thread.sleep(1000);
-//			} catch (InterruptedException ex) {
-//			}
-//			status = PBSUtils.getJobStatus(jobid);
-//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status = "+PBSUtils.getJobStatusDescription(status));
-//			if (PBSUtils.isJobExiting(status)) {
-//				if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
-//					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
-//					try {
-//						Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
-//					} catch (InterruptedException ex) {
-//					}
-//					if (!PBSUtils.isJobExecOK(jobid)) {
-//						VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
-//						throw new SolverException("Job [" + jobid + "] exited unexpectedly: " + PBSUtils.getJobExecStatus(jobid));			
-//					}
-//				}
-//			}
-//			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
-//			break;
-//		} else if (System.currentTimeMillis() - t > 4 * MessageConstants.MINUTE_IN_MS) {
-//			String pendingReason = PBSUtils.getPendingReason(jobid);
-//			PBSUtils.killJob(jobid); // kill the job if it takes too long to dispatch the job.
-//			throw new SolverException("PBS Job scheduler timed out. Please try again later. (Job [" + jobid + "]: " + pendingReason + ")");
-//		}
-//	}
-//	System.out.println("It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
-//	VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
-//}
+private void babysitPBSSubmission(PbsJobID jobid) throws SolverException{
 
+	// if PBS has problem with dispatching jobs, jobs that have been submitted
+	// but are not running, will be redispatched after 5 minutes. Then we have duplicate
+	// jobs or "failed" jobs actually running in PBS.
+	// to avoid this, kill the job, ask the user to try again later if the jobs
+	// are not in running status 2 minutes after submission.
+	long t = System.currentTimeMillis();
+	int status;
+	while (true) {
+		try {
+			Thread.sleep(1000);
+		} catch (InterruptedException ex) {
+		}
+		
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"done waiting 1 second, getting pbs status");
+		status = PBSUtils.getJobStatus(jobid);
+		VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbsStatus = "+PBSUtils.getJobStatusDescription(status));
+		if (PBSUtils.isJobExiting(status)){
+			// pbs command tracejob takes more than 1 minute to get exit status after the job exists. 
+			// we don't want to spend so much time on a job, especially when the job is very short. 
+			// However, if dispatcher restarted the simulation, which means the first run failed, 
+			// we have to find out why.
+			if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
+				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
+				try {
+					Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
+				} catch (InterruptedException ex) {
+				}
+				VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"getting pbs status");
+				if (!PBSUtils.isJobExecOK(jobid)) {
+					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
+					throw new SolverException("Job [" + jobid + "] exited unexpectedly: [" + PBSUtils.getJobExecStatus(jobid));			
+				}
+			}
+			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
+			break;
+		} else if (PBSUtils.isJobRunning(status)) {
+			//check to see if it exits soon after it runs
+			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"Job is running, waiting 1 second before getting pbs status");
+			try {
+				Thread.sleep(1000);
+			} catch (InterruptedException ex) {
+			}
+			status = PBSUtils.getJobStatus(jobid);
+			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status = "+PBSUtils.getJobStatusDescription(status));
+			if (PBSUtils.isJobExiting(status)) {
+				if ((simulationTask.getTaskID() & MessageConstants.TASKID_RETRYCOUNTER_MASK) != 0) {
+					VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"status indicates exiting and retry>0, waiting 1 minute");
+					try {
+						Thread.sleep(MessageConstants.MINUTE_IN_MS); // have to sleep at least one minute to get tracejob exist status;
+					} catch (InterruptedException ex) {
+					}
+					if (!PBSUtils.isJobExecOK(jobid)) {
+						VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status indicates exit status");
+						throw new SolverException("Job [" + jobid + "] exited unexpectedly: " + PBSUtils.getJobExecStatus(jobid));			
+					}
+				}
+			}
+			VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"pbs status Okay");
+			break;
+		} else if (System.currentTimeMillis() - t > 4 * MessageConstants.MINUTE_IN_MS) {
+			String pendingReason = PBSUtils.getPendingReason(jobid);
+			PBSUtils.killJob(jobid); // kill the job if it takes too long to dispatch the job.
+			throw new SolverException("PBS Job scheduler timed out. Please try again later. (Job [" + jobid + "]: " + pendingReason + ")");
+		}
+	}
+	System.out.println("It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
+	VCMongoMessage.sendPBSWorkerMessage(simulationTask,jobid,"It took " + (System.currentTimeMillis() - t) + " ms to verify pbs job status " + PBSUtils.getJobStatusDescription(status));
+}
+
 @Override
 public double getCurrentTime() {
 	return 0;
Index: src/cbit/vcell/solvers/CppCoderVCell.java
===================================================================
--- src/cbit/vcell/solvers/CppCoderVCell.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppCoderVCell.java	(revision 11980)
@@ -23,18 +23,17 @@
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VolVariable;
 import cbit.vcell.math.VolumeRegionEquation;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
 
 public class CppCoderVCell extends CppCoder
 {
-	private SimulationTask simTask = null;
+	private SimulationJob simulationJob = null;
 
-public CppCoderVCell(String baseFilename, java.io.File directory, SimulationTask simTask){
+public CppCoderVCell(String baseFilename, java.io.File directory, SimulationJob argSimulationJob){
 	super(baseFilename,directory);
-	this.simTask = simTask;
+	this.simulationJob = argSimulationJob;
 }                              
 
 
@@ -155,13 +154,13 @@
 	//
 	// add Simulation coder
 	//
-	Simulation simulation = simTask.getSimulation();
-	addCppClassCoder(new CppClassCoderSimulation(this,simTask,new java.io.File(dir,baseFilename).getPath()));
+	Simulation simulation = simulationJob.getSimulation();
+	addCppClassCoder(new CppClassCoderSimulation(this,simulationJob,new java.io.File(dir,baseFilename).getPath()));
 	
 	//
 	// add Model coder
 	//
-	addCppClassCoder(new CppClassCoderVCellModel(this,simTask));
+	addCppClassCoder(new CppClassCoderVCellModel(this,simulationJob));
 	
 	//
 	// add Feature coders
@@ -171,12 +170,12 @@
 		SubDomain subDomain = enum1.nextElement();
 		if (subDomain instanceof CompartmentSubDomain){
 			CompartmentSubDomain volSubDomain = (CompartmentSubDomain)subDomain;
-			addCppClassCoder(new CppClassCoderFeature(this,simTask,volSubDomain,null));
+			addCppClassCoder(new CppClassCoderFeature(this,simulationJob,volSubDomain,null));
 			
 			//
 			// add VolumeVarContext coders
 			//
-			Variable[] vars = simTask.getSimulationJob().getSimulationSymbolTable().getVariables();
+			Variable[] vars = simulationJob.getSimulationSymbolTable().getVariables();
 			for (int i = 0; i < vars.length; i ++) {
 				Equation equation = volSubDomain.getEquation(vars[i]);
 				if (equation != null && equation instanceof VolumeRegionEquation) {
@@ -188,7 +187,7 @@
 						equation = new PdeEquation(vars[i], bSteady, new Expression(0.0), new Expression(0.0), new Expression(0.0));
 					} 
 					if (equation != null) {
-						addCppClassCoder(new CppClassCoderVolumeVarContext(this,equation,volSubDomain,simTask,"VolumeVarContext"));
+						addCppClassCoder(new CppClassCoderVolumeVarContext(this,equation,volSubDomain,simulationJob,"VolumeVarContext"));
 					}
 				}
 			}
@@ -202,9 +201,9 @@
 			while (enum_equ.hasMoreElements()){
 				Equation equation = enum_equ.nextElement();
 				if (equation instanceof MembraneRegionEquation){
-					addCppClassCoder(new CppClassCoderMembraneRegionVarContext(this,equation,memSubDomain,simTask,"MembraneRegionVarContext"));
+					addCppClassCoder(new CppClassCoderMembraneRegionVarContext(this,equation,memSubDomain,simulationJob,"MembraneRegionVarContext"));
 				}else{
-					addCppClassCoder(new CppClassCoderMembraneVarContext(this,equation,memSubDomain,simTask,"MembraneVarContext"));
+					addCppClassCoder(new CppClassCoderMembraneVarContext(this,equation,memSubDomain,simulationJob,"MembraneVarContext"));
 				}
 			}	
 		}else if (subDomain instanceof FilamentSubDomain){
@@ -219,7 +218,7 @@
 				if (equation instanceof FilamentRegionEquation){
 //					addCppClassCoder(new CppClassCoderFilamentRegionVarContext(this,equation,filamentSubDomain,simulation,"ContourRegionVarContext"));
 				}else if (equation.getSolutionType() == Equation.UNKNOWN_SOLUTION){
-					addCppClassCoder(new CppClassCoderContourVarContext(this,equation,filamentSubDomain,simTask,"ContourVarContext"));
+					addCppClassCoder(new CppClassCoderContourVarContext(this,equation,filamentSubDomain,simulationJob,"ContourVarContext"));
 				}else if (equation.getSolutionType() == Equation.EXACT_SOLUTION){
 //					addCppClassCoder(new CppClassCoderExactContourVarContext(this,equation,filamentSubDomain,mathDesc,"ExactContourVarContext"));	
 					throw new Exception("membrane equation has unsupported solution type <EXACT SOLUTION>");
@@ -233,7 +232,7 @@
 		//
 		FastSystem fastSystem = subDomain.getFastSystem();
 		if (fastSystem!=null){
-			addCppClassCoder(new CppClassCoderFastSystem(this,fastSystem,subDomain,simTask,"FastSystem"));
+			addCppClassCoder(new CppClassCoderFastSystem(this,fastSystem,subDomain,simulationJob,"FastSystem"));
 		}	
 	}	
 
Index: src/cbit/vcell/solvers/CppClassCoder.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoder.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoder.java	(revision 11980)
@@ -14,7 +14,6 @@
 import cbit.vcell.field.FieldFunctionArguments;
 import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.math.VariableType;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.parser.FunctionInvocation;
@@ -28,7 +27,7 @@
 	private String className = null;
 	private String parentClassName = null;
 	protected CppCoder cppCoder = null;
-	protected final SimulationTask simTask;
+	protected final SimulationJob simulationJob;
 
 	private static final String C_FIELDVAR_PREFIX = "vcell_fieldvar_";
 	private static final String C_LOCALVAR_PREFIX = "vcell_localvar_";
@@ -38,8 +37,8 @@
  * This method was created by a SmartGuide.
  * @param className java.lang.String
  */
-public CppClassCoder (SimulationTask simTask, CppCoder cppCoder, String className, String parentClassName) {
-	this.simTask = simTask;
+public CppClassCoder (SimulationJob simJob, CppCoder cppCoder, String className, String parentClassName) {
+	simulationJob = simJob;
 	this.cppCoder = cppCoder;
 	this.className = className;
 	this.parentClassName = parentClassName;
Index: src/cbit/vcell/solvers/CppClassCoderAbstractVarContext.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderAbstractVarContext.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderAbstractVarContext.java	(revision 11980)
@@ -30,7 +30,6 @@
 import cbit.vcell.math.Variable;
 import cbit.vcell.math.VolVariable;
 import cbit.vcell.math.VolumeRegionVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.SimulationJob;
@@ -51,10 +50,10 @@
 protected CppClassCoderAbstractVarContext(CppCoderVCell cppCoderVCell, 
 											Equation argEquation, 
 											SubDomain argSubDomain, 
-											SimulationTask simTask, 
+											SimulationJob argSimulationJob, 
 											String argParentClass) throws Exception
 {
-	super(simTask, cppCoderVCell,argParentClass+argSubDomain.getName()+argEquation.getVariable().getName(), argParentClass);
+	super(argSimulationJob, cppCoderVCell,argParentClass+argSubDomain.getName()+argEquation.getVariable().getName(), argParentClass);
 	this.equation = argEquation;
 	this.variable = argEquation.getVariable();
 	this.subDomain = argSubDomain;
@@ -78,7 +77,7 @@
  */
 protected Variable[] getRequiredVariables() throws Exception {
 
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	//
 	// default implementation (need to override in VolumeVarContext)
 	//
@@ -159,7 +158,7 @@
 	out.println("double "+getClassName()+"::"+functionName+"(ContourElement *contourElement)");
 	out.println("{");
 
-	Expression exp2 = simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(exp).flatten();
+	Expression exp2 = simulationJob.getSimulationSymbolTable().substituteFunctions(exp).flatten();
 	writeContourFunctionDeclarations(out,"contourElement",exp2);
 
 	out.println("\treturn "+infix_C(exp2)+";");
@@ -176,7 +175,7 @@
 protected void writeContourFunctionDeclarations(java.io.PrintWriter out, String contourElementString, Expression exp) throws Exception {
 
 	boolean wc_defined = false;
-	Enumeration<Variable> enum1 = simTask.getSimulationJob().getSimulationSymbolTable().getRequiredVariables(exp);
+	Enumeration<Variable> enum1 = simulationJob.getSimulationSymbolTable().getRequiredVariables(exp);
 	
 	String compute_wc =	
 		  "\tWorldCoord wc_begin = " + contourElementString + "->wc_begin;\n"	
@@ -259,7 +258,7 @@
 	out.println("double "+getClassName()+"::"+functionName+"(MembraneElement *memElement)");
 	out.println("{");
 
-	Expression exp2 = simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(exp).flatten();
+	Expression exp2 = simulationJob.getSimulationSymbolTable().substituteFunctions(exp).flatten();
 	writeMembraneFunctionDeclarations(out,"memElement",exp2,bFlipInsideOutside,"   ");
 
 	out.println("\treturn "+infix_C(exp2)+";");
@@ -276,7 +275,7 @@
 protected final void writeMembraneFunctionDeclarations(java.io.PrintWriter out, String membraneElementString, Expression exp, boolean bFlipInsideOutside, String pad) throws Exception {
 
 	boolean wc_defined = false;
-	Enumeration<Variable> enum1 = simTask.getSimulationJob().getSimulationSymbolTable().getRequiredVariables(exp);
+	Enumeration<Variable> enum1 = simulationJob.getSimulationSymbolTable().getRequiredVariables(exp);
 
 	while (enum1.hasMoreElements()){
 		Variable var = enum1.nextElement();
@@ -353,7 +352,7 @@
 	out.println("double "+getClassName()+"::"+functionName+"(MembraneRegion *memRegion)");
 	out.println("{");
 
-	Expression exp2 = simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(exp).flatten();
+	Expression exp2 = simulationJob.getSimulationSymbolTable().substituteFunctions(exp).flatten();
 	writeMembraneRegionFunctionDeclarations(out,"memRegion",exp2);
 
 	out.println("\treturn "+infix_C(exp2)+";");
@@ -369,7 +368,7 @@
  */
 protected final void writeMembraneRegionFunctionDeclarations(java.io.PrintWriter out, String membraneRegionString, Expression exp) throws Exception {
 
-	Enumeration<Variable> enum1 = simTask.getSimulationJob().getSimulationSymbolTable().getRequiredVariables(exp);
+	Enumeration<Variable> enum1 = simulationJob.getSimulationSymbolTable().getRequiredVariables(exp);
 	
 	while (enum1.hasMoreElements()){
 		Variable var = enum1.nextElement();
@@ -451,8 +450,8 @@
 	out.println("double "+getClassName()+"::"+functionName+"()");
 	out.println("{");
 
-	exp.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
-	Expression exp2 = simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(exp).flatten();
+	exp.bindExpression(simulationJob.getSimulationSymbolTable());
+	Expression exp2 = simulationJob.getSimulationSymbolTable().substituteFunctions(exp).flatten();
 	try {
 		exp2.evaluateConstant();
 	} catch (Exception ex) {
@@ -478,7 +477,7 @@
 	out.println("double "+getClassName()+"::"+functionName+"(long volumeIndex)");
 	out.println("{");
 
-	exp.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+	exp.bindExpression(simulationJob.getSimulationSymbolTable());
 	Expression exp2 = substituteFunctions(exp).flatten();
 	writeVolumeFunctionDeclarations(out,exp2,"volumeIndex");
 
@@ -500,7 +499,7 @@
 	}	
 
 	boolean wc_defined = false;
-	Enumeration<Variable> enum1 = simTask.getSimulationJob().getSimulationSymbolTable().getRequiredVariables(exp);
+	Enumeration<Variable> enum1 = simulationJob.getSimulationSymbolTable().getRequiredVariables(exp);
 
 	while (enum1.hasMoreElements()){
 		Variable var = enum1.nextElement();
@@ -558,7 +557,7 @@
 	out.println("double "+getClassName()+"::"+functionName+"(VolumeRegion *volumeRegion)");
 	out.println("{");
 
-	exp.bindExpression(simTask.getSimulationJob().getSimulationSymbolTable());
+	exp.bindExpression(simulationJob.getSimulationSymbolTable());
 	Expression exp2 = substituteFunctions(exp).flatten();
 	writeVolumeRegionFunctionDeclarations(out,exp2,"volumeRegion");
 
@@ -581,7 +580,7 @@
 
 	String regionIndexString = "regionIndex";
 	out.println("\tlong "+regionIndexString+" = "+volumeRegionString+"->getId();");
-	Enumeration<Variable> enum1 = simTask.getSimulationJob().getSimulationSymbolTable().getRequiredVariables(exp);
+	Enumeration<Variable> enum1 = simulationJob.getSimulationSymbolTable().getRequiredVariables(exp);
 
 	while (enum1.hasMoreElements()){
 		Variable var = enum1.nextElement();
@@ -607,6 +606,6 @@
 }
 
 Expression substituteFunctions(Expression exp) throws MathException, ExpressionException {
-	return simTask.getSimulationJob().getSimulationSymbolTable().substituteFunctions(exp);
+	return simulationJob.getSimulationSymbolTable().substituteFunctions(exp);
 }
 }
Index: src/cbit/vcell/solvers/CppClassCoderVolumeVarContext.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderVolumeVarContext.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderVolumeVarContext.java	(revision 11980)
@@ -13,7 +13,6 @@
 
 
 import cbit.vcell.math.*;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.*;
 import cbit.vcell.solver.*;
 /**
@@ -30,12 +29,12 @@
 protected CppClassCoderVolumeVarContext(CppCoderVCell argCppCoderVCell,
 												Equation argEquation,
 												CompartmentSubDomain argVolumeSubDomain,
-												SimulationTask simTask, 
+												SimulationJob argSimulationJob, 
 												String argParentClass) throws Exception
 {
-	super(argCppCoderVCell, argEquation, argVolumeSubDomain, simTask, argParentClass);
+	super(argCppCoderVCell, argEquation, argVolumeSubDomain, argSimulationJob, argParentClass);
 	Vector<MembraneSubDomain> membraneSubDomainOwnedList = new Vector<MembraneSubDomain>();
-	MembraneSubDomain membranes[] = simTask.getSimulation().getMathDescription().getMembraneSubDomains(argVolumeSubDomain);
+	MembraneSubDomain membranes[] = simulationJob.getSimulation().getMathDescription().getMembraneSubDomains(argVolumeSubDomain);
 	for (int i = 0; i < membranes.length; i++){
 		//
 		// determine membrane "owner" for reasons of code generation (owner compartment is that which has a greater priority ... now this is arbitrary)
@@ -78,7 +77,7 @@
 	//
 	// 
 	//
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	Variable requiredVariables[] = super.getRequiredVariables();
 	if (getEquation() instanceof PdeEquation){
 		for (int i = 0;membraneSubDomainsOwned!=null && i < membraneSubDomainsOwned.length; i++){
@@ -118,7 +117,7 @@
  * @param out java.io.PrintWriter
  */
 protected void writeConstructor(java.io.PrintWriter out) throws Exception {
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	out.println(getClassName()+"::"+getClassName()+"(Feature *Afeature, string& AspeciesName)");
 	out.println(": "+getParentClassName()+"(Afeature,AspeciesName)");
@@ -184,7 +183,7 @@
 	out.println("\tvoid resolveReferences(Simulation *sim);");
 
 	BoundaryConditionType bc = null;
-	int dimension = simTask.getSimulation().getMathDescription().getGeometry().getDimension();
+	int dimension = simulationJob.getSimulation().getMathDescription().getGeometry().getDimension();
 	if (getEquation() instanceof PdeEquation){
 		PdeEquation pdeEqu = (PdeEquation)getEquation();
 		if (pdeEqu.getBoundaryXm()!=null){
@@ -256,7 +255,7 @@
 		}	
 	}		
 	
-	SymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	try {
 		Expression ic = getEquation().getInitialExpression();
 		ic.bindExpression(simSymbolTable );
@@ -383,7 +382,7 @@
 			//out.println("   printf(\"getFlux(index=%ld, insideHandle=%d, outsideHandle=%ld), MembraneElement outside feature = '%s'\\n\",element->index,insideHandle,outsideHandle,outsideFeature->getName());");
 			out.println("\tswitch(outsideHandle){");
 			for (int i = 0; i < membraneSubDomainsOwned.length; i++){
-				cbit.vcell.geometry.GeometrySpec geoSpec = simTask.getSimulation().getMathDescription().getGeometry().getGeometrySpec();
+				cbit.vcell.geometry.GeometrySpec geoSpec = simulationJob.getSimulation().getMathDescription().getGeometry().getGeometrySpec();
 				boolean bFlipInsideOutside = (membraneSubDomainsOwned[i].getOutsideCompartment() == getCompartmentSubDomain());
 				cbit.vcell.geometry.SubVolume outsideSubVolume = null;
 				if (bFlipInsideOutside){
@@ -454,7 +453,7 @@
 	out.println("");
 	writeGetFlux(out,"getFlux");
 	out.println("");
-	int dimension = simTask.getSimulation().getMathDescription().getGeometry().getDimension();
+	int dimension = simulationJob.getSimulation().getMathDescription().getGeometry().getDimension();
 	if (getEquation() instanceof PdeEquation){
 		PdeEquation pde = (PdeEquation)getEquation();
 		BoundaryConditionType bc = getCompartmentSubDomain().getBoundaryConditionXm();
Index: src/cbit/vcell/solvers/CppClassCoderVCellModel.java
===================================================================
--- src/cbit/vcell/solvers/CppClassCoderVCellModel.java	(revision 11981)
+++ src/cbit/vcell/solvers/CppClassCoderVCellModel.java	(revision 11980)
@@ -12,7 +12,6 @@
 
 import java.util.*;
 import cbit.vcell.math.*;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.*;
 /**
  * This class was generated by a SmartGuide.
@@ -23,9 +22,9 @@
  * VarContextCppCoder constructor comment.
  * @param name java.lang.String
  */
-protected CppClassCoderVCellModel(CppCoderVCell cppCoderVCell, SimulationTask simTask) 
+protected CppClassCoderVCellModel(CppCoderVCell cppCoderVCell, SimulationJob argSimulationJob) 
 {
-	super(simTask, cppCoderVCell,"UserVCellModel", "VCellModel");
+	super(argSimulationJob, cppCoderVCell,"UserVCellModel", "VCellModel");
 }
 /**
  * This method was created by a SmartGuide.
@@ -56,7 +55,7 @@
  	//
  	// add 'Contours' to VCellModel (if any)
  	//
- 	cbit.vcell.geometry.FilamentGroup fg = simTask.getSimulation().getMathDescription().getGeometry().getGeometrySpec().getFilamentGroup();
+ 	cbit.vcell.geometry.FilamentGroup fg = simulationJob.getSimulation().getMathDescription().getGeometry().getGeometrySpec().getFilamentGroup();
   	for (int i=0;i<fg.getFilamentCount();i++){
 	  	out.println("\taddContour(new Contour("+i+"));  // for Filament "+fg.getFilamentNames()[i]);
   	}	 	
Index: src/cbit/vcell/solvers/AbstractSolver.java
===================================================================
--- src/cbit/vcell/solvers/AbstractSolver.java	(revision 11981)
+++ src/cbit/vcell/solvers/AbstractSolver.java	(revision 11980)
@@ -19,7 +19,6 @@
 import cbit.vcell.math.Constant;
 import cbit.vcell.math.MathUtilities;
 import cbit.vcell.math.VolVariable;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionException;
@@ -47,26 +46,25 @@
 	private SolverStatus fieldSolverStatus = new SolverStatus(SolverStatus.SOLVER_READY, SimulationMessage.MESSAGE_SOLVER_READY);
 	private File saveDirectory = null;
 	private boolean saveEnabled = true;
-	protected final SimulationTask simTask;
-	public static boolean bMakeUserDirs = true;
+	protected final SimulationJob simulationJob;
 
 /**
  * AbstractSolver constructor comment.
  */
-public AbstractSolver(SimulationTask simTask, File directory, SessionLog sessionLog) throws SolverException {
+public AbstractSolver(SimulationJob simulationJob, File directory, SessionLog sessionLog) throws SolverException {
 
-	this.simTask = simTask;
+	this.simulationJob = simulationJob;
 	this.fieldSessionLog = sessionLog;
 	if (!directory.exists()){
-		if (bMakeUserDirs && !directory.mkdirs()){
+		if (!directory.mkdirs()){
 			String msg = "could not create directory "+directory;
 			sessionLog.alert(msg);
 			throw new ConfigurationException(msg);
 		}
 	}		 
 		this.saveDirectory = directory;
-	if (!simTask.getSimulationJob().getSimulation().checkValid()) {
-		throw new SolverException(simTask.getSimulationJob().getSimulation().getWarning());
+	if (!simulationJob.getSimulation().checkValid()) {
+		throw new SolverException(simulationJob.getSimulation().getWarning());
 	}
 }
 
@@ -199,7 +197,7 @@
  * getCurrentTime method comment.
  */
 protected final String getBaseName() {
-	return (new File(getSaveDirectory(), simTask.getSimulationJob().getSimulationJobID()).getPath());
+	return (new File(getSaveDirectory(), simulationJob.getSimulationJobID()).getPath());
 }
 
 
@@ -230,7 +228,7 @@
 	//
 	// collect the explicit term
 	//
-	SimulationSymbolTable simSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	SimulationSymbolTable simSymbolTable = simulationJob.getSimulationSymbolTable();
 	
 	Expression sensFuncExp = funcExpr.differentiate(constant.getName());
 	sensFuncExp.bindExpression(simSymbolTable);
@@ -278,19 +276,10 @@
  * @return int
  */
 public int getJobIndex() {
-	return getSimulationJob().getJobIndex();
+	return simulationJob.getJobIndex();
 }
 
-/**
- * Insert the method's description here.
- * Creation date: (6/26/2001 3:42:59 PM)
- * @return int
- */
-public int getTaskID() {
-	return simTask.getTaskID();
-}
 
-
 /**
  * Insert the method's description here.
  * Creation date: (6/28/01 2:36:57 PM)
@@ -356,7 +345,7 @@
 
 
 public SimulationJob getSimulationJob() {
-	return simTask.getSimulationJob();
+	return simulationJob;
 }
 
 }
Index: src/cbit/vcell/client/ClientSimManager.java
===================================================================
--- src/cbit/vcell/client/ClientSimManager.java	(revision 11981)
+++ src/cbit/vcell/client/ClientSimManager.java	(revision 11980)
@@ -57,7 +57,6 @@
 import cbit.vcell.export.server.ExportServiceImpl;
 import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.mapping.SimulationContext;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.resource.ResourceUtil;
 import cbit.vcell.simdata.DataSetControllerImpl;
 import cbit.vcell.simdata.SimDataConstants;
@@ -474,11 +473,11 @@
 			File smoldynExe = ResourceUtil.SolverExecutable.Smoldyn.getExecutable();
 	
 			Simulation simulation = new TempSimulation(originalSimulation, false);
-			SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, 0, null),0);
-			File inputFile = new File(ResourceUtil.getLocalSimDir(User.tempUser.getName()), simTask.getSimulationJobID() + SimDataConstants.SMOLDYN_INPUT_FILE_EXTENSION);
+			SimulationJob simJob = new SimulationJob(simulation, 0, null);
+			File inputFile = new File(ResourceUtil.getLocalSimDir(User.tempUser.getName()), simJob.getSimulationJobID() + SimDataConstants.SMOLDYN_INPUT_FILE_EXTENSION);
 			inputFile.deleteOnExit();
 			PrintWriter pw = new PrintWriter(inputFile);
-			SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simTask, false);
+			SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simJob, false);
 			smf.write();
 			pw.close();	
 			String[] cmd = new String[] {smoldynExe.getAbsolutePath(), inputFile.getAbsolutePath()};
@@ -578,8 +577,8 @@
 						
 			Simulation simulation = new TempSimulation(originalSimulation, false);
 			StdoutSessionLog log = new StdoutSessionLog("Quick run");
-			SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, 0, null),0);
-			Solver solver = createQuickRunSolver(log, localSimDataDir, simTask);
+			SimulationJob simJob = new SimulationJob(simulation, 0, null);
+			Solver solver = createQuickRunSolver(log, localSimDataDir, simJob);
 			if (solver == null) {
 				throw new RuntimeException("null solver");
 			}
@@ -661,8 +660,8 @@
 }
 
 
-private Solver createQuickRunSolver(StdoutSessionLog sessionLog, File directory, SimulationTask simTask) throws SolverException, IOException {
-	SolverDescription solverDescription = simTask.getSimulation().getSolverTaskDescription().getSolverDescription();
+private Solver createQuickRunSolver(StdoutSessionLog sessionLog, File directory, SimulationJob simJob) throws SolverException, IOException {
+	SolverDescription solverDescription = simJob.getSimulation().getSolverTaskDescription().getSolverDescription();
 	if (solverDescription == null) {
 		throw new IllegalArgumentException("SolverDescription cannot be null");
 	}
@@ -674,7 +673,7 @@
 	
 	ResourceUtil.prepareSolverExecutable(solverDescription);	
 	// create solver from SolverFactory
-	Solver solver = SolverFactory.createSolver(sessionLog, directory, simTask, false);
+	Solver solver = SolverFactory.createSolver(sessionLog, directory, simJob, false);
 
 	return solver;
 }
Index: src/cbit/vcell/client/task/ExportToXML.java
===================================================================
--- src/cbit/vcell/client/task/ExportToXML.java	(revision 11981)
+++ src/cbit/vcell/client/task/ExportToXML.java	(revision 11980)
@@ -37,7 +37,6 @@
 import cbit.vcell.math.MathException;
 import cbit.vcell.mathmodel.MathModel;
 import cbit.vcell.matlab.MatlabOdeFileCoder;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.ExpressionException;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
@@ -126,23 +125,23 @@
 					String baseExportFileName = exportFile.getPath().substring(0, exportFile.getPath().indexOf("."));
 					for(int i=0; i<scanCount; i++)
 					{
-						SimulationTask simTask = new SimulationTask(new SimulationJob(selectedSim, i, null),0);
+						SimulationJob simJob = new SimulationJob(selectedSim, i, null);
 						// Need to export each parameter scan into a separate file
 						String newExportFileName = baseExportFileName + "_" + i + ".smoldynInput";
 						exportFile = new File(newExportFileName);
 						
 						PrintWriter pw = new PrintWriter(exportFile);
-						SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simTask, false);
+						SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simJob, false);
 						smf.write();
 						pw.close();	
 					}
 				}
 				else if(scanCount == 1)// regular simulation, no parameter scan
 				{
-					SimulationTask simTask = new SimulationTask(new SimulationJob(selectedSim, 0, null),0);
+					SimulationJob simJob = new SimulationJob(selectedSim, 0, null);
 					// export the simulation to the selected file
 					PrintWriter pw = new PrintWriter(exportFile);
-					SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simTask, false);
+					SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simJob, false);
 					smf.write();
 					pw.close();
 				}
@@ -256,23 +255,23 @@
 					String baseExportFileName = exportFile.getPath().substring(0, exportFile.getPath().indexOf("."));
 					for(int i=0; i<scanCount; i++)
 					{
-						SimulationTask simTask = new SimulationTask(new SimulationJob(selectedSim, i, null),0);
+						SimulationJob simJob = new SimulationJob(selectedSim, i, null);
 						// Need to export each parameter scan into a separate file
 						String newExportFileName = baseExportFileName + "_" + i + ".smoldynInput";
 						exportFile = new File(newExportFileName);
 						
 						PrintWriter pw = new PrintWriter(exportFile);
-						SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simTask, false);
+						SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simJob, false);
 						smf.write();
 						pw.close();	
 					}
 				}
 				else if(scanCount == 1)// regular simulation, no parameter scan
 				{
-					SimulationTask simTask = new SimulationTask(new SimulationJob(selectedSim, 0, null),0);
+					SimulationJob simJob = new SimulationJob(selectedSim, 0, null);
 					// export the simulation to the selected file
 					PrintWriter pw = new PrintWriter(exportFile);
-					SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simTask, false);
+					SmoldynFileWriter smf = new SmoldynFileWriter(pw, true, null, simJob, false);
 					smf.write();
 					pw.close();
 				}
Index: src/cbit/vcell/client/desktop/simulation/SimulationStatusDetailsTableModel.java
===================================================================
--- src/cbit/vcell/client/desktop/simulation/SimulationStatusDetailsTableModel.java	(revision 11981)
+++ src/cbit/vcell/client/desktop/simulation/SimulationStatusDetailsTableModel.java	(revision 11980)
@@ -25,10 +25,8 @@
 	private final static int COLUMN_SUBMITDATE = 4;
 	private final static int COLUMN_STARTDATE = 5;
 	private final static int COLUMN_ENDDATE = 6;
-	private final static int COLUMN_PBSID = 7;
-	private final static int COLUMN_TASKID = 8;
 	
-	private String[] columnNames = new String[] {"Scan Index", "Status", "Compute Host", "Software Version", "Submit Date", "Start Date", "End Date", "PBS ID", "Task ID"};
+	private String[] columnNames = new String[] {"Scan Index", "Status", "Compute Host", "Software Version", "Submit Date", "Start Date", "End Date"};
 	protected transient java.beans.PropertyChangeSupport propertyChange;
 	private SimulationStatusDetails fieldSimulationStatusDetails = null;
 
@@ -172,18 +170,6 @@
 				}
 				return jobStatus.getEndDate();
 			}
-			case COLUMN_PBSID : {
-				if (jobStatus == null || jobStatus.getSimulationExecutionStatus()==null || jobStatus.getSimulationExecutionStatus().getPbsJobID()==null) {
-					return null;
-				}
-				return jobStatus.getSimulationExecutionStatus().getPbsJobID().getID();
-			}
-			case COLUMN_TASKID : {
-				if (jobStatus == null) {
-					return null;
-				}
-				return jobStatus.getTaskID();
-			}
 			default: {
 				if (jobStatus == null) {
 					return null;
Index: src/cbit/vcell/client/test/VCellClientTest.java
===================================================================
--- src/cbit/vcell/client/test/VCellClientTest.java	(revision 11981)
+++ src/cbit/vcell/client/test/VCellClientTest.java	(revision 11980)
@@ -104,18 +104,8 @@
 		csInfo = ClientServerInfo.createRemoteServerInfo(hosts, user,(password==null || password.length()==0?null:new UserLoginInfo.DigestedPassword(password)));
 	}
 	try {
-		String propertyFile = PropertyLoader.getProperty(PropertyLoader.propertyFileProperty, "");
-		if (propertyFile.length()>0){
-			try {
-				PropertyLoader.loadProperties();
-				VCMongoMessage.enabled = true;
-				VCMongoMessage.serviceStartup(ServiceName.client,null,null);
-			}catch (Exception e){
-				System.out.println("failed to start Mongo logging");
-			}
-		}else{
-			VCMongoMessage.enabled = false;
-		}
+		VCMongoMessage.enabled = false; // comment out to enable logging to MongoDB.
+		VCMongoMessage.serviceStartup(ServiceName.client,null,null);
 		vcellClient = VCellClient.startClient(initialDocument, csInfo);
 	} catch (Throwable exception) {
 		System.err.println("Exception occurred in main() of VCellApplication");
Index: src/cbit/rmi/event/DataJobEvent.java
===================================================================
--- src/cbit/rmi/event/DataJobEvent.java	(revision 11981)
+++ src/cbit/rmi/event/DataJobEvent.java	(revision 11980)
@@ -76,7 +76,6 @@
 	return timeSeriesJobResults;
 }
 
-@Override
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	if (messageEvent instanceof DataJobEvent){
 		DataJobEvent dataJobEvent = (DataJobEvent)messageEvent;
Index: src/cbit/rmi/event/PerformanceMonitorEvent.java
===================================================================
--- src/cbit/rmi/event/PerformanceMonitorEvent.java	(revision 11981)
+++ src/cbit/rmi/event/PerformanceMonitorEvent.java	(revision 11980)
@@ -82,7 +82,7 @@
 	return user;
 }
 
-@Override
+
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	return false;
 }
Index: src/cbit/rmi/event/WorkerEvent.java
===================================================================
--- src/cbit/rmi/event/WorkerEvent.java	(revision 11981)
+++ src/cbit/rmi/event/WorkerEvent.java	(revision 11980)
@@ -9,10 +9,8 @@
  */
 
 package cbit.rmi.event;
-
 import org.vcell.util.document.User;
 
-import cbit.htc.PbsJobID;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.SimulationJob;
@@ -27,13 +25,6 @@
  */
 public class WorkerEvent extends MessageEvent {
 	
-	public static final int JOB_ACCEPTED = 998;
-	public static final int JOB_STARTING = 999;
-	public static final int JOB_DATA = 1000;
-	public static final int JOB_PROGRESS = 1001;
-	public static final int JOB_FAILURE = 1002;
-	public static final int JOB_COMPLETED = 1003;
-	public static final int JOB_WORKER_ALIVE = 1004;
 
 	private VCSimulationIdentifier vcSimulationIdentifier = null;
 	private int jobIndex = -1;
@@ -43,7 +34,6 @@
 	private Double progress = null;
 	private Double timePoint = null;
 	private SimulationMessage eventMessage = null;
-	private PbsJobID pbsJobID = null;
 
 public WorkerEvent(int eventType0, Object source, VCSimulationIdentifier simId0, int jobIndex0, String hostName0, int taskID0, Double progress0, Double timePoint0, SimulationMessage arg_eventMessage) {
 	super(source, new MessageSource(source, Simulation.createSimulationID(simId0.getSimulationKey())), new MessageData(new Double[] {progress0, timePoint0}));
@@ -60,14 +50,14 @@
 	eventMessage = arg_eventMessage;
 }
 
-//public WorkerEvent(int eventType0, Object source, SimulationJob simJob, String hostName0, SimulationMessage message) {
-//	this(eventType0, source, simJob.getVCDataIdentifier().getVcSimID(), simJob.getJobIndex(), hostName0, 0, null, null, message);
-//}
-//
-//public WorkerEvent(int eventType0, Object source, SimulationJob simJob, String hostName0, Double progress0, Double timePoint0, SimulationMessage message) {
-//	this(eventType0, source, simJob.getVCDataIdentifier().getVcSimID(), simJob.getJobIndex(), hostName0, 0, progress0, timePoint0, message);
-//}
-//
+public WorkerEvent(int eventType0, Object source, SimulationJob simJob, String hostName0, SimulationMessage message) {
+	this(eventType0, source, simJob.getVCDataIdentifier().getVcSimID(), simJob.getJobIndex(), hostName0, 0, null, null, message);
+}
+
+public WorkerEvent(int eventType0, Object source, SimulationJob simJob, String hostName0, Double progress0, Double timePoint0, SimulationMessage message) {
+	this(eventType0, source, simJob.getVCDataIdentifier().getVcSimID(), simJob.getJobIndex(), hostName0, 0, progress0, timePoint0, message);
+}
+
 public WorkerEvent(int eventType0, Object source, SimulationTask simTask, String hostName0, Double progress0, Double timePoint0, SimulationMessage message) {
 	this(eventType0, source, simTask.getSimulationInfo().getAuthoritativeVCSimulationIdentifier(), simTask.getSimulationJob().getJobIndex(), hostName0, simTask.getTaskID(), progress0, timePoint0, message);
 }
@@ -146,9 +136,7 @@
 	return timePoint;
 }
 
-public PbsJobID getPbsJobID(){
-	return pbsJobID;
-}
+
 /**
  * Insert the method's description here.
  * Creation date: (3/11/2004 9:33:30 AM)
@@ -204,7 +192,6 @@
  * Creation date: (3/11/2004 9:33:30 AM)
  * @return boolean
  */
-@Override
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	if (messageEvent instanceof WorkerEvent){
 		WorkerEvent workerEvent = (WorkerEvent)messageEvent;
@@ -274,13 +261,4 @@
 public boolean isWorkerAliveEvent() {
 	return eventType == JOB_WORKER_ALIVE;
 }
-
-public void setPbsJobID(PbsJobID pbsJobID) {
-	this.pbsJobID = pbsJobID;
 }
-
-public String show(){
-	return "WorkerEvent(type="+eventType+",simID="+this.vcSimulationIdentifier+",job="+jobIndex+",task="+taskID+",progress="+progress+",timepoint="+timePoint+",msg="+eventMessage.toSerialization();
-}
-
-}
Index: src/cbit/rmi/event/ExportEvent.java
===================================================================
--- src/cbit/rmi/event/ExportEvent.java	(revision 11981)
+++ src/cbit/rmi/event/ExportEvent.java	(revision 11980)
@@ -109,7 +109,7 @@
 }
 
 
-@Override
+
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	if (messageEvent instanceof ExportEvent){
 		ExportEvent exportEvent = (ExportEvent)messageEvent;
Index: src/cbit/rmi/event/MessageEvent.java
===================================================================
--- src/cbit/rmi/event/MessageEvent.java	(revision 11981)
+++ src/cbit/rmi/event/MessageEvent.java	(revision 11980)
@@ -19,7 +19,15 @@
 public abstract class MessageEvent extends java.util.EventObject {
 	private MessageSource messageSource = null;
 	private MessageData messageData = null;
-		
+	
+	public static final int JOB_ACCEPTED = 998;
+	public static final int JOB_STARTING = 999;
+	public static final int JOB_DATA = 1000;
+	public static final int JOB_PROGRESS = 1001;
+	public static final int JOB_FAILURE = 1002;
+	public static final int JOB_COMPLETED = 1003;
+	public static final int JOB_WORKER_ALIVE = 1004;
+	
 	public final static int EXPORT_PROGRESS = 1004;
 	public final static int EXPORT_FAILURE = 1005;
 	public final static int EXPORT_COMPLETE = 1006;
Index: src/cbit/htc/PBSConstants.java
===================================================================
--- src/cbit/htc/PBSConstants.java	(revision 11981)
+++ src/cbit/htc/PBSConstants.java	(revision 11980)
@@ -10,85 +10,26 @@
 
 package cbit.htc;
 
-import org.vcell.util.document.KeyValue;
 
-
-
 public class PBSConstants {
+	static final int PBS_STATUS_UNKNOWN = -1; 			//Not a status in PBS. 
+	static final int PBS_STATUS_JOBARRAYSTARTED = 0; 	//Job arrays only: job array has started
+	static final int PBS_STATUS_EXITING = 1; 			// Job is exiting after having run
+	static final int PBS_STATUS_HELD = 2; 				// Job is held. A job is put into a held state by the server or by a user or
+																// administrator. A job stays in a held state until it is released by a user or
+																// administrator.
+	static final int PBS_STATUS_QUEUED = 3; 				//Job is queued, eligible to run or be routed
+	static final int PBS_STATUS_RUNNING = 4; 			//Job is running
+	static final int PBS_STATUS_SUSPENDEDBYSERVER = 5; 	//Job is suspended by server. A job is put into the suspended state when a
+																//higher priority job needs the resources.
+	static final int PBS_STATUS_TRANSITING = 6; 			//Job is in transition (being moved to a new location)
+	static final int PBS_STATUS_SUSPENDEDBYUSER = 7; 	//Job is suspended due to workstation becoming busy
+	static final int PBS_STATUS_WAITING = 8; 			//Job is waiting for its requested execution time to be reached or job specified
+																//a stage-in request which failed for some reason.
+	static final int PBS_STATUS_SUBJOBFINISHED = 9;		//Subjobs only; subjob is finished (expired.)
 	
-	public enum PBSJobStatus {
-		Completed("C"),
-		Exiting("E"),
-		Held("H"),
-		Queued("Q"),
-		Running("R"),
-		Moving("T"),
-		Waiting("W"),
-		Suspended("S");
-		
-		private String pbsCommandLetter;
-		private PBSJobStatus(String pbsCommandLetter){
-			this.pbsCommandLetter = pbsCommandLetter;
-		}
-		public String getPBSCommandLetter(){
-			return pbsCommandLetter;
-		}
+	static final String[] PBS_JOB_STATUS = {"B", "E", "H", "Q", "R", "S", "T", "U", "W", "X"};
 
-		public boolean isCompleted() {
-			return this.equals(Completed);
-		}
-		public boolean isExiting() {
-			return this.equals(Exiting);
-		}
-		public boolean isHeld() {
-			return this.equals(Held);
-		}
-		public boolean isQueued() {
-			return this.equals(Queued);
-		}
-		public boolean isRunning() {
-			return this.equals(Running);
-		}
-		public boolean isMoving() {
-			return this.equals(Moving);
-		}
-		public boolean isWaiting() {
-			return this.equals(Waiting);
-		}
-		public boolean isSuspended() {
-			return this.equals(Suspended);
-		}
-		public String getDescription() {
-			return name();
-		}
-		public static PBSJobStatus fromPBSCommandLetter(String pbsCommandLetter) {
-			for (PBSJobStatus status : values()){
-				if (status.getPBSCommandLetter().equals(pbsCommandLetter)){
-					return status;
-				}
-			}
-			return null;
-		}
-	};
-
-//	static final int PBS_STATUS_UNKNOWN = -1; 			//Not a status in PBS. 
-//	static final int PBS_STATUS_JOBARRAYSTARTED = 0; 	//Job arrays only: job array has started
-//	static final int PBS_STATUS_EXITING = 1; 			// Job is exiting after having run
-//	static final int PBS_STATUS_HELD = 2; 				// Job is held. A job is put into a held state by the server or by a user or
-//																// administrator. A job stays in a held state until it is released by a user or
-//																// administrator.
-//	static final int PBS_STATUS_QUEUED = 3; 				//Job is queued, eligible to run or be routed
-//	static final int PBS_STATUS_RUNNING = 4; 			//Job is running
-//	static final int PBS_STATUS_SUSPENDEDBYSERVER = 5; 	//Job is suspended by server. A job is put into the suspended state when a
-//																//higher priority job needs the resources.
-//	static final int PBS_STATUS_TRANSITING = 6; 			//Job is in transition (being moved to a new location)
-//	static final int PBS_STATUS_SUSPENDEDBYUSER = 7; 	//Job is suspended due to workstation becoming busy
-//	static final int PBS_STATUS_WAITING = 8; 			//Job is waiting for its requested execution time to be reached or job specified
-//																//a stage-in request which failed for some reason.
-//	static final int PBS_STATUS_SUBJOBFINISHED = 9;		//Subjobs only; subjob is finished (expired.)
-//	
-//	private static final String[] PBS_JOB_STATUS = {"B", "E", "H", "Q", "R", "S", "T", "U", "W", "X"};
-
 	/*
 	The exit value of a job may fall in one of three ranges: X < 0, 0 <=X < 128, X >=128.
 	
@@ -106,136 +47,45 @@
 	256). For example an exit value of 137 means the job's top process was killed with signal
 	9 (137 % 128 = 9).
 	 */
+	static final int JOB_EXEC_OK = 0; 					//	job exec successful
+	static final int JOB_EXEC_FAIL1 =  -1; 				//	"Job exec failed, before files, no retry"
+	static final int JOB_EXEC_FAIL2 =  -2; 				//	"Job exec failed, after files, no retry"
+	static final int JOB_EXEC_RETRY =  -3; 				//	"Job execution failed, do retry"
+	static final int JOB_EXEC_INITABT =  -4; 			//	Job aborted on MOM initialization
+	static final int JOB_EXEC_INITRST =  -5; 			//	"Job aborted on MOM init, chkpt, no migrate"
+	static final int JOB_EXEC_INITRMG =  -6; 			//	"Job aborted on MOM init, chkpt, ok migrate"
+	static final int JOB_EXEC_BADRESRT =  -7; 			//	Job restart failed
+	static final int JOB_EXEC_GLOBUS_INIT_RETRY  =  -8; 	//	Init. globus job failed. do retry
+	static final int JOB_EXEC_GLOBUS_INIT_FAIL =  -9; 	//	Init. globus job failed. no retry
+	static final int JOB_EXEC_FAILUID =  -10; 			//	invalid uid/gid for job
+	static final int JOB_EXEC_RERUN =  -11; 				//	Job rerun
+	static final int JOB_EXEC_CHKP  =  -12; 				//	Job was checkpointed and killed
+	static final int JOB_EXEC_FAIL_PASSWORD = -13;		// Job failed due to a bad password
 	
-	public enum PBSJobExitCode {
-		OK(0,"job exec successful"),
-		FAIL1(-1,"Job exec failed, before files, no retry"),
-		FAIL2(-2,"Job exec failed, after files, no retry"),
-		RETRY(-3,"Job execution failed, do retry"),
-		INITABT(-4,"Job aborted on MOM initialization"),
-		INITRST(-5,"Job aborted on MOM init, chkpt, no migrate"),
-		INITRMG(-6,"Job aborted on MOM init, chkpt, ok migrate"),
-		BADRESRT(-7,"Job restart failed"),
-		GLOBUS_INIT_RETRY(-8,"Init. globus job failed. do retry"),
-		GLOBUS_INIT_FAIL(-9,"Init. globus job failed. no retry"),
-		FAILUID(-10,"invalid uid/gid for job"),
-		RERUN(-11,"Job rerun"),
-		CHKP(-12,"Job was checkpointed and killed"),
-		FAIL_PASSWORD(-13,"Job failed due to a bad password");
+	static final String[] PBS_JOB_EXEC_STATUS = {
+		"job exec successful",
+		"Job exec failed, before files, no retry",
+		"Job exec failed, after files, no retry",
+		"Job execution failed, do retry",
+		"Job aborted on MOM initialization",
+		"Job aborted on MOM init, chkpt, no migrate",
+		"Job aborted on MOM init, chkpt, ok migrate",
+		"Job restart failed",
+		"Init. globus job failed. do retry",
+		"Init. globus job failed. no retry",
+		"invalid uid/gid for job",
+		"Job rerun",
+		"Job was checkpointed and killed",
+		"Job failed due to a bad password"
+	};
 	
-		private int pbsExitCode;
-		private String desc;
-		private PBSJobExitCode(int pbsExitCode, String desc){
-			this.pbsExitCode = pbsExitCode;
-			this.desc = desc;
-		}
 
-		public static PBSJobExitCode fromPBSJobExitCode(int retcode) {
-			for (PBSJobExitCode exitCode : PBSJobExitCode.values()){
-				if (exitCode.getPbsReturnCode() == retcode){
-					return exitCode;
-				}
-			}
-			return null;
-		}
+	static final int PBS_SIMULATION_JOB = 1;
+	static final int PBS_SERVICE_JOB = 2;
 	
-		public int getPbsReturnCode(){
-			return pbsExitCode;
-		}
-		public String getDescription(){
-			return desc;
-		}
-		public boolean isOK() {
-			return this.equals(OK);
-		}
-		public boolean isFAIL1() {
-			return this.equals(FAIL1);
-		}
-		public boolean isFAIL2() {
-			return this.equals(FAIL2);
-		}
-		public boolean isRETRY() {
-			return this.equals(RETRY);
-		}
-		public boolean isINITABT() {
-			return this.equals(INITABT);
-		}
-		public boolean isINITRST() {
-			return this.equals(INITRST);
-		}
-		public boolean isINITRMG() {
-			return this.equals(INITRMG);
-		}
-		public boolean isBADRESRT() {
-			return this.equals(BADRESRT);
-		}
-		public boolean isGLOBUS_INIT_RETRY() {
-			return this.equals(GLOBUS_INIT_RETRY);
-		}
-		public boolean isGLOBUS_INIT_FAIL() {
-			return this.equals(GLOBUS_INIT_FAIL);
-		}
-		public boolean isFAILUID() {
-			return this.equals(FAILUID);
-		}
-		public boolean isRERUN() {
-			return this.equals(RERUN);
-		}
-		public boolean isCHKP() {
-			return this.equals(CHKP);
-		}
-		public boolean isFAIL_PASSWORD() {
-			return this.equals(FAIL_PASSWORD);
-		}
-
-	}
-//	static final int JOB_EXEC_OK = 0; 					//	job exec successful
-//	static final int JOB_EXEC_FAIL1 =  -1; 				//	"Job exec failed, before files, no retry"
-//	static final int JOB_EXEC_FAIL2 =  -2; 				//	"Job exec failed, after files, no retry"
-//	static final int JOB_EXEC_RETRY =  -3; 				//	"Job execution failed, do retry"
-//	static final int JOB_EXEC_INITABT =  -4; 			//	Job aborted on MOM initialization
-//	static final int JOB_EXEC_INITRST =  -5; 			//	"Job aborted on MOM init, chkpt, no migrate"
-//	static final int JOB_EXEC_INITRMG =  -6; 			//	"Job aborted on MOM init, chkpt, ok migrate"
-//	static final int JOB_EXEC_BADRESRT =  -7; 			//	Job restart failed
-//	static final int JOB_EXEC_GLOBUS_INIT_RETRY  =  -8; 	//	Init. globus job failed. do retry
-//	static final int JOB_EXEC_GLOBUS_INIT_FAIL =  -9; 	//	Init. globus job failed. no retry
-//	static final int JOB_EXEC_FAILUID =  -10; 			//	invalid uid/gid for job
-//	static final int JOB_EXEC_RERUN =  -11; 				//	Job rerun
-//	static final int JOB_EXEC_CHKP  =  -12; 				//	Job was checkpointed and killed
-//	static final int JOB_EXEC_FAIL_PASSWORD = -13;		// Job failed due to a bad password
-//	
-//	static final String[] PBS_JOB_EXEC_STATUS = {
-//		"job exec successful",
-//		"Job exec failed, before files, no retry",
-//		"Job exec failed, after files, no retry",
-//		"Job execution failed, do retry",
-//		"Job aborted on MOM initialization",
-//		"Job aborted on MOM init, chkpt, no migrate",
-//		"Job aborted on MOM init, chkpt, ok migrate",
-//		"Job restart failed",
-//		"Init. globus job failed. do retry",
-//		"Init. globus job failed. no retry",
-//		"invalid uid/gid for job",
-//		"Job rerun",
-//		"Job was checkpointed and killed",
-//		"Job failed due to a bad password"
-//	};
-	
-//	public static final int PBS_SIMULATION_JOB = 1;
-//	public static final int PBS_SERVICE_JOB = 2;
-	
-	public static final String PBS_SERVICE_QUEUE_PREFIX = "serviceq";
-	public static final String PBS_WORK_QUEUE_PREFIX = "workq";
-	public final static String UNKNOWN_JOB_ID_QSTAT_RESPONSE = "Unknown Job Id";
-	public final static String PBS_SIMULATION_JOB_NAME_PREFIX = "S_";
-
-	public static String createPBSSimJobName(KeyValue simKey, int simJobIndex) {
-		return PBS_SIMULATION_JOB_NAME_PREFIX+simKey.toString()+"_"+simJobIndex;
-	}
-	
-	public static String QSTAT_FULL_CLUSTER_COMMAND_PATH = "//cm//shared//apps//torque//2.5.5//bin//qstat";
-	
-	public static final String PBS_JOB_TEMPLATE = 
+	static final String PBS_SERVICE_QUEUE_PREFIX = "serviceq";
+	static final String PBS_WORK_QUEUE_PREFIX = "workq";
+	static final String PBS_JOB_TEMPLATE = 
 		    "#PBS -m a\r\n"
 			+"#PBS -M schaff@neuron.uchc.edu\r\n"
 			+"#PBS -j oe\r\n"
@@ -245,18 +95,11 @@
 			+"\r\n"
 			+"export PATH=/cm/shared/apps/torque/2.5.5/bin/:$PATH\r\n"
 			+"export LD_LIBRARY_PATH=/share/apps/sonic/mq8.5.1:$LD_LIBRARY_PATH\r\n";
-
-
-	public final static String JOB_CMD_SUBMIT = "/cm/shared/apps/torque/2.5.5/bin/qsub";
-	public final static String JOB_CMD_DELETE = "/cm/shared/apps/torque/2.5.5/bin/qdel";
-	public final static String JOB_CMD_STATUS = "/cm/shared/apps/torque/2.5.5/bin/qstat";	
-	public final static String JOB_CMD_HISTORY = "/cm/shared/apps/torque/2.5.5/bin/tracejob";
-	//public final static String SERVER_CMD_STATUS = "qstat";
-	public final static String SERVER_CMD_STATUS = "/cm/shared/apps/torque/2.5.5/bin/qstat";
-	public final static int PBS_MEM_OVERHEAD_MB = 70;
 	
-	public enum PBSJobCategory {
-		PBS_SIMULATION_JOB,
-		PBS_SERVICE_JOB;
-	}
+	final static String JOB_CMD_SUBMIT = "qsub";
+	final static String JOB_CMD_DELETE = "qdel";
+	final static String JOB_CMD_STATUS = "qstat";	
+	final static String JOB_CMD_HISTORY = "tracejob";
+	final static String SERVER_CMD_STATUS = "qstat";
+	final static int PBS_MEM_OVERHEAD_MB = 70;	
 }
Index: src/cbit/htc/PBSUtils.java
===================================================================
--- src/cbit/htc/PBSUtils.java	(revision 0)
+++ src/cbit/htc/PBSUtils.java	(revision 11980)
@@ -0,0 +1,355 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.htc;
+
+import static cbit.htc.PBSConstants.JOB_CMD_DELETE;
+import static cbit.htc.PBSConstants.JOB_CMD_HISTORY;
+import static cbit.htc.PBSConstants.JOB_CMD_STATUS;
+import static cbit.htc.PBSConstants.JOB_CMD_SUBMIT;
+import static cbit.htc.PBSConstants.JOB_EXEC_OK;
+import static cbit.htc.PBSConstants.PBS_JOB_EXEC_STATUS;
+import static cbit.htc.PBSConstants.PBS_JOB_STATUS;
+import static cbit.htc.PBSConstants.PBS_MEM_OVERHEAD_MB;
+import static cbit.htc.PBSConstants.PBS_STATUS_EXITING;
+import static cbit.htc.PBSConstants.PBS_STATUS_RUNNING;
+import static cbit.htc.PBSConstants.PBS_STATUS_UNKNOWN;
+import static cbit.htc.PBSConstants.SERVER_CMD_STATUS;
+
+import java.io.BufferedReader;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.StringTokenizer;
+
+import org.vcell.util.Executable;
+import org.vcell.util.ExecutableException;
+import org.vcell.util.PropertyLoader;
+import org.vcell.util.SessionLog;
+import org.vcell.util.StdoutSessionLog;
+import org.vcell.util.document.VCellServerID;
+
+public class PBSUtils {
+	private static SessionLog pbsLog = new StdoutSessionLog("PBS-Command");
+	private static String pbsServer = null;	 
+/**
+ * Insert the method's description here.
+ * Creation date: (9/29/2003 10:34:36 AM)
+ * @return int
+ * @param jobid java.lang.String
+ */
+public static String checkServerStatus() throws ExecutableException {
+	org.vcell.util.Executable exe = new Executable(new String[] {SERVER_CMD_STATUS, "-B"});
+	exe.start();
+	
+	String output = exe.getStdoutString();
+	/*
+	Server             Max   Tot   Que   Run   Hld   Wat   Trn   Ext Status
+	---------------- ----- ----- ----- ----- ----- ----- ----- ----- -----------
+	dll-2-1-1            0     0     0     0     0     0     0     0 Active
+	*/	
+	StringTokenizer st = new StringTokenizer(output, "\n");	
+	st.nextToken();
+	st.nextToken();
+	String line = st.nextToken();
+	st = new StringTokenizer(line, " ");
+	pbsServer = st.nextToken();			
+	
+	return pbsServer;
+}
+
+static int getJobExitCode(PbsJobID jobid) {
+	/*
+	Job: 67.dll-2-1-1
+
+	06/04/2007 10:04:37  S    Job Queued at request of fgao@bigfish.vcell.uchc.edu, owner =
+	                          fgao@bigfish.vcell.uchc.edu, job name = test3.sub, queue = workq
+	06/04/2007 10:04:37  S    Job Run at request of Scheduler@dll-2-1-1.vcell.uchc.edu on hosts
+	                          (dll-2-1-2:ncpus=1)
+	06/04/2007 10:04:37  L    Considering job to run
+	06/04/2007 10:04:37  A    queue=workq
+	06/04/2007 10:04:42  L    Job run
+	06/04/2007 10:04:42  A    user=fgao group="RConsole Users" jobname=test3.sub queue=workq ctime=1180965876
+	                          qtime=1180965877 etime=1180965877 start=1180965882 exec_host=dll-2-1-2/0
+	                          exec_vnode=(dll-2-1-2:ncpus=1) Resource_List.ncpus=1 Resource_List.nodect=1
+	                          Resource_List.place=pack Resource_List.select=1:ncpus=1 resource_assigned.ncpus=1
+	06/04/2007 10:04:42  S    Job Modified at request of Scheduler@dll-2-1-1.vcell.uchc.edu
+	06/04/2007 10:04:42  S    Obit received
+	06/04/2007 10:04:42  S    Exit_status=0 resources_used.cput=00:00:00 resources_used.walltime=00:00:00
+	06/04/2007 10:04:42  A    user=fgao group="RConsole Users" jobname=test3.sub queue=workq ctime=1180965876
+	                          qtime=1180965877 etime=1180965877 start=1180965882 exec_host=dll-2-1-2/0
+	                          exec_vnode=(dll-2-1-2:ncpus=1) Resource_List.ncpus=1 Resource_List.nodect=1
+	                          Resource_List.place=pack Resource_List.select=1:ncpus=1 session=6872
+	                          alt_id=HomeDirectory=Z: end=1180965882 Exit_status=0 resources_used.cput=00:00:00
+	                          resources_used.walltime=00:00:00
+	06/04/2007 10:04:44  S    Post job file processing error
+	 */
+	int iExitCode = JOB_EXEC_OK;
+	Executable exe = null;
+	
+	try {
+		String[] cmd = new String[] {JOB_CMD_HISTORY, "-p", PropertyLoader.getRequiredProperty(PropertyLoader.pbsHomeDir), jobid.getID()};
+		exe = new Executable(cmd);
+		exe.start();
+		
+		String output = exe.getStdoutString();
+		final String exitStatus = "Exit_status=";
+		int idx = output.indexOf(exitStatus);
+		if (idx < 0) {
+			throw new RuntimeException("Job [" + jobid + "] : unknown status"); 
+		}
+		output = output.substring(idx);
+		StringTokenizer st = new StringTokenizer(output, " =");
+		st.nextToken();
+		iExitCode = Integer.parseInt(st.nextToken()); 
+		return iExitCode;
+		
+	} catch (ExecutableException ex) {
+		throw new RuntimeException("No job history for job [" + jobid + "]");
+	}	
+}
+/**
+ * Insert the method's description here.
+ * Creation date: (9/29/2003 10:34:36 AM)
+ * @return int
+ * @param jobid java.lang.String
+ */
+public static int getJobStatus(PbsJobID jobid) {		
+	int iStatus = PBS_STATUS_UNKNOWN;
+	Executable exe = null;
+	
+	try {
+		String[] cmd = new String[]{JOB_CMD_STATUS, "-s", jobid.getID()};
+		exe = new Executable(cmd);
+		exe.start();
+		
+		String output = exe.getStdoutString();
+		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
+		String strStatus = "";
+		while (st.hasMoreTokens()) {
+			if (st.nextToken().toLowerCase().trim().startsWith("job id")) {
+				if (st.hasMoreTokens()) {
+					st.nextToken();
+				}
+				if (st.hasMoreTokens()) {
+					strStatus = st.nextToken();
+				}
+				break;
+			}			
+		}
+		if (strStatus.length() == 0) {
+			return iStatus;
+		}
+		/*
+		
+		pbssrv: 
+		                                                            Req'd  Req'd   Elap
+		Job ID          Username Queue    Jobname    SessID NDS TSK Memory Time  S Time
+		--------------- -------- -------- ---------- ------ --- --- ------ ----- - -----
+		29908.pbssrv    vcell    workqAlp S_32925452  30022   1   1  100mb   --  R 00:29
+		   Job run at Mon Apr 27 at 08:28 on (dll-2-6-6:ncpus=1:mem=102400kb)
+
+		*/		
+		st = new StringTokenizer(strStatus, " ");
+		String token = "";
+		for (int i = 0; i < 10 && st.hasMoreTokens(); i ++) {
+			token = st.nextToken();
+		}
+		for (iStatus = 0; iStatus < PBS_JOB_STATUS.length; iStatus ++) {
+			if (token.equals(PBS_JOB_STATUS[iStatus])) {
+				return iStatus;
+			}
+		}		
+	} catch (ExecutableException ex) {
+		return PBS_STATUS_EXITING;
+	}
+	return iStatus;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (9/29/2003 10:34:36 AM)
+ * @return int
+ * @param jobid java.lang.String
+ */
+public static String getPendingReason(PbsJobID jobid) {
+	String pendingReason = "unknown pending reason";
+	Executable exe = null;
+	
+	try {
+		String[] cmd = new String[]{JOB_CMD_STATUS, "-s", jobid.getID()};
+		exe = new Executable(cmd);
+		exe.start();
+		
+		/*
+		
+		pbssrv: 
+		                                                            Req'd  Req'd   Elap
+		Job ID          Username Queue    Jobname    SessID NDS TSK Memory Time  S Time
+		--------------- -------- -------- ---------- ------ --- --- ------ ----- - -----
+		29908.pbssrv    vcell    workqAlp S_32925452  30022   1   1  100mb   --  R 00:29
+		   Job run at Mon Apr 27 at 08:28 on (dll-2-6-6:ncpus=1:mem=102400kb)
+
+		*/		
+		String output = exe.getStdoutString();
+		StringTokenizer st = new StringTokenizer(output, "\r\n"); 
+		while (st.hasMoreTokens()) {
+			if (st.nextToken().toLowerCase().trim().startsWith("job id")) {
+				if (st.hasMoreTokens()) {
+					st.nextToken();
+				}
+				if (st.hasMoreTokens()) {
+					st.nextToken();
+				}
+				pendingReason = "";
+				while (st.hasMoreTokens()) {
+					pendingReason += st.nextToken();
+				}
+				break;
+			}			
+		}
+	} catch (ExecutableException ex) {
+		ex.printStackTrace(System.out);
+	}
+	return pendingReason;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (9/29/2003 10:35:12 AM)
+ * @param jobid java.lang.String
+ */
+public static void killJob(PbsJobID jobid) {
+	if (jobid == null) {
+		return;
+	}
+		
+	try {
+		String[] cmd = new String[]{JOB_CMD_DELETE, jobid.getID()};
+		Executable exe = new Executable(cmd);
+		exe.start();
+	} catch (ExecutableException ex) {
+		pbsLog.exception(ex);
+	}
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (9/26/2003 3:06:31 PM)
+ * @param args java.lang.String[]
+ */
+public static void main(String[] args) throws Exception{		
+	
+//	try {		
+//		PropertyLoader.loadProperties();
+//		
+//		PbsJobID jobid = new PbsJobID("29908"); //PBSUtils.submitJob(null, "D:\\PBSPro_Jobs\\test3.sub", "dir", "");
+//		int status = PBSUtils.getJobStatus(jobid);
+//		System.out.println("jobid=" + jobid);
+//		System.out.println("status=" + PBS_JOB_STATUS[status]);
+//		System.out.println("pendingreason=" + getPendingReason(jobid));
+//		int code = PBSUtils.getJobExitCode(jobid);
+//		System.out.println("exitcode=" + code + ":" + PBS_JOB_EXEC_STATUS[-code] + "]");
+//	} catch (Exception ex) {
+//		ex.printStackTrace();
+//	}
+	
+	
+	try {
+		PropertyLoader.loadProperties();
+		submitServiceJob ("Resource", "T_Db1", "C:\\Users\\eboyce\\Desktop\\testTemplate.sub", "dir", "*.*", 5, 128);
+	} catch (ExecutableException e) {
+		// TODO Auto-generated catch block
+		e.printStackTrace();
+	} catch (IOException e) {
+		// TODO Auto-generated catch block
+		e.printStackTrace();
+	}
+	
+	
+}
+
+
+
+
+
+public static PbsJobID submitJob(String computeResource, String jobName, String sub_file, String executable, String cmdArguments, int ncpus, double memSize) throws Exception {
+	return submitJob(computeResource, jobName, sub_file, executable, cmdArguments, ncpus, memSize, PBSConstants.PBS_SIMULATION_JOB);
+}
+
+public static PbsJobID submitServiceJob(String computeResource, String jobName, String sub_file, String executable, String cmdArguments, int ncpus, double memSize) throws Exception {
+	return submitJob(computeResource, jobName, sub_file, executable, cmdArguments, ncpus, memSize, PBSConstants.PBS_SERVICE_JOB);
+}
+
+private static PbsJobID submitJob(String computeResource, String jobName, String sub_file, String executable, String cmdArguments, int ncpus, double memSize, int jobCategory) throws Exception {	
+	PrintWriter pw = null;
+	try {	
+		pw = new PrintWriter(new FileOutputStream(sub_file));
+		pw.println("# Generated without file template.");
+		pw.println("#PBS -N " + jobName);
+		pw.println("#PBS -l mem=" + (int)(memSize + PBS_MEM_OVERHEAD_MB) + "mb");
+		String pbsQueueNameString = "#PBS -q ";
+		String siteNameString = VCellServerID.getSystemServerID().toCamelCase();		
+		if (jobCategory==PBSConstants.PBS_SIMULATION_JOB) {
+			pbsQueueNameString = pbsQueueNameString+"workq"+siteNameString;
+		}else if (jobCategory==PBSConstants.PBS_SERVICE_JOB) {
+			pbsQueueNameString = pbsQueueNameString+"serviceq"+siteNameString;
+		}else {
+			throw new ExecutableException("Invalid jobCategory: "+Integer.toString(jobCategory));
+		}
+		
+		pw.println(pbsQueueNameString);
+		pw.print(PBSConstants.PBS_JOB_TEMPLATE);
+		pw.println();
+		pw.println(executable + " " + cmdArguments);
+	}finally{
+		if(pw != null){try{pw.close();}catch(Exception e){e.printStackTrace();}}
+	}
+	
+	String[] completeCommand = new String[] {JOB_CMD_SUBMIT, sub_file};
+	Executable exe = new Executable(completeCommand);
+	exe.start();
+	String jobid = exe.getStdoutString().trim();
+	return new PbsJobID(jobid);
+}
+
+public static boolean isJobExiting(int status) {
+	return status == PBS_STATUS_EXITING;
+}
+
+public static boolean isJobRunning(int status) {
+	return status == PBS_STATUS_RUNNING;
+}
+
+public static boolean isJobRunning(PbsJobID jobid) {
+	return isJobRunning(getJobStatus(jobid));
+}
+
+public static boolean isJobExecOK(PbsJobID jobid) {
+	return getJobExitCode(jobid) == JOB_EXEC_OK;
+}
+
+public static String getJobStatusDescription(int status) {
+	return PBSConstants.PBS_JOB_STATUS[status];
+}
+
+public static String getJobExecStatus(PbsJobID jobid) {
+	int exitCode = getJobExitCode(jobid);
+	if (exitCode <= 0) {
+		return PBS_JOB_EXEC_STATUS[-exitCode];
+	} else {
+		return "job was killed with system signal " + exitCode;
+	}	
+}
+}
Index: src/org/vcell/optimization/OptXmlWriter.java
===================================================================
--- src/org/vcell/optimization/OptXmlWriter.java	(revision 11981)
+++ src/org/vcell/optimization/OptXmlWriter.java	(revision 11980)
@@ -34,7 +34,6 @@
 import cbit.vcell.math.ReservedVariable;
 import cbit.vcell.math.Variable;
 import cbit.vcell.mathmodel.MathModel;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.modelopt.ParameterEstimationTask;
 import cbit.vcell.modelopt.ReferenceDataMappingSpec;
 import cbit.vcell.opt.Constraint;
@@ -441,7 +440,7 @@
 				simulation.getSolverTaskDescription().setTimeBounds(new TimeBounds(0.0, refDataEndTime));
 				simulation.getSolverTaskDescription().setSolverDescription(SolverDescription.IDA);
 				StringWriter simulationInputStringWriter = new StringWriter();
-				IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(simulationInputStringWriter,true), new SimulationTask(new SimulationJob(simulation, 0, null),0));
+				IDAFileWriter idaFileWriter = new IDAFileWriter(new PrintWriter(simulationInputStringWriter,true), new SimulationJob(simulation, 0, null));
 				idaFileWriter.write(parameterNames);
 				simulationInputStringWriter.close();
 				modelElement.setAttribute(OptXmlTags.ModelType_Attr,OptXmlTags.ModelType_Attr_IDA);
@@ -459,7 +458,7 @@
 				simulation.getSolverTaskDescription().setTimeBounds(new TimeBounds(0.0, refDataEndTime));
 				simulation.getSolverTaskDescription().setSolverDescription(SolverDescription.CVODE);
 				StringWriter simulationInputStringWriter = new StringWriter();
-				CVodeFileWriter cvodeFileWriter = new CVodeFileWriter(new PrintWriter(simulationInputStringWriter,true), new SimulationTask(new SimulationJob(simulation, 0, null),0));
+				CVodeFileWriter cvodeFileWriter = new CVodeFileWriter(new PrintWriter(simulationInputStringWriter,true), new SimulationJob(simulation, 0, null));
 				cvodeFileWriter.write(parameterNames);
 				simulationInputStringWriter.close();
 				modelElement.setAttribute(OptXmlTags.ModelType_Attr,OptXmlTags.ModelType_Attr_CVODE);
@@ -517,10 +516,10 @@
 				e.printStackTrace();
 				throw new SolverException(e.getMessage());
 			}	
-			SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, 0, pdeObjectiveFunction.getFieldDataIDSs()),0);
+			SimulationJob simJob = new SimulationJob(simulation, 0, pdeObjectiveFunction.getFieldDataIDSs());
 			
 			StringWriter simulationInputStringWriter = new StringWriter();
-			FiniteVolumeFileWriter fvFileWriter = new FiniteVolumeFileWriter(new PrintWriter(simulationInputStringWriter,true), simTask, resampledGeometry, pdeObjectiveFunction.getWorkingDirectory());		
+			FiniteVolumeFileWriter fvFileWriter = new FiniteVolumeFileWriter(new PrintWriter(simulationInputStringWriter,true), simJob, resampledGeometry, pdeObjectiveFunction.getWorkingDirectory());		
 			fvFileWriter.write(parameterNames);
 			simulationInputStringWriter.close();
 			modelElement.setAttribute(OptXmlTags.ModelType_Attr,OptXmlTags.ModelType_Attr_FVSOLVER);
Index: src/org/vcell/solver/smoldyn/SmoldynSolver.java
===================================================================
--- src/org/vcell/solver/smoldyn/SmoldynSolver.java	(revision 11981)
+++ src/org/vcell/solver/smoldyn/SmoldynSolver.java	(revision 11980)
@@ -18,7 +18,6 @@
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.math.MathException;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.simdata.SimDataConstants;
 import cbit.vcell.solver.AnnotatedFunction;
 import cbit.vcell.solver.SimulationJob;
@@ -37,8 +36,8 @@
  */
 public class SmoldynSolver extends AbstractCompiledSolver {
 
-public SmoldynSolver(SimulationTask simTask, java.io.File directory, SessionLog sessionLog, boolean bMsging) throws SolverException {
-	super(simTask, directory, sessionLog, bMsging);
+public SmoldynSolver(SimulationJob simulationJob, java.io.File directory, SessionLog sessionLog, boolean bMsging) throws SolverException {
+	super(simulationJob, directory, sessionLog, bMsging);
 }
 
 
@@ -89,7 +88,7 @@
 	
 	// write subdomains file
 	try {
-		SubdomainInfo.write(new File(getBaseName() + SimDataConstants.SUBDOMAINS_FILE_SUFFIX), simTask.getSimulation().getMathDescription());
+		SubdomainInfo.write(new File(getBaseName() + SimDataConstants.SUBDOMAINS_FILE_SUFFIX), simulationJob.getSimulation().getMathDescription());
 	} catch (IOException e1) {
 		e1.printStackTrace();
 		throw new SolverException(e1.getMessage());
@@ -98,7 +97,7 @@
 		throw new SolverException(e1.getMessage());
 	}
 
-	String inputFilename = getInputFilename();
+	String inputFilename = getBaseName() + SMOLDYN_INPUT_FILE_EXTENSION;	
 	sessionLog.print("SmoldynSolver.initialize() baseName = " + getBaseName());
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING, SimulationMessage.MESSAGE_SOLVER_RUNNING_INPUT_FILE));
@@ -107,7 +106,7 @@
 	PrintWriter pw = null;
 	try {
 		pw = new PrintWriter(inputFilename);
-		SmoldynFileWriter stFileWriter = new SmoldynFileWriter(pw, false, getBaseName(), simTask, bMessaging);
+		SmoldynFileWriter stFileWriter = new SmoldynFileWriter(pw, false, getBaseName(), simulationJob, bMessaging);
 		stFileWriter.write();
 	} catch (Exception e) {
 		setSolverStatus(new SolverStatus(SolverStatus.SOLVER_ABORTED, SimulationMessage.solverAborted("Could not generate input file: " + e.getMessage())));
@@ -121,21 +120,11 @@
 
 	setSolverStatus(new SolverStatus(SolverStatus.SOLVER_RUNNING,SimulationMessage.MESSAGE_SOLVER_RUNNING_START));	
 	//get executable path+name.
-	setMathExecutable(new MathExecutable(getMathExecutableCommand()));	
+	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.smoldynExecutableProperty);
+	setMathExecutable(new MathExecutable(new String[] {executableName, inputFilename}));	
 	//setMathExecutable(new cbit.vcell.solvers.MathExecutable(executableName + " gibson " + getBaseName() + ".stochInput" + " " + getBaseName() + ".stoch"));
 }
 
-private String getInputFilename(){
-	return getBaseName() + SMOLDYN_INPUT_FILE_EXTENSION;
-}
-
-@Override
-public String[] getMathExecutableCommand() {
-	String executableName = PropertyLoader.getRequiredProperty(PropertyLoader.smoldynExecutableProperty);
-	String inputFilename = getInputFilename();
-	return new String[] { executableName, inputFilename };
-}
-
 /**
  * Insert the method's description here.
  * Creation date: (10/11/2006 11:16:02 AM)
Index: src/org/vcell/solver/smoldyn/SmoldynFileWriter.java
===================================================================
--- src/org/vcell/solver/smoldyn/SmoldynFileWriter.java	(revision 11981)
+++ src/org/vcell/solver/smoldyn/SmoldynFileWriter.java	(revision 11980)
@@ -83,7 +83,6 @@
 import cbit.vcell.math.VariableType;
 import cbit.vcell.math.VolumeParticleVariable;
 import cbit.vcell.messaging.JmsUtils;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.parser.DivideByZeroException;
 import cbit.vcell.parser.Expression;
 import cbit.vcell.parser.ExpressionBindingException;
@@ -301,22 +300,22 @@
 	private CartesianMesh cartesianMesh = null;
 	private String baseFileName = null;
 
-public SmoldynFileWriter(PrintWriter pw, boolean bGraphic, String baseName, SimulationTask simTask, boolean bMessaging) 
+public SmoldynFileWriter(PrintWriter pw, boolean bGraphic, String baseName, SimulationJob arg_simulationJob, boolean bMessaging) 
 {
-	super(pw, simTask, bMessaging);
+	super(pw, arg_simulationJob, bMessaging);
 	this.bGraphicOpenGL = bGraphic;
 	baseFileName = baseName;
 	this.outputFile = new File(baseFileName + SimDataConstants.SMOLDYN_OUTPUT_FILE_EXTENSION); 
 	
 	//get user defined random seed. If it doesn't exist, we assign system time (in millisecond) to it.
-	SmoldynSimulationOptions smoldynSimulationOptions = simTask.getSimulation().getSolverTaskDescription().getSmoldynSimulationOptions();
+	SmoldynSimulationOptions smoldynSimulationOptions = arg_simulationJob.getSimulation().getSolverTaskDescription().getSmoldynSimulationOptions();
 	if (smoldynSimulationOptions.getRandomSeed() != null) {
 		this.randomSeed = smoldynSimulationOptions.getRandomSeed();
 	} else {
 		this.randomSeed = System.currentTimeMillis();
 	}
 	//We add jobindex to the random seed in case there is a parameter scan.
-	randomSeed = randomSeed + simTask.getSimulationJob().getJobIndex();
+	randomSeed = randomSeed + simulationJob.getJobIndex();
 	dist.reSeed(randomSeed);
 }
 
@@ -345,9 +344,9 @@
 }
 
 private void init() throws SolverException {
-	simulation = simTask.getSimulation();
+	simulation = simulationJob.getSimulation();
 	mathDesc = simulation.getMathDescription();
-	simulationSymbolTable = simTask.getSimulationJob().getSimulationSymbolTable();
+	simulationSymbolTable = simulationJob.getSimulationSymbolTable();
 
 	particleVariableList = new ArrayList<ParticleVariable>();
 	Variable[] variables = simulationSymbolTable.getVariables();
@@ -627,7 +626,7 @@
 }
 
 private void writeDataProcessor() throws DataAccessException, IOException, MathException, DivideByZeroException, ExpressionException {
-	Simulation simulation = simTask.getSimulation();
+	Simulation simulation = simulationJob.getSimulation();
 	DataProcessingInstructions dpi = simulation.getDataProcessingInstructions();
 	if (dpi == null) {
 		printWriter.println(SmoldynKeyword.cmd + " " + SmoldynKeyword.B + " " + VCellSmoldynKeyword.vcellDataProcess + " begin " + DataProcessingInstructions.ROI_TIME_SERIES);
@@ -649,7 +648,7 @@
 			throw new IllegalArgumentException("field function variable type (" + varType.getTypeName() + ") doesn't match real variable type (" + dataVarType.getTypeName() + ")");
 		}
 		double[] origData = simDataBlock.getData();	
-		String filename = SimulationJob.createSimulationJobID(Simulation.createSimulationID(simulation.getKey()), simTask.getSimulationJob().getJobIndex()) + FieldDataIdentifierSpec.getDefaultFieldDataFileNameForSimulation(fdis.getFieldFuncArgs());
+		String filename = SimulationJob.createSimulationJobID(Simulation.createSimulationID(simulation.getKey()), simulationJob.getJobIndex()) + FieldDataIdentifierSpec.getDefaultFieldDataFileNameForSimulation(fdis.getFieldFuncArgs());
 		
 		File fdatFile = new File(userDirectory, filename);
 		
@@ -708,7 +707,7 @@
 				{
 					if(subdomain instanceof MembraneSubDomain)
 					{
-						rateDefinition = new Expression(FiniteVolumeFileWriter.replaceVolumeVariable(getSimulationTask(), (MembraneSubDomain)subdomain, rateDefinition));
+						rateDefinition = new Expression(FiniteVolumeFileWriter.replaceVolumeVariable(getSimulationJob(), (MembraneSubDomain)subdomain, rateDefinition));
 					}
 				}
 			}else{
@@ -1970,7 +1969,7 @@
 }
 
 private void writeJms(Simulation simulation) {
-	if (simTask != null) {
+	if (simulationJob  != null) {
 		printWriter.println("# JMS_Paramters");
 		printWriter.println("start_jms"); 
 		printWriter.println(JmsUtils.getJmsProvider() + " " + JmsUtils.getJmsUrl()
@@ -1979,7 +1978,7 @@
 			+ " " + JmsUtils.getTopicServiceControl()
 			+ " " + simulation.getVersion().getOwner().getName()
 			+ " " + simulation.getVersion().getVersionKey()
-			+ " " + simTask.getSimulationJob().getJobIndex());
+			+ " " + simulationJob.getJobIndex());
 		printWriter.println("end_jms");
 		printWriter.println();
 	}
Index: src/org/vcell/util/PropertyLoader.java
===================================================================
--- src/org/vcell/util/PropertyLoader.java	(revision 11981)
+++ src/org/vcell/util/PropertyLoader.java	(revision 11980)
@@ -42,6 +42,8 @@
 	public static final String libsProperty					= "vcell.c++.libs";
 	public static final String finiteVolumeExecutableProperty = "vcell.finitevolume.executable";
 	
+	public static final String optLibsProperty				= "vcell.opt.libs";
+	public static final String optIncludeProperty			= "vcell.opt.include";
 	//
 	public static final String sundialsSolverExecutableProperty		= "vcell.sundialsSolver.executable";
 	
@@ -88,6 +90,7 @@
 	public static final String sbml1SchemaUrlProperty		= "vcell.xml.sbml1SchemaUrl";
 	public static final String sbml2SchemaUrlProperty		= "vcell.xml.sbml2SchemaUrl";
 	public static final String cellmlSchemaUrlProperty      = "vcell.xml.cellmlSchemaUrl"; 
+	public static final String triangleCmdProperty			= "vcell.mesh.trianglecmd";
 	
 	public static final String dataSetCrawlerEnabled		= "vcell.dataSetCrawlerEnabled";
 	public static final String dataSetCrawlerIntervalMinutes= "vcell.dataSetCrawlerIntervalMinutes";
@@ -95,6 +98,10 @@
 	public static final String odeComputeServerHosts		= "vcell.odeComputeServerHosts";   // comma-separated list of hosts
 	public static final String pdeComputeServerHosts		= "vcell.pdeComputeServerHosts";   // comma-separated list of hosts
 	public static final String hostSeparator	= ",";
+	//added by RB, to accomodate some experiment-related stuff
+	public static final String expSchemaUrlProperty = "vcell.experiment.expSchemaUrl";
+	public static final String expXMLRep = "vcell.experiment.expXMLRep";
+	public static final String expLoadDump = "vcell.experiment.expLoadDump";
 
 	public static final String jmsProvider				= "vcell.jms.provider";
 	public static final String jmsURL					= "vcell.jms.url";
@@ -103,6 +110,7 @@
 	public static final String jmsSimReqQueue			= "vcell.jms.queue.simReq";
 	public static final String jmsDataRequestQueue		= "vcell.jms.queue.dataReq";
 	public static final String jmsDbRequestQueue		= "vcell.jms.queue.dbReq";
+	public static final String jmsBNGRequestQueue		= "vcell.jms.queue.bngReq";
 	public static final String jmsSimJobQueue			= "vcell.jms.queue.simJob";
 	public static final String jmsWorkerEventQueue		= "vcell.jms.queue.workerEvent";
 	public static final String jmsWorkerPrefetchCount	= "vcell.jms.workerPrefetchCount";
@@ -126,7 +134,7 @@
 	public static final String rmiPortVCellServer			= "vcell.rmi.port.vcellServer";
 	public static final String rmiPortMessageHandler		= "vcell.rmi.port.messageHandler";
 	public static final String rmiPortRegistry				= "vcell.rmi.port.registry";
-	public static final String rmiBootstrapHost				= "vcell.rmi.host";
+	public static final String rmiPortBNGService			= "vcell.rmi.port.bngService";
 
 	public static final String serverManageConfig = "vcell.messaging.serverManagerConfig";
 	public static final String bootstrapConfig = "vcell.messaging.bootstrapConfig";
@@ -135,8 +143,20 @@
 
 	public static final String vcellServerHost = "vcell.serverHost";
 
+	public static final String vcellAnonymizerBootstrapPropertyFile = "vcell.anonymizer.bootstrap.propertyFile";
+	public static final String vcellAnonymizerBootstrapLogfile = "vcell.anonymizer.bootstrap.logfile";
+	public static final String vcellAnonymizerBootstrapLocalHost = "vcell.anonymizer.bootstrap.localHost";
+	public static final String vcellAnonymizerBootstrapLocalPort = "vcell.anonymizer.bootstrap.localPort";	
+	public static final String vcellAnonymizerBootstrapRemoteHost = "vcell.anonymizer.bootstrap.remoteHost";
+	public static final String vcellAnonymizerBootstrapRemotePort = "vcell.anonymizer.bootstrap.remotePort";
+	
+	public static final String vcellBNGPerl = "vcell.bng.perl.executable";
+	public static final String vcellBNGScript = "vcell.bng.script";
+
 	public static final String vcellClientTimeoutMS = "vcell.client.timeoutMS";
 	
+	public static final String lsfJobQueue = "vcell.lsf.jobQueue";
+	
 	public static final String htcPartitionMaximumJobs = "vcell.htc.partition.maximumJobs";
 	public static final String htcPartitionShareServerIDs = "vcell.htc.partition.shareServerIDs";
 	public static final String htcComputeResources = "vcell.htc.computeresources";
@@ -152,7 +172,7 @@
 	public static final String vcellSMTPEmailAddress = "vcell.smtp.emailAddress";
 	
 	public static final String javaSimulationExecutable = "vcell.javaSimulation.executable";
-	public static final String simulationPreprocessor = "vcell.simulation.preprocessor";
+	
 	public final static String mathSBMLDirectory = "vcell.mathSBML.directory";
 	public final static String COPASIExecutable = "vcell.COPASI.executable";
 	public final static String mathematicaKernelExecutable = "vcell.mathematica.kernel.executable";
@@ -184,6 +204,9 @@
 		libsProperty,
 		finiteVolumeExecutableProperty,
 		
+		optLibsProperty,
+		optIncludeProperty,
+		
 		sundialsSolverExecutableProperty,
 		
 		stochExecutableProperty,
@@ -213,11 +236,15 @@
 		sbml1SchemaUrlProperty,
 		sbml2SchemaUrlProperty,
 		cellmlSchemaUrlProperty,
+		triangleCmdProperty,
 		dataSetCrawlerEnabled,
 		dataSetCrawlerIntervalMinutes,
 		simDataServerHost,
 		odeComputeServerHosts,
 		pdeComputeServerHosts,
+		expSchemaUrlProperty,
+		expXMLRep,
+		expLoadDump,
 		
 		jmsProvider,
 		jmsURL,
@@ -226,6 +253,7 @@
 		jmsSimReqQueue,
 		jmsDataRequestQueue,
 		jmsDbRequestQueue,
+		jmsBNGRequestQueue,
 		jmsSimJobQueue,
 		jmsWorkerEventQueue,
 		jmsWorkerPrefetchCount,
@@ -255,9 +283,21 @@
 		rmiPortVCellServer,
 		rmiPortMessageHandler,
 		rmiPortRegistry,
+		rmiPortBNGService,
 
+		vcellAnonymizerBootstrapLogfile,
+		vcellAnonymizerBootstrapLocalHost,
+		vcellAnonymizerBootstrapLocalPort,
+		vcellAnonymizerBootstrapRemoteHost,
+		vcellAnonymizerBootstrapRemotePort,
+
+		vcellBNGPerl,
+		vcellBNGScript,
+
 		vcellClientTimeoutMS,
 		
+		lsfJobQueue,
+				
 		htcComputeResources,
 		htcPartitionMaximumJobs,
 		htcPartitionShareServerIDs,		
@@ -271,7 +311,6 @@
 		vcellSMTPEmailAddress,
 		
 		javaSimulationExecutable,
-		simulationPreprocessor,
 		
 		mathSBMLDirectory,
 		COPASIExecutable,
@@ -352,6 +391,40 @@
 
 
 /**
+ * Insert the method's description here.
+ * Creation date: (6/8/2006 12:29:59 PM)
+ */
+public static void loadAnonymizerProperties() {
+	try {
+		java.util.Properties sysProperties = new java.util.Properties(System.getProperties());
+		
+		String customPropertyFileName = sysProperties.getProperty(PropertyLoader.vcellAnonymizerBootstrapPropertyFile);		
+
+		java.io.InputStream propInput = null;		
+		if (customPropertyFileName != null && new java.io.File(customPropertyFileName).exists()){
+			System.out.println("property file [" + customPropertyFileName + "] is specified on the command line");
+			propInput = new java.io.FileInputStream(customPropertyFileName);
+		} else {
+			System.out.println("property file is not specified on the command line, or it doesn't exist.");
+			customPropertyFileName = "Resource[/cbit/vcell/anonymizer/anonymizer.properties.txt]";
+			java.net.URL propURL = PropertyLoader.class.getResource("/cbit/vcell/anonymizer/anonymizer.properties.txt");
+			propInput = propURL.openConnection().getInputStream();
+			System.out.println("trying to use the property file in the jar file [/cbit/vcell/anonymizer/anonymizer.properties.txt]");		
+		}
+		
+		sysProperties.load(propInput);
+		propInput.close();
+		System.out.println("loaded properties from " + customPropertyFileName);
+
+		System.setProperties(sysProperties);
+		
+	} catch (Exception ex) {
+		ex.printStackTrace();
+	}	
+}
+
+
+/**
  * This method was created in VisualAge.
  */
 public final static void loadProperties() throws java.io.IOException {
