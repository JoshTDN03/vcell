package cbit.vcell.solvers;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.image.*;
import cbit.util.*;
import java.util.*;
import cbit.vcell.math.*;
import cbit.vcell.parser.*;
import cbit.vcell.geometry.*;
import cbit.vcell.solver.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderGeometry extends CppClassCoder {
	protected Simulation simulation = null;

/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderGeometry(CppCoderVCell cppCoderVCell, Simulation argSimulation) 
{
	super(cppCoderVCell,"UserGeometry", "Geometry");
	this.simulation = argSimulation;
}


/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {

	MathDescription mathDesc = simulation.getMathDescription();
	Geometry geo = mathDesc.getGeometry();

	int dim = geo.getDimension();
	double sX = geo.getExtent().getX();
	double sY = geo.getExtent().getY();
	double sZ = geo.getExtent().getZ();
	double oX = geo.getOrigin().getX();
	double oY = geo.getOrigin().getY();
	double oZ = geo.getOrigin().getZ();

	MeshSpecification meshSpec =  simulation.getMeshSpecification();
	ISize meshSamplingSize = meshSpec.getSamplingSize();
	int meshX = meshSamplingSize.getX();
	int meshY = meshSamplingSize.getY();
	int meshZ = meshSamplingSize.getZ();

	out.println(getClassName() + "::" + getClassName() + "()");
	out.println(": " + getParentClassName() + "(" + dim + "," + sX + "," + sY + "," + sZ + "," + oX + "," + oY + "," + oZ + ")");
	out.println("{");
	if (geo.getGeometrySpec().getFilamentGroup().getFilamentCount() > 0) {
		FilamentGroup filamentGroup = geo.getGeometrySpec().getFilamentGroup();
		Filament filaments[] = filamentGroup.getFilaments();
		//
		// write filaments out as SampledContours
		//
		out.println("   int i, j;");
		out.println("   const int NUM_POINTS = 1001;");
		out.println("   ListContour *listContour = NULL;");
		for (int i = 0; i < filaments.length; i++) {
			Curve curves[] = filaments[i].getCurves();
System.out.println("& & & & & & CppClassCoderGeometry.writeContstructor(<<<<<<Need to know which Feature it belongs to>>>>>)");
//
// This is bogus....
//
int filamentID = 0;
int featureHandle = geo.getGeometrySpec().getSubVolume(0).getHandle();
double charLength = 0.1;
			for (int j = 0; j < curves.length; j++) {
				//
				SampledCurve sampledCurve = curves[j].getSampledCurve();
				int controlPointCount = sampledCurve.getControlPointCount();
				//
				out.println("   listContour = new ListContour(" + filamentID + "," + featureHandle + "," + charLength + ");");
				out.println("   WorldCoord wc_" + i + "_" + j + "[" + controlPointCount + "] = { ");
				for (int k = 0; k < controlPointCount; k++) {
					Coordinate curveCoord = sampledCurve.getControlPoint(k);
					out.print("{" + curveCoord.getX() + "," + curveCoord.getY() + "," + curveCoord.getZ() + "},");
				}
				out.println("};");
				out.println("    for (i=0;i<" + controlPointCount + ";i++){");
				out.println("       listContour->addPoint(wc_" + i + "_" + j + "[i]);");
				out.println("    }");
				out.println("    addContourSubdomain(listContour);");
			}
		}

	}
	out.println("");
	out.println("}");
}


/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("   "+getClassName() + "();");
	out.println("   virtual FeatureHandle getFeatureHandle(WorldCoord wc);");
	out.println("};");
}


/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeGetFeatureHandle(java.io.PrintWriter out) throws Exception {
	
	Geometry geo = simulation.getMathDescription().getGeometry();
	out.println("FeatureHandle "+getClassName()+"::getFeatureHandle(WorldCoord wc)");
	out.println("{");

	String expString = "";
	boolean first = true;
	SubVolume subVolumes[] = geo.getGeometrySpec().getSubVolumes();
	for (int i=0;i<subVolumes.length;i++){
		AnalyticSubVolume analyticSubVolume = (AnalyticSubVolume)subVolumes[i];
		if (!first){
			expString += " + ";
		}
		expString += analyticSubVolume.getExpression().infix_C();
		first = false;
	}	
	Expression exp = new Expression(expString);

	Enumeration enum1 = simulation.getRequiredVariables(exp);

	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		if (var instanceof VolVariable){
			throw new Exception("volume variable not defined for a geometry definition");
		}else if (var instanceof MemVariable){
			throw new Exception("membrane variable not defined for a geometry definition");
		}else if (var instanceof ReservedVariable){
			//
			// define reserved symbols (x,y,z,t)
			//
			ReservedVariable rv = (ReservedVariable)var;
			if (rv.isTIME()){
				out.println("   double t = sim->getTime_sec();");
			}else if (rv.isX()){
				out.println("   double x = wc.x;");
			}else if (rv.isY()){
				out.println("   double y = wc.y;");
			}else if (rv.isZ()){
				out.println("   double z = wc.z;");
			}		
		}		
	}	
	subVolumes = geo.getGeometrySpec().getSubVolumes();
	for (int i=0;i<subVolumes.length;i++){
		AnalyticSubVolume analyticSubVolume = (AnalyticSubVolume)subVolumes[i];
		out.println("   if ("+analyticSubVolume.getExpression().infix_C()+") {");
		out.println("       return "+analyticSubVolume.getHandle()+";");
		out.println("   }");
	}	
	out.println("   return -1;");
	out.println("}");
}


/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeConstructor(out);
	out.println("");
	writeGetFeatureHandle(out);
	out.println("");
}
}