Index: src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12555)
+++ src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12552)
@@ -44,6 +44,7 @@
  */
 public class ClientTopicMessageCollector implements MessageCollector, TopicListener {
 	private EventListenerList listenerList = new EventListenerList();	
+	private User user = null;	
 	private VCMessagingService vcMessagingService = null;
 	private SessionLog log = null;
 
@@ -56,9 +57,10 @@
  * @param serviceName java.lang.String
  * @param queueName java.lang.String
  */
-public ClientTopicMessageCollector(VCMessagingService vcMessagingService, SessionLog log) {
+public ClientTopicMessageCollector(VCMessagingService vcMessagingService, User user0, SessionLog log0) {
 	this.vcMessagingService = vcMessagingService;
-	this.log = log;
+	this.user = user0;
+	this.log = log0;
 }
 
 
@@ -146,33 +148,52 @@
 		}
 		if (msgType.equals(MessageConstants.MESSAGE_TYPE_SIMSTATUS_VALUE)) {
 			String messageUserName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-			StatusMessage statusMessage = new StatusMessage(message);
-			String userName = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
-			if (message.propertyExists(MessageConstants.USERNAME_PROPERTY)){
-				userName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
+			if (messageUserName.equals(user.getName()) || messageUserName.equals(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
+				StatusMessage statusMessage = new StatusMessage(message);
+				String userName = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
+				if (message.propertyExists(MessageConstants.USERNAME_PROPERTY)){
+					userName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
+				}
+				
+				SimulationJobStatus newJobStatus = statusMessage.getJobStatus();
+				if (newJobStatus == null) {
+					return;
+				}
+				
+				VCSimulationIdentifier vcSimID = newJobStatus.getVCSimulationIdentifier();
+				Double progress = statusMessage.getProgress();
+				Double timePoint = statusMessage.getTimePoint();
+				log.print("---onTopicMessage[" + newJobStatus + ", progress=" + progress + ", timepoint=" + timePoint + "]");
+				
+				fireSimulationJobStatusEvent(new SimulationJobStatusEvent(this, vcSimID.getID(), newJobStatus, progress, timePoint));		
+			}else{
+				throw new RuntimeException("user "+user.getName()+" received a simstatus event message meant for user "+messageUserName);
 			}
-			
-			SimulationJobStatus newJobStatus = statusMessage.getJobStatus();
-			if (newJobStatus == null) {
-				return;
-			}
-			
-			VCSimulationIdentifier vcSimID = newJobStatus.getVCSimulationIdentifier();
-			Double progress = statusMessage.getProgress();
-			Double timePoint = statusMessage.getTimePoint();
-			
-			fireSimulationJobStatusEvent(new SimulationJobStatusEvent(this, vcSimID.getID(), newJobStatus, progress, timePoint, messageUserName));		
 		} else if(msgType.equals(MessageConstants.MESSAGE_TYPE_EXPORT_EVENT_VALUE)) {	
 			String messageUserName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-			ExportEvent event = (ExportEvent)message.getObjectContent();
-			fireExportEvent(event);
+			if (messageUserName.equals(user.getName()) || messageUserName.equals(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
+				ExportEvent event = (ExportEvent)message.getObjectContent();
+				log.print("---onTopicMessage[ExportEvent[" + event.getVCDataIdentifier().getID() + "," + event.getProgress() + "]]");
+				fireExportEvent(event);
+			}else{
+				throw new RuntimeException("user "+user.getName()+" received an export event message meant for user "+messageUserName);
+			}
 		} else if(msgType.equals(MessageConstants.MESSAGE_TYPE_DATA_EVENT_VALUE)){
 			String messageUserName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-			DataJobEvent event = (DataJobEvent)message.getObjectContent();
-			fireMessageEvent(event);
+			if (messageUserName.equals(user.getName()) || messageUserName.equals(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
+				DataJobEvent event = (DataJobEvent)message.getObjectContent();
+				log.print("---onTopicMessage[DataEvent[vcdid=" + event.getVCDataIdentifier().getID() + "," + event.getProgress() + "]]");
+				fireMessageEvent(event);
+			}else{
+				throw new RuntimeException("user "+user.getName()+" received a data event message meant for user "+messageUserName);
+			}
 		} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE)) {
 			String messageUserName = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
-			fireMessageEvent(new VCellMessageEvent(this, System.currentTimeMillis() + "", new MessageData((BigString)message.getObjectContent()), VCellMessageEvent.VCELL_MESSAGEEVENT_TYPE_BROADCAST,messageUserName));
+			if (messageUserName.equals(user.getName()) || messageUserName.equals(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
+				fireMessageEvent(new VCellMessageEvent(this, System.currentTimeMillis() + "", new MessageData((BigString)message.getObjectContent()), VCellMessageEvent.VCELL_MESSAGEEVENT_TYPE_BROADCAST));
+			}else{
+				throw new RuntimeException("user "+user.getName()+" received a broadcast event message meant for user "+messageUserName);
+			}
 		} else{
 			throw new Exception(this.getClass().getName()+".onControlTopicMessage: Unimplemented message "+message.show());
 		}
@@ -187,8 +208,9 @@
  * onException method comment.
  */
 public void init() {
-	VCMessageSelector selector = null;
-	topicConsumer = new VCTopicConsumer(VCellTopic.ClientStatusTopic, this, selector, "Client Status Topic Consumer",MessageConstants.PREFETCH_LIMIT_CLIENT_TOPIC);
+	String clientMessageFilter = MessageConstants.USERNAME_PROPERTY + "='" + user.getName() + "' OR "+MessageConstants.USERNAME_PROPERTY + "='"+MessageConstants.USERNAME_PROPERTY_VALUE_ALL+"'";
+	VCMessageSelector selector = vcMessagingService.createSelector(clientMessageFilter);
+	topicConsumer = new VCTopicConsumer(VCellTopic.ClientStatusTopic, this, selector, "Client Status Topic Consumer for user "+user.getName(),MessageConstants.PREFETCH_LIMIT_CLIENT_TOPIC);
 	vcMessagingService.addMessageConsumer(topicConsumer);
 }
 
Index: src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java	(revision 12555)
+++ src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java	(revision 12552)
@@ -58,6 +58,8 @@
 	private VCMessageSession vcMessageSessionSim = null;
 	private VCMessageSession vcMessageSessionDb = null;
 	
+	private ClientTopicMessageCollector clientMessageCollector = null;
+	
 	private UserLoginInfo userLoginInfo;
 	
 	private SessionLog fieldSessionLog = null;
@@ -67,7 +69,7 @@
 	private PerformanceMonitoringFacility performanceMonitoringFacility;
 
 	public LocalVCellConnectionMessaging(UserLoginInfo userLoginInfo, String host, 
-		SessionLog sessionLog, VCMessagingService vcMessagingService, ClientTopicMessageCollector clientMessageCollector, LocalVCellServer aLocalVCellServer) 
+		SessionLog sessionLog, VCMessagingService vcMessagingService, LocalVCellServer aLocalVCellServer) 
 		throws RemoteException, FileNotFoundException {
 		
 		super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellConnection,0));
@@ -76,8 +78,9 @@
 		this.fieldSessionLog = sessionLog;
 		this.fieldLocalVCellServer = aLocalVCellServer;
 		this.vcMessagingService = vcMessagingService;
+		clientMessageCollector = new ClientTopicMessageCollector(vcMessagingService, userLoginInfo.getUser(), fieldSessionLog);
 		
-		messageService = new SimpleMessageService(userLoginInfo.getUser());
+		messageService = new SimpleMessageService();
 		clientMessageCollector.addMessageListener(messageService);
 		
 		sessionLog.print("new LocalVCellConnectionMessaging(" + userLoginInfo.getUser().getName() + ")");	
@@ -85,7 +88,12 @@
 		fieldLocalVCellServer.getDataSetControllerImpl().addDataJobListener(this);
 		
 		performanceMonitoringFacility = new PerformanceMonitoringFacility(userLoginInfo.getUser(), sessionLog);	
-	}	
+	}
+	
+public void init(){
+	clientMessageCollector.init();
+}
+	
 
 
 /**
@@ -102,6 +110,9 @@
 	if (vcMessageSessionSim!=null){
 		vcMessageSessionSim.close();
 	}
+	if (clientMessageCollector!=null){
+		clientMessageCollector.close();
+	}
 }
 
 
Index: src/cbit/vcell/message/messages/MessageConstants.java
===================================================================
--- src/cbit/vcell/message/messages/MessageConstants.java	(revision 12555)
+++ src/cbit/vcell/message/messages/MessageConstants.java	(revision 12552)
@@ -69,7 +69,7 @@
 	public static final long INTERVAL_SIMULATIONJOBSTATUS_TIMEOUT_MS = 10 * MINUTE_IN_MS; // in milliseconds
 	public static final long INTERVAL_PROGRESS_MESSAGE_MS = 5 * SECOND_IN_MS;
 	
-	public static final int PREFETCH_LIMIT_CLIENT_TOPIC = 1000;
+	public static final int PREFETCH_LIMIT_CLIENT_TOPIC = 100;
 	public static final int PREFETCH_LIMIT_DAEMON_CONTROL = 100;
 	public static final int PREFETCH_LIMIT_DATA_REQUEST = 1;
 	public static final int PREFETCH_LIMIT_DB_REQUEST = 1;
Index: src/cbit/vcell/server/LocalVCellServer.java
===================================================================
--- src/cbit/vcell/server/LocalVCellServer.java	(revision 12555)
+++ src/cbit/vcell/server/LocalVCellServer.java	(revision 12552)
@@ -27,7 +27,6 @@
 
 import cbit.vcell.export.server.ExportServiceImpl;
 import cbit.vcell.message.VCMessagingService;
-import cbit.vcell.message.server.bootstrap.ClientTopicMessageCollector;
 import cbit.vcell.message.server.bootstrap.LocalVCellConnectionMessaging;
 import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.mongodb.VCMongoMessage;
@@ -50,7 +49,6 @@
 	private ExportServiceImpl exportServiceImpl = null;
 	private java.util.Date bootTime = new java.util.Date();
 	private SimulationDatabase simulationDatabase = null;
-	private ClientTopicMessageCollector clientTopicMessageCollector = null;
 
 	private long CLEANUP_INTERVAL = 600*1000;	
 	
@@ -62,12 +60,8 @@
 	super(PropertyLoader.getIntProperty(PropertyLoader.rmiPortVCellServer,0));
 	this.hostName = argHostName;
 	this.vcMessagingService = vcMessagingService;
+	adminDbServer = dbServer;
 	this.sessionLog = new StdoutSessionLog(PropertyLoader.ADMINISTRATOR_ACCOUNT);
-	if (this.vcMessagingService!=null){
-		clientTopicMessageCollector = new ClientTopicMessageCollector(vcMessagingService,sessionLog);
-		clientTopicMessageCollector.init();
-	}
-	adminDbServer = dbServer;
 	this.dataCachetable = new Cachetable(10*Cachetable.minute);
 	this.dscImpl = new DataSetControllerImpl(sessionLog,dataCachetable, 
 			new File(PropertyLoader.getRequiredProperty(PropertyLoader.primarySimDataDirProperty)), 
@@ -98,7 +92,8 @@
 		if (vcMessagingService == null){
 			localConn = new LocalVCellConnection(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), simulationDatabase, getDataSetControllerImpl(), getExportServiceImpl());
 		} else {
-			localConn = new LocalVCellConnectionMessaging(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), vcMessagingService, clientTopicMessageCollector, this);
+			localConn = new LocalVCellConnectionMessaging(userLoginInfo, hostName, new StdoutSessionLog(userLoginInfo.getUser().getName()), vcMessagingService, this);
+			((LocalVCellConnectionMessaging)localConn).init();
 			VCMongoMessage.sendClientConnectionNew(localConn.getUserLoginInfo());
 		}
 		vcellConnectionList.addElement(localConn);
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12555)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12552)
@@ -96,7 +96,7 @@
 	
 	SimulationJobStatusEvent simulationJobStatusEvent = new SimulationJobStatusEvent(
 			SimulationControllerImpl.this, simJobStatus.getVCSimulationIdentifier().getID(), 
-			simJobStatus, progress, timepoint, simJobStatus.getVCSimulationIdentifier().getOwner().getName());
+			simJobStatus, progress, timepoint);
 
 	fireSimulationJobStatusEvent(simulationJobStatusEvent);
 }
@@ -267,7 +267,7 @@
 		int jobIndex = simTask.getSimulationJob().getJobIndex();
 		int taskID = simTask.getTaskID();
 		SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, null, SchedulerStatus.FAILED, taskID, SimulationMessage.jobFailed(e.getMessage()), null, null);
-		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null,vcSimID.getOwner().getName());
+		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
 	}
 }
@@ -323,7 +323,7 @@
 		adminSessionLog.exception(e);
 		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, localVCellConnection.getUserLoginInfo().getUser());
 		SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, jobIndex, null, SchedulerStatus.FAILED, taskID, SimulationMessage.jobFailed(e.getMessage()), null, null);
-		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null,vcSimID.getOwner().getName());
+		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(simKey), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
 	}
 	
Index: src/cbit/vcell/server/LocalVCellConnection.java
===================================================================
--- src/cbit/vcell/server/LocalVCellConnection.java	(revision 12555)
+++ src/cbit/vcell/server/LocalVCellConnection.java	(revision 12552)
@@ -41,14 +41,15 @@
  * Creation date: (Unknown)
  * @author: Jim Schaff.
  */
+@SuppressWarnings("serial")
 public class LocalVCellConnection implements VCellConnection, ExportListener, DataJobListener {
 	private SimulationController simulationController = null;
 	private SimulationControllerImpl simulationControllerImpl = null;
 	private ExportServiceImpl exportServiceImpl = null;
 	private DataSetControllerImpl dataSetControllerImpl = null;
 	private UserMetaDbServer userMetaDbServer = null;
-	private SimpleMessageService messageService = null;
-	private SimpleMessageCollector messageCollector = null;
+	private SimpleMessageService messageService = new SimpleMessageService();
+	private SimpleMessageCollector messageCollector = new SimpleMessageCollector();
 	//
 	private UserLoginInfo userLoginInfo;
 
@@ -74,8 +75,7 @@
 	this.fieldSessionLog = sessionLog;
 	this.simulationControllerImpl = new SimulationControllerImpl(sessionLog, simulationDatabase, this);
 	sessionLog.print("new LocalVCellConnection(" + userLoginInfo.getUserName() + ")");
-	messageService = new SimpleMessageService(userLoginInfo.getUser());
-	messageCollector = new SimpleMessageCollector();
+	
 	messageCollector.addMessageListener(messageService);
 	
 	this.exportServiceImpl = exportServiceImpl;
Index: src/cbit/rmi/event/DataJobEvent.java
===================================================================
--- src/cbit/rmi/event/DataJobEvent.java	(revision 12555)
+++ src/cbit/rmi/event/DataJobEvent.java	(revision 12552)
@@ -113,13 +113,4 @@
 public VCDataJobID getVcDataJobID() {
 	return vcDataJobID;
 }
-
-@Override
-public boolean isIntendedFor(User user){
-	if (user == null || getUser()==null){
-		return true;
-	}
-	return user.equals(getUser());
 }
-
-}
Index: src/cbit/rmi/event/PerformanceMonitorEvent.java
===================================================================
--- src/cbit/rmi/event/PerformanceMonitorEvent.java	(revision 12555)
+++ src/cbit/rmi/event/PerformanceMonitorEvent.java	(revision 12552)
@@ -83,14 +83,6 @@
 }
 
 @Override
-public boolean isIntendedFor(User user){
-	if (user == null || getUser()==null){
-		return true;
-	}
-	return user.equals(getUser());
-}
-
-@Override
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	return false;
 }
Index: src/cbit/rmi/event/WorkerEvent.java
===================================================================
--- src/cbit/rmi/event/WorkerEvent.java	(revision 12555)
+++ src/cbit/rmi/event/WorkerEvent.java	(revision 12552)
@@ -169,13 +169,6 @@
 	return getUser().getName();
 }
 
-@Override
-public boolean isIntendedFor(User user){
-	if (user == null || getUser()==null){
-		return true;
-	}
-	return user.equals(getUser());
-}
 
 /**
  * Insert the method's description here.
Index: src/cbit/rmi/event/VCellMessageEvent.java
===================================================================
--- src/cbit/rmi/event/VCellMessageEvent.java	(revision 12555)
+++ src/cbit/rmi/event/VCellMessageEvent.java	(revision 12552)
@@ -12,8 +12,6 @@
 
 import org.vcell.util.document.User;
 
-import cbit.vcell.message.messages.MessageConstants;
-
 /**
  * Insert the type's description here.
  * Creation date: (6/16/2006 3:55:11 PM)
@@ -22,7 +20,6 @@
 public class VCellMessageEvent extends MessageEvent {
 	public static final int VCELL_MESSAGEEVENT_TYPE_BROADCAST = 2001;
 	int eventType;
-	private String username;
 
 /**
  * VCellMessageEvent constructor comment.
@@ -30,10 +27,9 @@
  * @param messageSource cbit.rmi.event.MessageSource
  * @param messageData cbit.rmi.event.MessageData
  */
-public VCellMessageEvent(Object source, String messageID, MessageData messageData,int messageType,String username) {
+public VCellMessageEvent(Object source, String messageID, MessageData messageData,int messageType) {
 	super(source, new MessageSource(source, messageID), messageData);
 	eventType = messageType;
-	this.username = username;
 }
 
 
@@ -56,15 +52,7 @@
 	return null;
 }
 
-@Override
-public boolean isIntendedFor(User user){
-	if (user == null || username==null || username.equals(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
-		return true;
-	}
-	return user.getName().equals(username);
-}
 
-
 @Override
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	return false;
Index: src/cbit/rmi/event/SimpleMessageService.java
===================================================================
--- src/cbit/rmi/event/SimpleMessageService.java	(revision 12555)
+++ src/cbit/rmi/event/SimpleMessageService.java	(revision 12552)
@@ -10,8 +10,6 @@
 
 package cbit.rmi.event;
 
-import org.vcell.util.document.User;
-
 import cbit.vcell.mongodb.VCMongoMessage;
 
 
@@ -22,20 +20,17 @@
  */
 public class SimpleMessageService implements MessageService, MessageListener {
 	private MessageQueue messageQueue = new MessageQueue();
-	private User user = null;
 /**
  * Insert the method's description here.
  * Creation date: (11/14/2000 12:19:31 AM)
  */
-public SimpleMessageService(User user) {
-	this.user = user;
+public SimpleMessageService() {
 }
 
 public void messageEvent(MessageEvent event) {
-	if (event.isIntendedFor(user)){
-		VCMongoMessage.sendClientMessageEventQueued(event);
-		messageQueue.push(event);
-	}	
+	VCMongoMessage.sendClientMessageEventQueued(event);
+	messageQueue.push(event);
+	
 }
 
 public MessageEvent[] getMessageEvents() {
Index: src/cbit/rmi/event/ExportEvent.java
===================================================================
--- src/cbit/rmi/event/ExportEvent.java	(revision 12555)
+++ src/cbit/rmi/event/ExportEvent.java	(revision 12552)
@@ -125,13 +125,6 @@
 	return false;
 }
 
-@Override
-public boolean isIntendedFor(User user){
-	if (user == null || getUser()==null){
-		return true;
-	}
-	return user.equals(getUser());
-}
 
 /**
  * Insert the method's description here.
Index: src/cbit/rmi/event/SimulationJobStatusEvent.java
===================================================================
--- src/cbit/rmi/event/SimulationJobStatusEvent.java	(revision 12555)
+++ src/cbit/rmi/event/SimulationJobStatusEvent.java	(revision 12552)
@@ -12,7 +12,6 @@
 
 import org.vcell.util.document.User;
 
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.VCSimulationIdentifier;
@@ -25,20 +24,18 @@
 public class SimulationJobStatusEvent extends MessageEvent {
 	private SimulationJobStatus jobStatus = null;
 	private Double progress = null;
-	private Double timePoint = null;
-	private String username = null;
+	private Double timePoint = null;	
 /**
  * SimulationStatusEvent constructor comment.
  * @param source java.lang.Object
  * @param messageSource cbit.rmi.event.MessageSource
  * @param messageData cbit.rmi.event.MessageData
  */
-public SimulationJobStatusEvent(Object source, String simID, SimulationJobStatus jobStatus0, Double progress0, Double timePoint0, String username) {
+public SimulationJobStatusEvent(Object source, String simID, SimulationJobStatus jobStatus0, Double progress0, Double timePoint0) {
 	super(source, new MessageSource(source, simID), new MessageData(new Double[] { progress0, timePoint0 }));
 	jobStatus = jobStatus0;
 	progress = progress0;
 	timePoint = timePoint0;
-	this.username = username;
 }
 /**
  * Insert the method's description here.
@@ -92,15 +89,6 @@
 public User getUser() {
 	return null;
 }
-
-@Override
-public boolean isIntendedFor(User user){
-	if (user == null || username==null || username.equalsIgnoreCase(MessageConstants.USERNAME_PROPERTY_VALUE_ALL)){
-		return true;
-	}
-	return user.getName().equals(username);
-}
-
 /**
  * Insert the method's description here.
  * Creation date: (2/10/2004 2:26:56 PM)
Index: src/cbit/rmi/event/MessageEvent.java
===================================================================
--- src/cbit/rmi/event/MessageEvent.java	(revision 12555)
+++ src/cbit/rmi/event/MessageEvent.java	(revision 12552)
@@ -51,7 +51,6 @@
 	this.messageData = messageData;
 }
 
-public abstract boolean isIntendedFor(User user);
 
 /**
  * Insert the method's description here.
Index: src/org/vcell/util/FileUtils.java
===================================================================
--- src/org/vcell/util/FileUtils.java	(revision 12555)
+++ src/org/vcell/util/FileUtils.java	(revision 12552)
@@ -149,7 +149,6 @@
 public static File getRelativePath(File sourceDir, File targetFile, boolean bAllowAbsolutePaths) throws IOException {
 //	System.out.println("sourceDir = "+sourceDir.getPath());
 //	System.out.println("targetFile = "+targetFile.getPath());
-	File originalSourceDir = sourceDir;
 	int counter = 0;
 	while (sourceDir!=null && !targetFile.getPath().startsWith(sourceDir.getPath())){
 		sourceDir = sourceDir.getParentFile();
@@ -159,7 +158,7 @@
 		if (bAllowAbsolutePaths){
 			return targetFile;
 		}else{
-			throw new IOException("cannot find relative path between '"+originalSourceDir.getPath()+"' and '"+targetFile.getPath()); 
+			throw new IOException("cannot find relative path between '"+sourceDir.getPath()+"' and '"+targetFile.getPath()); 
 		}
 	}
 	String sourcePath = sourceDir.getPath();
