package cbit.vcell.model;

import java.beans.PropertyVetoException;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;

import org.vcell.expression.ExpressionException;
import org.vcell.expression.ExpressionFactory;
import org.vcell.expression.IExpression;
import org.vcell.util.*;

import edu.uchc.vcell.expression.internal.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class GeneralKinetics extends Kinetics {
/**
 * MassActionKinetics constructor comment.
 * @param name java.lang.String
 * @param exp cbit.vcell.parser.IExpression
 */
public GeneralKinetics(ReactionStep reactionStep) throws ExpressionException {
	super(KineticsDescription.General.getName(),reactionStep);
	try {
		KineticsParameter rateParm = new KineticsParameter(getDefaultParameterName(ROLE_Rate),ExpressionFactory.createExpression(0.0),ROLE_Rate,null);
		KineticsParameter currentParm = new KineticsParameter(getDefaultParameterName(ROLE_Current),ExpressionFactory.createExpression(0.0),ROLE_Current,null);
		if (reactionStep.getStructure() instanceof Membrane){
			setKineticsParameters(new KineticsParameter[] { rateParm, currentParm });
		}else{
			setKineticsParameters(new KineticsParameter[] { rateParm });
		}
		updateGeneratedExpressions();
		refreshUnits();
	}catch (PropertyVetoException e){
		e.printStackTrace(System.out);
		throw new RuntimeException("unexpected exception: "+e.getMessage());
	}
}
/**
 * Checks for internal representation of objects, not keys from database
 * @return boolean
 * @param obj java.lang.Object
 */
public boolean compareEqual(org.vcell.util.Matchable obj) {
	if (obj == this){
		return true;
	}
	if (!(obj instanceof GeneralKinetics)){
		return false;
	}
	
	GeneralKinetics gck = (GeneralKinetics)obj;

	if (!compareEqual0(gck)){
		return false;
	}
	
	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 9:52:55 AM)
 * @return cbit.vcell.model.KineticsDescription
 */
public KineticsDescription getKineticsDescription() {
	return KineticsDescription.General;
}
/**
 * Insert the method's description here.
 * Creation date: (3/31/2004 3:56:05 PM)
 */
protected void refreshUnits() {
	if (bRefreshingUnits){
		return;
	}
	try {
		bRefreshingUnits=true;
		Kinetics.KineticsParameter rateParm = getRateParameter();
		if (getReactionStep().getStructure() instanceof Feature){
			if (rateParm != null){
				rateParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_uM_per_s);
			}
		}else if (getReactionStep().getStructure() instanceof Membrane){
			if (getReactionStep() instanceof FluxReaction){
				if (rateParm != null){
					rateParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_uM_um_per_s);
				}
			}else{
				if (rateParm != null){
					rateParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_molecules_per_um2_per_s);
				}
			}
		}else{
			throw new RuntimeException("unexpected structure");
		}
		Kinetics.KineticsParameter currentParm = getCurrentParameter();
		if (currentParm != null){
			currentParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_pA_per_um2);
		}
	}finally{
		bRefreshingUnits=false;
	}	
}
/**
 * Insert the method's description here.
 * Creation date: (10/19/2003 12:05:14 AM)
 * @exception org.vcell.expression.ExpressionException The exception description.
 */
protected void updateGeneratedExpressions() throws org.vcell.expression.ExpressionException, PropertyVetoException{
	KineticsParameter rateParm = getKineticsParameterFromRole(ROLE_Rate);
	KineticsParameter currentParm = getKineticsParameterFromRole(ROLE_Current);
	if (currentParm==null && rateParm==null){
		return;
	}

	if (getReactionStep().getPhysicsOptions() == ReactionStep.PHYSICS_MOLECULAR_AND_ELECTRICAL){
		int z = (int)getReactionStep().getChargeCarrierValence().getConstantValue();
		ReservedSymbol F = ReservedSymbol.FARADAY_CONSTANT;
		ReservedSymbol F_nmol = ReservedSymbol.FARADAY_CONSTANT_NMOLE;
		IExpression tempCurrentExpression = null;
		if (getReactionStep() instanceof SimpleReaction){
			ReservedSymbol N_PMOLE = ReservedSymbol.N_PMOLE;
			tempCurrentExpression = ExpressionFactory.mult(ExpressionFactory.createExpression("("+z+"*"+F.getName()+"/"+N_PMOLE.getName()+")"), ExpressionFactory.createExpression(rateParm.getName()));
		}else{
			tempCurrentExpression = ExpressionFactory.mult(ExpressionFactory.createExpression(z+"*"+F_nmol.getName()), ExpressionFactory.createExpression(rateParm.getName()));
		}
		tempCurrentExpression.bindExpression(getReactionStep());
		if (currentParm == null){
			addKineticsParameter(new KineticsParameter(getDefaultParameterName(ROLE_Current),tempCurrentExpression,ROLE_Current,cbit.vcell.units.VCUnitDefinition.UNIT_pA_per_um2));
		}else{
			currentParm.setExpression(tempCurrentExpression);
		}
	}else{
		if (currentParm != null && !currentParm.getExpression().isZero()){
			//removeKineticsParameter(currentParm);
			currentParm.setExpression(ExpressionFactory.createExpression(0.0));
		}
	}
}
}
