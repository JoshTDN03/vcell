/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class SimulationDataSetRef implements org.apache.thrift.TBase<SimulationDataSetRef, SimulationDataSetRef._Fields>, java.io.Serializable, Cloneable, Comparable<SimulationDataSetRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimulationDataSetRef");

  private static final org.apache.thrift.protocol.TField SIM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("simId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USERKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userkey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("jobIndex", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_MATH_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isMathModel", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SIMULATION_CONTEXT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationContextName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORIGIN_XYZ_FIELD_DESC = new org.apache.thrift.protocol.TField("originXYZ", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EXTENT_XYZ_FIELD_DESC = new org.apache.thrift.protocol.TField("extentXYZ", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField IS_TIME_VARYING_MESH_FIELD_DESC = new org.apache.thrift.protocol.TField("isTimeVaryingMesh", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField IS_LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isLocal", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SimulationDataSetRefStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SimulationDataSetRefTupleSchemeFactory();

  public java.lang.String simId; // required
  public java.lang.String simName; // required
  public java.lang.String modelId; // required
  public java.lang.String username; // required
  public java.lang.String userkey; // required
  public int jobIndex; // required
  public boolean isMathModel; // required
  public java.lang.String simulationContextName; // optional
  public java.lang.String modelName; // required
  public java.util.List<java.lang.Double> originXYZ; // required
  public java.util.List<java.lang.Double> extentXYZ; // required
  public boolean isTimeVaryingMesh; // required
  public boolean isLocal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIM_ID((short)1, "simId"),
    SIM_NAME((short)2, "simName"),
    MODEL_ID((short)3, "modelId"),
    USERNAME((short)4, "username"),
    USERKEY((short)5, "userkey"),
    JOB_INDEX((short)6, "jobIndex"),
    IS_MATH_MODEL((short)7, "isMathModel"),
    SIMULATION_CONTEXT_NAME((short)8, "simulationContextName"),
    MODEL_NAME((short)9, "modelName"),
    ORIGIN_XYZ((short)10, "originXYZ"),
    EXTENT_XYZ((short)11, "extentXYZ"),
    IS_TIME_VARYING_MESH((short)12, "isTimeVaryingMesh"),
    IS_LOCAL((short)13, "isLocal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIM_ID
          return SIM_ID;
        case 2: // SIM_NAME
          return SIM_NAME;
        case 3: // MODEL_ID
          return MODEL_ID;
        case 4: // USERNAME
          return USERNAME;
        case 5: // USERKEY
          return USERKEY;
        case 6: // JOB_INDEX
          return JOB_INDEX;
        case 7: // IS_MATH_MODEL
          return IS_MATH_MODEL;
        case 8: // SIMULATION_CONTEXT_NAME
          return SIMULATION_CONTEXT_NAME;
        case 9: // MODEL_NAME
          return MODEL_NAME;
        case 10: // ORIGIN_XYZ
          return ORIGIN_XYZ;
        case 11: // EXTENT_XYZ
          return EXTENT_XYZ;
        case 12: // IS_TIME_VARYING_MESH
          return IS_TIME_VARYING_MESH;
        case 13: // IS_LOCAL
          return IS_LOCAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBINDEX_ISSET_ID = 0;
  private static final int __ISMATHMODEL_ISSET_ID = 1;
  private static final int __ISTIMEVARYINGMESH_ISSET_ID = 2;
  private static final int __ISLOCAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SIMULATION_CONTEXT_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIM_ID, new org.apache.thrift.meta_data.FieldMetaData("simId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIM_NAME, new org.apache.thrift.meta_data.FieldMetaData("simName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERKEY, new org.apache.thrift.meta_data.FieldMetaData("userkey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_INDEX, new org.apache.thrift.meta_data.FieldMetaData("jobIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IS_MATH_MODEL, new org.apache.thrift.meta_data.FieldMetaData("isMathModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIMULATION_CONTEXT_NAME, new org.apache.thrift.meta_data.FieldMetaData("simulationContextName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN_XYZ, new org.apache.thrift.meta_data.FieldMetaData("originXYZ", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.EXTENT_XYZ, new org.apache.thrift.meta_data.FieldMetaData("extentXYZ", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.IS_TIME_VARYING_MESH, new org.apache.thrift.meta_data.FieldMetaData("isTimeVaryingMesh", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LOCAL, new org.apache.thrift.meta_data.FieldMetaData("isLocal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimulationDataSetRef.class, metaDataMap);
  }

  public SimulationDataSetRef() {
  }

  public SimulationDataSetRef(
    java.lang.String simId,
    java.lang.String simName,
    java.lang.String modelId,
    java.lang.String username,
    java.lang.String userkey,
    int jobIndex,
    boolean isMathModel,
    java.lang.String modelName,
    java.util.List<java.lang.Double> originXYZ,
    java.util.List<java.lang.Double> extentXYZ,
    boolean isTimeVaryingMesh,
    boolean isLocal)
  {
    this();
    this.simId = simId;
    this.simName = simName;
    this.modelId = modelId;
    this.username = username;
    this.userkey = userkey;
    this.jobIndex = jobIndex;
    setJobIndexIsSet(true);
    this.isMathModel = isMathModel;
    setIsMathModelIsSet(true);
    this.modelName = modelName;
    this.originXYZ = originXYZ;
    this.extentXYZ = extentXYZ;
    this.isTimeVaryingMesh = isTimeVaryingMesh;
    setIsTimeVaryingMeshIsSet(true);
    this.isLocal = isLocal;
    setIsLocalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimulationDataSetRef(SimulationDataSetRef other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSimId()) {
      this.simId = other.simId;
    }
    if (other.isSetSimName()) {
      this.simName = other.simName;
    }
    if (other.isSetModelId()) {
      this.modelId = other.modelId;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetUserkey()) {
      this.userkey = other.userkey;
    }
    this.jobIndex = other.jobIndex;
    this.isMathModel = other.isMathModel;
    if (other.isSetSimulationContextName()) {
      this.simulationContextName = other.simulationContextName;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetOriginXYZ()) {
      java.util.List<java.lang.Double> __this__originXYZ = new java.util.ArrayList<java.lang.Double>(other.originXYZ);
      this.originXYZ = __this__originXYZ;
    }
    if (other.isSetExtentXYZ()) {
      java.util.List<java.lang.Double> __this__extentXYZ = new java.util.ArrayList<java.lang.Double>(other.extentXYZ);
      this.extentXYZ = __this__extentXYZ;
    }
    this.isTimeVaryingMesh = other.isTimeVaryingMesh;
    this.isLocal = other.isLocal;
  }

  public SimulationDataSetRef deepCopy() {
    return new SimulationDataSetRef(this);
  }

  @Override
  public void clear() {
    this.simId = null;
    this.simName = null;
    this.modelId = null;
    this.username = null;
    this.userkey = null;
    setJobIndexIsSet(false);
    this.jobIndex = 0;
    setIsMathModelIsSet(false);
    this.isMathModel = false;
    this.simulationContextName = null;
    this.modelName = null;
    this.originXYZ = null;
    this.extentXYZ = null;
    setIsTimeVaryingMeshIsSet(false);
    this.isTimeVaryingMesh = false;
    setIsLocalIsSet(false);
    this.isLocal = false;
  }

  public java.lang.String getSimId() {
    return this.simId;
  }

  public SimulationDataSetRef setSimId(java.lang.String simId) {
    this.simId = simId;
    return this;
  }

  public void unsetSimId() {
    this.simId = null;
  }

  /** Returns true if field simId is set (has been assigned a value) and false otherwise */
  public boolean isSetSimId() {
    return this.simId != null;
  }

  public void setSimIdIsSet(boolean value) {
    if (!value) {
      this.simId = null;
    }
  }

  public java.lang.String getSimName() {
    return this.simName;
  }

  public SimulationDataSetRef setSimName(java.lang.String simName) {
    this.simName = simName;
    return this;
  }

  public void unsetSimName() {
    this.simName = null;
  }

  /** Returns true if field simName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimName() {
    return this.simName != null;
  }

  public void setSimNameIsSet(boolean value) {
    if (!value) {
      this.simName = null;
    }
  }

  public java.lang.String getModelId() {
    return this.modelId;
  }

  public SimulationDataSetRef setModelId(java.lang.String modelId) {
    this.modelId = modelId;
    return this;
  }

  public void unsetModelId() {
    this.modelId = null;
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return this.modelId != null;
  }

  public void setModelIdIsSet(boolean value) {
    if (!value) {
      this.modelId = null;
    }
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public SimulationDataSetRef setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public java.lang.String getUserkey() {
    return this.userkey;
  }

  public SimulationDataSetRef setUserkey(java.lang.String userkey) {
    this.userkey = userkey;
    return this;
  }

  public void unsetUserkey() {
    this.userkey = null;
  }

  /** Returns true if field userkey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserkey() {
    return this.userkey != null;
  }

  public void setUserkeyIsSet(boolean value) {
    if (!value) {
      this.userkey = null;
    }
  }

  public int getJobIndex() {
    return this.jobIndex;
  }

  public SimulationDataSetRef setJobIndex(int jobIndex) {
    this.jobIndex = jobIndex;
    setJobIndexIsSet(true);
    return this;
  }

  public void unsetJobIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBINDEX_ISSET_ID);
  }

  /** Returns true if field jobIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetJobIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBINDEX_ISSET_ID);
  }

  public void setJobIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBINDEX_ISSET_ID, value);
  }

  public boolean isIsMathModel() {
    return this.isMathModel;
  }

  public SimulationDataSetRef setIsMathModel(boolean isMathModel) {
    this.isMathModel = isMathModel;
    setIsMathModelIsSet(true);
    return this;
  }

  public void unsetIsMathModel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID);
  }

  /** Returns true if field isMathModel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMathModel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID);
  }

  public void setIsMathModelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID, value);
  }

  public java.lang.String getSimulationContextName() {
    return this.simulationContextName;
  }

  public SimulationDataSetRef setSimulationContextName(java.lang.String simulationContextName) {
    this.simulationContextName = simulationContextName;
    return this;
  }

  public void unsetSimulationContextName() {
    this.simulationContextName = null;
  }

  /** Returns true if field simulationContextName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimulationContextName() {
    return this.simulationContextName != null;
  }

  public void setSimulationContextNameIsSet(boolean value) {
    if (!value) {
      this.simulationContextName = null;
    }
  }

  public java.lang.String getModelName() {
    return this.modelName;
  }

  public SimulationDataSetRef setModelName(java.lang.String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  public int getOriginXYZSize() {
    return (this.originXYZ == null) ? 0 : this.originXYZ.size();
  }

  public java.util.Iterator<java.lang.Double> getOriginXYZIterator() {
    return (this.originXYZ == null) ? null : this.originXYZ.iterator();
  }

  public void addToOriginXYZ(double elem) {
    if (this.originXYZ == null) {
      this.originXYZ = new java.util.ArrayList<java.lang.Double>();
    }
    this.originXYZ.add(elem);
  }

  public java.util.List<java.lang.Double> getOriginXYZ() {
    return this.originXYZ;
  }

  public SimulationDataSetRef setOriginXYZ(java.util.List<java.lang.Double> originXYZ) {
    this.originXYZ = originXYZ;
    return this;
  }

  public void unsetOriginXYZ() {
    this.originXYZ = null;
  }

  /** Returns true if field originXYZ is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginXYZ() {
    return this.originXYZ != null;
  }

  public void setOriginXYZIsSet(boolean value) {
    if (!value) {
      this.originXYZ = null;
    }
  }

  public int getExtentXYZSize() {
    return (this.extentXYZ == null) ? 0 : this.extentXYZ.size();
  }

  public java.util.Iterator<java.lang.Double> getExtentXYZIterator() {
    return (this.extentXYZ == null) ? null : this.extentXYZ.iterator();
  }

  public void addToExtentXYZ(double elem) {
    if (this.extentXYZ == null) {
      this.extentXYZ = new java.util.ArrayList<java.lang.Double>();
    }
    this.extentXYZ.add(elem);
  }

  public java.util.List<java.lang.Double> getExtentXYZ() {
    return this.extentXYZ;
  }

  public SimulationDataSetRef setExtentXYZ(java.util.List<java.lang.Double> extentXYZ) {
    this.extentXYZ = extentXYZ;
    return this;
  }

  public void unsetExtentXYZ() {
    this.extentXYZ = null;
  }

  /** Returns true if field extentXYZ is set (has been assigned a value) and false otherwise */
  public boolean isSetExtentXYZ() {
    return this.extentXYZ != null;
  }

  public void setExtentXYZIsSet(boolean value) {
    if (!value) {
      this.extentXYZ = null;
    }
  }

  public boolean isIsTimeVaryingMesh() {
    return this.isTimeVaryingMesh;
  }

  public SimulationDataSetRef setIsTimeVaryingMesh(boolean isTimeVaryingMesh) {
    this.isTimeVaryingMesh = isTimeVaryingMesh;
    setIsTimeVaryingMeshIsSet(true);
    return this;
  }

  public void unsetIsTimeVaryingMesh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTIMEVARYINGMESH_ISSET_ID);
  }

  /** Returns true if field isTimeVaryingMesh is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTimeVaryingMesh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTIMEVARYINGMESH_ISSET_ID);
  }

  public void setIsTimeVaryingMeshIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTIMEVARYINGMESH_ISSET_ID, value);
  }

  public boolean isIsLocal() {
    return this.isLocal;
  }

  public SimulationDataSetRef setIsLocal(boolean isLocal) {
    this.isLocal = isLocal;
    setIsLocalIsSet(true);
    return this;
  }

  public void unsetIsLocal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLOCAL_ISSET_ID);
  }

  /** Returns true if field isLocal is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLocal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLOCAL_ISSET_ID);
  }

  public void setIsLocalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLOCAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SIM_ID:
      if (value == null) {
        unsetSimId();
      } else {
        setSimId((java.lang.String)value);
      }
      break;

    case SIM_NAME:
      if (value == null) {
        unsetSimName();
      } else {
        setSimName((java.lang.String)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case USERKEY:
      if (value == null) {
        unsetUserkey();
      } else {
        setUserkey((java.lang.String)value);
      }
      break;

    case JOB_INDEX:
      if (value == null) {
        unsetJobIndex();
      } else {
        setJobIndex((java.lang.Integer)value);
      }
      break;

    case IS_MATH_MODEL:
      if (value == null) {
        unsetIsMathModel();
      } else {
        setIsMathModel((java.lang.Boolean)value);
      }
      break;

    case SIMULATION_CONTEXT_NAME:
      if (value == null) {
        unsetSimulationContextName();
      } else {
        setSimulationContextName((java.lang.String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((java.lang.String)value);
      }
      break;

    case ORIGIN_XYZ:
      if (value == null) {
        unsetOriginXYZ();
      } else {
        setOriginXYZ((java.util.List<java.lang.Double>)value);
      }
      break;

    case EXTENT_XYZ:
      if (value == null) {
        unsetExtentXYZ();
      } else {
        setExtentXYZ((java.util.List<java.lang.Double>)value);
      }
      break;

    case IS_TIME_VARYING_MESH:
      if (value == null) {
        unsetIsTimeVaryingMesh();
      } else {
        setIsTimeVaryingMesh((java.lang.Boolean)value);
      }
      break;

    case IS_LOCAL:
      if (value == null) {
        unsetIsLocal();
      } else {
        setIsLocal((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SIM_ID:
      return getSimId();

    case SIM_NAME:
      return getSimName();

    case MODEL_ID:
      return getModelId();

    case USERNAME:
      return getUsername();

    case USERKEY:
      return getUserkey();

    case JOB_INDEX:
      return getJobIndex();

    case IS_MATH_MODEL:
      return isIsMathModel();

    case SIMULATION_CONTEXT_NAME:
      return getSimulationContextName();

    case MODEL_NAME:
      return getModelName();

    case ORIGIN_XYZ:
      return getOriginXYZ();

    case EXTENT_XYZ:
      return getExtentXYZ();

    case IS_TIME_VARYING_MESH:
      return isIsTimeVaryingMesh();

    case IS_LOCAL:
      return isIsLocal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SIM_ID:
      return isSetSimId();
    case SIM_NAME:
      return isSetSimName();
    case MODEL_ID:
      return isSetModelId();
    case USERNAME:
      return isSetUsername();
    case USERKEY:
      return isSetUserkey();
    case JOB_INDEX:
      return isSetJobIndex();
    case IS_MATH_MODEL:
      return isSetIsMathModel();
    case SIMULATION_CONTEXT_NAME:
      return isSetSimulationContextName();
    case MODEL_NAME:
      return isSetModelName();
    case ORIGIN_XYZ:
      return isSetOriginXYZ();
    case EXTENT_XYZ:
      return isSetExtentXYZ();
    case IS_TIME_VARYING_MESH:
      return isSetIsTimeVaryingMesh();
    case IS_LOCAL:
      return isSetIsLocal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SimulationDataSetRef)
      return this.equals((SimulationDataSetRef)that);
    return false;
  }

  public boolean equals(SimulationDataSetRef that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_simId = true && this.isSetSimId();
    boolean that_present_simId = true && that.isSetSimId();
    if (this_present_simId || that_present_simId) {
      if (!(this_present_simId && that_present_simId))
        return false;
      if (!this.simId.equals(that.simId))
        return false;
    }

    boolean this_present_simName = true && this.isSetSimName();
    boolean that_present_simName = true && that.isSetSimName();
    if (this_present_simName || that_present_simName) {
      if (!(this_present_simName && that_present_simName))
        return false;
      if (!this.simName.equals(that.simName))
        return false;
    }

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (!this.modelId.equals(that.modelId))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_userkey = true && this.isSetUserkey();
    boolean that_present_userkey = true && that.isSetUserkey();
    if (this_present_userkey || that_present_userkey) {
      if (!(this_present_userkey && that_present_userkey))
        return false;
      if (!this.userkey.equals(that.userkey))
        return false;
    }

    boolean this_present_jobIndex = true;
    boolean that_present_jobIndex = true;
    if (this_present_jobIndex || that_present_jobIndex) {
      if (!(this_present_jobIndex && that_present_jobIndex))
        return false;
      if (this.jobIndex != that.jobIndex)
        return false;
    }

    boolean this_present_isMathModel = true;
    boolean that_present_isMathModel = true;
    if (this_present_isMathModel || that_present_isMathModel) {
      if (!(this_present_isMathModel && that_present_isMathModel))
        return false;
      if (this.isMathModel != that.isMathModel)
        return false;
    }

    boolean this_present_simulationContextName = true && this.isSetSimulationContextName();
    boolean that_present_simulationContextName = true && that.isSetSimulationContextName();
    if (this_present_simulationContextName || that_present_simulationContextName) {
      if (!(this_present_simulationContextName && that_present_simulationContextName))
        return false;
      if (!this.simulationContextName.equals(that.simulationContextName))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_originXYZ = true && this.isSetOriginXYZ();
    boolean that_present_originXYZ = true && that.isSetOriginXYZ();
    if (this_present_originXYZ || that_present_originXYZ) {
      if (!(this_present_originXYZ && that_present_originXYZ))
        return false;
      if (!this.originXYZ.equals(that.originXYZ))
        return false;
    }

    boolean this_present_extentXYZ = true && this.isSetExtentXYZ();
    boolean that_present_extentXYZ = true && that.isSetExtentXYZ();
    if (this_present_extentXYZ || that_present_extentXYZ) {
      if (!(this_present_extentXYZ && that_present_extentXYZ))
        return false;
      if (!this.extentXYZ.equals(that.extentXYZ))
        return false;
    }

    boolean this_present_isTimeVaryingMesh = true;
    boolean that_present_isTimeVaryingMesh = true;
    if (this_present_isTimeVaryingMesh || that_present_isTimeVaryingMesh) {
      if (!(this_present_isTimeVaryingMesh && that_present_isTimeVaryingMesh))
        return false;
      if (this.isTimeVaryingMesh != that.isTimeVaryingMesh)
        return false;
    }

    boolean this_present_isLocal = true;
    boolean that_present_isLocal = true;
    if (this_present_isLocal || that_present_isLocal) {
      if (!(this_present_isLocal && that_present_isLocal))
        return false;
      if (this.isLocal != that.isLocal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSimId()) ? 131071 : 524287);
    if (isSetSimId())
      hashCode = hashCode * 8191 + simId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSimName()) ? 131071 : 524287);
    if (isSetSimName())
      hashCode = hashCode * 8191 + simName.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
    if (isSetModelId())
      hashCode = hashCode * 8191 + modelId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserkey()) ? 131071 : 524287);
    if (isSetUserkey())
      hashCode = hashCode * 8191 + userkey.hashCode();

    hashCode = hashCode * 8191 + jobIndex;

    hashCode = hashCode * 8191 + ((isMathModel) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSimulationContextName()) ? 131071 : 524287);
    if (isSetSimulationContextName())
      hashCode = hashCode * 8191 + simulationContextName.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelName()) ? 131071 : 524287);
    if (isSetModelName())
      hashCode = hashCode * 8191 + modelName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginXYZ()) ? 131071 : 524287);
    if (isSetOriginXYZ())
      hashCode = hashCode * 8191 + originXYZ.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtentXYZ()) ? 131071 : 524287);
    if (isSetExtentXYZ())
      hashCode = hashCode * 8191 + extentXYZ.hashCode();

    hashCode = hashCode * 8191 + ((isTimeVaryingMesh) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isLocal) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(SimulationDataSetRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSimId()).compareTo(other.isSetSimId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simId, other.simId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSimName()).compareTo(other.isSetSimName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simName, other.simName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserkey()).compareTo(other.isSetUserkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userkey, other.userkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobIndex()).compareTo(other.isSetJobIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobIndex, other.jobIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsMathModel()).compareTo(other.isSetIsMathModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMathModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMathModel, other.isMathModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSimulationContextName()).compareTo(other.isSetSimulationContextName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimulationContextName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationContextName, other.simulationContextName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginXYZ()).compareTo(other.isSetOriginXYZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginXYZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originXYZ, other.originXYZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtentXYZ()).compareTo(other.isSetExtentXYZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtentXYZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extentXYZ, other.extentXYZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsTimeVaryingMesh()).compareTo(other.isSetIsTimeVaryingMesh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTimeVaryingMesh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTimeVaryingMesh, other.isTimeVaryingMesh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsLocal()).compareTo(other.isSetIsLocal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLocal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLocal, other.isLocal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SimulationDataSetRef(");
    boolean first = true;

    sb.append("simId:");
    if (this.simId == null) {
      sb.append("null");
    } else {
      sb.append(this.simId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simName:");
    if (this.simName == null) {
      sb.append("null");
    } else {
      sb.append(this.simName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    if (this.modelId == null) {
      sb.append("null");
    } else {
      sb.append(this.modelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userkey:");
    if (this.userkey == null) {
      sb.append("null");
    } else {
      sb.append(this.userkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobIndex:");
    sb.append(this.jobIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMathModel:");
    sb.append(this.isMathModel);
    first = false;
    if (isSetSimulationContextName()) {
      if (!first) sb.append(", ");
      sb.append("simulationContextName:");
      if (this.simulationContextName == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationContextName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("modelName:");
    if (this.modelName == null) {
      sb.append("null");
    } else {
      sb.append(this.modelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originXYZ:");
    if (this.originXYZ == null) {
      sb.append("null");
    } else {
      sb.append(this.originXYZ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extentXYZ:");
    if (this.extentXYZ == null) {
      sb.append("null");
    } else {
      sb.append(this.extentXYZ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTimeVaryingMesh:");
    sb.append(this.isTimeVaryingMesh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLocal:");
    sb.append(this.isLocal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (simId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simId' was not present! Struct: " + toString());
    }
    if (simName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simName' was not present! Struct: " + toString());
    }
    if (modelId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelId' was not present! Struct: " + toString());
    }
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    if (userkey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userkey' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'jobIndex' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isMathModel' because it's a primitive and you chose the non-beans generator.
    if (modelName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelName' was not present! Struct: " + toString());
    }
    if (originXYZ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originXYZ' was not present! Struct: " + toString());
    }
    if (extentXYZ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'extentXYZ' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isTimeVaryingMesh' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isLocal' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimulationDataSetRefStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SimulationDataSetRefStandardScheme getScheme() {
      return new SimulationDataSetRefStandardScheme();
    }
  }

  private static class SimulationDataSetRefStandardScheme extends org.apache.thrift.scheme.StandardScheme<SimulationDataSetRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simId = iprot.readString();
              struct.setSimIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simName = iprot.readString();
              struct.setSimNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelId = iprot.readString();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userkey = iprot.readString();
              struct.setUserkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobIndex = iprot.readI32();
              struct.setJobIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_MATH_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMathModel = iprot.readBool();
              struct.setIsMathModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIMULATION_CONTEXT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simulationContextName = iprot.readString();
              struct.setSimulationContextNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORIGIN_XYZ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.originXYZ = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.originXYZ.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOriginXYZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTENT_XYZ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.extentXYZ = new java.util.ArrayList<java.lang.Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.extentXYZ.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setExtentXYZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_TIME_VARYING_MESH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTimeVaryingMesh = iprot.readBool();
              struct.setIsTimeVaryingMeshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLocal = iprot.readBool();
              struct.setIsLocalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetJobIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobIndex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsMathModel()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isMathModel' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsTimeVaryingMesh()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTimeVaryingMesh' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsLocal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isLocal' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.simId != null) {
        oprot.writeFieldBegin(SIM_ID_FIELD_DESC);
        oprot.writeString(struct.simId);
        oprot.writeFieldEnd();
      }
      if (struct.simName != null) {
        oprot.writeFieldBegin(SIM_NAME_FIELD_DESC);
        oprot.writeString(struct.simName);
        oprot.writeFieldEnd();
      }
      if (struct.modelId != null) {
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeString(struct.modelId);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.userkey != null) {
        oprot.writeFieldBegin(USERKEY_FIELD_DESC);
        oprot.writeString(struct.userkey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_INDEX_FIELD_DESC);
      oprot.writeI32(struct.jobIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MATH_MODEL_FIELD_DESC);
      oprot.writeBool(struct.isMathModel);
      oprot.writeFieldEnd();
      if (struct.simulationContextName != null) {
        if (struct.isSetSimulationContextName()) {
          oprot.writeFieldBegin(SIMULATION_CONTEXT_NAME_FIELD_DESC);
          oprot.writeString(struct.simulationContextName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.modelName);
        oprot.writeFieldEnd();
      }
      if (struct.originXYZ != null) {
        oprot.writeFieldBegin(ORIGIN_XYZ_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.originXYZ.size()));
          for (double _iter6 : struct.originXYZ)
          {
            oprot.writeDouble(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.extentXYZ != null) {
        oprot.writeFieldBegin(EXTENT_XYZ_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.extentXYZ.size()));
          for (double _iter7 : struct.extentXYZ)
          {
            oprot.writeDouble(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TIME_VARYING_MESH_FIELD_DESC);
      oprot.writeBool(struct.isTimeVaryingMesh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LOCAL_FIELD_DESC);
      oprot.writeBool(struct.isLocal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimulationDataSetRefTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SimulationDataSetRefTupleScheme getScheme() {
      return new SimulationDataSetRefTupleScheme();
    }
  }

  private static class SimulationDataSetRefTupleScheme extends org.apache.thrift.scheme.TupleScheme<SimulationDataSetRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.simId);
      oprot.writeString(struct.simName);
      oprot.writeString(struct.modelId);
      oprot.writeString(struct.username);
      oprot.writeString(struct.userkey);
      oprot.writeI32(struct.jobIndex);
      oprot.writeBool(struct.isMathModel);
      oprot.writeString(struct.modelName);
      {
        oprot.writeI32(struct.originXYZ.size());
        for (double _iter8 : struct.originXYZ)
        {
          oprot.writeDouble(_iter8);
        }
      }
      {
        oprot.writeI32(struct.extentXYZ.size());
        for (double _iter9 : struct.extentXYZ)
        {
          oprot.writeDouble(_iter9);
        }
      }
      oprot.writeBool(struct.isTimeVaryingMesh);
      oprot.writeBool(struct.isLocal);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSimulationContextName()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSimulationContextName()) {
        oprot.writeString(struct.simulationContextName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.simId = iprot.readString();
      struct.setSimIdIsSet(true);
      struct.simName = iprot.readString();
      struct.setSimNameIsSet(true);
      struct.modelId = iprot.readString();
      struct.setModelIdIsSet(true);
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
      struct.userkey = iprot.readString();
      struct.setUserkeyIsSet(true);
      struct.jobIndex = iprot.readI32();
      struct.setJobIndexIsSet(true);
      struct.isMathModel = iprot.readBool();
      struct.setIsMathModelIsSet(true);
      struct.modelName = iprot.readString();
      struct.setModelNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.originXYZ = new java.util.ArrayList<java.lang.Double>(_list10.size);
        double _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = iprot.readDouble();
          struct.originXYZ.add(_elem11);
        }
      }
      struct.setOriginXYZIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.extentXYZ = new java.util.ArrayList<java.lang.Double>(_list13.size);
        double _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readDouble();
          struct.extentXYZ.add(_elem14);
        }
      }
      struct.setExtentXYZIsSet(true);
      struct.isTimeVaryingMesh = iprot.readBool();
      struct.setIsTimeVaryingMeshIsSet(true);
      struct.isLocal = iprot.readBool();
      struct.setIsLocalIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.simulationContextName = iprot.readString();
        struct.setSimulationContextNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

