/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vcellij.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class SimulationService {

  public interface Iface {

    public java.lang.String getSBML(java.lang.String vcml, java.lang.String applicationName) throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<java.lang.Double> getData(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex) throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<java.lang.Double> getTimePoints(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<VariableInfo> getVariableList(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException;

    public SimulationStatus getStatus(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException;

    public SimulationInfo computeModel(SBMLModel model, SimulationSpec simSpec) throws ThriftDataAccessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSBML(java.lang.String vcml, java.lang.String applicationName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getData(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

    public void getTimePoints(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

    public void getVariableList(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException;

    public void getStatus(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<SimulationStatus> resultHandler) throws org.apache.thrift.TException;

    public void computeModel(SBMLModel model, SimulationSpec simSpec, org.apache.thrift.async.AsyncMethodCallback<SimulationInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getSBML(java.lang.String vcml, java.lang.String applicationName) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getSBML(vcml, applicationName);
      return recv_getSBML();
    }

    public void send_getSBML(java.lang.String vcml, java.lang.String applicationName) throws org.apache.thrift.TException
    {
      getSBML_args args = new getSBML_args();
      args.setVcml(vcml);
      args.setApplicationName(applicationName);
      sendBase("getSBML", args);
    }

    public java.lang.String recv_getSBML() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getSBML_result result = new getSBML_result();
      receiveBase(result, "getSBML");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSBML failed: unknown result");
    }

    public java.util.List<java.lang.Double> getData(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getData(simInfo, varInfo, timeIndex);
      return recv_getData();
    }

    public void send_getData(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex) throws org.apache.thrift.TException
    {
      getData_args args = new getData_args();
      args.setSimInfo(simInfo);
      args.setVarInfo(varInfo);
      args.setTimeIndex(timeIndex);
      sendBase("getData", args);
    }

    public java.util.List<java.lang.Double> recv_getData() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getData_result result = new getData_result();
      receiveBase(result, "getData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getData failed: unknown result");
    }

    public java.util.List<java.lang.Double> getTimePoints(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getTimePoints(simInfo);
      return recv_getTimePoints();
    }

    public void send_getTimePoints(SimulationInfo simInfo) throws org.apache.thrift.TException
    {
      getTimePoints_args args = new getTimePoints_args();
      args.setSimInfo(simInfo);
      sendBase("getTimePoints", args);
    }

    public java.util.List<java.lang.Double> recv_getTimePoints() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getTimePoints_result result = new getTimePoints_result();
      receiveBase(result, "getTimePoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimePoints failed: unknown result");
    }

    public java.util.List<VariableInfo> getVariableList(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getVariableList(simInfo);
      return recv_getVariableList();
    }

    public void send_getVariableList(SimulationInfo simInfo) throws org.apache.thrift.TException
    {
      getVariableList_args args = new getVariableList_args();
      args.setSimInfo(simInfo);
      sendBase("getVariableList", args);
    }

    public java.util.List<VariableInfo> recv_getVariableList() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getVariableList_result result = new getVariableList_result();
      receiveBase(result, "getVariableList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVariableList failed: unknown result");
    }

    public SimulationStatus getStatus(SimulationInfo simInfo) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getStatus(simInfo);
      return recv_getStatus();
    }

    public void send_getStatus(SimulationInfo simInfo) throws org.apache.thrift.TException
    {
      getStatus_args args = new getStatus_args();
      args.setSimInfo(simInfo);
      sendBase("getStatus", args);
    }

    public SimulationStatus recv_getStatus() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getStatus_result result = new getStatus_result();
      receiveBase(result, "getStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

    public SimulationInfo computeModel(SBMLModel model, SimulationSpec simSpec) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_computeModel(model, simSpec);
      return recv_computeModel();
    }

    public void send_computeModel(SBMLModel model, SimulationSpec simSpec) throws org.apache.thrift.TException
    {
      computeModel_args args = new computeModel_args();
      args.setModel(model);
      args.setSimSpec(simSpec);
      sendBase("computeModel", args);
    }

    public SimulationInfo recv_computeModel() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      computeModel_result result = new computeModel_result();
      receiveBase(result, "computeModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeModel failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSBML(java.lang.String vcml, java.lang.String applicationName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSBML_call method_call = new getSBML_call(vcml, applicationName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSBML_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String vcml;
      private java.lang.String applicationName;
      public getSBML_call(java.lang.String vcml, java.lang.String applicationName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vcml = vcml;
        this.applicationName = applicationName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSBML", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSBML_args args = new getSBML_args();
        args.setVcml(vcml);
        args.setApplicationName(applicationName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSBML();
      }
    }

    public void getData(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getData_call method_call = new getData_call(simInfo, varInfo, timeIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private SimulationInfo simInfo;
      private VariableInfo varInfo;
      private int timeIndex;
      public getData_call(SimulationInfo simInfo, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simInfo = simInfo;
        this.varInfo = varInfo;
        this.timeIndex = timeIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getData_args args = new getData_args();
        args.setSimInfo(simInfo);
        args.setVarInfo(varInfo);
        args.setTimeIndex(timeIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Double> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getData();
      }
    }

    public void getTimePoints(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimePoints_call method_call = new getTimePoints_call(simInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimePoints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private SimulationInfo simInfo;
      public getTimePoints_call(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simInfo = simInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimePoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimePoints_args args = new getTimePoints_args();
        args.setSimInfo(simInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Double> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimePoints();
      }
    }

    public void getVariableList(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVariableList_call method_call = new getVariableList_call(simInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVariableList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<VariableInfo>> {
      private SimulationInfo simInfo;
      public getVariableList_call(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simInfo = simInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVariableList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVariableList_args args = new getVariableList_args();
        args.setSimInfo(simInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<VariableInfo> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVariableList();
      }
    }

    public void getStatus(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<SimulationStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(simInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatus_call extends org.apache.thrift.async.TAsyncMethodCall<SimulationStatus> {
      private SimulationInfo simInfo;
      public getStatus_call(SimulationInfo simInfo, org.apache.thrift.async.AsyncMethodCallback<SimulationStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simInfo = simInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.setSimInfo(simInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SimulationStatus getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

    public void computeModel(SBMLModel model, SimulationSpec simSpec, org.apache.thrift.async.AsyncMethodCallback<SimulationInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeModel_call method_call = new computeModel_call(model, simSpec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeModel_call extends org.apache.thrift.async.TAsyncMethodCall<SimulationInfo> {
      private SBMLModel model;
      private SimulationSpec simSpec;
      public computeModel_call(SBMLModel model, SimulationSpec simSpec, org.apache.thrift.async.AsyncMethodCallback<SimulationInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.model = model;
        this.simSpec = simSpec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeModel_args args = new computeModel_args();
        args.setModel(model);
        args.setSimSpec(simSpec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SimulationInfo getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeModel();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSBML", new getSBML());
      processMap.put("getData", new getData());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getStatus", new getStatus());
      processMap.put("computeModel", new computeModel());
      return processMap;
    }

    public static class getSBML<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSBML_args> {
      public getSBML() {
        super("getSBML");
      }

      public getSBML_args getEmptyArgsInstance() {
        return new getSBML_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSBML_result getResult(I iface, getSBML_args args) throws org.apache.thrift.TException {
        getSBML_result result = new getSBML_result();
        try {
          result.success = iface.getSBML(args.vcml, args.applicationName);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getData_args> {
      public getData() {
        super("getData");
      }

      public getData_args getEmptyArgsInstance() {
        return new getData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getData_result getResult(I iface, getData_args args) throws org.apache.thrift.TException {
        getData_result result = new getData_result();
        try {
          result.success = iface.getData(args.simInfo, args.varInfo, args.timeIndex);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getTimePoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimePoints_args> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimePoints_result getResult(I iface, getTimePoints_args args) throws org.apache.thrift.TException {
        getTimePoints_result result = new getTimePoints_result();
        try {
          result.success = iface.getTimePoints(args.simInfo);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getVariableList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVariableList_args> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVariableList_result getResult(I iface, getVariableList_args args) throws org.apache.thrift.TException {
        getVariableList_result result = new getVariableList_result();
        try {
          result.success = iface.getVariableList(args.simInfo);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatus_args> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStatus_result getResult(I iface, getStatus_args args) throws org.apache.thrift.TException {
        getStatus_result result = new getStatus_result();
        try {
          result.success = iface.getStatus(args.simInfo);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class computeModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeModel_args> {
      public computeModel() {
        super("computeModel");
      }

      public computeModel_args getEmptyArgsInstance() {
        return new computeModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public computeModel_result getResult(I iface, computeModel_args args) throws org.apache.thrift.TException {
        computeModel_result result = new computeModel_result();
        try {
          result.success = iface.computeModel(args.model, args.simSpec);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSBML", new getSBML());
      processMap.put("getData", new getData());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getStatus", new getStatus());
      processMap.put("computeModel", new computeModel());
      return processMap;
    }

    public static class getSBML<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSBML_args, java.lang.String> {
      public getSBML() {
        super("getSBML");
      }

      public getSBML_args getEmptyArgsInstance() {
        return new getSBML_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getSBML_result result = new getSBML_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSBML_result result = new getSBML_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSBML_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getSBML(args.vcml, args.applicationName,resultHandler);
      }
    }

    public static class getData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getData_args, java.util.List<java.lang.Double>> {
      public getData() {
        super("getData");
      }

      public getData_args getEmptyArgsInstance() {
        return new getData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          public void onComplete(java.util.List<java.lang.Double> o) {
            getData_result result = new getData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getData_result result = new getData_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.getData(args.simInfo, args.varInfo, args.timeIndex,resultHandler);
      }
    }

    public static class getTimePoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimePoints_args, java.util.List<java.lang.Double>> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          public void onComplete(java.util.List<java.lang.Double> o) {
            getTimePoints_result result = new getTimePoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTimePoints_result result = new getTimePoints_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimePoints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.getTimePoints(args.simInfo,resultHandler);
      }
    }

    public static class getVariableList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVariableList_args, java.util.List<VariableInfo>> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>>() { 
          public void onComplete(java.util.List<VariableInfo> o) {
            getVariableList_result result = new getVariableList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getVariableList_result result = new getVariableList_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVariableList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getVariableList(args.simInfo,resultHandler);
      }
    }

    public static class getStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStatus_args, SimulationStatus> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SimulationStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SimulationStatus>() { 
          public void onComplete(SimulationStatus o) {
            getStatus_result result = new getStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getStatus_result result = new getStatus_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStatus_args args, org.apache.thrift.async.AsyncMethodCallback<SimulationStatus> resultHandler) throws org.apache.thrift.TException {
        iface.getStatus(args.simInfo,resultHandler);
      }
    }

    public static class computeModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeModel_args, SimulationInfo> {
      public computeModel() {
        super("computeModel");
      }

      public computeModel_args getEmptyArgsInstance() {
        return new computeModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SimulationInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SimulationInfo>() { 
          public void onComplete(SimulationInfo o) {
            computeModel_result result = new computeModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeModel_result result = new computeModel_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeModel_args args, org.apache.thrift.async.AsyncMethodCallback<SimulationInfo> resultHandler) throws org.apache.thrift.TException {
        iface.computeModel(args.model, args.simSpec,resultHandler);
      }
    }

  }

  public static class getSBML_args implements org.apache.thrift.TBase<getSBML_args, getSBML_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSBML_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSBML_args");

    private static final org.apache.thrift.protocol.TField VCML_FIELD_DESC = new org.apache.thrift.protocol.TField("vcml", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSBML_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSBML_argsTupleSchemeFactory();

    public java.lang.String vcml; // required
    public java.lang.String applicationName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VCML((short)1, "vcml"),
      APPLICATION_NAME((short)2, "applicationName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VCML
            return VCML;
          case 2: // APPLICATION_NAME
            return APPLICATION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VCML, new org.apache.thrift.meta_data.FieldMetaData("vcml", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "VCML")));
      tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ApplicationName")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSBML_args.class, metaDataMap);
    }

    public getSBML_args() {
    }

    public getSBML_args(
      java.lang.String vcml,
      java.lang.String applicationName)
    {
      this();
      this.vcml = vcml;
      this.applicationName = applicationName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSBML_args(getSBML_args other) {
      if (other.isSetVcml()) {
        this.vcml = other.vcml;
      }
      if (other.isSetApplicationName()) {
        this.applicationName = other.applicationName;
      }
    }

    public getSBML_args deepCopy() {
      return new getSBML_args(this);
    }

    @Override
    public void clear() {
      this.vcml = null;
      this.applicationName = null;
    }

    public java.lang.String getVcml() {
      return this.vcml;
    }

    public getSBML_args setVcml(java.lang.String vcml) {
      this.vcml = vcml;
      return this;
    }

    public void unsetVcml() {
      this.vcml = null;
    }

    /** Returns true if field vcml is set (has been assigned a value) and false otherwise */
    public boolean isSetVcml() {
      return this.vcml != null;
    }

    public void setVcmlIsSet(boolean value) {
      if (!value) {
        this.vcml = null;
      }
    }

    public java.lang.String getApplicationName() {
      return this.applicationName;
    }

    public getSBML_args setApplicationName(java.lang.String applicationName) {
      this.applicationName = applicationName;
      return this;
    }

    public void unsetApplicationName() {
      this.applicationName = null;
    }

    /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationName() {
      return this.applicationName != null;
    }

    public void setApplicationNameIsSet(boolean value) {
      if (!value) {
        this.applicationName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VCML:
        if (value == null) {
          unsetVcml();
        } else {
          setVcml((java.lang.String)value);
        }
        break;

      case APPLICATION_NAME:
        if (value == null) {
          unsetApplicationName();
        } else {
          setApplicationName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VCML:
        return getVcml();

      case APPLICATION_NAME:
        return getApplicationName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VCML:
        return isSetVcml();
      case APPLICATION_NAME:
        return isSetApplicationName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSBML_args)
        return this.equals((getSBML_args)that);
      return false;
    }

    public boolean equals(getSBML_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_vcml = true && this.isSetVcml();
      boolean that_present_vcml = true && that.isSetVcml();
      if (this_present_vcml || that_present_vcml) {
        if (!(this_present_vcml && that_present_vcml))
          return false;
        if (!this.vcml.equals(that.vcml))
          return false;
      }

      boolean this_present_applicationName = true && this.isSetApplicationName();
      boolean that_present_applicationName = true && that.isSetApplicationName();
      if (this_present_applicationName || that_present_applicationName) {
        if (!(this_present_applicationName && that_present_applicationName))
          return false;
        if (!this.applicationName.equals(that.applicationName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVcml()) ? 131071 : 524287);
      if (isSetVcml())
        hashCode = hashCode * 8191 + vcml.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplicationName()) ? 131071 : 524287);
      if (isSetApplicationName())
        hashCode = hashCode * 8191 + applicationName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSBML_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetVcml()).compareTo(other.isSetVcml());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVcml()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcml, other.vcml);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSBML_args(");
      boolean first = true;

      sb.append("vcml:");
      if (this.vcml == null) {
        sb.append("null");
      } else {
        sb.append(this.vcml);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationName:");
      if (this.applicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSBML_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSBML_argsStandardScheme getScheme() {
        return new getSBML_argsStandardScheme();
      }
    }

    private static class getSBML_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSBML_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSBML_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VCML
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vcml = iprot.readString();
                struct.setVcmlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationName = iprot.readString();
                struct.setApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSBML_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vcml != null) {
          oprot.writeFieldBegin(VCML_FIELD_DESC);
          oprot.writeString(struct.vcml);
          oprot.writeFieldEnd();
        }
        if (struct.applicationName != null) {
          oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.applicationName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSBML_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSBML_argsTupleScheme getScheme() {
        return new getSBML_argsTupleScheme();
      }
    }

    private static class getSBML_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSBML_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSBML_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVcml()) {
          optionals.set(0);
        }
        if (struct.isSetApplicationName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVcml()) {
          oprot.writeString(struct.vcml);
        }
        if (struct.isSetApplicationName()) {
          oprot.writeString(struct.applicationName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSBML_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vcml = iprot.readString();
          struct.setVcmlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applicationName = iprot.readString();
          struct.setApplicationNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSBML_result implements org.apache.thrift.TBase<getSBML_result, getSBML_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSBML_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSBML_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSBML_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSBML_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "SBML")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSBML_result.class, metaDataMap);
    }

    public getSBML_result() {
    }

    public getSBML_result(
      java.lang.String success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSBML_result(getSBML_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getSBML_result deepCopy() {
      return new getSBML_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getSBML_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getSBML_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSBML_result)
        return this.equals((getSBML_result)that);
      return false;
    }

    public boolean equals(getSBML_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSBML_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSBML_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSBML_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSBML_resultStandardScheme getScheme() {
        return new getSBML_resultStandardScheme();
      }
    }

    private static class getSBML_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSBML_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSBML_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSBML_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSBML_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSBML_resultTupleScheme getScheme() {
        return new getSBML_resultTupleScheme();
      }
    }

    private static class getSBML_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSBML_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSBML_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSBML_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getData_args implements org.apache.thrift.TBase<getData_args, getData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getData_args");

    private static final org.apache.thrift.protocol.TField SIM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("simInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VAR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("varInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getData_argsTupleSchemeFactory();

    public SimulationInfo simInfo; // required
    public VariableInfo varInfo; // required
    public int timeIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIM_INFO((short)1, "simInfo"),
      VAR_INFO((short)2, "varInfo"),
      TIME_INDEX((short)3, "timeIndex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIM_INFO
            return SIM_INFO;
          case 2: // VAR_INFO
            return VAR_INFO;
          case 3: // TIME_INDEX
            return TIME_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIM_INFO, new org.apache.thrift.meta_data.FieldMetaData("simInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationInfo.class)));
      tmpMap.put(_Fields.VAR_INFO, new org.apache.thrift.meta_data.FieldMetaData("varInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VariableInfo.class)));
      tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TimeIndex")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getData_args.class, metaDataMap);
    }

    public getData_args() {
    }

    public getData_args(
      SimulationInfo simInfo,
      VariableInfo varInfo,
      int timeIndex)
    {
      this();
      this.simInfo = simInfo;
      this.varInfo = varInfo;
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getData_args(getData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSimInfo()) {
        this.simInfo = new SimulationInfo(other.simInfo);
      }
      if (other.isSetVarInfo()) {
        this.varInfo = new VariableInfo(other.varInfo);
      }
      this.timeIndex = other.timeIndex;
    }

    public getData_args deepCopy() {
      return new getData_args(this);
    }

    @Override
    public void clear() {
      this.simInfo = null;
      this.varInfo = null;
      setTimeIndexIsSet(false);
      this.timeIndex = 0;
    }

    public SimulationInfo getSimInfo() {
      return this.simInfo;
    }

    public getData_args setSimInfo(SimulationInfo simInfo) {
      this.simInfo = simInfo;
      return this;
    }

    public void unsetSimInfo() {
      this.simInfo = null;
    }

    /** Returns true if field simInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSimInfo() {
      return this.simInfo != null;
    }

    public void setSimInfoIsSet(boolean value) {
      if (!value) {
        this.simInfo = null;
      }
    }

    public VariableInfo getVarInfo() {
      return this.varInfo;
    }

    public getData_args setVarInfo(VariableInfo varInfo) {
      this.varInfo = varInfo;
      return this;
    }

    public void unsetVarInfo() {
      this.varInfo = null;
    }

    /** Returns true if field varInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetVarInfo() {
      return this.varInfo != null;
    }

    public void setVarInfoIsSet(boolean value) {
      if (!value) {
        this.varInfo = null;
      }
    }

    public int getTimeIndex() {
      return this.timeIndex;
    }

    public getData_args setTimeIndex(int timeIndex) {
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      return this;
    }

    public void unsetTimeIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    public void setTimeIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIM_INFO:
        if (value == null) {
          unsetSimInfo();
        } else {
          setSimInfo((SimulationInfo)value);
        }
        break;

      case VAR_INFO:
        if (value == null) {
          unsetVarInfo();
        } else {
          setVarInfo((VariableInfo)value);
        }
        break;

      case TIME_INDEX:
        if (value == null) {
          unsetTimeIndex();
        } else {
          setTimeIndex((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIM_INFO:
        return getSimInfo();

      case VAR_INFO:
        return getVarInfo();

      case TIME_INDEX:
        return getTimeIndex();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIM_INFO:
        return isSetSimInfo();
      case VAR_INFO:
        return isSetVarInfo();
      case TIME_INDEX:
        return isSetTimeIndex();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getData_args)
        return this.equals((getData_args)that);
      return false;
    }

    public boolean equals(getData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simInfo = true && this.isSetSimInfo();
      boolean that_present_simInfo = true && that.isSetSimInfo();
      if (this_present_simInfo || that_present_simInfo) {
        if (!(this_present_simInfo && that_present_simInfo))
          return false;
        if (!this.simInfo.equals(that.simInfo))
          return false;
      }

      boolean this_present_varInfo = true && this.isSetVarInfo();
      boolean that_present_varInfo = true && that.isSetVarInfo();
      if (this_present_varInfo || that_present_varInfo) {
        if (!(this_present_varInfo && that_present_varInfo))
          return false;
        if (!this.varInfo.equals(that.varInfo))
          return false;
      }

      boolean this_present_timeIndex = true;
      boolean that_present_timeIndex = true;
      if (this_present_timeIndex || that_present_timeIndex) {
        if (!(this_present_timeIndex && that_present_timeIndex))
          return false;
        if (this.timeIndex != that.timeIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimInfo()) ? 131071 : 524287);
      if (isSetSimInfo())
        hashCode = hashCode * 8191 + simInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetVarInfo()) ? 131071 : 524287);
      if (isSetVarInfo())
        hashCode = hashCode * 8191 + varInfo.hashCode();

      hashCode = hashCode * 8191 + timeIndex;

      return hashCode;
    }

    @Override
    public int compareTo(getData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimInfo()).compareTo(other.isSetSimInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simInfo, other.simInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVarInfo()).compareTo(other.isSetVarInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varInfo, other.varInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeIndex()).compareTo(other.isSetTimeIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, other.timeIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getData_args(");
      boolean first = true;

      sb.append("simInfo:");
      if (this.simInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.simInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("varInfo:");
      if (this.varInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.varInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simInfo != null) {
        simInfo.validate();
      }
      if (varInfo != null) {
        varInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getData_argsStandardScheme getScheme() {
        return new getData_argsStandardScheme();
      }
    }

    private static class getData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIM_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simInfo = new SimulationInfo();
                struct.simInfo.read(iprot);
                struct.setSimInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAR_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.varInfo = new VariableInfo();
                struct.varInfo.read(iprot);
                struct.setVarInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeIndex = iprot.readI32();
                struct.setTimeIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simInfo != null) {
          oprot.writeFieldBegin(SIM_INFO_FIELD_DESC);
          struct.simInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.varInfo != null) {
          oprot.writeFieldBegin(VAR_INFO_FIELD_DESC);
          struct.varInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getData_argsTupleScheme getScheme() {
        return new getData_argsTupleScheme();
      }
    }

    private static class getData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimInfo()) {
          optionals.set(0);
        }
        if (struct.isSetVarInfo()) {
          optionals.set(1);
        }
        if (struct.isSetTimeIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSimInfo()) {
          struct.simInfo.write(oprot);
        }
        if (struct.isSetVarInfo()) {
          struct.varInfo.write(oprot);
        }
        if (struct.isSetTimeIndex()) {
          oprot.writeI32(struct.timeIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.simInfo = new SimulationInfo();
          struct.simInfo.read(iprot);
          struct.setSimInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.varInfo = new VariableInfo();
          struct.varInfo.read(iprot);
          struct.setVarInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeIndex = iprot.readI32();
          struct.setTimeIndexIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getData_result implements org.apache.thrift.TBase<getData_result, getData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getData_resultTupleSchemeFactory();

    public java.util.List<java.lang.Double> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "Data")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getData_result.class, metaDataMap);
    }

    public getData_result() {
    }

    public getData_result(
      java.util.List<java.lang.Double> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getData_result(getData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success.size());
        for (java.lang.Double other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getData_result deepCopy() {
      return new getData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public getData_result setSuccess(java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getData_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getData_result)
        return this.equals((getData_result)that);
      return false;
    }

    public boolean equals(getData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getData_resultStandardScheme getScheme() {
        return new getData_resultStandardScheme();
      }
    }

    private static class getData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list0.size);
                  double _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readDouble();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter3 : struct.success)
            {
              oprot.writeDouble(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getData_resultTupleScheme getScheme() {
        return new getData_resultTupleScheme();
      }
    }

    private static class getData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter4 : struct.success)
            {
              oprot.writeDouble(_iter4);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Double>(_list5.size);
            double _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readDouble();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTimePoints_args implements org.apache.thrift.TBase<getTimePoints_args, getTimePoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_args");

    private static final org.apache.thrift.protocol.TField SIM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("simInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTimePoints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTimePoints_argsTupleSchemeFactory();

    public SimulationInfo simInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIM_INFO((short)1, "simInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIM_INFO
            return SIM_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIM_INFO, new org.apache.thrift.meta_data.FieldMetaData("simInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_args.class, metaDataMap);
    }

    public getTimePoints_args() {
    }

    public getTimePoints_args(
      SimulationInfo simInfo)
    {
      this();
      this.simInfo = simInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_args(getTimePoints_args other) {
      if (other.isSetSimInfo()) {
        this.simInfo = new SimulationInfo(other.simInfo);
      }
    }

    public getTimePoints_args deepCopy() {
      return new getTimePoints_args(this);
    }

    @Override
    public void clear() {
      this.simInfo = null;
    }

    public SimulationInfo getSimInfo() {
      return this.simInfo;
    }

    public getTimePoints_args setSimInfo(SimulationInfo simInfo) {
      this.simInfo = simInfo;
      return this;
    }

    public void unsetSimInfo() {
      this.simInfo = null;
    }

    /** Returns true if field simInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSimInfo() {
      return this.simInfo != null;
    }

    public void setSimInfoIsSet(boolean value) {
      if (!value) {
        this.simInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIM_INFO:
        if (value == null) {
          unsetSimInfo();
        } else {
          setSimInfo((SimulationInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIM_INFO:
        return getSimInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIM_INFO:
        return isSetSimInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_args)
        return this.equals((getTimePoints_args)that);
      return false;
    }

    public boolean equals(getTimePoints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simInfo = true && this.isSetSimInfo();
      boolean that_present_simInfo = true && that.isSetSimInfo();
      if (this_present_simInfo || that_present_simInfo) {
        if (!(this_present_simInfo && that_present_simInfo))
          return false;
        if (!this.simInfo.equals(that.simInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimInfo()) ? 131071 : 524287);
      if (isSetSimInfo())
        hashCode = hashCode * 8191 + simInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTimePoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimInfo()).compareTo(other.isSetSimInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simInfo, other.simInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTimePoints_args(");
      boolean first = true;

      sb.append("simInfo:");
      if (this.simInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.simInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simInfo != null) {
        simInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_argsStandardScheme getScheme() {
        return new getTimePoints_argsStandardScheme();
      }
    }

    private static class getTimePoints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTimePoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIM_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simInfo = new SimulationInfo();
                struct.simInfo.read(iprot);
                struct.setSimInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simInfo != null) {
          oprot.writeFieldBegin(SIM_INFO_FIELD_DESC);
          struct.simInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_argsTupleScheme getScheme() {
        return new getTimePoints_argsTupleScheme();
      }
    }

    private static class getTimePoints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTimePoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimInfo()) {
          struct.simInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simInfo = new SimulationInfo();
          struct.simInfo.read(iprot);
          struct.setSimInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTimePoints_result implements org.apache.thrift.TBase<getTimePoints_result, getTimePoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTimePoints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTimePoints_resultTupleSchemeFactory();

    public java.util.List<java.lang.Double> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TimePoints")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_result.class, metaDataMap);
    }

    public getTimePoints_result() {
    }

    public getTimePoints_result(
      java.util.List<java.lang.Double> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_result(getTimePoints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success.size());
        for (java.lang.Double other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getTimePoints_result deepCopy() {
      return new getTimePoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public getTimePoints_result setSuccess(java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getTimePoints_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_result)
        return this.equals((getTimePoints_result)that);
      return false;
    }

    public boolean equals(getTimePoints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTimePoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTimePoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_resultStandardScheme getScheme() {
        return new getTimePoints_resultStandardScheme();
      }
    }

    private static class getTimePoints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTimePoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list8.size);
                  double _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readDouble();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter11 : struct.success)
            {
              oprot.writeDouble(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_resultTupleScheme getScheme() {
        return new getTimePoints_resultTupleScheme();
      }
    }

    private static class getTimePoints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTimePoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter12 : struct.success)
            {
              oprot.writeDouble(_iter12);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Double>(_list13.size);
            double _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readDouble();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariableList_args implements org.apache.thrift.TBase<getVariableList_args, getVariableList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_args");

    private static final org.apache.thrift.protocol.TField SIM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("simInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariableList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariableList_argsTupleSchemeFactory();

    public SimulationInfo simInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIM_INFO((short)1, "simInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIM_INFO
            return SIM_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIM_INFO, new org.apache.thrift.meta_data.FieldMetaData("simInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_args.class, metaDataMap);
    }

    public getVariableList_args() {
    }

    public getVariableList_args(
      SimulationInfo simInfo)
    {
      this();
      this.simInfo = simInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_args(getVariableList_args other) {
      if (other.isSetSimInfo()) {
        this.simInfo = new SimulationInfo(other.simInfo);
      }
    }

    public getVariableList_args deepCopy() {
      return new getVariableList_args(this);
    }

    @Override
    public void clear() {
      this.simInfo = null;
    }

    public SimulationInfo getSimInfo() {
      return this.simInfo;
    }

    public getVariableList_args setSimInfo(SimulationInfo simInfo) {
      this.simInfo = simInfo;
      return this;
    }

    public void unsetSimInfo() {
      this.simInfo = null;
    }

    /** Returns true if field simInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSimInfo() {
      return this.simInfo != null;
    }

    public void setSimInfoIsSet(boolean value) {
      if (!value) {
        this.simInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIM_INFO:
        if (value == null) {
          unsetSimInfo();
        } else {
          setSimInfo((SimulationInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIM_INFO:
        return getSimInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIM_INFO:
        return isSetSimInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_args)
        return this.equals((getVariableList_args)that);
      return false;
    }

    public boolean equals(getVariableList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simInfo = true && this.isSetSimInfo();
      boolean that_present_simInfo = true && that.isSetSimInfo();
      if (this_present_simInfo || that_present_simInfo) {
        if (!(this_present_simInfo && that_present_simInfo))
          return false;
        if (!this.simInfo.equals(that.simInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimInfo()) ? 131071 : 524287);
      if (isSetSimInfo())
        hashCode = hashCode * 8191 + simInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariableList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimInfo()).compareTo(other.isSetSimInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simInfo, other.simInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariableList_args(");
      boolean first = true;

      sb.append("simInfo:");
      if (this.simInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.simInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simInfo != null) {
        simInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_argsStandardScheme getScheme() {
        return new getVariableList_argsStandardScheme();
      }
    }

    private static class getVariableList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariableList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIM_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simInfo = new SimulationInfo();
                struct.simInfo.read(iprot);
                struct.setSimInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simInfo != null) {
          oprot.writeFieldBegin(SIM_INFO_FIELD_DESC);
          struct.simInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_argsTupleScheme getScheme() {
        return new getVariableList_argsTupleScheme();
      }
    }

    private static class getVariableList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariableList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimInfo()) {
          struct.simInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simInfo = new SimulationInfo();
          struct.simInfo.read(iprot);
          struct.setSimInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariableList_result implements org.apache.thrift.TBase<getVariableList_result, getVariableList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariableList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariableList_resultTupleSchemeFactory();

    public java.util.List<VariableInfo> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "VariableList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_result.class, metaDataMap);
    }

    public getVariableList_result() {
    }

    public getVariableList_result(
      java.util.List<VariableInfo> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_result(getVariableList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<VariableInfo> __this__success = new java.util.ArrayList<VariableInfo>(other.success.size());
        for (VariableInfo other_element : other.success) {
          __this__success.add(new VariableInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getVariableList_result deepCopy() {
      return new getVariableList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VariableInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VariableInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<VariableInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<VariableInfo> getSuccess() {
      return this.success;
    }

    public getVariableList_result setSuccess(java.util.List<VariableInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getVariableList_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<VariableInfo>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_result)
        return this.equals((getVariableList_result)that);
      return false;
    }

    public boolean equals(getVariableList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariableList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariableList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_resultStandardScheme getScheme() {
        return new getVariableList_resultStandardScheme();
      }
    }

    private static class getVariableList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariableList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<VariableInfo>(_list16.size);
                  VariableInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new VariableInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VariableInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_resultTupleScheme getScheme() {
        return new getVariableList_resultTupleScheme();
      }
    }

    private static class getVariableList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariableList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VariableInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<VariableInfo>(_list21.size);
            VariableInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new VariableInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_args implements org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_args");

    private static final org.apache.thrift.protocol.TField SIM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("simInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_argsTupleSchemeFactory();

    public SimulationInfo simInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIM_INFO((short)1, "simInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIM_INFO
            return SIM_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIM_INFO, new org.apache.thrift.meta_data.FieldMetaData("simInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    public getStatus_args(
      SimulationInfo simInfo)
    {
      this();
      this.simInfo = simInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
      if (other.isSetSimInfo()) {
        this.simInfo = new SimulationInfo(other.simInfo);
      }
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Override
    public void clear() {
      this.simInfo = null;
    }

    public SimulationInfo getSimInfo() {
      return this.simInfo;
    }

    public getStatus_args setSimInfo(SimulationInfo simInfo) {
      this.simInfo = simInfo;
      return this;
    }

    public void unsetSimInfo() {
      this.simInfo = null;
    }

    /** Returns true if field simInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSimInfo() {
      return this.simInfo != null;
    }

    public void setSimInfoIsSet(boolean value) {
      if (!value) {
        this.simInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIM_INFO:
        if (value == null) {
          unsetSimInfo();
        } else {
          setSimInfo((SimulationInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIM_INFO:
        return getSimInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIM_INFO:
        return isSetSimInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simInfo = true && this.isSetSimInfo();
      boolean that_present_simInfo = true && that.isSetSimInfo();
      if (this_present_simInfo || that_present_simInfo) {
        if (!(this_present_simInfo && that_present_simInfo))
          return false;
        if (!this.simInfo.equals(that.simInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimInfo()) ? 131071 : 524287);
      if (isSetSimInfo())
        hashCode = hashCode * 8191 + simInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimInfo()).compareTo(other.isSetSimInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simInfo, other.simInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append("simInfo:");
      if (this.simInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.simInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simInfo != null) {
        simInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsStandardScheme getScheme() {
        return new getStatus_argsStandardScheme();
      }
    }

    private static class getStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIM_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simInfo = new SimulationInfo();
                struct.simInfo.read(iprot);
                struct.setSimInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simInfo != null) {
          oprot.writeFieldBegin(SIM_INFO_FIELD_DESC);
          struct.simInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsTupleScheme getScheme() {
        return new getStatus_argsTupleScheme();
      }
    }

    private static class getStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimInfo()) {
          struct.simInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simInfo = new SimulationInfo();
          struct.simInfo.read(iprot);
          struct.setSimInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_result implements org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_resultTupleSchemeFactory();

    public SimulationStatus success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationStatus.class)));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      SimulationStatus success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimulationStatus(other.success);
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public SimulationStatus getSuccess() {
      return this.success;
    }

    public getStatus_result setSuccess(SimulationStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getStatus_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimulationStatus)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultStandardScheme getScheme() {
        return new getStatus_resultStandardScheme();
      }
    }

    private static class getStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SimulationStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultTupleScheme getScheme() {
        return new getStatus_resultTupleScheme();
      }
    }

    private static class getStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SimulationStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeModel_args implements org.apache.thrift.TBase<computeModel_args, computeModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIM_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("simSpec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeModel_argsTupleSchemeFactory();

    public SBMLModel model; // required
    public SimulationSpec simSpec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL((short)1, "model"),
      SIM_SPEC((short)2, "simSpec");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL
            return MODEL;
          case 2: // SIM_SPEC
            return SIM_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SBMLModel.class)));
      tmpMap.put(_Fields.SIM_SPEC, new org.apache.thrift.meta_data.FieldMetaData("simSpec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationSpec.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeModel_args.class, metaDataMap);
    }

    public computeModel_args() {
    }

    public computeModel_args(
      SBMLModel model,
      SimulationSpec simSpec)
    {
      this();
      this.model = model;
      this.simSpec = simSpec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeModel_args(computeModel_args other) {
      if (other.isSetModel()) {
        this.model = new SBMLModel(other.model);
      }
      if (other.isSetSimSpec()) {
        this.simSpec = new SimulationSpec(other.simSpec);
      }
    }

    public computeModel_args deepCopy() {
      return new computeModel_args(this);
    }

    @Override
    public void clear() {
      this.model = null;
      this.simSpec = null;
    }

    public SBMLModel getModel() {
      return this.model;
    }

    public computeModel_args setModel(SBMLModel model) {
      this.model = model;
      return this;
    }

    public void unsetModel() {
      this.model = null;
    }

    /** Returns true if field model is set (has been assigned a value) and false otherwise */
    public boolean isSetModel() {
      return this.model != null;
    }

    public void setModelIsSet(boolean value) {
      if (!value) {
        this.model = null;
      }
    }

    public SimulationSpec getSimSpec() {
      return this.simSpec;
    }

    public computeModel_args setSimSpec(SimulationSpec simSpec) {
      this.simSpec = simSpec;
      return this;
    }

    public void unsetSimSpec() {
      this.simSpec = null;
    }

    /** Returns true if field simSpec is set (has been assigned a value) and false otherwise */
    public boolean isSetSimSpec() {
      return this.simSpec != null;
    }

    public void setSimSpecIsSet(boolean value) {
      if (!value) {
        this.simSpec = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          setModel((SBMLModel)value);
        }
        break;

      case SIM_SPEC:
        if (value == null) {
          unsetSimSpec();
        } else {
          setSimSpec((SimulationSpec)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL:
        return getModel();

      case SIM_SPEC:
        return getSimSpec();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL:
        return isSetModel();
      case SIM_SPEC:
        return isSetSimSpec();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeModel_args)
        return this.equals((computeModel_args)that);
      return false;
    }

    public boolean equals(computeModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_model = true && this.isSetModel();
      boolean that_present_model = true && that.isSetModel();
      if (this_present_model || that_present_model) {
        if (!(this_present_model && that_present_model))
          return false;
        if (!this.model.equals(that.model))
          return false;
      }

      boolean this_present_simSpec = true && this.isSetSimSpec();
      boolean that_present_simSpec = true && that.isSetSimSpec();
      if (this_present_simSpec || that_present_simSpec) {
        if (!(this_present_simSpec && that_present_simSpec))
          return false;
        if (!this.simSpec.equals(that.simSpec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModel()) ? 131071 : 524287);
      if (isSetModel())
        hashCode = hashCode * 8191 + model.hashCode();

      hashCode = hashCode * 8191 + ((isSetSimSpec()) ? 131071 : 524287);
      if (isSetSimSpec())
        hashCode = hashCode * 8191 + simSpec.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSimSpec()).compareTo(other.isSetSimSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simSpec, other.simSpec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeModel_args(");
      boolean first = true;

      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("simSpec:");
      if (this.simSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.simSpec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (model != null) {
        model.validate();
      }
      if (simSpec != null) {
        simSpec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeModel_argsStandardScheme getScheme() {
        return new computeModel_argsStandardScheme();
      }
    }

    private static class computeModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.model = new SBMLModel();
                struct.model.read(iprot);
                struct.setModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIM_SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simSpec = new SimulationSpec();
                struct.simSpec.read(iprot);
                struct.setSimSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.model != null) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          struct.model.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.simSpec != null) {
          oprot.writeFieldBegin(SIM_SPEC_FIELD_DESC);
          struct.simSpec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeModel_argsTupleScheme getScheme() {
        return new computeModel_argsTupleScheme();
      }
    }

    private static class computeModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModel()) {
          optionals.set(0);
        }
        if (struct.isSetSimSpec()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModel()) {
          struct.model.write(oprot);
        }
        if (struct.isSetSimSpec()) {
          struct.simSpec.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.model = new SBMLModel();
          struct.model.read(iprot);
          struct.setModelIsSet(true);
        }
        if (incoming.get(1)) {
          struct.simSpec = new SimulationSpec();
          struct.simSpec.read(iprot);
          struct.setSimSpecIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeModel_result implements org.apache.thrift.TBase<computeModel_result, computeModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeModel_resultTupleSchemeFactory();

    public SimulationInfo success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationInfo.class)));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeModel_result.class, metaDataMap);
    }

    public computeModel_result() {
    }

    public computeModel_result(
      SimulationInfo success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeModel_result(computeModel_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimulationInfo(other.success);
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public computeModel_result deepCopy() {
      return new computeModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public SimulationInfo getSuccess() {
      return this.success;
    }

    public computeModel_result setSuccess(SimulationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public computeModel_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimulationInfo)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeModel_result)
        return this.equals((computeModel_result)that);
      return false;
    }

    public boolean equals(computeModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeModel_resultStandardScheme getScheme() {
        return new computeModel_resultStandardScheme();
      }
    }

    private static class computeModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SimulationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeModel_resultTupleScheme getScheme() {
        return new computeModel_resultTupleScheme();
      }
    }

    private static class computeModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SimulationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
