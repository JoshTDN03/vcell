/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.optimization.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class OptRun implements org.apache.thrift.TBase<OptRun, OptRun._Fields>, java.io.Serializable, Cloneable, Comparable<OptRun> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptRun");

  private static final org.apache.thrift.protocol.TField OPT_PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("optProblem", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OPT_RESULT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("optResultSet", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMessage", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptRunStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptRunTupleSchemeFactory();

  public OptProblem optProblem; // required
  public OptResultSet optResultSet; // required
  public java.lang.String statusMessage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPT_PROBLEM((short)1, "optProblem"),
    OPT_RESULT_SET((short)2, "optResultSet"),
    STATUS_MESSAGE((short)3, "statusMessage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPT_PROBLEM
          return OPT_PROBLEM;
        case 2: // OPT_RESULT_SET
          return OPT_RESULT_SET;
        case 3: // STATUS_MESSAGE
          return STATUS_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPT_PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("optProblem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OptProblem.class)));
    tmpMap.put(_Fields.OPT_RESULT_SET, new org.apache.thrift.meta_data.FieldMetaData("optResultSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OptResultSet.class)));
    tmpMap.put(_Fields.STATUS_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("statusMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptRun.class, metaDataMap);
  }

  public OptRun() {
  }

  public OptRun(
    OptProblem optProblem,
    OptResultSet optResultSet,
    java.lang.String statusMessage)
  {
    this();
    this.optProblem = optProblem;
    this.optResultSet = optResultSet;
    this.statusMessage = statusMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptRun(OptRun other) {
    if (other.isSetOptProblem()) {
      this.optProblem = new OptProblem(other.optProblem);
    }
    if (other.isSetOptResultSet()) {
      this.optResultSet = new OptResultSet(other.optResultSet);
    }
    if (other.isSetStatusMessage()) {
      this.statusMessage = other.statusMessage;
    }
  }

  public OptRun deepCopy() {
    return new OptRun(this);
  }

  @Override
  public void clear() {
    this.optProblem = null;
    this.optResultSet = null;
    this.statusMessage = null;
  }

  public OptProblem getOptProblem() {
    return this.optProblem;
  }

  public OptRun setOptProblem(OptProblem optProblem) {
    this.optProblem = optProblem;
    return this;
  }

  public void unsetOptProblem() {
    this.optProblem = null;
  }

  /** Returns true if field optProblem is set (has been assigned a value) and false otherwise */
  public boolean isSetOptProblem() {
    return this.optProblem != null;
  }

  public void setOptProblemIsSet(boolean value) {
    if (!value) {
      this.optProblem = null;
    }
  }

  public OptResultSet getOptResultSet() {
    return this.optResultSet;
  }

  public OptRun setOptResultSet(OptResultSet optResultSet) {
    this.optResultSet = optResultSet;
    return this;
  }

  public void unsetOptResultSet() {
    this.optResultSet = null;
  }

  /** Returns true if field optResultSet is set (has been assigned a value) and false otherwise */
  public boolean isSetOptResultSet() {
    return this.optResultSet != null;
  }

  public void setOptResultSetIsSet(boolean value) {
    if (!value) {
      this.optResultSet = null;
    }
  }

  public java.lang.String getStatusMessage() {
    return this.statusMessage;
  }

  public OptRun setStatusMessage(java.lang.String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  public void unsetStatusMessage() {
    this.statusMessage = null;
  }

  /** Returns true if field statusMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMessage() {
    return this.statusMessage != null;
  }

  public void setStatusMessageIsSet(boolean value) {
    if (!value) {
      this.statusMessage = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OPT_PROBLEM:
      if (value == null) {
        unsetOptProblem();
      } else {
        setOptProblem((OptProblem)value);
      }
      break;

    case OPT_RESULT_SET:
      if (value == null) {
        unsetOptResultSet();
      } else {
        setOptResultSet((OptResultSet)value);
      }
      break;

    case STATUS_MESSAGE:
      if (value == null) {
        unsetStatusMessage();
      } else {
        setStatusMessage((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPT_PROBLEM:
      return getOptProblem();

    case OPT_RESULT_SET:
      return getOptResultSet();

    case STATUS_MESSAGE:
      return getStatusMessage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPT_PROBLEM:
      return isSetOptProblem();
    case OPT_RESULT_SET:
      return isSetOptResultSet();
    case STATUS_MESSAGE:
      return isSetStatusMessage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OptRun)
      return this.equals((OptRun)that);
    return false;
  }

  public boolean equals(OptRun that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_optProblem = true && this.isSetOptProblem();
    boolean that_present_optProblem = true && that.isSetOptProblem();
    if (this_present_optProblem || that_present_optProblem) {
      if (!(this_present_optProblem && that_present_optProblem))
        return false;
      if (!this.optProblem.equals(that.optProblem))
        return false;
    }

    boolean this_present_optResultSet = true && this.isSetOptResultSet();
    boolean that_present_optResultSet = true && that.isSetOptResultSet();
    if (this_present_optResultSet || that_present_optResultSet) {
      if (!(this_present_optResultSet && that_present_optResultSet))
        return false;
      if (!this.optResultSet.equals(that.optResultSet))
        return false;
    }

    boolean this_present_statusMessage = true && this.isSetStatusMessage();
    boolean that_present_statusMessage = true && that.isSetStatusMessage();
    if (this_present_statusMessage || that_present_statusMessage) {
      if (!(this_present_statusMessage && that_present_statusMessage))
        return false;
      if (!this.statusMessage.equals(that.statusMessage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOptProblem()) ? 131071 : 524287);
    if (isSetOptProblem())
      hashCode = hashCode * 8191 + optProblem.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptResultSet()) ? 131071 : 524287);
    if (isSetOptResultSet())
      hashCode = hashCode * 8191 + optResultSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatusMessage()) ? 131071 : 524287);
    if (isSetStatusMessage())
      hashCode = hashCode * 8191 + statusMessage.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OptRun other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOptProblem()).compareTo(other.isSetOptProblem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptProblem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optProblem, other.optProblem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptResultSet()).compareTo(other.isSetOptResultSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptResultSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optResultSet, other.optResultSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatusMessage()).compareTo(other.isSetStatusMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMessage, other.statusMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OptRun(");
    boolean first = true;

    sb.append("optProblem:");
    if (this.optProblem == null) {
      sb.append("null");
    } else {
      sb.append(this.optProblem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optResultSet:");
    if (this.optResultSet == null) {
      sb.append("null");
    } else {
      sb.append(this.optResultSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusMessage:");
    if (this.statusMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.statusMessage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (optProblem == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optProblem' was not present! Struct: " + toString());
    }
    if (optResultSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optResultSet' was not present! Struct: " + toString());
    }
    if (statusMessage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusMessage' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (optProblem != null) {
      optProblem.validate();
    }
    if (optResultSet != null) {
      optResultSet.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptRunStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptRunStandardScheme getScheme() {
      return new OptRunStandardScheme();
    }
  }

  private static class OptRunStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptRun> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptRun struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPT_PROBLEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optProblem = new OptProblem();
              struct.optProblem.read(iprot);
              struct.setOptProblemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPT_RESULT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optResultSet = new OptResultSet();
              struct.optResultSet.read(iprot);
              struct.setOptResultSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMessage = iprot.readString();
              struct.setStatusMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptRun struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.optProblem != null) {
        oprot.writeFieldBegin(OPT_PROBLEM_FIELD_DESC);
        struct.optProblem.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.optResultSet != null) {
        oprot.writeFieldBegin(OPT_RESULT_SET_FIELD_DESC);
        struct.optResultSet.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.statusMessage != null) {
        oprot.writeFieldBegin(STATUS_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.statusMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptRunTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptRunTupleScheme getScheme() {
      return new OptRunTupleScheme();
    }
  }

  private static class OptRunTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptRun> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptRun struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.optProblem.write(oprot);
      struct.optResultSet.write(oprot);
      oprot.writeString(struct.statusMessage);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptRun struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.optProblem = new OptProblem();
      struct.optProblem.read(iprot);
      struct.setOptProblemIsSet(true);
      struct.optResultSet = new OptResultSet();
      struct.optResultSet.read(iprot);
      struct.setOptResultSetIsSet(true);
      struct.statusMessage = iprot.readString();
      struct.setStatusMessageIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

