Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12269)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12268)
@@ -12,7 +12,6 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.HashSet;
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.SessionLog;
@@ -65,11 +64,11 @@
 		return newStateMachine;
 	}
 
-	public void onDispatch(Simulation simulation, VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationDatabase simulationDatabase, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException{
+	public void onDispatch(VCSimulationIdentifier vcSimID, int jobIndex, int taskID, SimulationDatabase simulationDatabase, VCMessageSession dispatcherQueueSession, SessionLog log) throws VCMessagingException, DataAccessException, SQLException{
 		KeyValue simulationKey = vcSimID.getSimulationKey();
 		SimulationStateMachine simStateMachine = getSimulationStateMachine(simulationKey, jobIndex);
 		
-		simStateMachine.onDispatch(simulation, vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
+		simStateMachine.onDispatch(vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
 	}
 	/**
 	 * @param vcMessage
@@ -121,13 +120,8 @@
 	public void onStopRequest(VCSimulationIdentifier vcSimID, User user, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws DataAccessException, VCMessagingException, SQLException {
 		KeyValue simKey = vcSimID.getSimulationKey();
 
-		SimulationJobStatus[] simJobStatusArray = simulationDatabase.getSimulationJobStatusArray(simKey);
-		HashSet<Integer> simJobIndices = new HashSet<Integer>();
-		for (SimulationJobStatus simJobStatus : simJobStatusArray){
-			int jobIndex = simJobStatus.getJobIndex();
-			simJobIndices.add(jobIndex);
-		}
-		for (int jobIndex : simJobIndices){
+		int numJobs = simulationDatabase.getNumSimulationJobs(user, simKey);
+		for (int jobIndex = 0; jobIndex < numJobs; jobIndex++){
 			SimulationStateMachine simStateMachine = getSimulationStateMachine(simKey, jobIndex);
 			try {
 				simStateMachine.onStopRequest(user, vcSimID, simulationDatabase, session, log);
Index: src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12269)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDatabase.java	(revision 12268)
@@ -42,7 +42,8 @@
 	private DatabaseServerImpl databaseServerImpl = null;
 	private SessionLog log = null;
 	private Map<KeyValue, FieldDataIdentifierSpec[]> simFieldDataIDMap = Collections.synchronizedMap(new HashMap<KeyValue, FieldDataIdentifierSpec[]>());
-	private Map<String, User> userMap = Collections.synchronizedMap(new HashMap<String, User>());
+	private DBCacheTable simulationMap = null;
+	private Map<KeyValue, User> simUserMap = Collections.synchronizedMap(new HashMap<KeyValue, User>());
 	protected HashSet<VCSimulationDataIdentifier> resultSetSavedSet = new HashSet<VCSimulationDataIdentifier>();
 	private ResultSetCrawler resultSetCrawler = null;
 
@@ -58,10 +59,6 @@
 		return adminDbTopLevel.getSimulationJobStatusArray(simKey, jobIndex, true);
 	}
 
-	public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey) throws DataAccessException, SQLException {
-		return adminDbTopLevel.getSimulationJobStatusArray(simKey, true);
-	}
-
 	public SimulationJobStatus getSimulationJobStatus(KeyValue simKey, int jobIndex, int taskID) throws DataAccessException, SQLException {
 		return adminDbTopLevel.getSimulationJobStatus(simKey, jobIndex, taskID, true);
 	}
@@ -83,9 +80,20 @@
 	}
 
 	public Simulation getSimulation(User user, KeyValue simKey) throws DataAccessException {
-		Simulation sim = null;
+		if (simulationMap == null) {
+			log.print("Initializaing DBCacheTable!");
+			simulationMap = new DBCacheTable(3600 * 1000);
+		}
 
+		log.print("Get simulation [" + simKey + ","  + user + "]");	
+		Simulation sim = (Simulation)simulationMap.getCloned(simKey);
+
+		if (sim != null) {
+			return sim;
+		}
+
 		BigString simstr = databaseServerImpl.getSimulationXML(user,simKey);	
+
 		if (simstr != null){
 			try {
 				sim = XmlHelper.XMLToSim(simstr.toString());
@@ -93,6 +101,14 @@
 				log.exception(e);
 				throw new DataAccessException(e.getMessage());
 			}
+			if (sim != null) {
+				try {
+					simulationMap.putProtected(simKey, sim);
+				} catch (CacheException e) {
+					// if can't cache the simulation, it is ok
+					e.printStackTrace();
+				}
+			}
 		}
 
 		return sim;
@@ -110,11 +126,8 @@
 
 			FieldFunctionArguments[] fieldFuncArgs =  FieldUtilities.getFieldFunctionArguments(sim.getMathDescription());
 			if (fieldFuncArgs == null || fieldFuncArgs.length == 0) {
-				fieldDataIDSs = new FieldDataIdentifierSpec[0];
-				simFieldDataIDMap.put(simKey, fieldDataIDSs);
-				return fieldDataIDSs;
+				return null;
 			}
-			fieldDataIDSs = new FieldDataIdentifierSpec[0];
 			User owner = sim.getVersion().getOwner();
 			FieldDataDBOperationSpec fieldDataDbOperationSpec = FieldDataDBOperationSpec.createGetExtDataIDsSpec(owner);
 			FieldDataDBOperationResults fieldDataDBOperationResults = databaseServerImpl.fieldDataDBOperation(owner,fieldDataDbOperationSpec);
@@ -138,7 +151,10 @@
 				}
 			}
 
-			simFieldDataIDMap.put(simKey, fieldDataIDSs);		
+			if (fieldDataIDSs != null){
+				simFieldDataIDMap.put(simKey, fieldDataIDSs);		
+			}
+
 			return fieldDataIDSs;
 		} catch (Exception ex) {
 			log.exception(ex);
@@ -150,34 +166,55 @@
 		return adminDbTopLevel.getUnreferencedSimulations(true);
 	}
 
-	public User getUser(String username) throws DataAccessException, SQLException {
+	public User getUser(KeyValue simKey, String username) throws DataAccessException, SQLException {
 		User user = null;
 
-		synchronized(userMap) {
-			user = (User)userMap.get(username);
-			if (user!=null){
-				return user;
+		synchronized(simUserMap) {
+			user = (User)simUserMap.get(simKey);
+
+			if (user != null && username != null && !user.getName().equals(username)) {
+				throw new DataAccessException("Wrong user [" + user.getName() + "," + username + "] for the simulation [" + simKey + "]");
 			}
-		}
-		
-		user = adminDbTopLevel.getUser(username,true);
-		
-		synchronized(userMap) {
-			if (user != null) {
-				userMap.put(username, user);
-			}else{
-				throw new RuntimeException("username "+username+" not found");
+
+			if (user == null) {
+				if (username != null) {
+					user = adminDbTopLevel.getUser(username,true);
+				} else {
+					user = adminDbTopLevel.getUserFromSimulationKey(simKey,true);
+				}
+				if (user != null) {
+					simUserMap.put(simKey, user);
+				}			
 			}
 		}
+
 		return user;
 	}
 
 	public SimulationInfo getSimulationInfo(User user, KeyValue simKey) throws ObjectNotFoundException, DataAccessException {
+		if (simulationMap == null) {
+			log.print("Initializaing DBCacheTable!");
+			simulationMap = new DBCacheTable(3600 * 1000);
+		}
+
+		log.print("Get simulation [" + simKey + ","  + user + "]");	
+		Simulation sim = (Simulation)simulationMap.get(simKey);
+
+		if (sim != null) {
+			return sim.getSimulationInfo();
+		}
+
 		SimulationInfo simInfo = databaseServerImpl.getSimulationInfo(user, simKey);
+
 		return simInfo;
 	}
 
 
+	public int getNumSimulationJobs(User user, KeyValue simKey) throws DataAccessException {
+		Simulation sim = getSimulation(user, simKey);
+		return sim.getScanCount();
+	}
+
 	public void dataMoved(VCSimulationDataIdentifier vcSimDataID, User user) {
 		// called by data mover thread after successful move operations
 		try {		
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12269)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12268)
@@ -505,7 +505,7 @@
 	}
 	
 
-	public synchronized void onDispatch(Simulation simulation, VCSimulationIdentifier vcSimID, int taskID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
+	public synchronized void onDispatch(VCSimulationIdentifier vcSimID, int taskID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 
 		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
 		if (oldSimulationJobStatus == null) {
@@ -517,6 +517,7 @@
 			throw new RuntimeException("Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "] is already dispatched ("+oldSimulationJobStatus.getSchedulerStatus().getDescription()+")");
 		}
 
+		Simulation simulation = simulationDatabase.getSimulation(vcSimID.getOwner(), vcSimID.getSimulationKey());
 		FieldDataIdentifierSpec[] fieldDataIdentifierSpecs = simulationDatabase.getFieldDataIdentifierSpecs(simulation);
 		SimulationTask simulationTask = new SimulationTask(new SimulationJob(simulation, jobIndex, fieldDataIdentifierSpecs), taskID);
 
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12269)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12268)
@@ -11,7 +11,6 @@
 package cbit.vcell.message.server.dispatcher;
 import java.sql.SQLException;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Set;
 import java.util.StringTokenizer;
@@ -68,7 +67,6 @@
 import cbit.vcell.modeldb.ResultSetCrawler;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
-import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.solvers.AbstractSolver;
 
@@ -120,21 +118,11 @@
 						
 						WaitingJob[] waitingJobs = BatchScheduler.schedule(allActiveJobs, htcMaxJobs, maxOdePerUser, maxPdePerUser, serverID, log);
 						
-						//
-						// temporarily save simulations during this dispatch iteration (to expedite dispatching multiple simulation jobs for same simulation).
-						// cache is discarded after use.
-						//
-						HashMap<KeyValue,Simulation> tempSimulationMap = new HashMap<KeyValue,Simulation>();
 						for (WaitingJob waitingJob : waitingJobs){
 							SimulationJobStatus jobStatus = waitingJob.simJobStatusInfo.getSimJobStatus();
 							VCSimulationIdentifier vcSimID = jobStatus.getVCSimulationIdentifier();
-							KeyValue simKey = vcSimID.getSimulationKey();
-							Simulation sim = tempSimulationMap.get(simKey);
-							if (sim==null){
-								sim = simulationDatabase.getSimulation(vcSimID.getOwner(), vcSimID.getSimulationKey());
-								tempSimulationMap.put(simKey, sim);
-							}
-							simDispatcherEngine.onDispatch(sim, vcSimID, jobStatus.getJobIndex(), jobStatus.getTaskID(), simulationDatabase, dispatcherQueueSession, log);
+							
+							simDispatcherEngine.onDispatch(vcSimID, jobStatus.getJobIndex(), jobStatus.getTaskID(), simulationDatabase, dispatcherQueueSession, log);
 							bDispatchedAnyJobs = true;
 							
 							Thread.yield();
Index: src/cbit/vcell/message/server/htc/test/HtcTest.java
===================================================================
--- src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12269)
+++ src/cbit/vcell/message/server/htc/test/HtcTest.java	(revision 12268)
@@ -108,14 +108,6 @@
 //			e.printStackTrace(System.out);
 //		}
 
-		
-		System.out.println("<<<<<--------------  printing running simulations --------------->>>>>>");
-		List<HtcJobID> htcJobIDs = htcProxy.getRunningJobIDs("ALPHA");
-		List<HtcJobInfo> htcJobInfos = htcProxy.getJobInfos(htcJobIDs);
-		for (HtcJobInfo htcJobInfo : htcJobInfos){
-			System.out.println("jobInfo = "+htcJobInfo);
-		}
-		
 		System.out.println("<<<<<--------------  GETTING JOB EXIT STATUS--------------->>>>>>");
 		HtcJobStatus jobStatus2 = null;
 		while (jobStatus2 == null || jobStatus2.isRunning()){
Index: src/cbit/vcell/message/messages/WorkerEventMessage.java
===================================================================
--- src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 12269)
+++ src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 12268)
@@ -119,8 +119,11 @@
 		KeyValue simKey = new KeyValue(longkey + "");
 //		Simulation sim = null;
 
-		User user = simDatabase.getUser(username);
-		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, user);
+		User user = simDatabase.getUser(simKey, username);
+		SimulationInfo simInfo = simDatabase.getSimulationInfo(user, simKey);			
+		if (simInfo == null) {
+			throw new RuntimeException("Null Simulation"); //wrong message	
+		}
 		
 		String statusMessage = null;
 		Double progress = null;
@@ -178,7 +181,7 @@
 		}
 
 		ServiceName serviceName = VCMongoMessage.getServiceName();
-		workerEvent = new WorkerEvent(status, serviceName, vcSimID, jobIndex, hostname, taskID, progress, timepoint, simulationMessage);		
+		workerEvent = new WorkerEvent(status, serviceName, simInfo.getAuthoritativeVCSimulationIdentifier(), jobIndex, hostname, taskID, progress, timepoint, simulationMessage);		
 	}
 }
 
Index: src/cbit/vcell/modeldb/AdminDBTopLevel.java
===================================================================
--- src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12269)
+++ src/cbit/vcell/modeldb/AdminDBTopLevel.java	(revision 12268)
@@ -162,35 +162,6 @@
  * @param bActiveOnly boolean
  * @param owner cbit.vcell.server.User
  */
-public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, boolean bEnableRetry) throws java.sql.SQLException, DataAccessException {
-
-	Object lock = new Object();
-	Connection con = conFactory.getConnection(lock);
-	try {
-		SimulationJobStatus[] jobStatus = getSimulationJobStatusArray(con, simKey);
-		return jobStatus;
-	} catch (Throwable e) {
-		log.exception(e);
-		if (bEnableRetry && isBadConnection(con)) {
-			conFactory.failed(con,lock);
-			return getSimulationJobStatusArray(simKey,false);
-		}else{
-			handle_DataAccessException_SQLException(e);
-			return null; // never gets here;
-		}
-	} finally {
-		conFactory.release(con,lock);
-	}
-}
-
-
-/**
- * Insert the method's description here.
- * Creation date: (1/31/2003 2:35:44 PM)
- * @return cbit.vcell.solvers.SimulationJobStatus[]
- * @param bActiveOnly boolean
- * @param owner cbit.vcell.server.User
- */
 public SimulationJobStatus[] getSimulationJobStatusArray(KeyValue simKey, int jobIndex, boolean bEnableRetry) throws java.sql.SQLException, DataAccessException {
 
 	Object lock = new Object();
@@ -254,15 +225,6 @@
  * Insert the method's description here.
  * Creation date: (10/6/2005 3:08:22 PM)
  */
-SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey) throws SQLException {
-	SimulationJobStatus[] jobStatus = jobDB.getSimulationJobStatusArray(con,simKey,false);
-	return jobStatus;
-}
-
-/**
- * Insert the method's description here.
- * Creation date: (10/6/2005 3:08:22 PM)
- */
 SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, int jobIndex) throws SQLException {
 	SimulationJobStatus[] jobStatus = jobDB.getSimulationJobStatusArray(con,simKey,jobIndex,false);
 	return jobStatus;
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12269)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12268)
@@ -349,7 +349,7 @@
 				taskID = simJobStatus.getTaskID();
 			}
 		}
-		simulationDispatcherEngine.onDispatch(simulation, vcSimID, jobIndex , taskID, simulationDatabase, vcMessageSession, adminSessionLog);
+		simulationDispatcherEngine.onDispatch(vcSimID, jobIndex , taskID, simulationDatabase, vcMessageSession, adminSessionLog);
 		vcMessageSession.deliverAll();
 	}
 }
Index: src/cbit/vcell/messaging/db/SimulationJobDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 12269)
+++ src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 12268)
@@ -227,36 +227,6 @@
  * @param user java.lang.String
  * @param imageName java.lang.String
  */
-public SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, boolean lockRowForUpdate) throws SQLException {
-	//log.print("SchedulerDbDriver.getSimulationJobStatus(SimKey="+simKey+")");
-	String sql = new String(standardJobStatusSQL);	
-	sql += " AND " + simTable.id.getQualifiedColName() + " = " + simKey;
-		
-	if (lockRowForUpdate){
-		sql += " FOR UPDATE OF " + jobTable.getTableName() + ".id";
-	}
-	//log.print(sql);
-	Statement stmt = con.createStatement();
-	ArrayList<SimulationJobStatus> simulationJobStatusArrayList = new ArrayList<SimulationJobStatus>();
-	try {
-		ResultSet rset = stmt.executeQuery(sql);
-		while (rset.next()) {
-			SimulationJobStatus simJobStatus = jobTable.getSimulationJobStatus(rset);
-			simulationJobStatusArrayList.add(simJobStatus);
-		}
-	} finally {
-		stmt.close();
-	}
-	return simulationJobStatusArrayList.toArray(new SimulationJobStatus[0]);
-}
-
-
-/**
- * This method was created in VisualAge.
- * @return int
- * @param user java.lang.String
- * @param imageName java.lang.String
- */
 public SimulationJobStatus[] getSimulationJobStatusArray(Connection con, KeyValue simKey, int jobIndex, boolean lockRowForUpdate) throws SQLException {
 	//log.print("SchedulerDbDriver.getSimulationJobStatus(SimKey="+simKey+")");
 	String sql = new String(standardJobStatusSQL);	
Index: src/cbit/vcell/mongodb/VCMongoDbDriver.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 12269)
+++ src/cbit/vcell/mongodb/VCMongoDbDriver.java	(revision 12268)
@@ -22,7 +22,7 @@
 
 public class VCMongoDbDriver implements Runnable {
 	
-	public static boolean bQuiet = true;
+	public static boolean bQuiet = false;
 	
 	private static VCMongoDbDriver mongoDriverSingleton = null;
 
