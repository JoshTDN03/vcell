Index: src/cbit/vcell/model/ModelTest.java
===================================================================
--- src/cbit/vcell/model/ModelTest.java	(revision 11937)
+++ src/cbit/vcell/model/ModelTest.java	(revision 11936)
@@ -553,11 +553,13 @@
 	model.addFeature("extracellular");
 	Feature extracellular = (Feature)model.getStructure("extracellular");
 
-	Feature cytosol = model.addFeature("cytosol");
-	Membrane plasmaMem = model.addMembrane("plasmaMembrane");
+	model.addFeature("cytosol");
+	Feature cytosol = (Feature)model.getStructure("cytosol");
+	Membrane plasmaMem = (Membrane)model.getStructure("plasmaMembrane");
 
-	Feature ER = model.addFeature("er");
-	Membrane ERmem = model.addMembrane("erMembrane");
+	model.addFeature("er");
+	Feature ER = (Feature)model.getStructure("er");
+	Membrane ERmem = (Membrane)model.getStructure("erMembrane");
 	
 	
 	model.addSpeciesContext(Ca,cytosol);
Index: src/cbit/vcell/modeldb/VCComprehensiveStatistics.java
===================================================================
--- src/cbit/vcell/modeldb/VCComprehensiveStatistics.java	(revision 11937)
+++ src/cbit/vcell/modeldb/VCComprehensiveStatistics.java	(revision 11936)
@@ -39,7 +39,6 @@
 import cbit.vcell.mapping.SimulationContext;
 import cbit.vcell.mathmodel.MathModel;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.solver.Simulation;
 import cbit.vcell.solver.ode.gui.SimulationStatus;
 import cbit.vcell.xml.XMLSource;
@@ -243,7 +242,7 @@
 							for (int scan = 0; scan < sim.getScanCount(); scan ++) {
 								SimulationJobStatus jobStatus = ss.getJobStatus(scan);
 								if (jobStatus != null) {
-									if (jobStatus.getSchedulerStatus() == SchedulerStatus.COMPLETED) {								
+									if (jobStatus.getSchedulerStatus() == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED) {								
 										bHasCompletedSim = true;
 										long elapsed = jobStatus.getEndDate().getTime() - jobStatus.getStartDate().getTime();
 										if (elapsed < 2 * MINUTE_IN_MS) {
@@ -377,7 +376,7 @@
 								for (int scan = 0; scan < sim.getScanCount(); scan ++) {
 									SimulationJobStatus jobStatus = ss.getJobStatus(scan);
 									if (jobStatus != null) {
-										if (jobStatus.getSchedulerStatus() == SchedulerStatus.COMPLETED) {								
+										if (jobStatus.getSchedulerStatus() == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED) {								
 											bHasCompletedSim = true;
 											long elapsed = jobStatus.getEndDate().getTime() - jobStatus.getStartDate().getTime();
 											if (elapsed < 2 * MINUTE_IN_MS) {
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 11937)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 11936)
@@ -35,7 +35,6 @@
 import cbit.vcell.field.FieldFunctionArguments;
 import cbit.vcell.field.FieldUtilities;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.messaging.server.DispatcherDbManager;
 import cbit.vcell.messaging.server.LocalDispatcherDbManager;
@@ -208,17 +207,17 @@
 		}
 		SimulationJobStatus newJobStatus = updateFailedJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, SimulationMessage.solverAborted(ex.getMessage()));
 		if (newJobStatus == null) {
-			newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(ex.getMessage()), null, null);
+			newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_FAILED, -1, SimulationMessage.jobFailed(ex.getMessage()), null, null);
 		}
 		
 		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
 	} catch (DataAccessException e) {
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
+		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
 		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
 	} catch (RemoteException e) {
-		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SchedulerStatus.FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
+		SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimulationIdentifier, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_FAILED, -1, SimulationMessage.jobFailed(e.getMessage()), null, null);
 		SimulationJobStatusEvent event = new SimulationJobStatusEvent(this, Simulation.createSimulationID(vcSimulationIdentifier.getSimulationKey()), newJobStatus, null, null);
 		fireSimulationJobStatusEvent(event);
 	}	
@@ -239,7 +238,7 @@
 		SimulationJobStatus oldJobStatus = adminDbServer.getSimulationJobStatus(vcSimulationIdentifier.getSimulationKey(), jobIndex);
 		SimulationJobStatus newJobStatus = null;
 
-		if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone()) {
+		if (oldJobStatus == null || oldJobStatus.isDone()) {
 			return;
 		}
 		
@@ -256,9 +255,9 @@
 			newJobStatus = updateRunningJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, false, workerEvent.getSimulationMessage());
 			
 		} else if (workerEvent.isStartingEvent()) {
-			if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
+			if (oldJobStatus.isQueued() || oldJobStatus.isDispatched()) {
 				newJobStatus = updateRunningJobStatus(oldJobStatus, vcSimulationIdentifier, jobIndex, false, workerEvent.getSimulationMessage());
-			} else if (oldJobStatus.getSchedulerStatus().isRunning()) {
+			} else if (oldJobStatus.isRunning()) {
 				newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), oldJobStatus.getVCSimulationIdentifier(), oldJobStatus.getJobIndex(), oldJobStatus.getSubmitDate(), 
 					oldJobStatus.getSchedulerStatus(), oldJobStatus.getTaskID(), workerEvent.getSimulationMessage(), oldJobStatus.getSimulationQueueEntryStatus(), oldJobStatus.getSimulationExecutionStatus());
 			}				
@@ -427,7 +426,7 @@
 	synchronized (solverController) {
 		String host = (solverController != null) ? solverController.getHost() : null;
 		
-		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SchedulerStatus.COMPLETED, simulationMessage);		
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SimulationJobStatus.SCHEDULERSTATUS_COMPLETED, simulationMessage);		
 	}
 }
 
@@ -466,7 +465,7 @@
 	synchronized (solverController) {		
 		String host = (solverController != null) ? solverController.getHost() : null;
 		
-		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SchedulerStatus.FAILED, solverMsg);
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimulationIdentifier, jobIndex, host, SimulationJobStatus.SCHEDULERSTATUS_FAILED, solverMsg);
 	}
 }
 
@@ -501,10 +500,10 @@
 	SolverController solverController = solverControllerHash.get(SimulationJob.createSimulationJobID(Simulation.createSimulationID(vcSimID.getSimulationKey()), jobIndex));
 	if (solverController != null) {
 		synchronized (solverController) {
-			return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
+			return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
 		}
 	} else {
-		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
+		return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbServer, vcSimID, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
 	}	
 }
 }
Index: src/cbit/vcell/solver/SimulationMessage.java
===================================================================
--- src/cbit/vcell/solver/SimulationMessage.java	(revision 11937)
+++ src/cbit/vcell/solver/SimulationMessage.java	(revision 11936)
@@ -15,7 +15,7 @@
 import org.vcell.util.Compare;
 
 import cbit.htc.PbsJobID;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
+import cbit.vcell.messaging.db.SimulationJobStatus;
 
 public class SimulationMessage implements Serializable {
 	
@@ -127,44 +127,44 @@
 	}
 	
 
-	public static SimulationMessage fromSerialized(SchedulerStatus schedulerStatus, String serializedMessage){
+	public static SimulationMessage fromSerialized(int schedulerStatus, String serializedMessage){
 		
 		SimulationMessage simulationMessage = fromSerializedMessage(serializedMessage);
 		if (simulationMessage != null) {
 			return simulationMessage;
 		}
 		
-		if (schedulerStatus == SchedulerStatus.WAITING){
+		if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_WAITING){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_WAITING;
 			}
 			return new SimulationMessage(DetailedState.JOB_WAITING, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.QUEUED){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_QUEUED){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_QUEUED;
 			}
 			return new SimulationMessage(DetailedState.JOB_QUEUED, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.DISPATCHED){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_DISPATCHED;
 			}
 			return new SimulationMessage(DetailedState.JOB_DISPATCHED, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.RUNNING){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_RUNNING){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_RUNNING_UNKNOWN;
 			}
 			return new SimulationMessage(DetailedState.JOB_RUNNING, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.COMPLETED){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_COMPLETED;
 			}
 			return new SimulationMessage(DetailedState.JOB_COMPLETED, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.STOPPED){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_STOPPED){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_STOPPED;
 			}
 			return new SimulationMessage(DetailedState.JOB_STOPPED, serializedMessage);
-		}else if (schedulerStatus == SchedulerStatus.FAILED){
+		}else if (schedulerStatus == SimulationJobStatus.SCHEDULERSTATUS_FAILED){
 			if (serializedMessage == null) {
 				return MESSAGE_JOB_FAILED_UNKNOWN;
 			}
Index: src/cbit/vcell/solver/SimulationJob.java
===================================================================
--- src/cbit/vcell/solver/SimulationJob.java	(revision 11937)
+++ src/cbit/vcell/solver/SimulationJob.java	(revision 11936)
@@ -9,12 +9,9 @@
  */
 
 package cbit.vcell.solver;
-import org.vcell.util.Compare;
-import org.vcell.util.Matchable;
-
 import cbit.vcell.field.FieldDataIdentifierSpec;
 
-public class SimulationJob implements java.io.Serializable, Matchable {
+public class SimulationJob implements java.io.Serializable {
 	private Simulation sim = null;
 	private int jobIndex = -1;				// expect non-negative value.
 	private FieldDataIdentifierSpec[] fieldDataIdentifierSpecs = null;
@@ -101,29 +98,4 @@
 	}
 	return simulationSymbolTable;
 }
-
-public boolean compareEqual(Matchable obj) {
-	if (obj instanceof SimulationJob){
-		SimulationJob other = (SimulationJob)obj;
-		if (!Compare.isEqual(getSimulation(), other.getSimulation())){
-			return false;
-		}
-		if (!Compare.isEqual(getJobIndex(), other.getJobIndex())){
-			return false;
-		}
-		FieldDataIdentifierSpec[] thisFDIS = null;
-		if (this.fieldDataIdentifierSpecs!=null && this.fieldDataIdentifierSpecs.length>0){
-			thisFDIS = this.fieldDataIdentifierSpecs;
-		}
-		FieldDataIdentifierSpec[] otherFDIS = null;
-		if (other.fieldDataIdentifierSpecs!=null && other.fieldDataIdentifierSpecs.length>0){
-			otherFDIS = other.fieldDataIdentifierSpecs;
-		}
-		if (!Compare.isEqualOrNull(thisFDIS,otherFDIS)){
-			return false;
-		}
-		return true;
-	}
-	return false;
 }
-}
Index: src/cbit/vcell/solver/ode/gui/SimulationStatus.java
===================================================================
--- src/cbit/vcell/solver/ode/gui/SimulationStatus.java	(revision 11937)
+++ src/cbit/vcell/solver/ode/gui/SimulationStatus.java	(revision 11936)
@@ -141,7 +141,7 @@
 	}
 	int failCount = 0;
 	for (SimulationJobStatus jobStatus : jobStatuses) {
-		if (jobStatus.getSchedulerStatus().isFailed()) {
+		if (jobStatus.isFailed()) {
 			failCount ++;
 		}
 	}
@@ -169,7 +169,7 @@
 	double progress = 0;
 	for (int i = 0; i < jobStatuses.length; i++){
 		if (jobStatuses[i] != null) {
-			if (jobStatuses[i].getSchedulerStatus().isDone()) {
+			if (jobStatuses[i].isDone()) {
 				progress += 1;
 				bAllNullProgress = false;
 			} else {
@@ -249,23 +249,23 @@
 			hasData = hasData  || jobStatuses[i].hasData();			
 			
 			int currentStatus = status;
-			if (jobStatuses[i].getSchedulerStatus().isWaiting()) {
+			if (jobStatuses[i].isWaiting()) {
 				status = Math.max(status, WAITING);
 				bRunning = true;
-			} else if (jobStatuses[i].getSchedulerStatus().isQueued()) {
+			} else if (jobStatuses[i].isQueued()) {
 				status = Math.max(status, QUEUED);
 				bRunning = true;
-			} else if (jobStatuses[i].getSchedulerStatus().isDispatched()) {			
+			} else if (jobStatuses[i].isDispatched()) {			
 				status = Math.max(status, DISPATCHED);
 				bRunning = true;
-			} else if (jobStatuses[i].getSchedulerStatus().isRunning()) {
+			} else if (jobStatuses[i].isRunning()) {
 				status = Math.max(status, RUNNING);
 				bRunning = true;
-			} else if (jobStatuses[i].getSchedulerStatus().isCompleted()) {
+			} else if (jobStatuses[i].isCompleted()) {
 				status = Math.max(status, COMPLETED);
-			} else if (jobStatuses[i].getSchedulerStatus().isStopped()) {
+			} else if (jobStatuses[i].isStopped()) {
 				status = Math.max(status, STOPPED);
-			} else if (jobStatuses[i].getSchedulerStatus().isFailed()) {
+			} else if (jobStatuses[i].isFailed()) {
 				status = Math.max(status, FAILED);
 			}
 			if (status > currentStatus) highStatusIndex = i;
@@ -311,7 +311,7 @@
 	// only one simulation is considered, the jobindex is 0; hence we are checking the first jobStatus in the list of
 	// SimulationJobStatuses corresponding to this simulationstatus.
 	//
-	return getJobStatuses()[0].getSchedulerStatus().isCompleted();
+	return getJobStatuses()[0].isCompleted();
 }
 
 
@@ -397,13 +397,11 @@
  */
 public static SimulationStatus newNeverRan(int jobCount) {
 	SimulationStatus newStatus = new SimulationStatus(NEVER_RAN, false, jobCount);
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##  >>>> NEW NEVER RAN <<<<< ######################   newstatus=" + newStatus);
 	return newStatus;
 }
 
 public static SimulationStatus newNotSaved(int jobCount) {
 	SimulationStatus newStatus = new SimulationStatus(NOT_SAVED, false, jobCount);
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##  >>>> NEW NOT SAVED <<<<< ######################   newstatus=" + newStatus);
 	return newStatus;
 }
 
@@ -417,7 +415,6 @@
  */
 public static SimulationStatus newStartRequest(int jobCount) {
 	SimulationStatus newStatus = new SimulationStatus(START_REQUESTED, false, jobCount);
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##  >>>> NEW START REQUEST <<<<< ######################   newstatus=" + newStatus);
 	return newStatus;
 }
 
@@ -432,7 +429,6 @@
 public static SimulationStatus newStartRequestFailure(String failMsg, int jobCount) {
 	SimulationStatus newStatus = new SimulationStatus(FAILED, false, jobCount);
 	newStatus.details = failMsg;
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##  >>>> NEW START REQUEST FAILURE <<<<< ######################   newstatus=" + newStatus);
 	return newStatus;
 }
 
@@ -448,7 +444,6 @@
 	SimulationStatus newStatus = new SimulationStatus(currentStatus);
 	newStatus.status = STOP_REQUESTED;
 	newStatus.details = null;
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##  >>>> NEW STOP REQUEST <<<< ###########   oldstatus=" + currentStatus + "\n###########  newstatus=" + newStatus + "\n###########");
 	return newStatus;
 }
 
@@ -474,7 +469,7 @@
 public int numberOfJobsDone() {
 	int done = 0;
 	for (int i = 0; i < getJobStatuses().length; i++){
-		if (getJobStatuses()[i] != null && getJobStatuses()[i].getSchedulerStatus().isDone()) {
+		if (getJobStatuses()[i] != null && getJobStatuses()[i].isDone()) {
 			done ++;
 		}
 	}
@@ -483,7 +478,7 @@
 
 public boolean isCompleted() {
 	for (int i = 0; i < getJobStatuses().length; i++){
-		if (getJobStatuses()[i] == null || !getJobStatuses()[i].getSchedulerStatus().isCompleted()) {
+		if (getJobStatuses()[i] == null || !getJobStatuses()[i].isCompleted()) {
 			return false;
 		}
 	}
@@ -502,7 +497,7 @@
 
 public static SimulationStatus updateFromJobEvent(SimulationStatus oldStatus, SimulationJobStatusEvent simJobStatusEvent) {
 	SimulationStatus newstatus = updateFromJobEvent0(oldStatus, simJobStatusEvent);
-	System.out.println("##  ##  ##  ##  ##  ##  ##  ##    >>>> NEW SIMULATION STATUS <<<< ###########   oldstatus=" + oldStatus + "\n###########  newstatus=" + newstatus + "\n###########  jobstatusevent=" + simJobStatusEvent.getJobStatus());
+	System.out.println("###########oldstatus=" + oldStatus + "\n###########newstatus=" + newstatus + "\n###########jobstatusevent=" + simJobStatusEvent.getJobStatus());
 	return newstatus;	
 }
 /**
Index: src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java	(revision 11936)
@@ -12,8 +12,6 @@
 
 import java.util.Date;
 
-import org.vcell.util.MessageConstants.SimulationQueueID;
-
 /**
  * Insert the type's description here.
  * Creation date: (1/31/2003 11:21:39 AM)
@@ -22,7 +20,7 @@
 public class SimulationQueueEntryStatus implements org.vcell.util.Matchable, java.io.Serializable {
 	private int fieldQueuePriority = 0;
 	private Date fieldQueueDate = null;
-	private SimulationQueueID fieldQueueID;
+	private int fieldQueueID;
 /**
  * SimulationQueueEntryStatus constructor comment.
  * @param simKey cbit.sql.KeyValue
@@ -32,10 +30,7 @@
  * @param queueDate java.util.Date
  * @param queueID java.lang.Integer
  */
-public SimulationQueueEntryStatus(Date queueDate, int queuePriority, SimulationQueueID queueID) {
-	if (queueID==null){
-		throw new RuntimeException("queueID must not be null");
-	}
+public SimulationQueueEntryStatus(Date queueDate, int queuePriority, int queueID) {
 	this.fieldQueueDate = queueDate;
 	this.fieldQueuePriority = queuePriority;	
 	this.fieldQueueID = queueID;
@@ -79,7 +74,7 @@
  * Creation date: (1/31/2003 11:23:56 AM)
  * @return int
  */
-public SimulationQueueID getQueueID() {
+public int getQueueID() {
 	return fieldQueueID;
 }
 /**
@@ -95,10 +90,7 @@
  * Creation date: (5/29/2003 10:03:41 AM)
  * @param newFieldQueueID int
  */
-public void setQueueID(SimulationQueueID newFieldQueueID) {
-	if (newFieldQueueID==null){
-		throw new RuntimeException("queueID must not be null");
-	}
+public void setQueueID(int newFieldQueueID) {
 	fieldQueueID = newFieldQueueID;
 }
 /**
Index: src/cbit/vcell/messaging/db/SimulationJobDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/SimulationJobDbDriver.java	(revision 11936)
@@ -12,7 +12,6 @@
 import java.sql.*;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.messaging.db.SimulationJobTable;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.modeldb.SimulationTable;
 import cbit.vcell.modeldb.DatabaseConstants;
 import java.util.ArrayList;
@@ -87,10 +86,10 @@
 			
 			
 	sql += " AND "
-			+ jobTable.schedulerStatus + " in (" + SchedulerStatus.QUEUED.getDatabaseNumber() // in job queue
-			+ ","  + SchedulerStatus.DISPATCHED.getDatabaseNumber() // worker just accepted it
-			+ "," + SchedulerStatus.RUNNING.getDatabaseNumber()  // worker running it
-			+ "," + SchedulerStatus.WAITING.getDatabaseNumber() // waiting
+			+ jobTable.schedulerStatus + " in (" + SimulationJobStatus.SCHEDULERSTATUS_QUEUED // in job queue
+			+ ","  + SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED // worker just accepted it
+			+ "," + SimulationJobStatus.SCHEDULERSTATUS_RUNNING  // worker running it
+			+ "," + SimulationJobStatus.SCHEDULERSTATUS_WAITING // waiting
 			+ ")";
 
 	// AND upper(serverID) in ('serverid1', serverid2');
@@ -136,8 +135,8 @@
 	String sql = new String(standardJobStatusSQL);
 	sql += " AND (sysdate-" + jobTable.latestUpdateDate + ")*86400>" + intervalSeconds
 		+ " AND (" + jobTable.serverID + "='" + VCellServerID.getSystemServerID() + "')"
-		+ " AND (" + jobTable.schedulerStatus + "=" + SchedulerStatus.RUNNING.getDatabaseNumber() // running
-		+ " OR " + jobTable.schedulerStatus + "=" + SchedulerStatus.DISPATCHED.getDatabaseNumber() // worker just accepted it
+		+ " AND (" + jobTable.schedulerStatus + "=" + SimulationJobStatus.SCHEDULERSTATUS_RUNNING // running
+		+ " OR " + jobTable.schedulerStatus + "=" + SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED // worker just accepted it
 		+ ") and rownum<2 order by " + jobTable.submitDate;	
 			
 	Statement stmt = con.createStatement();
@@ -313,9 +312,9 @@
 	}
 
 	if (bActiveOnly) {
-		sql += " AND (" + jobTable.schedulerStatus + "=" + SchedulerStatus.QUEUED.getDatabaseNumber() // in job queue
-			+ " OR " + jobTable.schedulerStatus + "=" + SchedulerStatus.DISPATCHED.getDatabaseNumber() // worker just accepted it
-			+ " OR " + jobTable.schedulerStatus + "=" + SchedulerStatus.RUNNING.getDatabaseNumber()  // worker running it
+		sql += " AND (" + jobTable.schedulerStatus + "=" + SimulationJobStatus.SCHEDULERSTATUS_QUEUED // in job queue
+			+ " OR " + jobTable.schedulerStatus + "=" + SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED // worker just accepted it
+			+ " OR " + jobTable.schedulerStatus + "=" + SimulationJobStatus.SCHEDULERSTATUS_RUNNING  // worker running it
 			+ ")";
 	}
 	
Index: src/cbit/vcell/messaging/db/SimulationJobStatus.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobStatus.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/SimulationJobStatus.java	(revision 11936)
@@ -30,94 +30,41 @@
 	private Date fieldTimeDateStamp = null;
 	private VCSimulationIdentifier fieldVCSimID = null;
 	private Date fieldSubmitDate = null;
-	private SchedulerStatus fieldSchedulerStatus; // define here
+	private int fieldSchedulerStatus; // define here
 	private int fieldTaskID = 0;
 	private SimulationMessage fieldSimulationMessage = null;
 	private VCellServerID fieldServerID = null;
 	private int fieldJobIndex;
+
+	public static final int SCHEDULERSTATUS_WAITING = 0;
+	public static final int SCHEDULERSTATUS_QUEUED = 1;
+	public static final int SCHEDULERSTATUS_DISPATCHED = 2;
+	public static final int SCHEDULERSTATUS_RUNNING = 3;
+	public static final int SCHEDULERSTATUS_COMPLETED = 4;
+	public static final int SCHEDULERSTATUS_STOPPED = 5;
+	public static final int SCHEDULERSTATUS_FAILED = 6;
+	
+	private final static String[] schedulerStatusDescription = new String[] {
+		"waiting",
+		"queued",
+		"dispatched",
+		"running",
+		"completed",
+		"stopped",
+		"failed"
+	};
+
 	private SimulationQueueEntryStatus fieldSimulationQueueEntryStatus = null;	// may be null
 	private SimulationExecutionStatus fieldSimulationExecutionStatus = null;	// may be null
-
-	public enum SchedulerStatus {
-		WAITING(0,"waiting"),
-		QUEUED(1,"queued"),
-		DISPATCHED(2,"dispatched"),
-		RUNNING(3,"running"),
-		COMPLETED(4,"completed"),
-		STOPPED(5,"stopped"),
-		FAILED(6,"failed");
-		
-		private int databaseNumber;
-		private String description;
-		private SchedulerStatus(int databaseNumber, String desc){
-			this.databaseNumber = databaseNumber;
-			this.description = desc;
-		}
-		
-		public int getDatabaseNumber(){
-			return databaseNumber;
-		}
-		public String getDescription(){
-			return description;
-		}
-
-		public boolean isSupercededBy(SchedulerStatus other) {
-			return other.getDatabaseNumber() > getDatabaseNumber();
-		}
-
-		public boolean isWaiting() {
-			return this.equals(WAITING);
-		}
-		public boolean isQueued() {
-			return this.equals(QUEUED);
-		}
-		public boolean isDispatched() {
-			return this.equals(DISPATCHED);
-		}
-		public boolean isRunning() {
-			return this.equals(RUNNING);
-		}
-		public boolean isCompleted() {
-			return this.equals(COMPLETED);
-		}
-		public boolean isStopped() {
-			return this.equals(STOPPED);
-		}
-		public boolean isFailed() {
-			return this.equals(FAILED);
-		}
-		public boolean inQueue(){
-			return this.equals(WAITING)||this.equals(QUEUED);
-		}
-		public boolean isActive() {
-			return (isRunning() || isWaiting() || isQueued() || isDispatched());
-		}
-		public boolean isDone() {
-			return  (isStopped() || isFailed() || isCompleted());
-		}
-
-		public static SchedulerStatus fromDatabaseNumber(int databaseNumber) {
-			for (SchedulerStatus status : values()){
-				if (status.getDatabaseNumber()==databaseNumber){
-					return status;
-				}
-			}
-			throw new RuntimeException("unexpected SchedulerStatus database number "+databaseNumber);
-		}
-	}
-
 	
 
 /**
  * SimulationJobStatus constructor comment.
  */
-public SimulationJobStatus(VCellServerID serverID, VCSimulationIdentifier vcSimID, int jobIndex, Date submitDate, SchedulerStatus schedulerStatus, int taskID, SimulationMessage simMessage, SimulationQueueEntryStatus simQueueStatus, SimulationExecutionStatus simExeStatus){
+public SimulationJobStatus(VCellServerID serverID, VCSimulationIdentifier vcSimID, int jobIndex, Date submitDate, int schedulerStatus, int taskID, SimulationMessage simMessage, SimulationQueueEntryStatus simQueueStatus, SimulationExecutionStatus simExeStatus){
 	if (simMessage == null) {
 		throw new RuntimeException("SimulationJobStatus : SimulationMessage should not be null");
 	}
-	if (schedulerStatus == null) {
-		throw new RuntimeException("SimulationJobStatus : SchedulerStatus should not be null");
-	}
 	fieldServerID = serverID;
 	fieldVCSimID = vcSimID;
 	fieldSubmitDate = submitDate;
@@ -192,16 +139,16 @@
 		return true;
 	}
 	
-	if (fieldSchedulerStatus.isSupercededBy(simJobStatus.fieldSchedulerStatus)){
+	if (simJobStatus.fieldSchedulerStatus > fieldSchedulerStatus){
 		return true;
-	}else if (simJobStatus.fieldSchedulerStatus.isSupercededBy(fieldSchedulerStatus)){
+	}else if (simJobStatus.fieldSchedulerStatus < fieldSchedulerStatus){
 		return false;
 	}
 	
 	//
 	// simJobStatus.schedulerStatus == fieldSchedulerStatus 
 	//
-	if (simJobStatus.fieldSchedulerStatus == SchedulerStatus.RUNNING && fieldSchedulerStatus == SchedulerStatus.RUNNING){
+	if (simJobStatus.fieldSchedulerStatus == SCHEDULERSTATUS_RUNNING && fieldSchedulerStatus == SCHEDULERSTATUS_RUNNING){
 		if (oldProgress!=null && newProgress!=null){
 			if (oldProgress < newProgress){
 				return true;
@@ -261,10 +208,16 @@
  * Creation date: (1/31/2003 11:15:48 AM)
  * @return int
  */
-public SchedulerStatus getSchedulerStatus() {
+public int getSchedulerStatus() {
 	return fieldSchedulerStatus;
 }
 
+
+public String getSchedulerStatusDescription() {
+	return schedulerStatusDescription[fieldSchedulerStatus];
+}
+
+
 /**
  * Insert the method's description here.
  * Creation date: (4/27/2005 2:09:03 PM)
@@ -372,6 +325,111 @@
 
 /**
  * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean inQueue() {
+	return (fieldSchedulerStatus == SCHEDULERSTATUS_QUEUED || fieldSchedulerStatus == SCHEDULERSTATUS_WAITING) ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (5/11/2006 10:13:18 AM)
+ * @return boolean
+ */
+public boolean isActive() {
+	if (isRunning() || isWaiting() || isQueued() || isDispatched()) {
+		return true;
+	}
+	
+	return false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isCompleted() {
+	return  fieldSchedulerStatus == SCHEDULERSTATUS_COMPLETED ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isDispatched() {
+	return  fieldSchedulerStatus == SCHEDULERSTATUS_DISPATCHED ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isDone() {
+	return  (fieldSchedulerStatus == SCHEDULERSTATUS_STOPPED || fieldSchedulerStatus == SCHEDULERSTATUS_FAILED 
+		|| fieldSchedulerStatus == SCHEDULERSTATUS_COMPLETED) ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isFailed() {
+	return  fieldSchedulerStatus == SCHEDULERSTATUS_FAILED ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isQueued() {
+	return  (fieldSchedulerStatus == SCHEDULERSTATUS_QUEUED) ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isRunning() {
+	return  fieldSchedulerStatus == SCHEDULERSTATUS_RUNNING ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isStopped() {
+	return  fieldSchedulerStatus == SCHEDULERSTATUS_STOPPED ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
+ * Creation date: (1/31/2003 11:15:48 AM)
+ * @return int
+ */
+public boolean isWaiting() {
+	return  (fieldSchedulerStatus == SCHEDULERSTATUS_WAITING) ? true : false;
+}
+
+
+/**
+ * Insert the method's description here.
  * Creation date: (2/2/2004 12:00:50 PM)
  * @param newFieldTimeDateStamp java.util.Date
  */
Index: src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java	(revision 11936)
@@ -78,7 +78,7 @@
  * @param user java.lang.String
  * @param imageName java.lang.String
  */
-public ServiceStatus getServiceStatus(Connection con, VCellServerID serverID, ServiceType type, int ordinal, boolean lockRowForUpdate) throws SQLException {
+public ServiceStatus getServiceStatus(Connection con, String serverID, ServiceType type, int ordinal, boolean lockRowForUpdate) throws SQLException {
 	String sql = "select * from " + serviceTable.getTableName() + " where "	
 		+ serviceTable.serverID.getQualifiedColName() + "='" + serverID + "'" 
 		+ " AND " + serviceTable.type.getQualifiedColName() + "='" + type.getName() + "'"
Index: src/cbit/vcell/messaging/db/SimulationJobTable.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobTable.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/SimulationJobTable.java	(revision 11936)
@@ -12,7 +12,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.TokenMangler;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
@@ -20,7 +19,6 @@
 import cbit.htc.PbsJobID;
 import cbit.sql.Field;
 import cbit.sql.Table;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.modeldb.DatabaseConstants;
 import cbit.vcell.modeldb.SimulationTable;
 import cbit.vcell.modeldb.UserTable;
@@ -92,8 +90,7 @@
 	//taskID
 	int parsedTaskID = rset.getInt(taskID.toString());
 	//schedulerStatus
-	int parsedSchedulerStatusInt = rset.getInt(schedulerStatus.toString());
-	SchedulerStatus parsedSchedulerStatus = SchedulerStatus.fromDatabaseNumber(parsedSchedulerStatusInt);
+	int parsedSchedulerStatus = rset.getInt(schedulerStatus.toString());	
 	//statusMsg
 	String parsedStatusMsg = TokenMangler.getSQLRestoredString(rset.getString(statusMsg.toString()));
 	
@@ -113,10 +110,8 @@
 	if (rset.wasNull()) {
 		parsedQueueID = -1;
 	}
-	SimulationQueueID simulationQueueID = SimulationQueueID.fromDatabaseNumber(parsedQueueID);
+	SimulationQueueEntryStatus simQueueEntryStatus = new SimulationQueueEntryStatus(parsedQueuedDate,parsedQueuePriority,parsedQueueID);	
 	
-	SimulationQueueEntryStatus simQueueEntryStatus = new SimulationQueueEntryStatus(parsedQueuedDate,parsedQueuePriority,simulationQueueID);	
-	
 	//
 	// read solver stuff
 	//
@@ -174,7 +169,7 @@
 	//taskID
 	buffer.append(taskID + "=" + simulationJobStatus.getTaskID() + ",");
 	//schedulerStatus
-	buffer.append(schedulerStatus + "=" + simulationJobStatus.getSchedulerStatus().getDatabaseNumber() + ",");
+	buffer.append(schedulerStatus + "=" + simulationJobStatus.getSchedulerStatus() + ",");
 	//statusMsg
 	String message = simulationJobStatus.getSimulationMessage().toSerialization();
 	buffer.append(statusMsg + "='" + TokenMangler.getSQLEscapedString(message, 4000) + "',");
@@ -188,7 +183,7 @@
 	if (simQueueEntryStatus != null && simQueueEntryStatus.getQueueDate() != null){
 		buffer.append(VersionTable.formatDateToOracle(simQueueEntryStatus.getQueueDate()) + ",");
 	} else {
-		if (simulationJobStatus.getSchedulerStatus().inQueue()) {
+		if (simulationJobStatus.inQueue()) {
 			buffer.append("sysdate,");
 		} else {
 			buffer.append("null,");
@@ -204,12 +199,7 @@
 	//queueID
 	buffer.append(queueID + "=");
 	if (simQueueEntryStatus != null){
-		SimulationQueueID simQueueID = simQueueEntryStatus.getQueueID();
-		if (simQueueID!=null){
-			buffer.append(simQueueEntryStatus.getQueueID().getDatabaseNumber() + ",");
-		}else{
-			buffer.append("null,");
-		}
+		buffer.append(simQueueEntryStatus.getQueueID() + ",");
 	} else {
 		buffer.append("null,");
 	}
@@ -223,7 +213,7 @@
 	if (simExecutionStatus != null && simExecutionStatus.getStartDate() != null){
 		buffer.append(VersionTable.formatDateToOracle(simExecutionStatus.getStartDate()) + ",");
 	} else {	
-		if (simulationJobStatus.getSchedulerStatus().isWaiting()) {	
+		if (simulationJobStatus.isWaiting()) {	
 			buffer.append("null,");
 		} else {
 			buffer.append("sysdate,");
@@ -244,7 +234,7 @@
 	if (simExecutionStatus != null && simExecutionStatus.getEndDate() != null){
 		buffer.append(VersionTable.formatDateToOracle(simExecutionStatus.getEndDate()) + ",");
 	} else {
-		if (simulationJobStatus.getSchedulerStatus().isDone()) {
+		if (simulationJobStatus.isDone()) {
 			buffer.append("sysdate,");
 		} else {
 			buffer.append("null,");
@@ -306,7 +296,7 @@
 	//taskID
 	buffer.append(simulationJobStatus.getTaskID() + ",");
 	//schedulerStatus
-	buffer.append(simulationJobStatus.getSchedulerStatus().getDatabaseNumber() + ",");
+	buffer.append(simulationJobStatus.getSchedulerStatus() + ",");
 	//statusMsg
 	String message = simulationJobStatus.getSimulationMessage().toSerialization();
 	buffer.append("'" + TokenMangler.getSQLEscapedString(message, 4000) + "',");
@@ -314,7 +304,7 @@
 	// queue stuff
 	SimulationQueueEntryStatus simQueueEntryStatus = simulationJobStatus.getSimulationQueueEntryStatus();
 	//queueDate
-	if (simulationJobStatus.getSchedulerStatus().inQueue()) {
+	if (simulationJobStatus.inQueue()) {
 		buffer.append("sysdate,");
 	} else {		
 		if (simQueueEntryStatus != null && simQueueEntryStatus.getQueueDate() != null) {
@@ -330,7 +320,7 @@
 		//queuePriority
 		buffer.append(simQueueEntryStatus.getQueuePriority() + ",");
 		//queueID
-		buffer.append(simQueueEntryStatus.getQueueID().getDatabaseNumber() + ",");
+		buffer.append(simQueueEntryStatus.getQueueID() + ",");
 	}
 	
 	// execution stuff
@@ -342,7 +332,7 @@
 		if (simExecutionStatus.getStartDate() != null) {
 			buffer.append(VersionTable.formatDateToOracle(simExecutionStatus.getStartDate()) + ",");
 		} else {
-			if (simulationJobStatus.getSchedulerStatus() == SchedulerStatus.COMPLETED) {
+			if (simulationJobStatus.getSchedulerStatus() == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED) {
 				buffer.append("sysdate,");
 			} else {
 				buffer.append("null,");
@@ -360,7 +350,7 @@
 		if (simExecutionStatus.getEndDate() != null) {
 			buffer.append(VersionTable.formatDateToOracle(simExecutionStatus.getEndDate()) + ",");
 		} else {
-			if (simulationJobStatus.getSchedulerStatus().isDone()) {
+			if (simulationJobStatus.isDone()) {
 				buffer.append("sysdate,");
 			} else {
 				buffer.append("null,");
Index: src/cbit/vcell/messaging/db/ServiceTable.java
===================================================================
--- src/cbit/vcell/messaging/db/ServiceTable.java	(revision 11937)
+++ src/cbit/vcell/messaging/db/ServiceTable.java	(revision 11936)
@@ -17,7 +17,6 @@
 
 import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.KeyValue;
-import org.vcell.util.document.VCellServerID;
 
 public class ServiceTable extends cbit.sql.Table {
 	private static final String TABLE_NAME = "vc_service";
@@ -58,8 +57,7 @@
  */
 public ServiceStatus getServiceStatus(ResultSet rset) throws SQLException {	
 	//serverID
-	String parsedServerIDString = rset.getString(serverID.toString());
-	VCellServerID parsedServerID = VCellServerID.getServerID(parsedServerIDString);
+	String parsedServerID = rset.getString(serverID.toString());
 	//type
 	String parsedType = rset.getString(type.toString());
 	//ordinal
Index: src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/JmsDispatcherDbManager.java	(revision 11936)
@@ -12,7 +12,6 @@
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.server.AdminDatabaseServerXA;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.messaging.db.SimulationQueueEntryStatus;
 
@@ -22,7 +21,6 @@
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.document.VCellServerID;
 
 
@@ -47,7 +45,7 @@
 		String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) 
 			throws DataAccessException, UpdateSynchronizationException {
 
-	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+	if (oldJobStatus != null && !oldJobStatus.isDone()) {
 		
 		SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, startMsg);
 
@@ -66,9 +64,9 @@
  * @param simKey cbit.sql.KeyValue
  */
 public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) 
+		VCSimulationIdentifier vcSimID, int jobIndex, String hostName, int status, SimulationMessage solverMsg) 
 			throws DataAccessException, UpdateSynchronizationException {
-	if (oldJobStatus == null ||  oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {		
+	if (oldJobStatus == null ||  oldJobStatus != null && !oldJobStatus.isDone()) {		
 
 		SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, hostName, status, solverMsg);
 
@@ -91,7 +89,7 @@
 public void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
 		VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 
-	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+	if (oldJobStatus != null && !oldJobStatus.isDone()) {
 
 		SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, simulationMessage);
 		
@@ -109,15 +107,15 @@
  * @param simKey cbit.sql.KeyValue
  */
 public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDb, Connection con, 
-		VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) 
+		VCSimulationIdentifier vcSimID, int jobIndex, int queueID, int taskID, boolean firstSubmit) 
 			throws DataAccessException, UpdateSynchronizationException {
-	if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone() || oldJobStatus.getSchedulerStatus().isWaiting()) {	
+	if (oldJobStatus == null || oldJobStatus.isDone() || oldJobStatus.isWaiting()) {	
 		// no job for the same simulation running						
 		Date submitDate = firstSubmit ? null : oldJobStatus.getSubmitDate();
-		SchedulerStatus schedulerStatus = SchedulerStatus.WAITING;
+		int schedulerStatus = SimulationJobStatus.SCHEDULERSTATUS_WAITING;
 		SimulationMessage simulationMessage = SimulationMessage.MESSAGE_JOB_WAITING;
-		if (queueID == SimulationQueueID.QUEUE_ID_SIMULATIONJOB) {
-			schedulerStatus = SchedulerStatus.QUEUED;
+		if (queueID == MessageConstants.QUEUE_ID_SIMULATIONJOB) {
+			schedulerStatus = SimulationJobStatus.SCHEDULERSTATUS_QUEUED;
 			simulationMessage = SimulationMessage.MESSAGE_JOB_QUEUED;
 		}
 
@@ -144,7 +142,7 @@
  */
 public SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, String hostName, 
 		VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
-	if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+	if (oldJobStatus != null && !oldJobStatus.isDone()) {
 
 		SimulationJobStatus newJobStatus = getNewStatus_updateRunningStatus(oldJobStatus, hostName, vcSimID, jobIndex, hasData, solverMsg);
 
Index: src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/AbstractDispatcherDbManager.java	(revision 11936)
@@ -11,7 +11,6 @@
 package cbit.vcell.messaging.server;
 import cbit.htc.PbsJobID;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.solver.SimulationMessage;
@@ -21,7 +20,6 @@
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
 
@@ -50,13 +48,13 @@
 	// new queue status
 	SimulationQueueEntryStatus oldQueueStatus = oldJobStatus.getSimulationQueueEntryStatus();
 	SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(oldQueueStatus.getQueueDate(), 
-		oldQueueStatus.getQueuePriority(), SimulationQueueID.QUEUE_ID_NULL);
+		oldQueueStatus.getQueuePriority(), MessageConstants.QUEUE_ID_NULL);
 	
 	// new exe status
 	SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(null, computeHost, null,	null, false, startMsg.getPbsJobId());
 
 	// new job status
-	SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), vcSimID, jobIndex, oldJobStatus.getSubmitDate(), SchedulerStatus.DISPATCHED,
+	SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), vcSimID, jobIndex, oldJobStatus.getSubmitDate(), SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED,
 			oldJobStatus.getTaskID(), startMsg, newQueueStatus, newExeStatus);
 
 	return newJobStatus;
@@ -69,13 +67,13 @@
  * @param simKey cbit.sql.KeyValue
  */
 SimulationJobStatus getNewStatus_updateEndStatus(SimulationJobStatus oldJobStatus, VCSimulationIdentifier vcSimID, int jobIndex, 
-		String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+		String hostName, int status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 
 	// new queue status
 	SimulationQueueEntryStatus oldQueueStatus = oldJobStatus == null ? null : oldJobStatus.getSimulationQueueEntryStatus();
 	SimulationQueueEntryStatus newQueueStatus = oldQueueStatus;
-	if (oldQueueStatus != null && oldQueueStatus.getQueueID() != SimulationQueueID.QUEUE_ID_NULL) {		
-		newQueueStatus = new SimulationQueueEntryStatus(oldQueueStatus.getQueueDate(), oldQueueStatus.getQueuePriority(), SimulationQueueID.QUEUE_ID_NULL);
+	if (oldQueueStatus != null && oldQueueStatus.getQueueID() != MessageConstants.QUEUE_ID_NULL) {		
+		newQueueStatus = new SimulationQueueEntryStatus(oldQueueStatus.getQueueDate(), oldQueueStatus.getQueuePriority(), MessageConstants.QUEUE_ID_NULL);
 	}
 
 	// new exe status
@@ -84,12 +82,12 @@
 	boolean hasData = false;
 	
 	if (oldExeStatus == null) {
-		if (status == SchedulerStatus.COMPLETED) {
+		if (status == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED) {
 			hasData = true;
 		}
 		newExeStatus = new SimulationExecutionStatus(null, hostName, null, null, hasData, solverMsg.getPbsJobId());				
 	} else {
-		if (status == SchedulerStatus.COMPLETED) {
+		if (status == SimulationJobStatus.SCHEDULERSTATUS_COMPLETED) {
 			hasData = true;
 		} else {
 			hasData = oldExeStatus.hasData();
@@ -155,8 +153,8 @@
 	// new queue status		
 	SimulationQueueEntryStatus oldQueueStatus = oldJobStatus.getSimulationQueueEntryStatus();
 	SimulationQueueEntryStatus newQueueStatus = oldQueueStatus;
-	if (oldQueueStatus.getQueueID() != SimulationQueueID.QUEUE_ID_NULL) {
-		newQueueStatus = new SimulationQueueEntryStatus(oldQueueStatus.getQueueDate(), oldQueueStatus.getQueuePriority(), SimulationQueueID.QUEUE_ID_NULL);
+	if (oldQueueStatus.getQueueID() != MessageConstants.QUEUE_ID_NULL) {
+		newQueueStatus = new SimulationQueueEntryStatus(oldQueueStatus.getQueueDate(), oldQueueStatus.getQueuePriority(), MessageConstants.QUEUE_ID_NULL);
 	}
 
 	// new exe status
@@ -164,7 +162,7 @@
 	SimulationExecutionStatus newExeStatus = null;
 	if (oldExeStatus == null) {
 		newExeStatus = new SimulationExecutionStatus(null, hostName, null, null, hasData, solverMsg.getPbsJobId());
-	} else if (!oldJobStatus.getSchedulerStatus().isRunning() || !oldExeStatus.hasData() && hasData) {
+	} else if (!oldJobStatus.isRunning() || !oldExeStatus.hasData() && hasData) {
 		PbsJobID pbsJobID = oldExeStatus.getPbsJobID();
 		if (solverMsg.getPbsJobId()!=null){
 			pbsJobID = solverMsg.getPbsJobId();
@@ -176,7 +174,7 @@
 	
 	// new job status
 	SimulationJobStatus newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), vcSimID, jobIndex, oldJobStatus.getSubmitDate(), 
-			SchedulerStatus.RUNNING, oldJobStatus.getTaskID(), solverMsg, newQueueStatus, newExeStatus);
+		SimulationJobStatus.SCHEDULERSTATUS_RUNNING, oldJobStatus.getTaskID(), solverMsg, newQueueStatus, newExeStatus);
 
 	return newJobStatus;
 }
@@ -205,7 +203,7 @@
 		VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
 	try {
 
-		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+		if (oldJobStatus != null && !oldJobStatus.isDone()) {
 			
 			SimulationJobStatus newJobStatus = getNewStatus_updateDispatchedStatus(oldJobStatus, computeHost, vcSimID, jobIndex, startMsg);
 
@@ -228,9 +226,9 @@
  * @param simKey cbit.sql.KeyValue
  */
 public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
-		int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+		int jobIndex, String hostName, int status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 	try {
-		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {		
+		if (oldJobStatus != null && !oldJobStatus.isDone()) {		
 
 			SimulationJobStatus newJobStatus = getNewStatus_updateEndStatus(oldJobStatus, vcSimID, jobIndex, hostName, status, solverMsg);
 			
@@ -254,7 +252,7 @@
 public void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
 		int jobIndex, SimulationMessage simulationMessage) throws DataAccessException, UpdateSynchronizationException {
 	try {
-		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+		if (oldJobStatus != null && !oldJobStatus.isDone()) {
 
 			SimulationJobStatus	newJobStatus = getNewStatus_updateLatestUpdateDate(oldJobStatus, vcSimID, jobIndex, simulationMessage);
 			
@@ -276,7 +274,7 @@
 public SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String hostName, 
 		VCSimulationIdentifier vcSimID, int jobIndex, boolean hasData, SimulationMessage solverMsg)	throws DataAccessException, UpdateSynchronizationException {
 	try {
-		if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+		if (oldJobStatus != null && !oldJobStatus.isDone()) {
 
 			SimulationJobStatus newJobStatus = getNewStatus_updateRunningStatus(oldJobStatus, hostName, vcSimID, jobIndex, hasData, solverMsg);
 			if (oldJobStatus == newJobStatus) { // running statuses, don't always store into the database				
Index: src/cbit/vcell/messaging/server/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/messaging/server/SimulationDispatcher.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/SimulationDispatcher.java	(revision 11936)
@@ -20,7 +20,6 @@
 import org.vcell.util.CacheException;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.StdoutSessionLog;
 import org.vcell.util.MessageConstants.ServiceType;
@@ -53,7 +52,6 @@
 import cbit.vcell.messaging.admin.ManageUtils;
 import cbit.vcell.messaging.admin.ServiceInstanceStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.server.AdminDatabaseServerXA;
 import cbit.vcell.xml.XmlHelper;
 import cbit.vcell.xml.XmlParseException;
@@ -91,7 +89,7 @@
  * Scheduler constructor comment.
  */
 public SimulationDispatcher(int serviceOrdinal, String logdir) throws Exception {	
-	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), 
+	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID().toString(), 
 			ServiceType.DISPATCH, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);	
 	initLog(logdir);
 
@@ -358,7 +356,7 @@
 	KeyValue simKey = vcSimDataID.getSimulationKey();
 	SimulationJobStatus oldJobStatus = adminDbXA.getSimulationJobStatus(con, simKey, jobIndex);	
 	
-	if (oldJobStatus == null || taskID != oldJobStatus.getTaskID() || oldJobStatus.getSchedulerStatus().isDone()){
+	if (oldJobStatus == null || taskID != oldJobStatus.getTaskID() || oldJobStatus.isDone()){
 		log.print("Outdated message: taskID=" + taskID + "::" + oldJobStatus);
 		return;
 	}	
@@ -366,16 +364,16 @@
 	SimulationJobStatus newJobStatus = null;
 	
 	if (workerEvent.isAcceptedEvent()) {
-		if (!oldJobStatus.getSchedulerStatus().isRunning()) {			
+		if (!oldJobStatus.isRunning()) {			
 			newJobStatus = updateDispatchedStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 		
 	} else if (workerEvent.isStartingEvent()) {
 		// only update database when the job event changes from started to runinng. The later progress event will not be recorded.
 		SimulationMessage startMsg = workerEvent.getSimulationMessage();
-		if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
+		if (oldJobStatus.isQueued() || oldJobStatus.isDispatched()) {
 			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, false, startMsg);
-		} else if (oldJobStatus.getSchedulerStatus().isRunning()) {
+		} else if (oldJobStatus.isRunning()) {
 			newJobStatus = new SimulationJobStatus(oldJobStatus.getServerID(), oldJobStatus.getVCSimulationIdentifier(), oldJobStatus.getJobIndex(), oldJobStatus.getSubmitDate(), 
 				oldJobStatus.getSchedulerStatus(), oldJobStatus.getTaskID(), startMsg, oldJobStatus.getSimulationQueueEntryStatus(), oldJobStatus.getSimulationExecutionStatus());
 		}
@@ -388,21 +386,21 @@
 			
 	} else if (workerEvent.isProgressEvent()) {
 		newJobStatus = oldJobStatus;
-		if (oldJobStatus.getSchedulerStatus().isQueued() || oldJobStatus.getSchedulerStatus().isDispatched()) {
+		if (oldJobStatus.isQueued() || oldJobStatus.isDispatched()) {
 			newJobStatus = updateRunningStatus(oldJobStatus, adminDbXA, con, hostName, vcSimDataID.getVcSimID(), jobIndex, false, workerEvent.getSimulationMessage());
 		} else {
 			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 		
 	} else if (workerEvent.isCompletedEvent()) {			
-		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SchedulerStatus.COMPLETED, workerEvent.getSimulationMessage());
+		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SimulationJobStatus.SCHEDULERSTATUS_COMPLETED, workerEvent.getSimulationMessage());
 
 	} else if (workerEvent.isFailedEvent()) {						
 		SimulationMessage failMsg = workerEvent.getSimulationMessage();
-		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SchedulerStatus.FAILED, failMsg);	
+		newJobStatus = updateEndStatus(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, hostName, SimulationJobStatus.SCHEDULERSTATUS_FAILED, failMsg);	
 			
 	} else if (workerEvent.isWorkerAliveEvent()) {
-		if (oldJobStatus.getSchedulerStatus().isRunning()) {
+		if (oldJobStatus.isRunning()) {
 			updateLatestUpdateDate(oldJobStatus, adminDbXA, con, vcSimDataID.getVcSimID(), jobIndex, workerEvent.getSimulationMessage());
 		}
 	}
@@ -474,7 +472,7 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, String hostName, int status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateEndStatus[" + vcSimID + "][" + jobIndex + "]");
 	return dispatcherDbManager.updateEndStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, hostName, status, solverMsg);
 }
@@ -497,7 +495,7 @@
  * Creation date: (5/28/2003 3:39:37 PM)
  * @param simKey cbit.sql.KeyValue
  */
-public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException {
+public SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, java.sql.Connection con, VCSimulationIdentifier vcSimID, int jobIndex, int queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException {
 //	log.print("updateQueueStatus[" + vcSimID + "][" + jobIndex + "]");
 	return dispatcherDbManager.updateQueueStatus(oldJobStatus, adminDbXA, con, vcSimID, jobIndex, queueID, taskID, firstSubmit);		// update SimulationJobTable
 }
Index: src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/LocalDispatcherDbManager.java	(revision 11936)
@@ -11,11 +11,9 @@
 package cbit.vcell.messaging.server;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.SimulationMessage;
@@ -42,7 +40,7 @@
  */
 public SimulationJobStatus updateDispatchedStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, String computeHost, VCSimulationIdentifier vcSimID, int jobIndex, SimulationMessage startMsg) throws DataAccessException, UpdateSynchronizationException {
 	try {
-		if (oldJobStatus == null || oldJobStatus.getSchedulerStatus().isDone()) {	
+		if (oldJobStatus == null || oldJobStatus.isDone()) {	
 			int taskID = 0;
 			VCellServerID serverID = VCellServerID.getSystemServerID();
 			if (oldJobStatus != null) {
@@ -50,8 +48,8 @@
 			}
 			// no job for the same simulation running				
 			// update the job status in the database and local memory
-			SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimID, jobIndex, null, SchedulerStatus.DISPATCHED, taskID, startMsg, 
-				new SimulationQueueEntryStatus(null, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_NULL), null);
+			SimulationJobStatus newJobStatus = new SimulationJobStatus(serverID, vcSimID, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_DISPATCHED, taskID, startMsg, 
+				new SimulationQueueEntryStatus(null, MessageConstants.PRIORITY_DEFAULT, MessageConstants.QUEUE_ID_NULL), null);
 				
 			if (oldJobStatus == null) {
 				newJobStatus = adminDb.insertSimulationJobStatus(newJobStatus);
Index: src/cbit/vcell/messaging/server/AbstractJmsWorker.java
===================================================================
--- src/cbit/vcell/messaging/server/AbstractJmsWorker.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/AbstractJmsWorker.java	(revision 11936)
@@ -47,7 +47,7 @@
 	serviceType = wt;
 	maxMemoryMB = workerMem;	
 			
-	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), serviceType, workerOrdinal, ManageUtils.getHostName(), new Date(), true);
+	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID().toString(), serviceType, workerOrdinal, ManageUtils.getHostName(), new Date(), true);
 	initLog(logdir);
 	
 	log = new StdoutSessionLog(serviceInstanceStatus.getID());
Index: src/cbit/vcell/messaging/server/JmsRpcServer.java
===================================================================
--- src/cbit/vcell/messaging/server/JmsRpcServer.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/JmsRpcServer.java	(revision 11936)
@@ -33,7 +33,7 @@
  * Scheduler constructor comment.
  */
 public JmsRpcServer(ServiceType serviceType, int serviceOrdinal, String queueName, String filter, String logdir) throws Exception {
-	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), serviceType, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);
+	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID().toString(), serviceType, serviceOrdinal, ManageUtils.getHostName(), new Date(), true);
 	initLog(logdir);
 	
 	log = new org.vcell.util.StdoutSessionLog(serviceInstanceStatus.getID());	
Index: src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/MessagingDispatcherDbManager.java	(revision 11936)
@@ -12,12 +12,10 @@
 import java.sql.Connection;
 
 import org.vcell.util.DataAccessException;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 
 import cbit.vcell.server.AdminDatabaseServerXA;
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.SimulationMessage;
 
@@ -32,7 +30,7 @@
 
 
 	SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
-			VCSimulationIdentifier vcSimID, int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, String hostName, int status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
 	void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, 
@@ -40,7 +38,7 @@
 
 
 	SimulationJobStatus updateQueueStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDb, Connection con, 
-			VCSimulationIdentifier vcSimID, int jobIndex, SimulationQueueID queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException;
+			VCSimulationIdentifier vcSimID, int jobIndex, int queueID, int taskID, boolean firstSubmit) throws DataAccessException, UpdateSynchronizationException;
 
 
 	SimulationJobStatus updateRunningStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServerXA adminDbXA, Connection con, String hostName, 
Index: src/cbit/vcell/messaging/server/DispatcherDbManager.java
===================================================================
--- src/cbit/vcell/messaging/server/DispatcherDbManager.java	(revision 11937)
+++ src/cbit/vcell/messaging/server/DispatcherDbManager.java	(revision 11936)
@@ -14,7 +14,6 @@
 
 import cbit.vcell.solver.VCSimulationIdentifier;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.server.AdminDatabaseServer;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.solver.SimulationMessage;
@@ -33,7 +32,7 @@
 
 
 	SimulationJobStatus updateEndStatus(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
-		int jobIndex, String hostName, SchedulerStatus status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
+		int jobIndex, String hostName, int status, SimulationMessage solverMsg) throws DataAccessException, UpdateSynchronizationException;
 
 
 	void updateLatestUpdateDate(SimulationJobStatus oldJobStatus, AdminDatabaseServer adminDb, VCSimulationIdentifier vcSimID, 
Index: src/cbit/vcell/messaging/SimulationDispatcherMessaging.java
===================================================================
--- src/cbit/vcell/messaging/SimulationDispatcherMessaging.java	(revision 11937)
+++ src/cbit/vcell/messaging/SimulationDispatcherMessaging.java	(revision 11936)
@@ -20,7 +20,6 @@
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
-import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.KeyValue;
@@ -31,7 +30,6 @@
 import cbit.sql.KeyFactory;
 import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.messaging.db.SimulationJobStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
 import cbit.vcell.messaging.db.SimulationJobStatusInfo;
 import cbit.vcell.messaging.db.UpdateSynchronizationException;
 import cbit.vcell.messaging.server.RpcRequest;
@@ -147,7 +145,7 @@
 
 									// new job status is failed.
 									SimulationJobStatus	newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getSubmitDate(),
-										SchedulerStatus.FAILED, jobStatus.getTaskID(),
+										SimulationJobStatus.SCHEDULERSTATUS_FAILED, jobStatus.getTaskID(),
 										SimulationMessage.MESSAGE_JOB_FAILED_TOOMANYRETRIES,
 										jobStatus.getSimulationQueueEntryStatus(), jobStatus.getSimulationExecutionStatus());
 									//update the database
@@ -163,7 +161,7 @@
 
 									// increment taskid, new job status is queued
 									SimulationJobStatus newJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(), jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), jobStatus.getSubmitDate(), 
-											SchedulerStatus.QUEUED, jobStatus.getTaskID() + 1, 
+										SimulationJobStatus.SCHEDULERSTATUS_QUEUED, jobStatus.getTaskID() + 1, 
 										SimulationMessage.MESSAGE_JOB_QUEUED_RETRY, jobStatus.getSimulationQueueEntryStatus(), null);
 									
 									//update the database
@@ -314,7 +312,7 @@
 							double requiredMemMB = simTask.getEstimatedMemorySizeMB();
 							if (requiredMemMB > Double.parseDouble(PropertyLoader.getRequiredProperty(PropertyLoader.limitJobMemoryMB))) {						
 								SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(jobStatus, jobAdminXA, waitingJobDbConnection.getConnection(), 
-										jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), null, SchedulerStatus.FAILED, 
+										jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), null, SimulationJobStatus.SCHEDULERSTATUS_FAILED, 
 										SimulationMessage.jobFailed("Simulation [" + simTask.getSimulationInfo().getName() + ", " + jobStatus.getJobIndex() + "] requires approximately " + requiredMemMB + "mb memory. Exceeds current memory limit."));
 								
 								// tell client
@@ -326,7 +324,7 @@
 								taskMsg.sendSimulationTask(waitingJobDispatcher);
 								//update database
 								SimulationJobStatus newJobStatus = simDispatcher.updateQueueStatus(jobStatus, jobAdminXA, waitingJobDbConnection.getConnection(), 
-									jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), SimulationQueueID.QUEUE_ID_SIMULATIONJOB, simTask.getTaskID(), false);						
+									jobStatus.getVCSimulationIdentifier(), jobStatus.getJobIndex(), MessageConstants.QUEUE_ID_SIMULATIONJOB, simTask.getTaskID(), false);						
 								// tell client
 								StatusMessage statusMsg = new StatusMessage(newJobStatus, simTask.getUserName(), null, null);
 								statusMsg.sendToClient(waitingJobDispatcher);
@@ -518,7 +516,7 @@
 	// if the job is in simJob queue, get it out	
 	
 	// update database
-	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, null, SchedulerStatus.FAILED, failMsg);
+	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, null, SimulationJobStatus.SCHEDULERSTATUS_FAILED, failMsg);
 	
 	// tell client
 	StatusMessage message = new StatusMessage(newJobStatus, username, null, null);
@@ -531,10 +529,10 @@
  * Creation date: (10/24/2001 11:08:09 PM)
  * @param simulation cbit.vcell.solver.Simulation
  */
-private void do_start(Connection con, SimulationJobStatus oldJobStatus, SimulationTask simTask, SimulationQueueID queueID) 
+private void do_start(Connection con, SimulationJobStatus oldJobStatus, SimulationTask simTask, int queueID) 
 	throws JMSException, DataAccessException, XmlParseException {
 	// send to simulation queue, for waiting jobs, only update the database
-	if (queueID == SimulationQueueID.QUEUE_ID_SIMULATIONJOB) {
+	if (queueID == MessageConstants.QUEUE_ID_SIMULATIONJOB) {
 		SimulationTaskMessage taskMsg = new SimulationTaskMessage(simTask);
 		taskMsg.sendSimulationTask(mainJobDispatcher);
 		log.print("do_start(): send job " + simTask.getSimulationJobIdentifier() + " to simJob queue");
@@ -564,7 +562,7 @@
 	
 	// if the job is in simJob queue, get it out
 	KeyValue simKey = vcSimID.getSimulationKey();
-	if (oldJobStatus.getSchedulerStatus().isQueued()) {
+	if (oldJobStatus.isQueued()) {
 		String queueName = JmsUtils.getQueueSimJob();
 		String filter =  MessageConstants.USERNAME_PROPERTY + "='" + username + "' AND " + MessageConstants.SIMKEY_PROPERTY + "=" + simKey
 			+ " AND " + MessageConstants.JOBINDEX_PROPERTY + "=" + jobIndex;		
@@ -575,7 +573,7 @@
 	
 	// update database
 	SimulationJobStatus newJobStatus = simDispatcher.updateEndStatus(oldJobStatus, jobAdminXA, con, vcSimID, jobIndex, null, 
-			SchedulerStatus.STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
+			SimulationJobStatus.SCHEDULERSTATUS_STOPPED, SimulationMessage.MESSAGE_JOB_STOPPED);
 	
 	// tell client
 	if (!newJobStatus.compareEqual(oldJobStatus)) {
@@ -720,7 +718,7 @@
 	if (!user.equals(vcSimID.getOwner())) {
 		log.alert(user + " is not authorized to start simulation " + vcSimID);
 		StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-			SchedulerStatus.FAILED, 0, SimulationMessage.MESSAGE_JOB_FAILED_NOTAUTHORIZED, null, null), user.getName(), null, null);
+			SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.MESSAGE_JOB_FAILED_NOTAUTHORIZED, null, null), user.getName(), null, null);
 		message.sendToClient(mainJobDispatcher);
 	} else {
 		KeyValue simKey = vcSimID.getSimulationKey();
@@ -731,7 +729,7 @@
 		} catch (DataAccessException ex) {
 			log.alert("Bad simulation " + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Failed to dispatch simuation: " + ex.getMessage()), null, null), user.getName(), null, null);
+				SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed("Failed to dispatch simuation: " + ex.getMessage()), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 			return;
 		}
@@ -739,7 +737,7 @@
 			if (simulation.getScanCount() > Integer.parseInt(PropertyLoader.getRequiredProperty(PropertyLoader.maxJobsPerScan))) {
 				log.alert("Too many simulations (" + simulation.getScanCount() + ") for parameter scan." + vcSimID);
 				StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-					SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Too many simulations (" + simulation.getScanCount() 
+					SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed("Too many simulations (" + simulation.getScanCount() 
 							+ ") for parameter scan."), null, null), user.getName(), null, null);
 				message.sendToClient(mainJobDispatcher);
 				return;
@@ -755,12 +753,12 @@
 					return;
 				}
 				// if already started by another thread
-				if (oldJobStatus != null && !oldJobStatus.getSchedulerStatus().isDone()) {
+				if (oldJobStatus != null && !oldJobStatus.isDone()) {
 					log.alert("Can't start, simulation[" + vcSimID + "] job [" + i + "] is running already");
 				} else {
 					int newTaskID = oldJobStatus == null ? 0 : (oldJobStatus.getTaskID() & MessageConstants.TASKID_USERCOUNTER_MASK) + MessageConstants.TASKID_USERINCREMENT;
 					SimulationTask simTask = new SimulationTask(new SimulationJob(simulation, i, fdis), newTaskID);
-					SimulationQueueID queueID = SimulationQueueID.QUEUE_ID_WAITING;
+					int queueID = MessageConstants.QUEUE_ID_WAITING;
 					// put all the jobs to waiting first, let dispatch thread decide which to dispatch
 					do_start(con, oldJobStatus, simTask, queueID);
 				}
@@ -768,7 +766,7 @@
 		} else {
 			log.alert("Can't start, simulation [" + vcSimID + "] doesn't exist in database");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
+				SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed("Can't start, simulation [" + vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 		}
 	}
@@ -801,7 +799,7 @@
 	if (!user.equals(vcSimID.getOwner())) {
 		log.alert(user + " is not authorized to stop simulation " + vcSimID);
 		StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
-			SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
+			SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed("You are not authorized to stop this simulation!"), null, null), user.getName(), null, null);
 		message.sendToClient(mainJobDispatcher);			
 	} else {
 		KeyValue simKey = vcSimID.getSimulationKey();
@@ -811,7 +809,7 @@
 		} catch (DataAccessException ex) {
 			log.alert("Bad simulation " + vcSimID);
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed(ex.getMessage()), null, null), user.getName(), null, null);
+				SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed(ex.getMessage()), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 			return;
 		}
@@ -820,7 +818,7 @@
 				SimulationJobStatus jobStatus = jobAdminXA.getSimulationJobStatus(con, vcSimID.getSimulationKey(), i);
 
 				if (jobStatus != null) {
-					if (!jobStatus.getSchedulerStatus().isDone()) {
+					if (!jobStatus.isDone()) {
 						do_stop(con, jobStatus, user.getName(), vcSimID, i);
 					} else {
 						log.alert("Can't stop, simulation [" + vcSimID + "] job [" + i + "] already finished");
@@ -832,7 +830,7 @@
 		} else {
 			log.alert("Can't stop, simulation [" + vcSimID + "] doesn't exist in database");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, -1, null, 
-				SchedulerStatus.FAILED, 0, SimulationMessage.jobFailed("Can't stop, simulation [" + 
+				SimulationJobStatus.SCHEDULERSTATUS_FAILED, 0, SimulationMessage.jobFailed("Can't stop, simulation [" + 
 						vcSimID + "] doesn't exist"), null, null), user.getName(), null, null);
 			message.sendToClient(mainJobDispatcher);
 		}
Index: src/cbit/vcell/messaging/admin/AddNewServiceDialog.java
===================================================================
--- src/cbit/vcell/messaging/admin/AddNewServiceDialog.java	(revision 11937)
+++ src/cbit/vcell/messaging/admin/AddNewServiceDialog.java	(revision 11936)
@@ -396,7 +396,7 @@
  * @return cbit.vcell.messaging.admin.VCellServiceConfig
  */
 public ServiceSpec getServiceSpec() {
-	VCellServerID site = VCellServerID.getServerID(getSiteField().getText());
+	String site = getSiteField().getText();
 	ServiceType stype = (ServiceType)getTypeCombo().getSelectedItem();
 	int ordinal = 0;
 	try {
@@ -455,7 +455,7 @@
 public void modifyService(ServiceSpec ss) {
 	this.setTitle("Modify Service");
 	getNewButton().setText("Modify");	 
-	getSiteField().setText(ss.getServerID().toString());
+	getSiteField().setText(ss.getServerID());
 	getSiteField().setEditable(false);
 	getSiteField().setBackground(Color.white);
 	getTypeCombo().setSelectedItem(ss.getType());
Index: src/cbit/vcell/messaging/admin/ServiceSpec.java
===================================================================
--- src/cbit/vcell/messaging/admin/ServiceSpec.java	(revision 11937)
+++ src/cbit/vcell/messaging/admin/ServiceSpec.java	(revision 11936)
@@ -16,17 +16,16 @@
 import org.vcell.util.ComparableObject;
 import org.vcell.util.Matchable;
 import org.vcell.util.MessageConstants.ServiceType;
-import org.vcell.util.document.VCellServerID;
 
 
 public class ServiceSpec implements Matchable, Serializable, ComparableObject {
-	private VCellServerID serverID;
+	private String serverID;
 	private ServiceType type;
 	private int ordinal;
 	private int startupType;
 	private int memoryMB;	
 	
-	public ServiceSpec(VCellServerID sID, ServiceType t, int o, int st, int mm) {
+	public ServiceSpec(String sID, ServiceType t, int o, int st, int mm) {
 		super();
 		this.serverID = sID;
 		this.type = t;
@@ -43,7 +42,7 @@
 		return ordinal;
 	}
 
-	public VCellServerID getServerID() {
+	public String getServerID() {
 		return serverID;
 	}
 
@@ -62,8 +61,8 @@
 	public String getID() {
 		return getServiceID(serverID, type, ordinal);
 	}
-	public static String getServiceID(VCellServerID serverID, ServiceType type, int ordinal) {
-		return serverID + "_" + type.getName() + "_" + ordinal;
+	public static String getServiceID(String serverID, ServiceType type, int ordinal) {
+		return serverID.charAt(0) + "_" + type.getName() + "_" + ordinal;
 	}
 	
 	public Object[] toObjects() {
Index: src/cbit/vcell/messaging/admin/ServerManagerDaemon.java
===================================================================
--- src/cbit/vcell/messaging/admin/ServerManagerDaemon.java	(revision 11937)
+++ src/cbit/vcell/messaging/admin/ServerManagerDaemon.java	(revision 11936)
@@ -61,7 +61,7 @@
 public ServerManagerDaemon() throws IOException, SQLException, javax.jms.JMSException {
 	super();	
 	
-	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID(), ServiceType.SERVERMANAGER, 0, ManageUtils.getHostName(), new Date(), true); 
+	serviceInstanceStatus = new ServiceInstanceStatus(VCellServerID.getSystemServerID().toString(), ServiceType.SERVERMANAGER, 0, ManageUtils.getHostName(), new Date(), true); 
 	log = new StdoutSessionLog(serviceInstanceStatus.getID());
 	try {
 		conFactory = new cbit.sql.OraclePoolingConnectionFactory(log);
Index: src/cbit/vcell/messaging/admin/SimpleJobStatus.java
===================================================================
--- src/cbit/vcell/messaging/admin/SimpleJobStatus.java	(revision 11937)
+++ src/cbit/vcell/messaging/admin/SimpleJobStatus.java	(revision 11936)
@@ -40,7 +40,7 @@
 	if (getStartDate()!=null){
 		if (getEndDate()!=null){
 			this.elapsedTime = ((getEndDate().getTime()-getStartDate().getTime()));
-		}else if (jobStatus.getSchedulerStatus().isRunning()){
+		}else if (jobStatus.isRunning()){
 			this.elapsedTime = ((System.currentTimeMillis()-getStartDate().getTime()));
 		}
 	}
@@ -184,7 +184,7 @@
  * @return boolean
  */
 public boolean isDone() {
-	return jobStatus.getSchedulerStatus().isDone();
+	return jobStatus.isDone();
 }
 
 
@@ -194,7 +194,7 @@
  * @return boolean
  */
 public boolean isRunning() {
-	return jobStatus.getSchedulerStatus().isRunning();
+	return jobStatus.isRunning();
 }
 
 
Index: src/cbit/vcell/messaging/admin/ServiceInstanceStatus.java
===================================================================
--- src/cbit/vcell/messaging/admin/ServiceInstanceStatus.java	(revision 11937)
+++ src/cbit/vcell/messaging/admin/ServiceInstanceStatus.java	(revision 11936)
@@ -16,18 +16,17 @@
 import org.vcell.util.ComparableObject;
 import org.vcell.util.Matchable;
 import org.vcell.util.MessageConstants.ServiceType;
-import org.vcell.util.document.VCellServerID;
 
 
 public class ServiceInstanceStatus implements Matchable, Serializable, ComparableObject {
-	private VCellServerID serverID;
+	private String serverID;
 	private ServiceType type;
 	private int ordinal;
 	private Date startDate;
 	private String hostname;	
 	private boolean bRunning = false;
 		
-	public ServiceInstanceStatus(VCellServerID sID, ServiceType t, int o, String h, Date d, boolean br) {
+	public ServiceInstanceStatus(String sID, ServiceType t, int o, String h, Date d, boolean br) {
 		super();
 		this.serverID = sID;
 		this.type = t;
@@ -41,7 +40,7 @@
 		return ordinal;
 	}
 
-	public VCellServerID getServerID() {
+	public String getServerID() {
 		return serverID;
 	}
 
Index: src/cbit/vcell/messaging/BatchScheduler.java
===================================================================
--- src/cbit/vcell/messaging/BatchScheduler.java	(revision 11937)
+++ src/cbit/vcell/messaging/BatchScheduler.java	(revision 11936)
@@ -45,11 +45,11 @@
 	for (int i = 0; i < allActiveJobs.length; i++){
 		jobStatus = allActiveJobs[i].getSimJobStatus();
 
-		if (!jobStatus.getSchedulerStatus().isActive()) {
+		if (!jobStatus.isActive()) {
 			continue;
 		}
 		
-		if (jobStatus.getSchedulerStatus().isWaiting()) {
+		if (jobStatus.isWaiting()) {
 			continue;  // we only do statistics on running jobs;
 		}
 		
@@ -79,7 +79,7 @@
 	for (int i = 0; i < allActiveJobs.length; i++){
 		jobStatus = allActiveJobs[i].getSimJobStatus();
 			
-		if (!jobStatus.getSchedulerStatus().isWaiting()) {
+		if (!jobStatus.isWaiting()) {
 			continue; // ignore non-waiting job
 		}
 			
Index: src/cbit/vcell/field/FieldDataIdentifierSpec.java
===================================================================
--- src/cbit/vcell/field/FieldDataIdentifierSpec.java	(revision 11937)
+++ src/cbit/vcell/field/FieldDataIdentifierSpec.java	(revision 11936)
@@ -10,7 +10,6 @@
 
 package cbit.vcell.field;
 
-import org.vcell.util.Matchable;
 import org.vcell.util.document.ExternalDataIdentifier;
 
 import cbit.vcell.parser.ExpressionException;
@@ -21,7 +20,7 @@
  * Creation date: (9/18/2006 12:55:46 PM)
  * @author: Jim Schaff
  */
-public class FieldDataIdentifierSpec implements java.io.Serializable, Matchable  {
+public class FieldDataIdentifierSpec implements java.io.Serializable  {
 	private FieldFunctionArguments fieldFuncArgs;
 	private ExternalDataIdentifier extDataID;
 
@@ -92,14 +91,4 @@
 		&&
 		getExternalDataIdentifier().equals(fdiSpec.getExternalDataIdentifier());
 }
-
-public boolean compareEqual(Matchable obj) {
-	if (obj instanceof FieldDataIdentifierSpec){
-		FieldDataIdentifierSpec other = (FieldDataIdentifierSpec)obj;
-		if (other.toCSVString().equals(toCSVString())){
-			return true;
-		}
-	}
-	return false;
 }
-}
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 11937)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 11936)
@@ -630,7 +630,7 @@
 		dbObject.put(MongoMessage_simId,newSimulationJobStatus.getVCSimulationIdentifier().getSimulationKey().toString());
 		dbObject.put(MongoMessage_taskId, newSimulationJobStatus.getTaskID());
 		dbObject.put(MongoMessage_jobIndex, newSimulationJobStatus.getJobIndex());
-		dbObject.put(MongoMessage_schedulerStatus, newSimulationJobStatus.getSchedulerStatus().getDescription());
+		dbObject.put(MongoMessage_schedulerStatus, newSimulationJobStatus.getSchedulerStatusDescription());
 		dbObject.put(MongoMessage_serverId, newSimulationJobStatus.getServerID().toString());
 		if (newSimulationJobStatus.getTimeDateStamp()!=null){
 			dbObject.put(MongoMessage_simJobStatusTimeStamp,newSimulationJobStatus.getTimeDateStamp().getTime());
Index: src/cbit/vcell/parser/Expression.java
===================================================================
--- src/cbit/vcell/parser/Expression.java	(revision 11937)
+++ src/cbit/vcell/parser/Expression.java	(revision 11936)
@@ -70,6 +70,7 @@
 	ASTFloatNode denominator = new ASTFloatNode(value.getDenBigInteger().doubleValue());
 	invNode.jjtAddChild(denominator);
 	this.rootNode.jjtAddChild(invNode, 1);
+	this.normalizedInfixString = value.toString();
 }
 
 
Index: src/cbit/vcell/xml/XmlHelper.java
===================================================================
--- src/cbit/vcell/xml/XmlHelper.java	(revision 11937)
+++ src/cbit/vcell/xml/XmlHelper.java	(revision 11936)
@@ -15,15 +15,12 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
-import java.util.ArrayList;
 import java.util.Hashtable;
-import java.util.List;
 
 import org.jdom.Comment;
 import org.jdom.Document;
 import org.jdom.Element;
 import org.jdom.Namespace;
-import org.jdom.Text;
 import org.vcell.cellml.CellQuanVCTranslator;
 import org.vcell.sbml.vcell.MathModel_SBMLExporter;
 import org.vcell.sbml.vcell.SBMLExporter;
@@ -47,7 +44,6 @@
 import cbit.vcell.biomodel.meta.xml.XMLMetaDataWriter;
 import cbit.vcell.client.TopLevelWindowManager;
 import cbit.vcell.clientdb.DocumentManager;
-import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.geometry.Geometry;
 import cbit.vcell.mapping.MathMapping;
 import cbit.vcell.mapping.MathSymbolMapping;
@@ -55,7 +51,6 @@
 import cbit.vcell.math.MathDescription;
 import cbit.vcell.math.MathException;
 import cbit.vcell.mathmodel.MathModel;
-import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.model.Kinetics;
 import cbit.vcell.model.ModelUnitConverter;
 import cbit.vcell.model.ModelUnitSystem;
@@ -853,119 +848,5 @@
 	return bioModel;
 }
 
-private static final String SimulationTask_tag = "SimulationTask";
-private static final String FieldFunctionIdentifierSpec_tag = "FieldFunctionIdentifierSpec"; 
-private static final String ComputeResource_tag = "ComputeResource";
-private static final String TaskId_attr = "TaskId";
-private static final String JobIndex_attr = "JobIndex";
-
-public static String simTaskToXML(SimulationTask simTask) throws XmlParseException {
-
-	String simTaskString = null;
-	
-	if (simTask == null) {
-		throw new XmlParseException("Invalid input for SimulationTask: " + simTask);
-	}
-	Xmlproducer xmlProducer = new Xmlproducer(true);
-	
-	SimulationJob simJob = simTask.getSimulationJob();
-	Simulation sim = simJob.getSimulation();
-	
-	Element container = new Element(SimulationTask_tag); 
-	int taskId = simTask.getTaskID();
-	container.setAttribute(TaskId_attr, ""+taskId);
-	int jobIndex = simJob.getJobIndex();
-	container.setAttribute(JobIndex_attr, ""+jobIndex);
-
-	String computeResource = simTask.getComputeResource();
-	if (computeResource!=null){
-		Element computeResourceElement = new Element(ComputeResource_tag);
-		Text text = new Text(computeResource);
-		computeResourceElement.addContent(text);
-		container.addContent(computeResourceElement);
-	}
-
-	FieldDataIdentifierSpec[] fdisSpecs = simJob.getFieldDataIdentifierSpecs();
-	if (fdisSpecs!=null){
-		for (FieldDataIdentifierSpec fdisSpec : fdisSpecs){
-			Element fdisElement = new Element(FieldFunctionIdentifierSpec_tag);
-			fdisElement.setText(fdisSpec.toCSVString());
-			container.addContent(fdisElement);
-		}
-	}
-	
-	MathDescription md = sim.getMathDescription();
-	Element mathElement = xmlProducer.getXML(md);
-	container.addContent(mathElement);
-
-	Element simElement = xmlProducer.getXML(sim);
-	container.addContent(simElement);
-
-	Geometry geom = md.getGeometry();    
-	if (geom != null) {
-		Element geomElement = xmlProducer.getXML(geom);
-		container.addContent(geomElement);
-	} else {
-		System.err.println("No corresponding geometry for the simulation: " + sim.getName());
-	}
-	
-	container = XmlUtil.setDefaultNamespace(container, Namespace.getNamespace(XMLTags.VCML_NS));		
-	simTaskString = XmlUtil.xmlToString(container);
-	
-	return simTaskString;
 }
 
-public static SimulationTask XMLToSimTask(String xmlString) throws XmlParseException, ExpressionException {
-
-	Namespace ns = Namespace.getNamespace(XMLTags.VCML_NS);
-	
-	try {
-		if (xmlString == null || xmlString.length() == 0) {
-			throw new XmlParseException("Invalid xml for Simulation: " + xmlString);
-		}
-		Element root =  (XmlUtil.stringToXML(xmlString, null)).getRootElement();     //default parser and no validation
-		if (!root.getName().equals(SimulationTask_tag)){
-			throw new RuntimeException("expecting top level element to be "+SimulationTask_tag);
-		}
-		int taskId = Integer.parseInt(root.getAttributeValue(TaskId_attr));
-		int jobIndex = Integer.parseInt(root.getAttributeValue(JobIndex_attr));
-		String computeResource = root.getChildTextTrim(ComputeResource_tag, ns);
-		
-		List children = root.getChildren(FieldFunctionIdentifierSpec_tag, ns);
-		ArrayList<FieldDataIdentifierSpec> fdisArrayList = new ArrayList<FieldDataIdentifierSpec>();
-		for (Object child : children){
-			if (child instanceof Element){
-				String fdisText = ((Element)child).getTextTrim();
-				FieldDataIdentifierSpec fdis = FieldDataIdentifierSpec.fromCSVString(fdisText);
-				fdisArrayList.add(fdis);
-			}
-		}
-		FieldDataIdentifierSpec[] fdisArray = fdisArrayList.toArray(new FieldDataIdentifierSpec[0]);
-		
-		Element simElement = root.getChild(XMLTags.SimulationTag, ns);
-		Element mdElement = root.getChild(XMLTags.MathDescriptionTag, ns);
-		Element geomElement = root.getChild(XMLTags.GeometryTag, ns);
-		XmlReader reader = new XmlReader(true, ns);
-		MathDescription md = reader.getMathDescription(mdElement);
-		if (geomElement != null) {
-			Geometry geom = reader.getGeometry(geomElement);
-			md.setGeometry(geom);
-		}
-		Simulation sim = reader.getSimulation(simElement, md);
-		sim.refreshDependencies();
-		
-		SimulationJob simJob = new SimulationJob(sim,jobIndex,fdisArray);
-		SimulationTask simTask = new SimulationTask(simJob,taskId,computeResource);
-		return simTask;
-		
-	} catch (PropertyVetoException pve) {
-		pve.printStackTrace();
-		throw new XmlParseException("Unable to parse simulation string.", pve);
-	}
-}
-
-
-
-
-}
-
Index: src/cbit/vcell/client/server/ClientJobManager.java
===================================================================
--- src/cbit/vcell/client/server/ClientJobManager.java	(revision 11937)
+++ src/cbit/vcell/client/server/ClientJobManager.java	(revision 11936)
@@ -143,7 +143,7 @@
 public void simulationJobStatusChanged(cbit.rmi.event.SimulationJobStatusEvent simJobStatusEvent) {
 	try {
 		getClientServerManager().getDocumentManager().updateServerSimulationStatusFromJobEvent(simJobStatusEvent);
-		fireSimStatusEvent(new SimStatusEvent(this, simJobStatusEvent.getVCSimulationIdentifier(), simJobStatusEvent.getTimepoint() != null, simJobStatusEvent.getJobStatus().getSchedulerStatus().isFailed(), simJobStatusEvent.getJobStatus().getJobIndex()));
+		fireSimStatusEvent(new SimStatusEvent(this, simJobStatusEvent.getVCSimulationIdentifier(), simJobStatusEvent.getTimepoint() != null, simJobStatusEvent.getJobStatus().isFailed(), simJobStatusEvent.getJobStatus().getJobIndex()));
 	} catch (Exception e) {
 		e.printStackTrace();
 	}
Index: src/cbit/vcell/client/desktop/simulation/SimulationStatusDetails.java
===================================================================
--- src/cbit/vcell/client/desktop/simulation/SimulationStatusDetails.java	(revision 11937)
+++ src/cbit/vcell/client/desktop/simulation/SimulationStatusDetails.java	(revision 11936)
@@ -70,7 +70,7 @@
 		SimulationJobStatus jobStatus = simStatus.getJobStatus(index);
 		Double progress = simStatus.getProgressAt(index);
 		if (jobStatus != null) {
-			if (progress != null && jobStatus.getSchedulerStatus().isRunning() && progress.doubleValue() > 0 ) {
+			if (progress != null && jobStatus.isRunning() && progress.doubleValue() > 0 ) {
 				statusBars[index].setValue((int)(progress.doubleValue() * 100));
 				return statusBars[index];
 			} else {
Index: src/cbit/rmi/event/SimulationJobStatusEvent.java
===================================================================
--- src/cbit/rmi/event/SimulationJobStatusEvent.java	(revision 11937)
+++ src/cbit/rmi/event/SimulationJobStatusEvent.java	(revision 11936)
@@ -101,8 +101,6 @@
 
 	return jobStatus.getVCSimulationIdentifier();
 }
-
-@Override
 public boolean isSupercededBy(MessageEvent messageEvent) {
 	if (messageEvent instanceof SimulationJobStatusEvent){
 		SimulationJobStatusEvent simulationJobStatusEvent = (SimulationJobStatusEvent)messageEvent;
@@ -111,7 +109,7 @@
 		if (jobStatus != null && jobStatus2 != null 
 				&& jobStatus.getVCSimulationIdentifier().equals(jobStatus2.getVCSimulationIdentifier()) 
 				&& jobStatus.getJobIndex() == jobStatus2.getJobIndex()) {
-			if (jobStatus.getSchedulerStatus().isRunning() && getProgress() != null && jobStatus2.getSchedulerStatus().isRunning() && simulationJobStatusEvent.getProgress() !=null){
+			if (jobStatus.isRunning() && getProgress() != null && jobStatus2.isRunning() && simulationJobStatusEvent.getProgress() !=null){
 				if (getProgress()<simulationJobStatusEvent.getProgress()){
 					return true;
 				}
Index: src/org/vcell/util/FileUtils.java
===================================================================
--- src/org/vcell/util/FileUtils.java	(revision 11937)
+++ src/org/vcell/util/FileUtils.java	(revision 11936)
@@ -53,8 +53,9 @@
         }
 
         // ensure that parent dir of dest file exists!
-        File parent = destFile.getParentFile();
-        if (parent!=null && !parent.exists()) {
+        // not using getParentFile method to stay 1.1 compat
+        File parent = new File(destFile.getParent());
+        if (!parent.exists()) {
             parent.mkdirs();
         }
 
@@ -212,21 +213,4 @@
     }
 }
 
-public static void deleteFile(String filePath) throws IOException {
-	File f = new File(filePath);
-	if (!f.exists()) {
-		throw new IOException("File \""+filePath+"\" does not exist.");
-	}
-	if (!f.canWrite()) {
-		throw new IOException("File \""+filePath+"\" is write protected.");
-	}	
-	if (f.isDirectory()) {
-		throw new IOException("File \""+filePath+"\" is a directory, and I'm currently programmed to balk at deleting whole directories.");
-	}
-	boolean bSuccess = f.delete();
-	if (!bSuccess) {
-		throw new IOException("File \""+filePath+"\" deletion attempt failed.");
-	}
 }
-
-}
Index: src/org/vcell/util/document/VCellServerID.java
===================================================================
--- src/org/vcell/util/document/VCellServerID.java	(revision 11937)
+++ src/org/vcell/util/document/VCellServerID.java	(revision 11936)
@@ -87,9 +87,4 @@
 public String toString() {
 	return serverID;
 }
-
-
-public String toCamelCase() {
-	return serverID.toUpperCase().charAt(0)+serverID.substring(1).toLowerCase();
 }
-}
Index: src/org/vcell/util/MessageConstants.java
===================================================================
--- src/org/vcell/util/MessageConstants.java	(revision 11937)
+++ src/org/vcell/util/MessageConstants.java	(revision 11936)
@@ -41,9 +41,9 @@
 	public static final String MESSAGE_TYPE_RPC_SERVICE_VALUE = "RPCService";
 	public static final String MESSAGE_TYPE_EXPORT_EVENT_VALUE = "ExportEvent";
 	public static final String MESSAGE_TYPE_DATA_EVENT_VALUE = "DataEvent";
-	public static final String MESSAGE_TYPE_STOPSIMULATION_VALUE	= "StopSimulation";	
 	
 	public static final String MESSAGE_TYPE_PROPERTY	= "MessageType";
+	public static final String MESSAGE_TYPE_STOPSIMULATION_VALUE	= "StopSimulation";	
 
 	public static final String COMPUTE_RESOURCE_PROPERTY	= "ComputeResource";	
 	
@@ -87,32 +87,9 @@
 	public static final int PRIORITY_DEFAULT = 5;
 	public static final int PRIORITY_HIGH = 9;
 
-	public enum SimulationQueueID {
-		QUEUE_ID_WAITING(0),
-		QUEUE_ID_SIMULATIONJOB(1),
-		QUEUE_ID_NULL(2);
-		
-		private int databaseNumber;
-		private SimulationQueueID(int databaseNumber){
-			this.databaseNumber = databaseNumber;
-		}
-		
-		public int getDatabaseNumber(){
-			return this.databaseNumber;
-		}
-		
-		public static SimulationQueueID fromDatabaseNumber(int databaseNumber){
-			if (databaseNumber == QUEUE_ID_NULL.databaseNumber){
-				return QUEUE_ID_NULL;
-			}else if (databaseNumber == QUEUE_ID_SIMULATIONJOB.databaseNumber){
-				return QUEUE_ID_SIMULATIONJOB;
-			}else if (databaseNumber == QUEUE_ID_WAITING.databaseNumber){
-				return QUEUE_ID_WAITING;
-			}else{
-				return null;
-			}
-		}
-	};
+	public static final int QUEUE_ID_WAITING = 0;
+	public static final int QUEUE_ID_SIMULATIONJOB = 1;
+	public static final int QUEUE_ID_NULL = 2;
 
 	public static final int SECOND_IN_MS = 1000; // in milliseconds
 	public static final int MINUTE_IN_S = 60;
