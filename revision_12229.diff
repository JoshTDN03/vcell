Index: src/cbit/vcell/message/jms/test/TestRPC.java
===================================================================
--- src/cbit/vcell/message/jms/test/TestRPC.java	(revision 12229)
+++ src/cbit/vcell/message/jms/test/TestRPC.java	(revision 12228)
@@ -1,16 +1,21 @@
 package cbit.vcell.message.jms.test;
 
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 
+import cbit.vcell.message.RollbackException;
+import cbit.vcell.message.VCMessage;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingInvocationTargetException;
 import cbit.vcell.message.VCMessagingService;
+import cbit.vcell.message.VCMessagingService.VCMessagingDelegate;
+import cbit.vcell.message.VCQueueConsumer;
+import cbit.vcell.message.VCQueueConsumer.QueueListener;
 import cbit.vcell.message.VCRpcConsumer;
 import cbit.vcell.message.VCRpcRequest;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
 /**
  * Hello world!
Index: src/cbit/vcell/message/jms/MessageProducerSessionJms.java
===================================================================
--- src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 12229)
+++ src/cbit/vcell/message/jms/MessageProducerSessionJms.java	(revision 12228)
@@ -13,6 +13,8 @@
 import javax.jms.Session;
 import javax.jms.TemporaryQueue;
 
+import org.vcell.util.MessageConstants;
+
 import cbit.vcell.message.VCMessage;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingException;
@@ -20,7 +22,6 @@
 import cbit.vcell.message.VCRpcRequest;
 import cbit.vcell.message.VCellQueue;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.mongodb.VCMongoMessage;
 
 public class MessageProducerSessionJms implements VCMessageSession {
Index: src/cbit/vcell/message/jms/ConsumerContextJms.java
===================================================================
--- src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12229)
+++ src/cbit/vcell/message/jms/ConsumerContextJms.java	(revision 12228)
@@ -14,6 +14,7 @@
 import javax.jms.Queue;
 import javax.jms.Session;
 
+import org.vcell.util.MessageConstants;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
 
@@ -26,7 +27,6 @@
 import cbit.vcell.message.VCRpcRequest;
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.mongodb.VCMongoMessage;
 
 public class ConsumerContextJms implements Runnable {
Index: src/cbit/vcell/message/VCRpcRequest.java
===================================================================
--- src/cbit/vcell/message/VCRpcRequest.java	(revision 12229)
+++ src/cbit/vcell/message/VCRpcRequest.java	(revision 12228)
@@ -15,13 +15,12 @@
 import javax.jms.JMSException;
 
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.ObjectNotFoundException;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.User;
 
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
-
 /**
  * Insert the type's description here.
  * Creation date: (5/13/2003 1:41:34 PM)
Index: src/cbit/vcell/message/server/console/ServerManageConsole.java
===================================================================
--- src/cbit/vcell/message/server/console/ServerManageConsole.java	(revision 12229)
+++ src/cbit/vcell/message/server/console/ServerManageConsole.java	(revision 12228)
@@ -9,6 +9,12 @@
  */
 
 package cbit.vcell.message.server.console;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_PROPERTY;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
+
 import java.awt.BorderLayout;
 import java.awt.Color;
 import java.awt.FlowLayout;
@@ -54,6 +60,8 @@
 import javax.swing.Timer;
 
 import org.vcell.util.BigString;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -75,12 +83,10 @@
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
+import cbit.vcell.message.server.ManageConstants;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceSpec;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.ServiceStatus;
-import cbit.vcell.message.server.ServiceStatus.ServiceStatusType;
 import cbit.vcell.message.server.bootstrap.RpcDbServerProxy;
 import cbit.vcell.message.server.bootstrap.RpcSimServerProxy;
 import cbit.vcell.messaging.db.SimpleJobStatus;
@@ -303,7 +309,7 @@
 	
 	if (dialog.isAction()) {
 		ServiceSpec ss = dialog.getServiceSpec();
-		ServiceStatus config = new ServiceStatus(ss, null, ServiceStatusType.ServiceNotRunning, "newly created",	null);
+		ServiceStatus config = new ServiceStatus(ss, null, ManageConstants.SERVICE_STATUS_NOTRUNNING, "newly created",	null);
 		try {
 			config = adminDbTop.insertServiceStatus(config, true);
 		} catch (Exception e) {
@@ -347,7 +353,7 @@
 		if (newSpec.getMemoryMB() == oldSpec.getMemoryMB() && newSpec.getStartupType() == oldSpec.getStartupType()) {
 			return;
 		}
-		ServiceStatus newConfig = new ServiceStatus(newSpec, null, ServiceStatusType.ServiceNotRunning, "newly modified",	null);
+		ServiceStatus newConfig = new ServiceStatus(newSpec, null, ManageConstants.SERVICE_STATUS_NOTRUNNING, "newly modified",	null);
 		try {
 			newConfig = adminDbTop.modifyServiceStatus(oldConfig, newConfig, true);
 			stopService(newConfig.getServiceSpec());						
@@ -2194,7 +2200,7 @@
 private void pingAll(int waitingTimeSec) {
 	try {
 		VCMessage msg = vcMessaging_daemonTopicProducerSession.createMessage();
-		msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE);		
+		msg.setStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY, ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE);		
 		log.print("sending ping message [" + msg.show() + "]");		
 		vcMessaging_daemonTopicProducerSession.sendTopicMessage(VCellTopic.DaemonControlTopic, msg);
 		try {
@@ -2575,13 +2581,13 @@
 		@Override
 		public void onTopicMessage(VCMessage vcMessage, VCMessageSession session) {
 			log.print("onMessage [" + vcMessage.show() + "]");	
-			String msgType = vcMessage.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
+			String msgType = vcMessage.getStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY);
 			
 			if (msgType == null) {
 				return;
 			}
 			
-			if (msgType.equals(MessageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE) && vcMessage.getObjectContent()!=null) {			
+			if (msgType.equals(ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE) && vcMessage.getObjectContent()!=null) {			
 				Object obj = vcMessage.getObjectContent();
 				if (obj instanceof ServiceInstanceStatus) {
 					final ServiceInstanceStatus serviceInfo = (ServiceInstanceStatus)obj;
@@ -2595,11 +2601,11 @@
 		}
 	};
 
-	String filter = MessageConstants.MESSAGE_TYPE_PROPERTY + " NOT IN " 
-			+ "('" + MessageConstants.MESSAGE_TYPE_IAMALIVE_VALUE + "'" 
-			+ ",'" + MessageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE + "'" 
-			+ ",'" + MessageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE + "'"
-			+ ",'" + MessageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE + "'"
+	String filter = MESSAGE_TYPE_PROPERTY + " NOT IN " 
+			+ "('" + MESSAGE_TYPE_IAMALIVE_VALUE + "'" 
+			+ ",'" + MESSAGE_TYPE_ISSERVICEALIVE_VALUE + "'" 
+			+ ",'" + MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE + "'"
+			+ ",'" + MESSAGE_TYPE_STOPSERVICE_VALUE + "'"
 			+ ")";
 	VCMessageSelector selector = vcMessagingService.createSelector(filter);
 	String threadName = "Daemon Control Topic Consumer";
@@ -2784,7 +2790,7 @@
 			username = MessageConstants.USERNAME_PROPERTY_VALUE_ALL;
 		}
 			
-		msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE);
+		msg.setStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY, ManageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE);
 		msg.setStringProperty(MessageConstants.USERNAME_PROPERTY, username);
 		
 		log.print("sending broadcast message [" + msg.show() + "]");		
@@ -2927,7 +2933,7 @@
 		}			
 		VCMessage msg = vcMessaging_daemonTopicProducerSession.createMessage();
 			
-		msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE);
+		msg.setStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY, ManageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE);
 			
 		log.print("sending refresh server manager message [" + msg.show() + "]");		
 		vcMessaging_daemonTopicProducerSession.sendTopicMessage(VCellTopic.DaemonControlTopic,msg);
@@ -2967,8 +2973,8 @@
 private void sendStopMessage(String serviceInstanceID) throws VCMessagingException {
 	VCMessage msg = vcMessaging_daemonTopicProducerSession.createMessage();
 	
-	msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE);
-	msg.setStringProperty(MessageConstants.SERVICE_ID_PROPERTY, serviceInstanceID);
+	msg.setStringProperty(ManageConstants.MESSAGE_TYPE_PROPERTY, ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE);
+	msg.setStringProperty(ManageConstants.SERVICE_ID_PROPERTY, serviceInstanceID);
 	
 	log.print("sending stop service message [" + msg.show() + "]");		
 	vcMessaging_daemonTopicProducerSession.sendTopicMessage(VCellTopic.DaemonControlTopic,msg);
Index: src/cbit/vcell/message/server/console/ServiceInstanceStatusTableModel.java
===================================================================
--- src/cbit/vcell/message/server/console/ServiceInstanceStatusTableModel.java	(revision 12229)
+++ src/cbit/vcell/message/server/console/ServiceInstanceStatusTableModel.java	(revision 12228)
@@ -14,10 +14,10 @@
 import java.util.Date;
 
 import org.vcell.util.ComparableObject;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.gui.sorttable.ColumnComparator;
 
 import cbit.vcell.client.desktop.biomodel.VCellSortTableModel;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
 
 /**
Index: src/cbit/vcell/message/server/console/AddNewServiceDialog.java
===================================================================
--- src/cbit/vcell/message/server/console/AddNewServiceDialog.java	(revision 12229)
+++ src/cbit/vcell/message/server/console/AddNewServiceDialog.java	(revision 12228)
@@ -12,14 +12,13 @@
 
 import java.awt.Color;
 
-import javax.swing.JLabel;
-import javax.swing.JPanel;
+import javax.swing.*;
 
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.VCellServerID;
 
+import cbit.vcell.message.server.ManageConstants;
 import cbit.vcell.message.server.ServiceSpec;
-import cbit.vcell.message.server.ServiceSpec.ServiceStartupType;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
 
 /**
@@ -298,8 +297,8 @@
 	if (ivjStartupCombo == null) {
 		try {
 			ivjStartupCombo = new javax.swing.JComboBox();
-			for (ServiceStartupType serviceStartupType : ServiceStartupType.values()){
-				ivjStartupCombo.addItem(serviceStartupType.getDescription());
+			for (int i = 0; i < ManageConstants.SERVICE_STARTUP_TYPES.length; i ++) {
+				ivjStartupCombo.addItem(ManageConstants.SERVICE_STARTUP_TYPES[i]);
 			}			
 			ivjStartupCombo.setSelectedIndex(0);
 			// user code begin {1}
@@ -408,7 +407,7 @@
 	} catch (NumberFormatException ex) {
 		throw new RuntimeException("Ordinal must be a number!");		
 	}
-	ServiceStartupType startup = ServiceStartupType.fromDescription((String)getStartupCombo().getSelectedItem());
+	int startup = getStartupCombo().getSelectedIndex();
 	int memoryMB = Integer.parseInt(getMemoryMBField().getText());
 
 	return new ServiceSpec(site, stype, ordinal, startup, memoryMB);
@@ -468,7 +467,7 @@
 	getOrdinalCombo().setSelectedItem(ss.getOrdinal());
 	getOrdinalCombo().setEnabled(false);
 	getOrdinalCombo().setBackground(Color.white);
-	getStartupCombo().setSelectedItem(ss.getStartupType().getDescription());
+	getStartupCombo().setSelectedIndex(ss.getStartupType());
 	getMemoryMBField().setText(ss.getMemoryMB() + "");
 }
 /**
Index: src/cbit/vcell/message/server/console/ServiceStatusTableModel.java
===================================================================
--- src/cbit/vcell/message/server/console/ServiceStatusTableModel.java	(revision 12229)
+++ src/cbit/vcell/message/server/console/ServiceStatusTableModel.java	(revision 12228)
@@ -14,10 +14,10 @@
 import java.util.Date;
 
 import org.vcell.util.ComparableObject;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.gui.sorttable.ColumnComparator;
 
 import cbit.vcell.client.desktop.biomodel.VCellSortTableModel;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
 
 /**
Index: src/cbit/vcell/message/server/ServiceStatus.java
===================================================================
--- src/cbit/vcell/message/server/ServiceStatus.java	(revision 12229)
+++ src/cbit/vcell/message/server/ServiceStatus.java	(revision 12228)
@@ -19,66 +19,20 @@
 
 import cbit.vcell.message.server.htc.HtcJobID;
 
+import static cbit.vcell.message.server.ManageConstants.*;
+
 public class ServiceStatus implements ComparableObject, Matchable, Serializable {
 	private ServiceSpec serviceSpec = null;
 	private Date date = null;
-	private ServiceStatusType serviceStatusType;
+	private int status;
 	private String statusMsg;
 	private HtcJobID htcJobId;
 	
-	//
-	//	public static final int SERVICE_STATUS_RUNNING = 0;	// restart it if the service is dead 
-	//	public static final int SERVICE_STATUS_NOTRUNNING = 1;	// restart it if the service is dead
-	//	public static final int SERVICE_STATUS_FAILED = 2; 	
-	//
-	//	public static final String[] SERVICE_STATUSES = {"running", "not running", "failed"};
-	//
-
-	public enum ServiceStatusType {
-		ServiceRunning(0,"running"),
-		ServiceNotRunning(1,"not running"),
-		ServiceFailed(2,"failed");
-		
-		final int databaseNumber;
-		final String description;
-		
-		private ServiceStatusType(int databaseNumber, String description){
-			this.databaseNumber = databaseNumber;
-			this.description = description;
-		}
-		
-		public int getDatabaseNumber(){
-			return databaseNumber;
-		}
-		public String getDescription(){
-			return description;
-		}
-	
-		public boolean isRunning() {
-			return this == ServiceRunning;
-		}
-		public boolean isNotRunning() {
-			return this == ServiceNotRunning;
-		}
-		public boolean isFailed() {
-			return this == ServiceFailed;
-		}
-	
-		public static ServiceStatusType fromDatabaseNumber(int databaseType) {
-			for (ServiceStatusType type : values()){
-				if (type.getDatabaseNumber() == databaseType){
-					return type;
-				}
-			}
-			throw new RuntimeException("unknown database serialization for ServiceStatusType = "+databaseType);
-		}
-	}	
-	
-	public ServiceStatus(ServiceSpec ss, Date d, ServiceStatusType serviceStatusType, String sm, HtcJobID htcJobID) {
+	public ServiceStatus(ServiceSpec ss, Date d, int s, String sm, HtcJobID htcJobID) {
 		super();
 		this.serviceSpec = ss;
 		this.date = d;
-		this.serviceStatusType = serviceStatusType;
+		this.status = s;
 		this.statusMsg = sm;
 		this.htcJobId = htcJobID;
 	}
@@ -91,17 +45,20 @@
 		return serviceSpec;
 	}
 
-	public ServiceStatusType getStatus() {
-		return this.serviceStatusType;
+	public int getStatus() {
+		return status;
 	}
 
 	public String getStatusMsg() {
 		return statusMsg;
 	}
 	
+	public boolean isRunning() {
+		return status == ManageConstants.SERVICE_STATUS_RUNNING;
+	}
 	public Object[] toObjects(){
 		return new Object[]{serviceSpec.getServerID(), serviceSpec.getType(), serviceSpec.getOrdinal(), 
-				serviceSpec.getStartupType().getDescription(), serviceSpec.getMemoryMB(), date, serviceStatusType.getDescription(), statusMsg, htcJobId};		
+				SERVICE_STARTUP_TYPES[serviceSpec.getStartupType()], serviceSpec.getMemoryMB(), date, SERVICE_STATUSES[status], statusMsg, htcJobId};		
 	}
 
 	public boolean equals(Object obj) {
@@ -121,7 +78,7 @@
 			if (!date.equals(ss.date)) {
 				return false;
 			}
-			if (serviceStatusType != ss.serviceStatusType) {
+			if (status != ss.status) {
 				return false;
 			}
 			if (!statusMsg.equals(ss.statusMsg)) {
Index: src/cbit/vcell/message/server/ManageConstants.java
===================================================================
--- src/cbit/vcell/message/server/ManageConstants.java	(revision 0)
+++ src/cbit/vcell/message/server/ManageConstants.java	(revision 12228)
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package cbit.vcell.message.server;
+import org.vcell.util.MessageConstants;
+
+/**
+ * Insert the type's description here.
+ * Creation date: (8/8/2003 10:23:15 AM)
+ * @author: Fei Gao
+ */
+public interface ManageConstants {
+	public static final long INTERVAL_PING_SERVICE = 10 * MessageConstants.MINUTE_IN_MS; // in minutes
+	public static final long INTERVAL_PING_RESPONSE = 10 * MessageConstants.SECOND_IN_MS; // in milliseconds
+
+	public static final String MESSAGE_TYPE_PROPERTY = MessageConstants.MESSAGE_TYPE_PROPERTY;
+	public static final String MESSAGE_TYPE_ISSERVICEALIVE_VALUE	= "IsServiceAlive";
+	public static final String MESSAGE_TYPE_IAMALIVE_VALUE	= "IAmAlive";		
+	public static final String MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE	= "AskPerformance";
+	public static final String MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE	= "RefreshServerManager";
+	public static final String MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE	= "ReplyPerformance";
+//	public static final String MESSAGE_TYPE_STARTSERVICE_VALUE	= "StartService";
+	public static final String MESSAGE_TYPE_STOPSERVICE_VALUE	= "StopService";
+
+	public static final String MESSAGE_TYPE_BROADCASTMESSAGE_VALUE	= "BroadcastMessage";
+	public static final String BROADCASTMESSAGE_CONTENT_PROPERTY = "BroadcastMessageContent";
+
+	public static final String FILE_NAME_PROPERTY = "FileName";
+	public static final String FILE_LENGTH_PROPERTY = "FileLength";
+	
+	public static final int SERVICE_STARTUPTYPE_AUTOMATIC = 0;	// restart it if the service is dead 
+	public static final int SERVICE_STARTUPTYPE_MANUAL = 1;
+	
+	public static final String[] SERVICE_STARTUP_TYPES = {"automatic", "manual"};
+
+	public static final int SERVICE_STATUS_RUNNING = 0;	// restart it if the service is dead 
+	public static final int SERVICE_STATUS_NOTRUNNING = 1;	// restart it if the service is dead
+	public static final int SERVICE_STATUS_FAILED = 2; 	
+
+	public static final String[] SERVICE_STATUSES = {"running", "not running", "failed"};
+	
+	public static final String SERVICE_ID_PROPERTY	= "ServiceID";
+	
+	public static final String SERVERID_RELEASE = "REL";
+	public static final String SERVERID_ALPHA = "ALPHA";
+	public static final String SERVERID_BETA = "BETA";
+	
+	public static final String AllSites[] = {SERVERID_ALPHA, SERVERID_BETA, SERVERID_RELEASE};	
+}
Index: src/cbit/vcell/message/server/db/DatabaseServer.java
===================================================================
--- src/cbit/vcell/message/server/db/DatabaseServer.java	(revision 12229)
+++ src/cbit/vcell/message/server/db/DatabaseServer.java	(revision 12228)
@@ -11,6 +11,7 @@
 package cbit.vcell.message.server.db;
 import java.util.Date;
 
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -27,7 +28,6 @@
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.modeldb.DatabasePolicySQL;
 import cbit.vcell.modeldb.DatabaseServerImpl;
 import cbit.vcell.mongodb.VCMongoMessage;
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12229)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12228)
@@ -5,12 +5,17 @@
 import java.util.Date;
 import java.util.List;
 
+import javax.media.TransitionEvent;
+
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 import org.vcell.util.document.VCellServerID;
+import org.vcell.util.document.Version;
 
 import cbit.rmi.event.WorkerEvent;
 import cbit.vcell.field.FieldDataIdentifierSpec;
@@ -18,7 +23,6 @@
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.SimulationTaskMessage;
 import cbit.vcell.message.messages.StatusMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
@@ -37,19 +41,6 @@
 import cbit.vcell.solver.VCSimulationIdentifier;
 
 public class SimulationStateMachine {
-	
-	// bitmapped counter so that allows 3 retries for each request (but preserves ordinal nature)
-	// bits 0-3: retry count
-	// bits 4-31: submit
-	// max retries must be less than 15.
-	public static final int TASKID_USERCOUNTER_MASK		= 0xFFFFFFF0;
-	public static final int TASKID_RETRYCOUNTER_MASK	= 0x0000000F;
-	public static final int TASKID_USERINCREMENT	    = 0x00000010;
-
-	public static final int PRIORITY_LOW = 0;
-	public static final int PRIORITY_DEFAULT = 5;
-	public static final int PRIORITY_HIGH = 9;	
-	
 	private KeyValue simKey;
 	private int jobIndex;
 	private ArrayList<StateMachineTransition> stateMachineTransitions = new ArrayList<StateMachineTransition>();
@@ -214,8 +205,8 @@
 		VCellServerID vcServerID = VCellServerID.getSystemServerID();
 		Date submitDate = null;
 		Date queueDate = null;
-		int queuePriority = PRIORITY_DEFAULT;
-		SimulationJobStatus.SimulationQueueID simQueueID = SimulationJobStatus.SimulationQueueID.QUEUE_ID_WAITING;
+		int queuePriority = MessageConstants.PRIORITY_DEFAULT;
+		SimulationQueueID simQueueID = SimulationQueueID.QUEUE_ID_WAITING;
 		
 
 		//
@@ -276,7 +267,7 @@
 			//
 			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued()) {
 				// new queue status
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 				
 				// new exe status
 				lastUpdateDate = new Date();
@@ -292,7 +283,7 @@
 			// only update database when the job event changes from started to running. The later progress event will not be recorded.
 			if ( oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()) {
 				// new queue status
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 				
 				// new exe status
 				lastUpdateDate = new Date();
@@ -311,10 +302,10 @@
 				simulationDatabase.dataMoved(vcSimDataID, workerEvent.getUser());
 				
 				
-				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL || hasData==false){
+				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationQueueID.QUEUE_ID_NULL || hasData==false){
 					
 					// new queue status		
-					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 					
 					// new exe status
 					if (startDate == null){
@@ -332,9 +323,9 @@
 			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
 				
 				
-				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL){
+				if (!oldSchedulerStatus.isRunning() || simQueueID != SimulationQueueID.QUEUE_ID_NULL){
 					// new queue status		
-					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+					SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 					
 					// new exe status
 					if (startDate == null){
@@ -351,7 +342,7 @@
 						Date sysDate = oldSimulationJobStatus.getTimeDateStamp();
 						if (sysDate.getTime() - latestUpdate.getTime() >= MessageConstants.INTERVAL_PING_SERVER_MS * 3 / 5) {
 							// new queue status		
-							SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+							SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 							SimulationExecutionStatus newExeStatus = new SimulationExecutionStatus(startDate, computeHost, lastUpdateDate, endDate, hasData, htcJobID);
 
 							newJobStatus = new SimulationJobStatus(vcServerID, vcSimDataID.getVcSimID(), jobIndex, submitDate, SchedulerStatus.RUNNING,
@@ -364,7 +355,7 @@
 		} else if (workerEvent.isCompletedEvent()) {			
 			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
 				// new queue status		
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 				
 				// new exe status
 				endDate = new Date();
@@ -382,7 +373,7 @@
 		} else if (workerEvent.isFailedEvent()) {						
 			if (oldSchedulerStatus.isWaiting() || oldSchedulerStatus.isQueued() || oldSchedulerStatus.isDispatched() || oldSchedulerStatus.isRunning()){
 				// new queue status		
-				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+				SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 				
 				// new exe status
 				endDate = new Date();
@@ -455,7 +446,7 @@
 		
 		if (oldTaskID > -1){
 			// calculate new task
-			newTaskID = (oldTaskID & TASKID_USERCOUNTER_MASK) + TASKID_USERINCREMENT;
+			newTaskID = (oldTaskID & MessageConstants.TASKID_USERCOUNTER_MASK) + MessageConstants.TASKID_USERINCREMENT;
 		}else{
 			// first task, start with 0
 			newTaskID = 0;
@@ -463,7 +454,7 @@
 				
 		Date currentDate = new Date();
 		// new queue status
-		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_WAITING);
+		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_WAITING);
 		
 		// new exe status
 		Date lastUpdateDate = null;
@@ -515,7 +506,7 @@
 			//
 			Date currentDate = new Date();
 			// new queue status
-			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_NULL);
 			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
 			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
 					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.FAILED,taskID,
@@ -532,7 +523,7 @@
 			// dispatch the simulation, new queue status
 			//
 			Date currentDate = new Date();
-			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, PRIORITY_DEFAULT, SimulationJobStatus.SimulationQueueID.QUEUE_ID_SIMULATIONJOB);
+			SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_SIMULATIONJOB);
 			SimulationExecutionStatus newSimExeStatus = new SimulationExecutionStatus(null,  null, new Date(), null, false, null);
 			SimulationJobStatus newSimJobStatus = new SimulationJobStatus(VCellServerID.getSystemServerID(),vcSimID,jobIndex,
 					oldSimulationJobStatus.getSubmitDate(),SchedulerStatus.QUEUED,taskID,
@@ -616,7 +607,7 @@
 		VCellServerID vcServerID = VCellServerID.getSystemServerID();
 		Date submitDate = null;
 		Date queueDate = null;
-		int queuePriority = PRIORITY_DEFAULT;
+		int queuePriority = MessageConstants.PRIORITY_DEFAULT;
 		
 
 		//
@@ -645,7 +636,7 @@
 			queuePriority = oldQueueStatus.getQueuePriority();
 		}
 			
-		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationJobStatus.SimulationQueueID.QUEUE_ID_NULL);
+		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(queueDate, queuePriority, SimulationQueueID.QUEUE_ID_NULL);
 		
 		Date endDate = new Date();
 		Date lastUpdateDate = new Date();
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12229)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12228)
@@ -17,6 +17,8 @@
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ExecutableException;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -39,12 +41,10 @@
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
 import cbit.vcell.message.VCRpcRequest;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
Index: src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java
===================================================================
--- src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12229)
+++ src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12228)
@@ -15,6 +15,7 @@
 import javax.jms.JMSException;
 
 import org.vcell.util.FileUtils;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -29,7 +30,6 @@
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.messaging.server.SimulationTask;
Index: src/cbit/vcell/message/server/sim/LocalSimulationWorker.java
===================================================================
--- src/cbit/vcell/message/server/sim/LocalSimulationWorker.java	(revision 12229)
+++ src/cbit/vcell/message/server/sim/LocalSimulationWorker.java	(revision 12228)
@@ -16,6 +16,8 @@
 import java.util.StringTokenizer;
 
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -30,13 +32,11 @@
 import cbit.vcell.message.VCQueueConsumer;
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.SimulationTaskMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
Index: src/cbit/vcell/message/server/sim/HtcSimulationWorker.java
===================================================================
--- src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12229)
+++ src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12228)
@@ -9,6 +9,14 @@
  */
 
 package cbit.vcell.message.server.sim;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_PROPERTY;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_ID_PROPERTY;
+
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -20,6 +28,8 @@
 import org.vcell.util.BeanUtils;
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ExecutableException;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -34,29 +44,30 @@
 import cbit.vcell.message.VCMessagingException;
 import cbit.vcell.message.VCMessagingService;
 import cbit.vcell.message.VCQueueConsumer;
+import cbit.vcell.message.VCTopicConsumer;
+import cbit.vcell.message.VCellTopic;
 import cbit.vcell.message.VCQueueConsumer.QueueListener;
-import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.SimulationTaskMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
+import cbit.vcell.message.server.htc.HtcException;
 import cbit.vcell.message.server.htc.HtcJobID;
 import cbit.vcell.message.server.htc.HtcJobID.BatchSystemType;
+import cbit.vcell.message.server.htc.HtcJobNotFoundException;
 import cbit.vcell.message.server.htc.HtcProxy;
 import cbit.vcell.message.server.htc.pbs.PbsProxy;
 import cbit.vcell.message.server.htc.sge.SgeProxy;
 import cbit.vcell.messaging.server.SimulationTask;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
+import cbit.vcell.simdata.SimDataConstants;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.Solver;
 import cbit.vcell.solver.SolverException;
@@ -172,7 +183,7 @@
 
 		public void onTopicMessage(VCMessage message, VCMessageSession session) {
 			try {
-				String msgType = message.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
+				String msgType = message.getStringProperty(MESSAGE_TYPE_PROPERTY);
 				
 				if (msgType == null) {
 					return;
Index: src/cbit/vcell/message/server/ServiceInstanceStatus.java
===================================================================
--- src/cbit/vcell/message/server/ServiceInstanceStatus.java	(revision 12229)
+++ src/cbit/vcell/message/server/ServiceInstanceStatus.java	(revision 12228)
@@ -15,13 +15,11 @@
 
 import org.vcell.util.ComparableObject;
 import org.vcell.util.Matchable;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 
 
-
-
 public class ServiceInstanceStatus implements Matchable, Serializable, ComparableObject {
 	private VCellServerID serverID;
 	private ServiceType type;
Index: src/cbit/vcell/message/server/data/SimDataServer.java
===================================================================
--- src/cbit/vcell/message/server/data/SimDataServer.java	(revision 12229)
+++ src/cbit/vcell/message/server/data/SimDataServer.java	(revision 12228)
@@ -9,13 +9,15 @@
  */
 
 package cbit.vcell.message.server.data;
-import static cbit.vcell.message.messages.MessageConstants.MESSAGE_TYPE_PROPERTY;
-import static cbit.vcell.message.messages.MessageConstants.MESSAGE_TYPE_RPC_SERVICE_VALUE;
-import static cbit.vcell.message.messages.MessageConstants.SERVICE_TYPE_PROPERTY;
+import static org.vcell.util.MessageConstants.MESSAGE_TYPE_PROPERTY;
+import static org.vcell.util.MessageConstants.MESSAGE_TYPE_RPC_SERVICE_VALUE;
+import static org.vcell.util.MessageConstants.SERVICE_TYPE_PROPERTY;
 
 import java.io.File;
 import java.util.Date;
 
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -33,11 +35,9 @@
 import cbit.vcell.message.VCRpcConsumer;
 import cbit.vcell.message.VCellQueue;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
 import cbit.vcell.message.server.ServiceProvider;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.mongodb.VCMongoMessage.ServiceName;
 import cbit.vcell.simdata.Cachetable;
Index: src/cbit/vcell/message/server/manager/ServerManagerDaemon.java
===================================================================
--- src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12229)
+++ src/cbit/vcell/message/server/manager/ServerManagerDaemon.java	(revision 12228)
@@ -9,6 +9,20 @@
  */
 
 package cbit.vcell.message.server.manager;
+import static cbit.vcell.message.server.ManageConstants.INTERVAL_PING_RESPONSE;
+import static cbit.vcell.message.server.ManageConstants.INTERVAL_PING_SERVICE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_PROPERTY;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_ID_PROPERTY;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_STARTUPTYPE_AUTOMATIC;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_STATUS_FAILED;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_STATUS_RUNNING;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -23,6 +37,8 @@
 
 import org.vcell.util.DataAccessException;
 import org.vcell.util.ExecutableException;
+import org.vcell.util.MessageConstants;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 import org.vcell.util.StdoutSessionLog;
@@ -38,13 +54,9 @@
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.server.ManageUtils;
 import cbit.vcell.message.server.ServiceInstanceStatus;
-import cbit.vcell.message.server.ServiceSpec.ServiceStartupType;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.ServiceStatus;
-import cbit.vcell.message.server.ServiceStatus.ServiceStatusType;
 import cbit.vcell.message.server.cmd.CommandService;
 import cbit.vcell.message.server.cmd.CommandServiceLocal;
 import cbit.vcell.message.server.cmd.CommandServiceSsh;
@@ -68,11 +80,6 @@
  * @author: Fei Gao
  */
 public class ServerManagerDaemon {
-	
-	private static final long INTERVAL_PING_SERVICE = 10 * MessageConstants.MINUTE_IN_MS; // in minutes
-	private static final long INTERVAL_PING_RESPONSE = 10 * MessageConstants.SECOND_IN_MS; // in milliseconds
-
-
 	private org.vcell.util.SessionLog log = null;
 	private HtcProxy htcProxy = null;
 	private VCMessagingService vcMessagingService = null;
@@ -109,19 +116,19 @@
 			try {		
 				log.print("onMessage [" + vcMessage.show() + "]");		
 
-				String msgType = vcMessage.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
+				String msgType = vcMessage.getStringProperty(MESSAGE_TYPE_PROPERTY);
 				
-				if (msgType.equals(MessageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE)) {
+				if (msgType.equals(MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE)) {
 					VCMessage reply = session.createObjectMessage(serviceInstanceStatus);
-					reply.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE);
-					reply.setStringProperty(MessageConstants.SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
+					reply.setStringProperty(MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE);
+					reply.setStringProperty(SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
 					session.sendTopicMessage(VCellTopic.DaemonControlTopic, reply);
 					log.print("sending reply [" + reply.show() + "]");			
-				} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_IAMALIVE_VALUE)) {
+				} else if (msgType.equals(MESSAGE_TYPE_IAMALIVE_VALUE)) {
 					on_iamalive(vcMessage);			
-				} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE)) {
+				} else if (msgType.equals(MESSAGE_TYPE_STOPSERVICE_VALUE)) {
 					on_stopservice(vcMessage);
-				} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE)) {
+				} else if (msgType.equals(MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE)) {
 					synchronized (this) {
 						notify();
 					}						
@@ -149,7 +156,7 @@
 	Iterator<ServiceStatus> iter = serviceList.iterator();
 	while (iter.hasNext()) {
 		ServiceStatus service = iter.next();		
-		if (service.getServiceSpec().getStartupType() == ServiceStartupType.StartupTypeAutomatic) {			
+		if (service.getServiceSpec().getStartupType() == SERVICE_STARTUPTYPE_AUTOMATIC) {			
 			boolean alive = false;
 			ServiceInstanceStatus foundSis = null; 
 			Iterator<ServiceInstanceStatus> aliveIter = serviceAliveList.iterator();
@@ -185,8 +192,8 @@
 	try {
 		VCMessage msg = topicProducerSession.createMessage();
 			
-		msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE);
-		msg.setStringProperty(MessageConstants.SERVICE_ID_PROPERTY, sis.getID());
+		msg.setStringProperty(MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_STOPSERVICE_VALUE);
+		msg.setStringProperty(SERVICE_ID_PROPERTY, sis.getID());
 		
 		log.print("sending stop service message [" + msg.show() + "]");		
 		topicProducerSession.sendTopicMessage(VCellTopic.DaemonControlTopic, msg);
@@ -203,7 +210,7 @@
 			HtcJobID jobid = submit2PBS(oldStatus);
 			ServiceStatus newServiceStatus = null;
 			if (jobid == null) {
-				newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, ServiceStatusType.ServiceFailed, "unknown pbs exception",	jobid);
+				newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, "unknown pbs exception",	jobid);
 			} else {
 				long t = System.currentTimeMillis();
 				HtcJobStatus status;
@@ -216,15 +223,15 @@
 					status = htcProxy.getJobStatus(jobid);
 					if (status!=null && status.isExiting()){
 						// should never happen
-						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, ServiceStatusType.ServiceFailed, "exit immediately after submit", jobid);	
+						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, "exit immediately after submit", jobid);	
 						break;
 					} else if (status!=null && status.isRunning()) {						
-						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, ServiceStatusType.ServiceRunning, "running", jobid);	
+						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_RUNNING, "running", jobid);	
 						break;
 					} else if (System.currentTimeMillis() - t > 30 * MessageConstants.SECOND_IN_MS) {
 						String pendingReason = htcProxy.getPendingReason(jobid);
 						htcProxy.killJob(jobid); // kill the job if it takes too long to dispatch the job.
-						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, ServiceStatusType.ServiceFailed, 
+						newServiceStatus = new ServiceStatus(oldStatus.getServiceSpec(), null, SERVICE_STATUS_FAILED, 
 								"PBS Job scheduler timed out. Please try again later. (Job [" + jobid + "]: " + pendingReason + ")",
 								jobid);						
 						break;
@@ -262,8 +269,8 @@
  * @return int
  */
 private java.lang.String getMessageFilter() {
-	return MessageConstants.MESSAGE_TYPE_PROPERTY + " NOT IN (" 
-		+ "'" + MessageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE + "'" 
+	return MESSAGE_TYPE_PROPERTY + " NOT IN (" 
+		+ "'" + MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE + "'" 
 		+ ")";
 //		+ " OR (" + ManageConstants.MESSAGE_TYPE_PROPERTY + "='" + ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE + "'"
 //		+ " AND " + ManageConstants.SERVER_NAME_PROPERTY + " IS NOT NULL"
@@ -363,7 +370,7 @@
 * the corresponding PBS job after waiting a short amount of time.
 */
 private void on_stopservice(VCMessage message) throws Exception {
-	String serviceID = message.getStringProperty(MessageConstants.SERVICE_ID_PROPERTY);
+	String serviceID = message.getStringProperty(SERVICE_ID_PROPERTY);
 	
 	if (serviceID != null) {
 		if (serviceID.equals(serviceInstanceStatus.getID())) { // stop myself
@@ -419,7 +426,7 @@
 	
 	VCMessage msg = topicProducerSession.createMessage();
 		
-	msg.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE);
+	msg.setStringProperty(MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_ISSERVICEALIVE_VALUE);
 
 	log.print("sending ping message [" + msg.show() + "]");
 	
Index: src/cbit/vcell/message/server/ServiceProvider.java
===================================================================
--- src/cbit/vcell/message/server/ServiceProvider.java	(revision 12229)
+++ src/cbit/vcell/message/server/ServiceProvider.java	(revision 12228)
@@ -9,12 +9,22 @@
  */
 
 package cbit.vcell.message.server;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_IAMALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_PROPERTY;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE;
+import static cbit.vcell.message.server.ManageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE;
+import static cbit.vcell.message.server.ManageConstants.SERVICE_ID_PROPERTY;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.PrintStream;
 
+import javax.jms.JMSException;
+
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.message.VCMessage;
@@ -25,7 +35,6 @@
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 
 /**
  * Insert the type's description here.
@@ -65,10 +74,10 @@
  * @return java.lang.String
  */
 private final String getDaemonControlFilter() {
-	return MessageConstants.MESSAGE_TYPE_PROPERTY + " NOT IN " 
-		+ "('" + MessageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE + "'"
-		+ ",'" + MessageConstants.MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE + "'"
-		+ ",'" + MessageConstants.MESSAGE_TYPE_IAMALIVE_VALUE + "'"
+	return MESSAGE_TYPE_PROPERTY + " NOT IN " 
+		+ "('" + MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE + "'"
+		+ ",'" + MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE + "'"
+		+ ",'" + MESSAGE_TYPE_IAMALIVE_VALUE + "'"
 		+ ")";		
 }
 
@@ -81,17 +90,17 @@
 
 		public void onTopicMessage(VCMessage message, VCMessageSession session) {
 			try {
-				String msgType = message.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
+				String msgType = message.getStringProperty(MESSAGE_TYPE_PROPERTY);
 				String serviceID = null;
 				
 				if (msgType == null) {
 					return;
 				}
 				
-				if (msgType.equals(MessageConstants.MESSAGE_TYPE_ISSERVICEALIVE_VALUE)) {			
+				if (msgType.equals(MESSAGE_TYPE_ISSERVICEALIVE_VALUE)) {			
 					VCMessage reply = session.createObjectMessage(ServiceProvider.this.serviceInstanceStatus);
-					reply.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_IAMALIVE_VALUE);
-					reply.setStringProperty(MessageConstants.SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
+					reply.setStringProperty(MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_IAMALIVE_VALUE);
+					reply.setStringProperty(SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
 					log.print("sending reply [" + reply.toString() + "]");
 					if (message.getReplyTo() != null) {
 						reply.setCorrelationID(message.getMessageID());
@@ -99,15 +108,15 @@
 					} else {
 						session.sendTopicMessage(VCellTopic.DaemonControlTopic, reply);
 					}
-				} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE)) {				
+				} else if (msgType.equals(MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE)) {				
 					VCMessage reply = session.createObjectMessage(serviceInstanceStatus);
-					reply.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE);
-					reply.setStringProperty(MessageConstants.SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
+					reply.setStringProperty(MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE);
+					reply.setStringProperty(SERVICE_ID_PROPERTY, serviceInstanceStatus.getID());
 					session.sendTopicMessage(VCellTopic.DaemonControlTopic, reply);			
 					log.print("sending reply [" + reply.toString() + "]");
 					
-				} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_STOPSERVICE_VALUE)) {
-					serviceID = message.getStringProperty(MessageConstants.SERVICE_ID_PROPERTY);
+				} else if (msgType.equals(MESSAGE_TYPE_STOPSERVICE_VALUE)) {
+					serviceID = message.getStringProperty(SERVICE_ID_PROPERTY);
 					if (serviceID != null && serviceID.equalsIgnoreCase(serviceInstanceStatus.getID()))  {
 						stopService();
 					}
Index: src/cbit/vcell/message/server/ServiceSpec.java
===================================================================
--- src/cbit/vcell/message/server/ServiceSpec.java	(revision 12229)
+++ src/cbit/vcell/message/server/ServiceSpec.java	(revision 12228)
@@ -10,114 +10,30 @@
 
 package cbit.vcell.message.server;
 
+import static cbit.vcell.message.server.ManageConstants.SERVICE_STARTUP_TYPES;
+
 import java.io.Serializable;
 
 import org.vcell.util.ComparableObject;
 import org.vcell.util.Matchable;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.VCellServerID;
 
 
 
-
 public class ServiceSpec implements Matchable, Serializable, ComparableObject {
 	private VCellServerID serverID;
 	private ServiceType type;
 	private int ordinal;
-	private ServiceStartupType serviceStartupType;
+	private int startupType;
 	private int memoryMB;	
 	
-	
-	public enum ServiceType { 
-		DB ("Db"),	
-		DATA ("Data"),
-		DATAEXPORT ("Exprt"),
-		DISPATCH ("Dsptch"),
-		PBSCOMPUTE ("PbsC"),	// submit everything to PBS
-		LOCALCOMPUTE ("LclC"),   // local pde and ode
-		SERVERMANAGER ("ServerManager"),
-		TESTING_SERVICE ("TestingService");
-		
-		private final String typeName;
-		ServiceType(String tn) {
-			typeName = tn;
-		}
-		
-		public String getName() {
-			return typeName;
-		}
-
-		@Override
-		public String toString() {
-			return typeName;
-		}
-		
-		public static ServiceType fromName(String name) {
-			for (ServiceType st : ServiceType.values()) {
-				if (st.getName().equals(name)) {
-					return st;
-				}
-			}			
-			throw new RuntimeException(name + " is not a legitiamte service type");
-		}
-	}
-	
-	//
-	//	public static final int SERVICE_STARTUPTYPE_AUTOMATIC = 0;	// restart it if the service is dead 
-	//	public static final int SERVICE_STARTUPTYPE_MANUAL = 1;
-	//	
-	//	public static final String[] SERVICE_STARTUP_TYPES = {"automatic", "manual"};
-	//
-	public enum ServiceStartupType {
-		StartupTypeAutomatic(0,"automatic"),
-		StartupTypeManual(1,"manual");
-		
-		final int databaseNumber;
-		final String description;
-		
-		private ServiceStartupType(int databaseNumber, String description){
-			this.databaseNumber = databaseNumber;
-			this.description = description;
-		}
-		
-		public int getDatabaseNumber(){
-			return databaseNumber;
-		}
-		public String getDescription(){
-			return description;
-		}
-	
-		public boolean isAutomatic() {
-			return this == StartupTypeAutomatic;
-		}
-		public boolean isManual() {
-			return this == StartupTypeManual;
-		}
-	
-		public static ServiceStartupType fromDatabaseNumber(int databaseType) {
-			for (ServiceStartupType type : values()){
-				if (type.getDatabaseNumber() == databaseType){
-					return type;
-				}
-			}
-			throw new RuntimeException("unknown database serialization for ServiceStartupType = "+databaseType);
-		}
-	
-		public static ServiceStartupType fromDescription(String description) {
-			for (ServiceStartupType type : values()){
-				if (type.getDescription().equals(description)){
-					return type;
-				}
-			}
-			throw new RuntimeException("unknown description for ServiceStartupType = "+description);
-		}
-	}
-	
-	public ServiceSpec(VCellServerID sID, ServiceType t, int o, ServiceStartupType serviceStartupType, int mm) {
+	public ServiceSpec(VCellServerID sID, ServiceType t, int o, int st, int mm) {
 		super();
 		this.serverID = sID;
 		this.type = t;
 		this.ordinal = o;
-		this.serviceStartupType = serviceStartupType;
+		this.startupType = st;
 		this.memoryMB = mm;
 	}
 	
@@ -138,11 +54,11 @@
 	}
 	
 	public String toString() {
-		return "[" + serverID + "," + type + "," + ordinal + "," + serviceStartupType.getDescription() + "," + memoryMB + "M]";
+		return "[" + serverID + "," + type + "," + ordinal + "," + ManageConstants.SERVICE_STARTUP_TYPES[startupType] + "," + memoryMB + "M]";
 	}
 
-	public ServiceStartupType getStartupType() {
-		return serviceStartupType;
+	public int getStartupType() {
+		return startupType;
 	}
 
 	public String getID() {
@@ -153,7 +69,7 @@
 	}
 	
 	public Object[] toObjects() {
-		return new Object[] {serverID, type, ordinal, serviceStartupType.getDescription(), memoryMB};
+		return new Object[] {serverID, type, ordinal, SERVICE_STARTUP_TYPES[startupType], memoryMB};
 	}
 		
 	public boolean equals(Object obj) {
Index: src/cbit/vcell/message/server/bootstrap/AbstractRpcServerProxy.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/AbstractRpcServerProxy.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/AbstractRpcServerProxy.java	(revision 12228)
@@ -9,13 +9,13 @@
  */
 
 package cbit.vcell.message.server.bootstrap;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCRpcRequest;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.server.UserLoginInfo;
 
Index: src/cbit/vcell/message/server/bootstrap/RpcDbServerProxy.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/RpcDbServerProxy.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/RpcDbServerProxy.java	(revision 12228)
@@ -11,6 +11,7 @@
 package cbit.vcell.message.server.bootstrap;
 import org.vcell.util.BigString;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.ObjectNotFoundException;
 import org.vcell.util.document.VersionableFamily;
 
@@ -20,7 +21,6 @@
 import cbit.vcell.mathmodel.MathModelMetaData;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.modeldb.ReactionQuerySpec;
 import cbit.vcell.modeldb.VCInfoContainer;
 import cbit.vcell.server.UserLoginInfo;
Index: src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/RpcSimServerProxy.java	(revision 12228)
@@ -10,11 +10,11 @@
 
 package cbit.vcell.message.server.bootstrap;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.SessionLog;
 
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.server.UserLoginInfo;
 import cbit.vcell.solver.VCSimulationIdentifier;
 
Index: src/cbit/vcell/message/server/bootstrap/RpcDataServerProxy.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/RpcDataServerProxy.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/RpcDataServerProxy.java	(revision 12228)
@@ -10,6 +10,7 @@
 
 package cbit.vcell.message.server.bootstrap;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.VCDataIdentifier;
 
@@ -18,7 +19,6 @@
 import cbit.vcell.field.FieldDataFileOperationSpec;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCellQueue;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.server.UserLoginInfo;
 import cbit.vcell.simdata.DataIdentifier;
 import cbit.vcell.simdata.ParticleDataBlock;
Index: src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/ClientTopicMessageCollector.java	(revision 12228)
@@ -12,6 +12,7 @@
 import javax.swing.event.EventListenerList;
 
 import org.vcell.util.BigString;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.SessionLog;
 import org.vcell.util.document.User;
 
@@ -32,8 +33,8 @@
 import cbit.vcell.message.VCTopicConsumer;
 import cbit.vcell.message.VCTopicConsumer.TopicListener;
 import cbit.vcell.message.VCellTopic;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.StatusMessage;
+import cbit.vcell.message.server.ManageConstants;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.solver.VCSimulationIdentifier;
 
@@ -173,7 +174,7 @@
 			DataJobEvent event = (DataJobEvent)message.getObjectContent();
 			log.print("---onTopicMessage[DataEvent[vcdid=" + event.getVCDataIdentifier().getID() + "," + event.getProgress() + "]]");
 			fireMessageEvent(event);
-		} else if (msgType.equals(MessageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE)) {
+		} else if (msgType.equals(ManageConstants.MESSAGE_TYPE_BROADCASTMESSAGE_VALUE)) {
 			fireMessageEvent(new VCellMessageEvent(this, System.currentTimeMillis() + "", new MessageData((BigString)message.getObjectContent()), VCellMessageEvent.VCELL_MESSAGEEVENT_TYPE_BROADCAST));
 		} else{
 			throw new Exception(this.getClass().getName()+".onControlTopicMessage: Unimplemented message "+message.show());
Index: src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java
===================================================================
--- src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java	(revision 12229)
+++ src/cbit/vcell/message/server/bootstrap/LocalVCellConnectionMessaging.java	(revision 12228)
@@ -16,6 +16,7 @@
 
 import org.vcell.util.BeanUtils;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
 
@@ -27,7 +28,6 @@
 import cbit.rmi.event.SimpleMessageService;
 import cbit.vcell.message.VCMessageSession;
 import cbit.vcell.message.VCMessagingService;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.mongodb.VCMongoMessage;
 import cbit.vcell.server.DataSetController;
 import cbit.vcell.server.LocalVCellServer;
Index: src/cbit/vcell/message/messages/MessageConstants.java
===================================================================
--- src/cbit/vcell/message/messages/MessageConstants.java	(revision 12229)
+++ src/cbit/vcell/message/messages/MessageConstants.java	(revision 12228)
@@ -1,73 +0,0 @@
-/*
- * Copyright (C) 1999-2011 University of Connecticut Health Center
- *
- * Licensed under the MIT License (the "License").
- * You may not use this file except in compliance with the License.
- * You may obtain a copy of the License at:
- *
- *  http://www.opensource.org/licenses/mit-license.php
- */
-
-package cbit.vcell.message.messages;
-/**
- * Insert the type's description here.
- * Creation date: (10/23/2001 12:16:47 PM)
- * @author: Jim Schaff
- */
-public interface MessageConstants {
-	
-	public static final String METHOD_NAME_PROPERTY		= "MethodName";	
-	public static final String USERNAME_PROPERTY		= "UserName";
-	public static final String 		USERNAME_PROPERTY_VALUE_ALL = "All";
-	public static final String SIZE_MB_PROPERTY			= "SizeMB";
-	public static final String SIMKEY_PROPERTY			= "SimKey";
-	public static final String JOBINDEX_PROPERTY		= "JobIndex";
-	public static final String TASKID_PROPERTY			= "TaskID";
-	public static final String FIELDDATAID_PROPERTY		= "FieldDataID";
-	public static final String HTCJOBID_PROPERTY 		= "HtcJobID";
-	public static final String SIMULATION_STATUS_PROGRESS_PROPERTY	= "SimulationStatusProgress";
-	public static final String SIMULATION_STATUS_TIMEPOINT_PROPERTY = "SimulationStatusTimePoint";
-	public static final String WORKEREVENT_STATUS		= "WorkerEvent_Status";
-	public static final String WORKEREVENT_PROGRESS		= "WorkerEvent_Progress";
-	public static final String WORKEREVENT_TIMEPOINT	= "WorkerEvent_TimePoint";
-	public static final String WORKEREVENT_STATUSMSG	= "WorkerEvent_StatusMsg";
-	
-
-	public static final String JMSCORRELATIONID_PROPERTY	= "JMSCorrelationID";
-	
-	public static final String MESSAGE_TYPE_SIMULATION_JOB_VALUE		= "SimulationJob";
-	public static final String MESSAGE_TYPE_SIMSTATUS_VALUE				= "SimStatus";
-	public static final String MESSAGE_TYPE_RPC_SERVICE_VALUE			= "RPCService";
-	public static final String MESSAGE_TYPE_EXPORT_EVENT_VALUE			= "ExportEvent";
-	public static final String MESSAGE_TYPE_DATA_EVENT_VALUE			= "DataEvent";
-	public static final String MESSAGE_TYPE_STOPSIMULATION_VALUE		= "StopSimulation";	
-	public static final String MESSAGE_TYPE_FLUSH_VALUE					= "Flush";
-	public static final String MESSAGE_TYPE_ISSERVICEALIVE_VALUE		= "IsServiceAlive";
-	public static final String MESSAGE_TYPE_IAMALIVE_VALUE				= "IAmAlive";		
-	public static final String MESSAGE_TYPE_ASKPERFORMANCESTATUS_VALUE	= "AskPerformance";
-	public static final String MESSAGE_TYPE_REFRESHSERVERMANAGER_VALUE	= "RefreshServerManager";
-	public static final String MESSAGE_TYPE_REPLYPERFORMANCESTATUS_VALUE	= "ReplyPerformance";
-	public static final String MESSAGE_TYPE_STOPSERVICE_VALUE			= "StopService";
-	public static final String MESSAGE_TYPE_BROADCASTMESSAGE_VALUE		= "BroadcastMessage";
-	public static final String MESSAGE_TYPE_WORKEREVENT_VALUE			= "WorkerEvent";
-
-	
-	public static final String MESSAGE_TYPE_PROPERTY	= "MessageType";
-
-	public static final String COMPUTE_RESOURCE_PROPERTY	= "ComputeResource";	
-	
-	public static final String HOSTNAME_PROPERTY		= "HostName";
-	public static final String SERVICE_TYPE_PROPERTY	= "ServiceType";
-	public static final String SERVICE_ID_PROPERTY		= "ServiceID";	
-	
-	public static final int SECOND_IN_MS = 1000; // in milliseconds
-	public static final int MINUTE_IN_S = 60;
-	public static final int MINUTE_IN_MS = MINUTE_IN_S * SECOND_IN_MS; // in milliseconds
-
-	public static final long INTERVAL_PING_SERVER_MS = 5 * MINUTE_IN_MS; // in milliseconds
-	public static final long INTERVAL_SERVER_FAIL_MS = 10 * MINUTE_IN_MS; // in milliseconds
-	public static final long INTERVAL_SIMULATIONJOBSTATUS_TIMEOUT_MS = 10 * MINUTE_IN_MS; // in milliseconds
-	public static final long INTERVAL_PROGRESS_MESSAGE_MS = 5 * SECOND_IN_MS;
-
-
-}
Index: src/cbit/vcell/message/messages/WorkerEventMessage.java
===================================================================
--- src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 12229)
+++ src/cbit/vcell/message/messages/WorkerEventMessage.java	(revision 12228)
@@ -12,6 +12,7 @@
 import java.sql.SQLException;
 
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.User;
 
@@ -35,6 +36,12 @@
  */
 public class WorkerEventMessage {
 	private WorkerEvent workerEvent = null;	
+	private static final String MESSAGE_TYPE_WORKEREVENT_VALUE	= "WorkerEvent";
+
+	public static final String WORKEREVENT_STATUS = "WorkerEvent_Status";
+	public static final String WORKEREVENT_PROGRESS = "WorkerEvent_Progress";
+	public static final String WORKEREVENT_TIMEPOINT = "WorkerEvent_TimePoint";
+	public static final String WORKEREVENT_STATUSMSG = "WorkerEvent_StatusMsg";
 	
 /**
  * Insert the method's description here.
@@ -58,13 +65,13 @@
 }
 
 public static String getWorkerEventSelector_ProgressAndData(){
-	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MessageConstants.MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
-			"("+MessageConstants.WORKEREVENT_STATUS+" IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
+	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
+			"("+WORKEREVENT_STATUS+" IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
 }
 
 public static String getWorkerEventSelector_NotProgressAndData(){
-	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MessageConstants.MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
-			"("+MessageConstants.WORKEREVENT_STATUS+" NOT IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
+	return "(("+MessageConstants.MESSAGE_TYPE_PROPERTY+"='"+MESSAGE_TYPE_WORKEREVENT_VALUE+"') AND "+
+			"("+WORKEREVENT_STATUS+" NOT IN ('"+WorkerEvent.JOB_PROGRESS+"', '"+WorkerEvent.JOB_DATA+"') ) )";
 }
 
 
@@ -94,8 +101,8 @@
 		throw new RuntimeException("Wrong message: expecting property "+MessageConstants.MESSAGE_TYPE_PROPERTY);
 	}
 	String msgType = message.getStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY);
-	if (!msgType.equals(MessageConstants.MESSAGE_TYPE_WORKEREVENT_VALUE)) {
-		throw new RuntimeException("Wrong message type: "+msgType+", expecting: "+MessageConstants.MESSAGE_TYPE_WORKEREVENT_VALUE);
+	if (!msgType.equals(MESSAGE_TYPE_WORKEREVENT_VALUE)) {
+		throw new RuntimeException("Wrong message type: "+msgType+", expecting: "+MESSAGE_TYPE_WORKEREVENT_VALUE);
 	}
 			
 	Object obj = message.getObjectContent();
@@ -108,7 +115,7 @@
 
 	} else {
 		// from c++ executable
-		int status = message.getIntProperty(MessageConstants.WORKEREVENT_STATUS);
+		int status = message.getIntProperty(WORKEREVENT_STATUS);
 		String hostname = message.getStringProperty(MessageConstants.HOSTNAME_PROPERTY);
 		String username = message.getStringProperty(MessageConstants.USERNAME_PROPERTY);
 		int taskID = message.getIntProperty(MessageConstants.TASKID_PROPERTY);
@@ -128,15 +135,15 @@
 		Double progress = null;
 		Double timepoint = null;
 		
-		if (message.propertyExists(MessageConstants.WORKEREVENT_STATUSMSG)){
-			statusMessage = message.getStringProperty(MessageConstants.WORKEREVENT_STATUSMSG);
+		if (message.propertyExists(WORKEREVENT_STATUSMSG)){
+			statusMessage = message.getStringProperty(WORKEREVENT_STATUSMSG);
 		}
 
-		if (message.propertyExists(MessageConstants.WORKEREVENT_PROGRESS)){
-			progress = message.getDoubleProperty(MessageConstants.WORKEREVENT_PROGRESS);
+		if (message.propertyExists(WORKEREVENT_PROGRESS)){
+			progress = message.getDoubleProperty(WORKEREVENT_PROGRESS);
 		}
-		if (message.propertyExists(MessageConstants.WORKEREVENT_TIMEPOINT)){
-			timepoint = message.getDoubleProperty(MessageConstants.WORKEREVENT_TIMEPOINT);
+		if (message.propertyExists(WORKEREVENT_TIMEPOINT)){
+			timepoint = message.getDoubleProperty(WORKEREVENT_TIMEPOINT);
 		}
 		
 		SimulationMessage simulationMessage = SimulationMessage.fromSerializedMessage(statusMessage);
@@ -302,7 +309,7 @@
  */
 private VCMessage toMessage(VCMessageSession session) {		
 	VCMessage message = session.createObjectMessage(workerEvent);
-	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_WORKEREVENT_VALUE);
+	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MESSAGE_TYPE_WORKEREVENT_VALUE);
 	return message;
 }
 }
Index: src/cbit/vcell/message/messages/StatusMessage.java
===================================================================
--- src/cbit/vcell/message/messages/StatusMessage.java	(revision 12229)
+++ src/cbit/vcell/message/messages/StatusMessage.java	(revision 12228)
@@ -10,6 +10,7 @@
 
 package cbit.vcell.message.messages;
 
+import org.vcell.util.MessageConstants;
 
 import cbit.vcell.message.MessagePropertyNotFoundException;
 import cbit.vcell.message.VCMessage;
@@ -28,6 +29,9 @@
 	private Double timePoint = null;
 	private Double progress = null;
 
+	public static final String SIMULATION_STATUS_PROGRESS_PROPERTY	= "SimulationStatusProgress";
+	public static final String SIMULATION_STATUS_TIMEPOINT_PROPERTY = "SimulationStatusTimePoint";
+	
 	private java.lang.String userName = null;
 
 /**
@@ -133,12 +137,12 @@
 	}
 
 	jobStatus = (SimulationJobStatus)obj;
-	if (message.propertyExists(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY)){
-		progress = message.getDoubleProperty(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY);
+	if (message.propertyExists(SIMULATION_STATUS_PROGRESS_PROPERTY)){
+		progress = message.getDoubleProperty(SIMULATION_STATUS_PROGRESS_PROPERTY);
 	}
 	
-	if (message.propertyExists(MessageConstants.SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
-		timePoint = message.getDoubleProperty(MessageConstants.SIMULATION_STATUS_TIMEPOINT_PROPERTY);
+	if (message.propertyExists(SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
+		timePoint = message.getDoubleProperty(SIMULATION_STATUS_TIMEPOINT_PROPERTY);
 	}
 	
 }
@@ -168,10 +172,10 @@
 	message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY, MessageConstants.MESSAGE_TYPE_SIMSTATUS_VALUE);
 	message.setStringProperty(MessageConstants.USERNAME_PROPERTY, userName);
 	if (progress != null) {
-		message.setDoubleProperty(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY, progress.doubleValue());
+		message.setDoubleProperty(SIMULATION_STATUS_PROGRESS_PROPERTY, progress.doubleValue());
 	}
 	if (timePoint != null) {
-		message.setDoubleProperty(MessageConstants.SIMULATION_STATUS_TIMEPOINT_PROPERTY, timePoint.doubleValue());
+		message.setDoubleProperty(SIMULATION_STATUS_TIMEPOINT_PROPERTY, timePoint.doubleValue());
 	}
 
 	return message;
Index: src/cbit/vcell/message/messages/SimulationTaskMessage.java
===================================================================
--- src/cbit/vcell/message/messages/SimulationTaskMessage.java	(revision 12229)
+++ src/cbit/vcell/message/messages/SimulationTaskMessage.java	(revision 12228)
@@ -10,6 +10,7 @@
 
 package cbit.vcell.message.messages;
 
+import org.vcell.util.MessageConstants;
 
 import cbit.vcell.field.FieldDataIdentifierSpec;
 import cbit.vcell.message.VCMessage;
Index: src/cbit/vcell/message/VCRpcConsumer.java
===================================================================
--- src/cbit/vcell/message/VCRpcConsumer.java	(revision 12229)
+++ src/cbit/vcell/message/VCRpcConsumer.java	(revision 12228)
@@ -1,6 +1,6 @@
 package cbit.vcell.message;
 
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
+import org.vcell.util.MessageConstants.ServiceType;
 
 
 public class VCRpcConsumer extends VCMessagingConsumer {
Index: src/cbit/vcell/server/SimulationControllerImpl.java
===================================================================
--- src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12229)
+++ src/cbit/vcell/server/SimulationControllerImpl.java	(revision 12228)
@@ -19,6 +19,7 @@
 
 import org.vcell.util.ConfigurationException;
 import org.vcell.util.DataAccessException;
+import org.vcell.util.MessageConstants;
 import org.vcell.util.PermissionException;
 import org.vcell.util.PropertyLoader;
 import org.vcell.util.SessionLog;
@@ -36,8 +37,8 @@
 import cbit.vcell.message.VCellTopic;
 import cbit.vcell.message.local.LocalVCMessageAdapter;
 import cbit.vcell.message.local.LocalVCMessageAdapter.LocalVCMessageListener;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.SimulationTaskMessage;
+import cbit.vcell.message.messages.StatusMessage;
 import cbit.vcell.message.server.dispatcher.SimulationDatabase;
 import cbit.vcell.message.server.dispatcher.SimulationDispatcherEngine;
 import cbit.vcell.messaging.db.SimulationJobStatus;
@@ -126,12 +127,12 @@
 
 private void onClientStatusTopic_SimulationJobStatus(VCMessage simJobStatusMessage){
 	Double progress = null;
-	if (simJobStatusMessage.propertyExists(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY)){
-		progress = simJobStatusMessage.getDoubleProperty(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY);
+	if (simJobStatusMessage.propertyExists(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY)){
+		progress = simJobStatusMessage.getDoubleProperty(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY);
 	}
 	Double timepoint = null;
-	if (simJobStatusMessage.propertyExists(MessageConstants.SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
-		timepoint = simJobStatusMessage.getDoubleProperty(MessageConstants.SIMULATION_STATUS_TIMEPOINT_PROPERTY);
+	if (simJobStatusMessage.propertyExists(StatusMessage.SIMULATION_STATUS_TIMEPOINT_PROPERTY)){
+		timepoint = simJobStatusMessage.getDoubleProperty(StatusMessage.SIMULATION_STATUS_TIMEPOINT_PROPERTY);
 	}
 	SimulationJobStatus simJobStatus = (SimulationJobStatus)simJobStatusMessage.getObjectContent();
 	
Index: src/cbit/vcell/solver/ode/gui/SimulationStatus.java
===================================================================
--- src/cbit/vcell/solver/ode/gui/SimulationStatus.java	(revision 12229)
+++ src/cbit/vcell/solver/ode/gui/SimulationStatus.java	(revision 12228)
@@ -13,9 +13,9 @@
 import java.util.HashMap;
 
 import org.vcell.util.BeanUtils;
+import org.vcell.util.MessageConstants;
 
 import cbit.rmi.event.SimulationJobStatusEvent;
-import cbit.vcell.message.server.dispatcher.SimulationStateMachine;
 import cbit.vcell.messaging.db.SimulationJobStatus;
 import cbit.vcell.solver.SimulationMessage;
 import cbit.vcell.solver.VCSimulationIdentifier;
@@ -553,12 +553,12 @@
 	// figure out task ID ordinality...
 	int someOldID = oldStatus.getJobStatuses()[0].getTaskID(); // doesn't matter which one, should all be on same block
 	int newID = newJobStatus.getTaskID();
-	if (newID - newID % SimulationStateMachine.TASKID_USERINCREMENT > someOldID) {
+	if (newID - newID % MessageConstants.TASKID_USERINCREMENT > someOldID) {
 		// upper block; event comes from a new submission; discard all old stuff
 		newSimStatus = new SimulationStatus(new SimulationJobStatus[] {newJobStatus});
 		newSimStatus.progressHash.put(newJobStatus.getJobIndex(), newProgress);
 		return newSimStatus;
-	} else if (someOldID - someOldID % SimulationStateMachine.TASKID_USERINCREMENT > newID) {
+	} else if (someOldID - someOldID % MessageConstants.TASKID_USERINCREMENT > newID) {
 		// lower block; event comes from an old submission; ignore
 		return oldStatus;
 	}
Index: src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java	(revision 12229)
+++ src/cbit/vcell/messaging/db/SimulationQueueEntryStatus.java	(revision 12228)
@@ -12,7 +12,7 @@
 
 import java.util.Date;
 
-import cbit.vcell.messaging.db.SimulationJobStatus.SimulationQueueID;
+import org.vcell.util.MessageConstants.SimulationQueueID;
 
 /**
  * Insert the type's description here.
@@ -22,7 +22,7 @@
 public class SimulationQueueEntryStatus implements org.vcell.util.Matchable, java.io.Serializable {
 	private int fieldQueuePriority = 0;
 	private Date fieldQueueDate = null;
-	private SimulationJobStatus.SimulationQueueID fieldQueueID;
+	private SimulationQueueID fieldQueueID;
 /**
  * SimulationQueueEntryStatus constructor comment.
  * @param simKey cbit.sql.KeyValue
@@ -32,7 +32,7 @@
  * @param queueDate java.util.Date
  * @param queueID java.lang.Integer
  */
-public SimulationQueueEntryStatus(Date queueDate, int queuePriority, SimulationJobStatus.SimulationQueueID queueID) {
+public SimulationQueueEntryStatus(Date queueDate, int queuePriority, SimulationQueueID queueID) {
 	if (queueID==null){
 		throw new RuntimeException("queueID must not be null");
 	}
@@ -79,7 +79,7 @@
  * Creation date: (1/31/2003 11:23:56 AM)
  * @return int
  */
-public SimulationJobStatus.SimulationQueueID getQueueID() {
+public SimulationQueueID getQueueID() {
 	return fieldQueueID;
 }
 /**
@@ -95,7 +95,7 @@
  * Creation date: (5/29/2003 10:03:41 AM)
  * @param newFieldQueueID int
  */
-public void setQueueID(SimulationJobStatus.SimulationQueueID newFieldQueueID) {
+public void setQueueID(SimulationQueueID newFieldQueueID) {
 	if (newFieldQueueID==null){
 		throw new RuntimeException("queueID must not be null");
 	}
Index: src/cbit/vcell/messaging/db/SimulationJobStatus.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobStatus.java	(revision 12229)
+++ src/cbit/vcell/messaging/db/SimulationJobStatus.java	(revision 12228)
@@ -38,7 +38,7 @@
 	private SimulationQueueEntryStatus fieldSimulationQueueEntryStatus = null;	// may be null
 	private SimulationExecutionStatus fieldSimulationExecutionStatus = null;	// may be null
 
-	public static enum SchedulerStatus {
+	public enum SchedulerStatus {
 		WAITING(0,"waiting"),
 		QUEUED(1,"queued"),
 		DISPATCHED(2,"dispatched"),
@@ -108,35 +108,6 @@
 
 	
 
-	public static enum SimulationQueueID {
-		QUEUE_ID_WAITING(0),
-		QUEUE_ID_SIMULATIONJOB(1),
-		QUEUE_ID_NULL(2);
-		
-		private int databaseNumber;
-		private SimulationQueueID(int databaseNumber){
-			this.databaseNumber = databaseNumber;
-		}
-		
-		public int getDatabaseNumber(){
-			return this.databaseNumber;
-		}
-		
-		public static SimulationQueueID fromDatabaseNumber(int databaseNumber){
-			if (databaseNumber == QUEUE_ID_NULL.databaseNumber){
-				return QUEUE_ID_NULL;
-			}else if (databaseNumber == QUEUE_ID_SIMULATIONJOB.databaseNumber){
-				return QUEUE_ID_SIMULATIONJOB;
-			}else if (databaseNumber == QUEUE_ID_WAITING.databaseNumber){
-				return QUEUE_ID_WAITING;
-			}else{
-				return null;
-			}
-		}
-	}
-
-
-
 /**
  * SimulationJobStatus constructor comment.
  */
Index: src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java
===================================================================
--- src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java	(revision 12229)
+++ src/cbit/vcell/messaging/db/ServiceStatusDbDriver.java	(revision 12228)
@@ -16,10 +16,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
 
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.ServiceStatus;
 
 /**
Index: src/cbit/vcell/messaging/db/SimulationJobTable.java
===================================================================
--- src/cbit/vcell/messaging/db/SimulationJobTable.java	(revision 12229)
+++ src/cbit/vcell/messaging/db/SimulationJobTable.java	(revision 12228)
@@ -12,6 +12,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+import org.vcell.util.MessageConstants.SimulationQueueID;
 import org.vcell.util.TokenMangler;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
@@ -20,7 +21,6 @@
 import cbit.sql.Table;
 import cbit.vcell.message.server.htc.HtcJobID;
 import cbit.vcell.messaging.db.SimulationJobStatus.SchedulerStatus;
-import cbit.vcell.messaging.db.SimulationJobStatus.SimulationQueueID;
 import cbit.vcell.modeldb.DatabaseConstants;
 import cbit.vcell.modeldb.SimulationTable;
 import cbit.vcell.modeldb.UserTable;
@@ -113,7 +113,7 @@
 	if (rset.wasNull()) {
 		parsedQueueID = -1;
 	}
-	SimulationJobStatus.SimulationQueueID simulationQueueID = SimulationJobStatus.SimulationQueueID.fromDatabaseNumber(parsedQueueID);
+	SimulationQueueID simulationQueueID = SimulationQueueID.fromDatabaseNumber(parsedQueueID);
 	
 	SimulationQueueEntryStatus simQueueEntryStatus = new SimulationQueueEntryStatus(parsedQueuedDate,parsedQueuePriority,simulationQueueID);	
 	
@@ -204,7 +204,7 @@
 	//queueID
 	buffer.append(queueID + "=");
 	if (simQueueEntryStatus != null){
-		SimulationJobStatus.SimulationQueueID simQueueID = simQueueEntryStatus.getQueueID();
+		SimulationQueueID simQueueID = simQueueEntryStatus.getQueueID();
 		if (simQueueID!=null){
 			buffer.append(simQueueEntryStatus.getQueueID().getDatabaseNumber() + ",");
 		}else{
Index: src/cbit/vcell/messaging/db/ServiceTable.java
===================================================================
--- src/cbit/vcell/messaging/db/ServiceTable.java	(revision 12229)
+++ src/cbit/vcell/messaging/db/ServiceTable.java	(revision 12228)
@@ -12,16 +12,14 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+import org.vcell.util.MessageConstants.ServiceType;
 import org.vcell.util.document.KeyValue;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.sql.Field;
 import cbit.sql.Table;
 import cbit.vcell.message.server.ServiceSpec;
-import cbit.vcell.message.server.ServiceSpec.ServiceStartupType;
-import cbit.vcell.message.server.ServiceSpec.ServiceType;
 import cbit.vcell.message.server.ServiceStatus;
-import cbit.vcell.message.server.ServiceStatus.ServiceStatusType;
 import cbit.vcell.message.server.htc.HtcJobID;
 
 public class ServiceTable extends cbit.sql.Table {
@@ -91,8 +89,8 @@
 	if (!rset.wasNull() && parsedHtcJobDatabaseString!=null && parsedHtcJobDatabaseString.length()>0) {
 		parsedHtcJobId = HtcJobID.fromDatabase(parsedHtcJobDatabaseString);
 	}
-	ServiceStatus serviceStatus = new ServiceStatus(new ServiceSpec(parsedServerID, ServiceType.fromName(parsedType), parsedOrdinal, ServiceStartupType.fromDatabaseNumber(parsedStartupType), parsedMemory), 
-			parsedDate, ServiceStatusType.fromDatabaseNumber(parsedStatus), parsedStatusMsg, parsedHtcJobId);
+	ServiceStatus serviceStatus = new ServiceStatus(new ServiceSpec(parsedServerID, ServiceType.fromName(parsedType), parsedOrdinal, parsedStartupType, parsedMemory), 
+			parsedDate, parsedStatus, parsedStatusMsg, parsedHtcJobId);
 	
 	return serviceStatus;
 }
@@ -115,13 +113,13 @@
 	//ordinal
 	buffer.append(ordinal + "=" + serviceStatus.getServiceSpec().getOrdinal() + ",");
 	//startupType
-	buffer.append(startupType + "=" + serviceStatus.getServiceSpec().getStartupType().getDatabaseNumber() + ",");
+	buffer.append(startupType + "=" + serviceStatus.getServiceSpec().getStartupType() + ",");
 	//memory
 	buffer.append(memoryMB + "=" + serviceStatus.getServiceSpec().getMemoryMB() + ",");
 	//date
 	buffer.append(date + "=sysdate,");
 	//status
-	buffer.append(status + "=" + serviceStatus.getStatus().getDatabaseNumber() + ",");
+	buffer.append(status + "=" + serviceStatus.getStatus() + ",");
 	//statusMsg
 	buffer.append(statusMsg + "='" + serviceStatus.getStatusMsg() + "',");
 	//host
@@ -155,13 +153,13 @@
 	//ordinal
 	buffer.append(serviceStatus.getServiceSpec().getOrdinal() + ",");
 	//startupType
-	buffer.append(serviceStatus.getServiceSpec().getStartupType().getDatabaseNumber() + ",");
+	buffer.append(serviceStatus.getServiceSpec().getStartupType() + ",");
 	//memory
 	buffer.append(serviceStatus.getServiceSpec().getMemoryMB() + ",");
 	//date
 	buffer.append("sysdate,");
 	//status
-	buffer.append(serviceStatus.getStatus().getDatabaseNumber() + ",");
+	buffer.append(serviceStatus.getStatus() + ",");
 	//statusMsg
 	buffer.append("'" + serviceStatus.getStatusMsg() + "',");
 	//host
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12229)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12228)
@@ -6,6 +6,7 @@
 import java.util.Arrays;
 import java.util.Date;
 
+import org.vcell.util.MessageConstants;
 import org.vcell.util.document.VCellServerID;
 
 import cbit.rmi.event.MessageEvent;
@@ -14,7 +15,6 @@
 import cbit.vcell.message.VCDestination;
 import cbit.vcell.message.VCMessage;
 import cbit.vcell.message.VCRpcRequest;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.message.messages.StatusMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.cmd.CommandService.CommandOutput;
@@ -809,8 +809,8 @@
 		if (message.propertyExists(MessageConstants.USERNAME_PROPERTY)){
 			dbObject.put(MongoMessage_userName, message.getStringProperty(MessageConstants.USERNAME_PROPERTY));
 		}
-		if (message.propertyExists(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY)){
-			dbObject.put(MongoMessage_simProgress, message.getDoubleProperty(MessageConstants.SIMULATION_STATUS_PROGRESS_PROPERTY));
+		if (message.propertyExists(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY)){
+			dbObject.put(MongoMessage_simProgress, message.getDoubleProperty(StatusMessage.SIMULATION_STATUS_PROGRESS_PROPERTY));
 		}
 	}
 	
Index: src/cbit/vcell/client/server/AsynchMessageManager.java
===================================================================
--- src/cbit/vcell/client/server/AsynchMessageManager.java	(revision 12229)
+++ src/cbit/vcell/client/server/AsynchMessageManager.java	(revision 12228)
@@ -14,6 +14,7 @@
 import javax.swing.SwingUtilities;
 import javax.swing.event.EventListenerList;
 
+import org.vcell.util.MessageConstants;
 
 import cbit.rmi.event.DataJobEvent;
 import cbit.rmi.event.DataJobListener;
@@ -30,7 +31,6 @@
 import cbit.vcell.client.SimStatusEvent;
 import cbit.vcell.client.SimStatusListener;
 import cbit.vcell.client.TopLevelWindowManager;
-import cbit.vcell.message.messages.MessageConstants;
 import cbit.vcell.server.VCellConnection;
 
 /**
Index: src/org/vcell/util/MessageConstants.java
===================================================================
--- src/org/vcell/util/MessageConstants.java	(revision 0)
+++ src/org/vcell/util/MessageConstants.java	(revision 12228)
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 1999-2011 University of Connecticut Health Center
+ *
+ * Licensed under the MIT License (the "License").
+ * You may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *  http://www.opensource.org/licenses/mit-license.php
+ */
+
+package org.vcell.util;
+/**
+ * Insert the type's description here.
+ * Creation date: (10/23/2001 12:16:47 PM)
+ * @author: Jim Schaff
+ */
+public interface MessageConstants {
+	public static final int MAX_SERVICE_LISTENERS = 5;	
+	
+	public static final String METHOD_NAME_PROPERTY	= "MethodName";	
+	public static final String USERNAME_PROPERTY	= "UserName";
+	public static final String 		USERNAME_PROPERTY_VALUE_ALL = "All";
+	public static final String SIZE_MB_PROPERTY		= "SizeMB";
+	public static final String SIMKEY_PROPERTY		= "SimKey";
+	public static final String JOBINDEX_PROPERTY		= "JobIndex";
+	public static final String TASKID_PROPERTY		= "TaskID";
+	public static final String FIELDDATAID_PROPERTY		= "FieldDataID";
+	public static final String HTCJOBID_PROPERTY 	= "HtcJobID";
+
+	// bitmapped counter so that allows 3 retries for each request (but preserves ordinal nature)
+	// bits 0-3: retry count
+	// bits 4-31: submit
+	// max retries must be less than 15.
+	public static final int TASKID_USERCOUNTER_MASK		= 0xFFFFFFF0;
+	public static final int TASKID_RETRYCOUNTER_MASK	= 0x0000000F;
+	public static final int TASKID_USERINCREMENT	    = 0x00000010;
+	public static final int TASKID_MAX_RETRIES = 0;
+
+	public static final String JMSCORRELATIONID_PROPERTY	= "JMSCorrelationID";
+	
+	public static final String MESSAGE_TYPE_SIMULATION_JOB_VALUE = "SimulationJob";
+	public static final String MESSAGE_TYPE_SIMSTATUS_VALUE	= "SimStatus";
+	public static final String MESSAGE_TYPE_RPC_SERVICE_VALUE = "RPCService";
+	public static final String MESSAGE_TYPE_EXPORT_EVENT_VALUE = "ExportEvent";
+	public static final String MESSAGE_TYPE_DATA_EVENT_VALUE = "DataEvent";
+	public static final String MESSAGE_TYPE_STOPSIMULATION_VALUE	= "StopSimulation";	
+	public static final String MESSAGE_TYPE_FLUSH_VALUE = "Flush";
+	
+	public static final String MESSAGE_TYPE_PROPERTY	= "MessageType";
+
+	public static final String COMPUTE_RESOURCE_PROPERTY	= "ComputeResource";	
+	
+	public static final String HOSTNAME_PROPERTY		= "HostName";
+	public static final String SERVICE_TYPE_PROPERTY	= "ServiceType";
+	
+	public enum ServiceType { 
+		DB ("Db"),	
+		DATA ("Data"),
+		DATAEXPORT ("Exprt"),
+		DISPATCH ("Dsptch"),
+		PBSCOMPUTE ("PbsC"),	// submit everything to PBS
+		LOCALCOMPUTE ("LclC"),   // local pde and ode
+		SERVERMANAGER ("ServerManager"),
+		TESTING_SERVICE ("TestingService");
+		
+		private final String typeName;
+		ServiceType(String tn) {
+			typeName = tn;
+		}
+		
+		public String getName() {
+			return typeName;
+		}
+
+		@Override
+		public String toString() {
+			return typeName;
+		}
+		
+		public static ServiceType fromName(String name) {
+			for (ServiceType st : ServiceType.values()) {
+				if (st.getName().equals(name)) {
+					return st;
+				}
+			}			
+			throw new RuntimeException(name + " is not a legitiamte service type");
+		}
+	}
+
+	public static final int PRIORITY_LOW = 0;
+	public static final int PRIORITY_DEFAULT = 5;
+	public static final int PRIORITY_HIGH = 9;
+
+	public enum SimulationQueueID {
+		QUEUE_ID_WAITING(0),
+		QUEUE_ID_SIMULATIONJOB(1),
+		QUEUE_ID_NULL(2);
+		
+		private int databaseNumber;
+		private SimulationQueueID(int databaseNumber){
+			this.databaseNumber = databaseNumber;
+		}
+		
+		public int getDatabaseNumber(){
+			return this.databaseNumber;
+		}
+		
+		public static SimulationQueueID fromDatabaseNumber(int databaseNumber){
+			if (databaseNumber == QUEUE_ID_NULL.databaseNumber){
+				return QUEUE_ID_NULL;
+			}else if (databaseNumber == QUEUE_ID_SIMULATIONJOB.databaseNumber){
+				return QUEUE_ID_SIMULATIONJOB;
+			}else if (databaseNumber == QUEUE_ID_WAITING.databaseNumber){
+				return QUEUE_ID_WAITING;
+			}else{
+				return null;
+			}
+		}
+	};
+
+	public static final int SECOND_IN_MS = 1000; // in milliseconds
+	public static final int MINUTE_IN_S = 60;
+	public static final int MINUTE_IN_MS = MINUTE_IN_S * SECOND_IN_MS; // in milliseconds
+
+	public static final long INTERVAL_PING_SERVER_MS = 5 * MINUTE_IN_MS; // in milliseconds
+	public static final long INTERVAL_SERVER_FAIL_MS = 10 * MINUTE_IN_MS; // in milliseconds
+	public static final long INTERVAL_SIMULATIONJOBSTATUS_TIMEOUT_MS = 10 * MINUTE_IN_MS; // in milliseconds
+	public static final long INTERVAL_PROGRESS_MESSAGE_MS = 5 * SECOND_IN_MS;
+
+
+}
