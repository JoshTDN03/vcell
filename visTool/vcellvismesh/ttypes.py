#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Face:
  Xm = 0
  Xp = 1
  Ym = 2
  Yp = 3
  Zm = 4
  Zp = 5

  _VALUES_TO_NAMES = {
    0: "Xm",
    1: "Xp",
    2: "Ym",
    3: "Yp",
    4: "Zm",
    5: "Zp",
  }

  _NAMES_TO_VALUES = {
    "Xm": 0,
    "Xp": 1,
    "Ym": 2,
    "Yp": 3,
    "Zm": 4,
    "Zp": 5,
  }


class Vect3D:
  """
  Attributes:
   - x
   - y
   - z
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'x', None, None, ), # 1
    (2, TType.DOUBLE, 'y', None, None, ), # 2
    (3, TType.DOUBLE, 'z', None, None, ), # 3
  )

  def __init__(self, x=None, y=None, z=None,):
    self.x = x
    self.y = y
    self.z = z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.z = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Vect3D')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 1)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 2)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    if self.z is not None:
      oprot.writeFieldBegin('z', TType.DOUBLE, 3)
      oprot.writeDouble(self.z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.x is None:
      raise TProtocol.TProtocolException(message='Required field x is unset!')
    if self.y is None:
      raise TProtocol.TProtocolException(message='Required field y is unset!')
    if self.z is None:
      raise TProtocol.TProtocolException(message='Required field z is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.z)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisPoint:
  """
  Attributes:
   - x
   - y
   - z
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'x', None, None, ), # 1
    (2, TType.DOUBLE, 'y', None, None, ), # 2
    (3, TType.DOUBLE, 'z', None, None, ), # 3
  )

  def __init__(self, x=None, y=None, z=None,):
    self.x = x
    self.y = y
    self.z = z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.z = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisPoint')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 1)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 2)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    if self.z is not None:
      oprot.writeFieldBegin('z', TType.DOUBLE, 3)
      oprot.writeDouble(self.z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.x is None:
      raise TProtocol.TProtocolException(message='Required field x is unset!')
    if self.y is None:
      raise TProtocol.TProtocolException(message='Required field y is unset!')
    if self.z is None:
      raise TProtocol.TProtocolException(message='Required field z is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.z)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChomboVolumeIndex:
  """
  Attributes:
   - level
   - boxNumber
   - boxIndex
   - fraction
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'level', None, None, ), # 1
    (2, TType.I32, 'boxNumber', None, None, ), # 2
    (3, TType.I32, 'boxIndex', None, None, ), # 3
    (4, TType.DOUBLE, 'fraction', None, None, ), # 4
  )

  def __init__(self, level=None, boxNumber=None, boxIndex=None, fraction=None,):
    self.level = level
    self.boxNumber = boxNumber
    self.boxIndex = boxIndex
    self.fraction = fraction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.boxNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.boxIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.fraction = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChomboVolumeIndex')
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 1)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.boxNumber is not None:
      oprot.writeFieldBegin('boxNumber', TType.I32, 2)
      oprot.writeI32(self.boxNumber)
      oprot.writeFieldEnd()
    if self.boxIndex is not None:
      oprot.writeFieldBegin('boxIndex', TType.I32, 3)
      oprot.writeI32(self.boxIndex)
      oprot.writeFieldEnd()
    if self.fraction is not None:
      oprot.writeFieldBegin('fraction', TType.DOUBLE, 4)
      oprot.writeDouble(self.fraction)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.level is None:
      raise TProtocol.TProtocolException(message='Required field level is unset!')
    if self.boxNumber is None:
      raise TProtocol.TProtocolException(message='Required field boxNumber is unset!')
    if self.boxIndex is None:
      raise TProtocol.TProtocolException(message='Required field boxIndex is unset!')
    if self.fraction is None:
      raise TProtocol.TProtocolException(message='Required field fraction is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.boxNumber)
    value = (value * 31) ^ hash(self.boxIndex)
    value = (value * 31) ^ hash(self.fraction)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChomboSurfaceIndex:
  """
  Attributes:
   - index
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'index', None, None, ), # 1
  )

  def __init__(self, index=None,):
    self.index = index

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChomboSurfaceIndex')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 1)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.index is None:
      raise TProtocol.TProtocolException(message='Required field index is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.index)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FiniteVolumeIndex:
  """
  Attributes:
   - globalIndex
   - regionIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'globalIndex', None, None, ), # 1
    (2, TType.I32, 'regionIndex', None, None, ), # 2
  )

  def __init__(self, globalIndex=None, regionIndex=None,):
    self.globalIndex = globalIndex
    self.regionIndex = regionIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.globalIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.regionIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FiniteVolumeIndex')
    if self.globalIndex is not None:
      oprot.writeFieldBegin('globalIndex', TType.I32, 1)
      oprot.writeI32(self.globalIndex)
      oprot.writeFieldEnd()
    if self.regionIndex is not None:
      oprot.writeFieldBegin('regionIndex', TType.I32, 2)
      oprot.writeI32(self.regionIndex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.globalIndex is None:
      raise TProtocol.TProtocolException(message='Required field globalIndex is unset!')
    if self.regionIndex is None:
      raise TProtocol.TProtocolException(message='Required field regionIndex is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.globalIndex)
    value = (value * 31) ^ hash(self.regionIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisPolygon:
  """
  Attributes:
   - pointIndices
   - chomboVolumeIndex
   - finiteVolumeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pointIndices', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'chomboVolumeIndex', (ChomboVolumeIndex, ChomboVolumeIndex.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'finiteVolumeIndex', (FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec), None, ), # 3
  )

  def __init__(self, pointIndices=None, chomboVolumeIndex=None, finiteVolumeIndex=None,):
    self.pointIndices = pointIndices
    self.chomboVolumeIndex = chomboVolumeIndex
    self.finiteVolumeIndex = finiteVolumeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pointIndices = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.pointIndices.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chomboVolumeIndex = ChomboVolumeIndex()
          self.chomboVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.finiteVolumeIndex = FiniteVolumeIndex()
          self.finiteVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisPolygon')
    if self.pointIndices is not None:
      oprot.writeFieldBegin('pointIndices', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.pointIndices))
      for iter6 in self.pointIndices:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chomboVolumeIndex is not None:
      oprot.writeFieldBegin('chomboVolumeIndex', TType.STRUCT, 2)
      self.chomboVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndex is not None:
      oprot.writeFieldBegin('finiteVolumeIndex', TType.STRUCT, 3)
      self.finiteVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pointIndices is None:
      raise TProtocol.TProtocolException(message='Required field pointIndices is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pointIndices)
    value = (value * 31) ^ hash(self.chomboVolumeIndex)
    value = (value * 31) ^ hash(self.finiteVolumeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PolyhedronFace:
  """
  Attributes:
   - vertices
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'vertices', (TType.I32,None), None, ), # 1
  )

  def __init__(self, vertices=None,):
    self.vertices = vertices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vertices = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.vertices.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PolyhedronFace')
    if self.vertices is not None:
      oprot.writeFieldBegin('vertices', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.vertices))
      for iter13 in self.vertices:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.vertices is None:
      raise TProtocol.TProtocolException(message='Required field vertices is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vertices)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisIrregularPolyhedron:
  """
  Attributes:
   - polyhedronFaces
   - chomboVolumeIndex
   - finiteVolumeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'polyhedronFaces', (TType.STRUCT,(PolyhedronFace, PolyhedronFace.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'chomboVolumeIndex', (ChomboVolumeIndex, ChomboVolumeIndex.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'finiteVolumeIndex', (FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec), None, ), # 3
  )

  def __init__(self, polyhedronFaces=None, chomboVolumeIndex=None, finiteVolumeIndex=None,):
    self.polyhedronFaces = polyhedronFaces
    self.chomboVolumeIndex = chomboVolumeIndex
    self.finiteVolumeIndex = finiteVolumeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.polyhedronFaces = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = PolyhedronFace()
            _elem19.read(iprot)
            self.polyhedronFaces.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chomboVolumeIndex = ChomboVolumeIndex()
          self.chomboVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.finiteVolumeIndex = FiniteVolumeIndex()
          self.finiteVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisIrregularPolyhedron')
    if self.polyhedronFaces is not None:
      oprot.writeFieldBegin('polyhedronFaces', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.polyhedronFaces))
      for iter20 in self.polyhedronFaces:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chomboVolumeIndex is not None:
      oprot.writeFieldBegin('chomboVolumeIndex', TType.STRUCT, 2)
      self.chomboVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndex is not None:
      oprot.writeFieldBegin('finiteVolumeIndex', TType.STRUCT, 3)
      self.finiteVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.polyhedronFaces is None:
      raise TProtocol.TProtocolException(message='Required field polyhedronFaces is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.polyhedronFaces)
    value = (value * 31) ^ hash(self.chomboVolumeIndex)
    value = (value * 31) ^ hash(self.finiteVolumeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisVoxel:
  """
  Attributes:
   - pointIndices
   - chomboVolumeIndex
   - finiteVolumeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pointIndices', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'chomboVolumeIndex', (ChomboVolumeIndex, ChomboVolumeIndex.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'finiteVolumeIndex', (FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec), None, ), # 3
  )

  def __init__(self, pointIndices=None, chomboVolumeIndex=None, finiteVolumeIndex=None,):
    self.pointIndices = pointIndices
    self.chomboVolumeIndex = chomboVolumeIndex
    self.finiteVolumeIndex = finiteVolumeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pointIndices = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.pointIndices.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chomboVolumeIndex = ChomboVolumeIndex()
          self.chomboVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.finiteVolumeIndex = FiniteVolumeIndex()
          self.finiteVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisVoxel')
    if self.pointIndices is not None:
      oprot.writeFieldBegin('pointIndices', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.pointIndices))
      for iter27 in self.pointIndices:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chomboVolumeIndex is not None:
      oprot.writeFieldBegin('chomboVolumeIndex', TType.STRUCT, 2)
      self.chomboVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndex is not None:
      oprot.writeFieldBegin('finiteVolumeIndex', TType.STRUCT, 3)
      self.finiteVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pointIndices is None:
      raise TProtocol.TProtocolException(message='Required field pointIndices is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pointIndices)
    value = (value * 31) ^ hash(self.chomboVolumeIndex)
    value = (value * 31) ^ hash(self.finiteVolumeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisTetrahedron:
  """
  Attributes:
   - pointIndices
   - chomboVolumeIndex
   - finiteVolumeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pointIndices', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'chomboVolumeIndex', (ChomboVolumeIndex, ChomboVolumeIndex.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'finiteVolumeIndex', (FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec), None, ), # 3
  )

  def __init__(self, pointIndices=None, chomboVolumeIndex=None, finiteVolumeIndex=None,):
    self.pointIndices = pointIndices
    self.chomboVolumeIndex = chomboVolumeIndex
    self.finiteVolumeIndex = finiteVolumeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pointIndices = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.pointIndices.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chomboVolumeIndex = ChomboVolumeIndex()
          self.chomboVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.finiteVolumeIndex = FiniteVolumeIndex()
          self.finiteVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisTetrahedron')
    if self.pointIndices is not None:
      oprot.writeFieldBegin('pointIndices', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.pointIndices))
      for iter34 in self.pointIndices:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chomboVolumeIndex is not None:
      oprot.writeFieldBegin('chomboVolumeIndex', TType.STRUCT, 2)
      self.chomboVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndex is not None:
      oprot.writeFieldBegin('finiteVolumeIndex', TType.STRUCT, 3)
      self.finiteVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pointIndices is None:
      raise TProtocol.TProtocolException(message='Required field pointIndices is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pointIndices)
    value = (value * 31) ^ hash(self.chomboVolumeIndex)
    value = (value * 31) ^ hash(self.finiteVolumeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisSurfaceTriangle:
  """
  Attributes:
   - pointIndices
   - face
   - chomboSurfaceIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pointIndices', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'face', None, None, ), # 2
    (3, TType.STRUCT, 'chomboSurfaceIndex', (ChomboSurfaceIndex, ChomboSurfaceIndex.thrift_spec), None, ), # 3
  )

  def __init__(self, pointIndices=None, face=None, chomboSurfaceIndex=None,):
    self.pointIndices = pointIndices
    self.face = face
    self.chomboSurfaceIndex = chomboSurfaceIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pointIndices = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI32();
            self.pointIndices.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.face = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.chomboSurfaceIndex = ChomboSurfaceIndex()
          self.chomboSurfaceIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisSurfaceTriangle')
    if self.pointIndices is not None:
      oprot.writeFieldBegin('pointIndices', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.pointIndices))
      for iter41 in self.pointIndices:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.face is not None:
      oprot.writeFieldBegin('face', TType.I32, 2)
      oprot.writeI32(self.face)
      oprot.writeFieldEnd()
    if self.chomboSurfaceIndex is not None:
      oprot.writeFieldBegin('chomboSurfaceIndex', TType.STRUCT, 3)
      self.chomboSurfaceIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pointIndices is None:
      raise TProtocol.TProtocolException(message='Required field pointIndices is unset!')
    if self.face is None:
      raise TProtocol.TProtocolException(message='Required field face is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pointIndices)
    value = (value * 31) ^ hash(self.face)
    value = (value * 31) ^ hash(self.chomboSurfaceIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisLine:
  """
  Attributes:
   - p1
   - p2
   - chomboSurfaceIndex
   - finiteVolumeIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'p1', None, None, ), # 1
    (2, TType.I32, 'p2', None, None, ), # 2
    (3, TType.STRUCT, 'chomboSurfaceIndex', (ChomboSurfaceIndex, ChomboSurfaceIndex.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'finiteVolumeIndex', (FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec), None, ), # 4
  )

  def __init__(self, p1=None, p2=None, chomboSurfaceIndex=None, finiteVolumeIndex=None,):
    self.p1 = p1
    self.p2 = p2
    self.chomboSurfaceIndex = chomboSurfaceIndex
    self.finiteVolumeIndex = finiteVolumeIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.p1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.p2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.chomboSurfaceIndex = ChomboSurfaceIndex()
          self.chomboSurfaceIndex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.finiteVolumeIndex = FiniteVolumeIndex()
          self.finiteVolumeIndex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisLine')
    if self.p1 is not None:
      oprot.writeFieldBegin('p1', TType.I32, 1)
      oprot.writeI32(self.p1)
      oprot.writeFieldEnd()
    if self.p2 is not None:
      oprot.writeFieldBegin('p2', TType.I32, 2)
      oprot.writeI32(self.p2)
      oprot.writeFieldEnd()
    if self.chomboSurfaceIndex is not None:
      oprot.writeFieldBegin('chomboSurfaceIndex', TType.STRUCT, 3)
      self.chomboSurfaceIndex.write(oprot)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndex is not None:
      oprot.writeFieldBegin('finiteVolumeIndex', TType.STRUCT, 4)
      self.finiteVolumeIndex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.p1 is None:
      raise TProtocol.TProtocolException(message='Required field p1 is unset!')
    if self.p2 is None:
      raise TProtocol.TProtocolException(message='Required field p2 is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.p1)
    value = (value * 31) ^ hash(self.p2)
    value = (value * 31) ^ hash(self.chomboSurfaceIndex)
    value = (value * 31) ^ hash(self.finiteVolumeIndex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FiniteVolumeIndexData:
  """
  Attributes:
   - domainName
   - finiteVolumeIndices
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domainName', None, None, ), # 1
    (2, TType.LIST, 'finiteVolumeIndices', (TType.STRUCT,(FiniteVolumeIndex, FiniteVolumeIndex.thrift_spec)), None, ), # 2
  )

  def __init__(self, domainName=None, finiteVolumeIndices=None,):
    self.domainName = domainName
    self.finiteVolumeIndices = finiteVolumeIndices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domainName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.finiteVolumeIndices = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = FiniteVolumeIndex()
            _elem47.read(iprot)
            self.finiteVolumeIndices.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FiniteVolumeIndexData')
    if self.domainName is not None:
      oprot.writeFieldBegin('domainName', TType.STRING, 1)
      oprot.writeString(self.domainName)
      oprot.writeFieldEnd()
    if self.finiteVolumeIndices is not None:
      oprot.writeFieldBegin('finiteVolumeIndices', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.finiteVolumeIndices))
      for iter48 in self.finiteVolumeIndices:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.domainName is None:
      raise TProtocol.TProtocolException(message='Required field domainName is unset!')
    if self.finiteVolumeIndices is None:
      raise TProtocol.TProtocolException(message='Required field finiteVolumeIndices is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.domainName)
    value = (value * 31) ^ hash(self.finiteVolumeIndices)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChomboIndexData:
  """
  Attributes:
   - domainName
   - chomboSurfaceIndices
   - chomboVolumeIndices
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domainName', None, None, ), # 1
    (2, TType.LIST, 'chomboSurfaceIndices', (TType.STRUCT,(ChomboSurfaceIndex, ChomboSurfaceIndex.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'chomboVolumeIndices', (TType.STRUCT,(ChomboVolumeIndex, ChomboVolumeIndex.thrift_spec)), None, ), # 3
  )

  def __init__(self, domainName=None, chomboSurfaceIndices=None, chomboVolumeIndices=None,):
    self.domainName = domainName
    self.chomboSurfaceIndices = chomboSurfaceIndices
    self.chomboVolumeIndices = chomboVolumeIndices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domainName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.chomboSurfaceIndices = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = ChomboSurfaceIndex()
            _elem54.read(iprot)
            self.chomboSurfaceIndices.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.chomboVolumeIndices = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = ChomboVolumeIndex()
            _elem60.read(iprot)
            self.chomboVolumeIndices.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChomboIndexData')
    if self.domainName is not None:
      oprot.writeFieldBegin('domainName', TType.STRING, 1)
      oprot.writeString(self.domainName)
      oprot.writeFieldEnd()
    if self.chomboSurfaceIndices is not None:
      oprot.writeFieldBegin('chomboSurfaceIndices', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.chomboSurfaceIndices))
      for iter61 in self.chomboSurfaceIndices:
        iter61.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chomboVolumeIndices is not None:
      oprot.writeFieldBegin('chomboVolumeIndices', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.chomboVolumeIndices))
      for iter62 in self.chomboVolumeIndices:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.domainName is None:
      raise TProtocol.TProtocolException(message='Required field domainName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.domainName)
    value = (value * 31) ^ hash(self.chomboSurfaceIndices)
    value = (value * 31) ^ hash(self.chomboVolumeIndices)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VarData:
  """
  Attributes:
   - varName
   - varData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'varName', None, None, ), # 1
    (2, TType.LIST, 'varData', (TType.DOUBLE,None), None, ), # 2
  )

  def __init__(self, varName=None, varData=None,):
    self.varName = varName
    self.varData = varData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.varName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.varData = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readDouble();
            self.varData.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VarData')
    if self.varName is not None:
      oprot.writeFieldBegin('varName', TType.STRING, 1)
      oprot.writeString(self.varName)
      oprot.writeFieldEnd()
    if self.varData is not None:
      oprot.writeFieldBegin('varData', TType.LIST, 2)
      oprot.writeListBegin(TType.DOUBLE, len(self.varData))
      for iter69 in self.varData:
        oprot.writeDouble(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.varName is None:
      raise TProtocol.TProtocolException(message='Required field varName is unset!')
    if self.varData is None:
      raise TProtocol.TProtocolException(message='Required field varData is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.varName)
    value = (value * 31) ^ hash(self.varData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VisMesh:
  """
  Attributes:
   - dimension
   - origin
   - extent
   - points
   - polygons
   - irregularPolyhedra
   - tetrahedra
   - visVoxels
   - surfaceTriangles
   - visLines
   - surfacePoints
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dimension', None, None, ), # 1
    (2, TType.STRUCT, 'origin', (Vect3D, Vect3D.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'extent', (Vect3D, Vect3D.thrift_spec), None, ), # 3
    (4, TType.LIST, 'points', (TType.STRUCT,(VisPoint, VisPoint.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'polygons', (TType.STRUCT,(VisPolygon, VisPolygon.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'irregularPolyhedra', (TType.STRUCT,(VisIrregularPolyhedron, VisIrregularPolyhedron.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'tetrahedra', (TType.STRUCT,(VisTetrahedron, VisTetrahedron.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'visVoxels', (TType.STRUCT,(VisVoxel, VisVoxel.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'surfaceTriangles', (TType.STRUCT,(VisSurfaceTriangle, VisSurfaceTriangle.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'visLines', (TType.STRUCT,(VisLine, VisLine.thrift_spec)), None, ), # 10
    (11, TType.LIST, 'surfacePoints', (TType.STRUCT,(VisPoint, VisPoint.thrift_spec)), None, ), # 11
  )

  def __init__(self, dimension=None, origin=None, extent=None, points=None, polygons=None, irregularPolyhedra=None, tetrahedra=None, visVoxels=None, surfaceTriangles=None, visLines=None, surfacePoints=None,):
    self.dimension = dimension
    self.origin = origin
    self.extent = extent
    self.points = points
    self.polygons = polygons
    self.irregularPolyhedra = irregularPolyhedra
    self.tetrahedra = tetrahedra
    self.visVoxels = visVoxels
    self.surfaceTriangles = surfaceTriangles
    self.visLines = visLines
    self.surfacePoints = surfacePoints

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dimension = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.origin = Vect3D()
          self.origin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.extent = Vect3D()
          self.extent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.points = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = VisPoint()
            _elem75.read(iprot)
            self.points.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.polygons = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = VisPolygon()
            _elem81.read(iprot)
            self.polygons.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.irregularPolyhedra = []
          (_etype85, _size82) = iprot.readListBegin()
          for _i86 in xrange(_size82):
            _elem87 = VisIrregularPolyhedron()
            _elem87.read(iprot)
            self.irregularPolyhedra.append(_elem87)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.tetrahedra = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = VisTetrahedron()
            _elem93.read(iprot)
            self.tetrahedra.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.visVoxels = []
          (_etype97, _size94) = iprot.readListBegin()
          for _i98 in xrange(_size94):
            _elem99 = VisVoxel()
            _elem99.read(iprot)
            self.visVoxels.append(_elem99)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.surfaceTriangles = []
          (_etype103, _size100) = iprot.readListBegin()
          for _i104 in xrange(_size100):
            _elem105 = VisSurfaceTriangle()
            _elem105.read(iprot)
            self.surfaceTriangles.append(_elem105)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.visLines = []
          (_etype109, _size106) = iprot.readListBegin()
          for _i110 in xrange(_size106):
            _elem111 = VisLine()
            _elem111.read(iprot)
            self.visLines.append(_elem111)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.surfacePoints = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = VisPoint()
            _elem117.read(iprot)
            self.surfacePoints.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VisMesh')
    if self.dimension is not None:
      oprot.writeFieldBegin('dimension', TType.I32, 1)
      oprot.writeI32(self.dimension)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRUCT, 2)
      self.origin.write(oprot)
      oprot.writeFieldEnd()
    if self.extent is not None:
      oprot.writeFieldBegin('extent', TType.STRUCT, 3)
      self.extent.write(oprot)
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.points))
      for iter118 in self.points:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.polygons is not None:
      oprot.writeFieldBegin('polygons', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.polygons))
      for iter119 in self.polygons:
        iter119.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.irregularPolyhedra is not None:
      oprot.writeFieldBegin('irregularPolyhedra', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.irregularPolyhedra))
      for iter120 in self.irregularPolyhedra:
        iter120.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tetrahedra is not None:
      oprot.writeFieldBegin('tetrahedra', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.tetrahedra))
      for iter121 in self.tetrahedra:
        iter121.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.visVoxels is not None:
      oprot.writeFieldBegin('visVoxels', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.visVoxels))
      for iter122 in self.visVoxels:
        iter122.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surfaceTriangles is not None:
      oprot.writeFieldBegin('surfaceTriangles', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.surfaceTriangles))
      for iter123 in self.surfaceTriangles:
        iter123.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.visLines is not None:
      oprot.writeFieldBegin('visLines', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.visLines))
      for iter124 in self.visLines:
        iter124.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surfacePoints is not None:
      oprot.writeFieldBegin('surfacePoints', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.surfacePoints))
      for iter125 in self.surfacePoints:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dimension is None:
      raise TProtocol.TProtocolException(message='Required field dimension is unset!')
    if self.origin is None:
      raise TProtocol.TProtocolException(message='Required field origin is unset!')
    if self.extent is None:
      raise TProtocol.TProtocolException(message='Required field extent is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dimension)
    value = (value * 31) ^ hash(self.origin)
    value = (value * 31) ^ hash(self.extent)
    value = (value * 31) ^ hash(self.points)
    value = (value * 31) ^ hash(self.polygons)
    value = (value * 31) ^ hash(self.irregularPolyhedra)
    value = (value * 31) ^ hash(self.tetrahedra)
    value = (value * 31) ^ hash(self.visVoxels)
    value = (value * 31) ^ hash(self.surfaceTriangles)
    value = (value * 31) ^ hash(self.visLines)
    value = (value * 31) ^ hash(self.surfacePoints)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
