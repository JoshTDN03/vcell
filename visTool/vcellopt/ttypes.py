#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ReferenceVariableType:
  independent = 0
  dependent = 1

  _VALUES_TO_NAMES = {
    0: "independent",
    1: "dependent",
  }

  _NAMES_TO_VALUES = {
    "independent": 0,
    "dependent": 1,
  }

class OptimizationParameterType:
  Number_of_Generations = 0
  Number_of_Iterations = 1
  Population_Size = 2
  Random_Number_Generator = 3
  Seed = 4
  IterationLimit = 5
  Tolerance = 6
  Rho = 7
  Scale = 8
  Swarm_Size = 9
  Std_Deviation = 10
  Start_Temperature = 11
  Cooling_Factor = 12
  Pf = 13

  _VALUES_TO_NAMES = {
    0: "Number_of_Generations",
    1: "Number_of_Iterations",
    2: "Population_Size",
    3: "Random_Number_Generator",
    4: "Seed",
    5: "IterationLimit",
    6: "Tolerance",
    7: "Rho",
    8: "Scale",
    9: "Swarm_Size",
    10: "Std_Deviation",
    11: "Start_Temperature",
    12: "Cooling_Factor",
    13: "Pf",
  }

  _NAMES_TO_VALUES = {
    "Number_of_Generations": 0,
    "Number_of_Iterations": 1,
    "Population_Size": 2,
    "Random_Number_Generator": 3,
    "Seed": 4,
    "IterationLimit": 5,
    "Tolerance": 6,
    "Rho": 7,
    "Scale": 8,
    "Swarm_Size": 9,
    "Std_Deviation": 10,
    "Start_Temperature": 11,
    "Cooling_Factor": 12,
    "Pf": 13,
  }

class OptimizationParameterDataType:
  INT = 0
  DOUBLE = 1

  _VALUES_TO_NAMES = {
    0: "INT",
    1: "DOUBLE",
  }

  _NAMES_TO_VALUES = {
    "INT": 0,
    "DOUBLE": 1,
  }

class OptimizationMethodType:
  EvolutionaryProgram = 0
  SRES = 1
  GeneticAlgorithm = 2
  GeneticAlgorithmSR = 3
  HookeJeeves = 4
  LevenbergMarquardt = 5
  NelderMead = 6
  ParticleSwarm = 7
  RandomSearch = 8
  SimulatedAnnealing = 9
  SteepestDescent = 10
  Praxis = 11
  TruncatedNewton = 12

  _VALUES_TO_NAMES = {
    0: "EvolutionaryProgram",
    1: "SRES",
    2: "GeneticAlgorithm",
    3: "GeneticAlgorithmSR",
    4: "HookeJeeves",
    5: "LevenbergMarquardt",
    6: "NelderMead",
    7: "ParticleSwarm",
    8: "RandomSearch",
    9: "SimulatedAnnealing",
    10: "SteepestDescent",
    11: "Praxis",
    12: "TruncatedNewton",
  }

  _NAMES_TO_VALUES = {
    "EvolutionaryProgram": 0,
    "SRES": 1,
    "GeneticAlgorithm": 2,
    "GeneticAlgorithmSR": 3,
    "HookeJeeves": 4,
    "LevenbergMarquardt": 5,
    "NelderMead": 6,
    "ParticleSwarm": 7,
    "RandomSearch": 8,
    "SimulatedAnnealing": 9,
    "SteepestDescent": 10,
    "Praxis": 11,
    "TruncatedNewton": 12,
  }


class ParameterDescription:
  """
  Attributes:
   - name
   - scale
   - minValue
   - maxValue
   - initialValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.DOUBLE, 'scale', None, None, ), # 2
    (3, TType.DOUBLE, 'minValue', None, None, ), # 3
    (4, TType.DOUBLE, 'maxValue', None, None, ), # 4
    (5, TType.DOUBLE, 'initialValue', None, None, ), # 5
  )

  def __init__(self, name=None, scale=None, minValue=None, maxValue=None, initialValue=None,):
    self.name = name
    self.scale = scale
    self.minValue = minValue
    self.maxValue = maxValue
    self.initialValue = initialValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.scale = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.minValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.maxValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.initialValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParameterDescription')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.scale is not None:
      oprot.writeFieldBegin('scale', TType.DOUBLE, 2)
      oprot.writeDouble(self.scale)
      oprot.writeFieldEnd()
    if self.minValue is not None:
      oprot.writeFieldBegin('minValue', TType.DOUBLE, 3)
      oprot.writeDouble(self.minValue)
      oprot.writeFieldEnd()
    if self.maxValue is not None:
      oprot.writeFieldBegin('maxValue', TType.DOUBLE, 4)
      oprot.writeDouble(self.maxValue)
      oprot.writeFieldEnd()
    if self.initialValue is not None:
      oprot.writeFieldBegin('initialValue', TType.DOUBLE, 5)
      oprot.writeDouble(self.initialValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.scale is None:
      raise TProtocol.TProtocolException(message='Required field scale is unset!')
    if self.minValue is None:
      raise TProtocol.TProtocolException(message='Required field minValue is unset!')
    if self.maxValue is None:
      raise TProtocol.TProtocolException(message='Required field maxValue is unset!')
    if self.initialValue is None:
      raise TProtocol.TProtocolException(message='Required field initialValue is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.scale)
    value = (value * 31) ^ hash(self.minValue)
    value = (value * 31) ^ hash(self.maxValue)
    value = (value * 31) ^ hash(self.initialValue)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReferenceVariable:
  """
  Attributes:
   - varName
   - varType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'varName', None, None, ), # 1
    (2, TType.I32, 'varType', None, None, ), # 2
  )

  def __init__(self, varName=None, varType=None,):
    self.varName = varName
    self.varType = varType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.varName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.varType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReferenceVariable')
    if self.varName is not None:
      oprot.writeFieldBegin('varName', TType.STRING, 1)
      oprot.writeString(self.varName)
      oprot.writeFieldEnd()
    if self.varType is not None:
      oprot.writeFieldBegin('varType', TType.I32, 2)
      oprot.writeI32(self.varType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.varName is None:
      raise TProtocol.TProtocolException(message='Required field varName is unset!')
    if self.varType is None:
      raise TProtocol.TProtocolException(message='Required field varType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.varName)
    value = (value * 31) ^ hash(self.varType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CopasiOptimizationParameter:
  """
  Attributes:
   - paramType
   - value
   - dataType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'paramType', None, None, ), # 1
    (2, TType.DOUBLE, 'value', None, None, ), # 2
    (3, TType.I32, 'dataType', None, None, ), # 3
  )

  def __init__(self, paramType=None, value=None, dataType=None,):
    self.paramType = paramType
    self.value = value
    self.dataType = dataType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.paramType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.value = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CopasiOptimizationParameter')
    if self.paramType is not None:
      oprot.writeFieldBegin('paramType', TType.I32, 1)
      oprot.writeI32(self.paramType)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.DOUBLE, 2)
      oprot.writeDouble(self.value)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 3)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.paramType is None:
      raise TProtocol.TProtocolException(message='Required field paramType is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    if self.dataType is None:
      raise TProtocol.TProtocolException(message='Required field dataType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.paramType)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.dataType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CopasiOptimizationMethod:
  """
  Attributes:
   - optimizationMethodType
   - optimizationParameterList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'optimizationMethodType', None, None, ), # 1
    (2, TType.LIST, 'optimizationParameterList', (TType.STRUCT,(CopasiOptimizationParameter, CopasiOptimizationParameter.thrift_spec)), None, ), # 2
  )

  def __init__(self, optimizationMethodType=None, optimizationParameterList=None,):
    self.optimizationMethodType = optimizationMethodType
    self.optimizationParameterList = optimizationParameterList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.optimizationMethodType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.optimizationParameterList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = CopasiOptimizationParameter()
            _elem5.read(iprot)
            self.optimizationParameterList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CopasiOptimizationMethod')
    if self.optimizationMethodType is not None:
      oprot.writeFieldBegin('optimizationMethodType', TType.I32, 1)
      oprot.writeI32(self.optimizationMethodType)
      oprot.writeFieldEnd()
    if self.optimizationParameterList is not None:
      oprot.writeFieldBegin('optimizationParameterList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.optimizationParameterList))
      for iter6 in self.optimizationParameterList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.optimizationMethodType is None:
      raise TProtocol.TProtocolException(message='Required field optimizationMethodType is unset!')
    if self.optimizationParameterList is None:
      raise TProtocol.TProtocolException(message='Required field optimizationParameterList is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.optimizationMethodType)
    value = (value * 31) ^ hash(self.optimizationParameterList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OptProblem:
  """
  Attributes:
   - mathModelSbmlFile
   - numberOfOptimizationRuns
   - parameterDescriptionList
   - referenceVariableList
   - experimentalDataFile
   - optimizationMethod
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mathModelSbmlFile', None, None, ), # 1
    (2, TType.I32, 'numberOfOptimizationRuns', None, None, ), # 2
    (3, TType.LIST, 'parameterDescriptionList', (TType.STRUCT,(ParameterDescription, ParameterDescription.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'referenceVariableList', (TType.STRUCT,(ReferenceVariable, ReferenceVariable.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'experimentalDataFile', None, None, ), # 5
    (6, TType.STRUCT, 'optimizationMethod', (CopasiOptimizationMethod, CopasiOptimizationMethod.thrift_spec), None, ), # 6
  )

  def __init__(self, mathModelSbmlFile=None, numberOfOptimizationRuns=None, parameterDescriptionList=None, referenceVariableList=None, experimentalDataFile=None, optimizationMethod=None,):
    self.mathModelSbmlFile = mathModelSbmlFile
    self.numberOfOptimizationRuns = numberOfOptimizationRuns
    self.parameterDescriptionList = parameterDescriptionList
    self.referenceVariableList = referenceVariableList
    self.experimentalDataFile = experimentalDataFile
    self.optimizationMethod = optimizationMethod

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mathModelSbmlFile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.numberOfOptimizationRuns = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.parameterDescriptionList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = ParameterDescription()
            _elem12.read(iprot)
            self.parameterDescriptionList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.referenceVariableList = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = ReferenceVariable()
            _elem18.read(iprot)
            self.referenceVariableList.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.experimentalDataFile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.optimizationMethod = CopasiOptimizationMethod()
          self.optimizationMethod.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OptProblem')
    if self.mathModelSbmlFile is not None:
      oprot.writeFieldBegin('mathModelSbmlFile', TType.STRING, 1)
      oprot.writeString(self.mathModelSbmlFile)
      oprot.writeFieldEnd()
    if self.numberOfOptimizationRuns is not None:
      oprot.writeFieldBegin('numberOfOptimizationRuns', TType.I32, 2)
      oprot.writeI32(self.numberOfOptimizationRuns)
      oprot.writeFieldEnd()
    if self.parameterDescriptionList is not None:
      oprot.writeFieldBegin('parameterDescriptionList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.parameterDescriptionList))
      for iter19 in self.parameterDescriptionList:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.referenceVariableList is not None:
      oprot.writeFieldBegin('referenceVariableList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.referenceVariableList))
      for iter20 in self.referenceVariableList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.experimentalDataFile is not None:
      oprot.writeFieldBegin('experimentalDataFile', TType.STRING, 5)
      oprot.writeString(self.experimentalDataFile)
      oprot.writeFieldEnd()
    if self.optimizationMethod is not None:
      oprot.writeFieldBegin('optimizationMethod', TType.STRUCT, 6)
      self.optimizationMethod.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mathModelSbmlFile is None:
      raise TProtocol.TProtocolException(message='Required field mathModelSbmlFile is unset!')
    if self.numberOfOptimizationRuns is None:
      raise TProtocol.TProtocolException(message='Required field numberOfOptimizationRuns is unset!')
    if self.parameterDescriptionList is None:
      raise TProtocol.TProtocolException(message='Required field parameterDescriptionList is unset!')
    if self.referenceVariableList is None:
      raise TProtocol.TProtocolException(message='Required field referenceVariableList is unset!')
    if self.experimentalDataFile is None:
      raise TProtocol.TProtocolException(message='Required field experimentalDataFile is unset!')
    if self.optimizationMethod is None:
      raise TProtocol.TProtocolException(message='Required field optimizationMethod is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mathModelSbmlFile)
    value = (value * 31) ^ hash(self.numberOfOptimizationRuns)
    value = (value * 31) ^ hash(self.parameterDescriptionList)
    value = (value * 31) ^ hash(self.referenceVariableList)
    value = (value * 31) ^ hash(self.experimentalDataFile)
    value = (value * 31) ^ hash(self.optimizationMethod)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
