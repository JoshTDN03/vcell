#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class DomainType:
  VOLUME = 0
  MEMBRANE = 1

  _VALUES_TO_NAMES = {
    0: "VOLUME",
    1: "MEMBRANE",
  }

  _NAMES_TO_VALUES = {
    "VOLUME": 0,
    "MEMBRANE": 1,
  }


class VariableInfo:
  """
  Attributes:
   - variableName
   - domainName
   - variableDomainType
   - unitsLabel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'variableName', None, None, ), # 1
    (2, TType.STRING, 'domainName', None, None, ), # 2
    (3, TType.I32, 'variableDomainType', None, None, ), # 3
    (4, TType.STRING, 'unitsLabel', None, None, ), # 4
  )

  def __init__(self, variableName=None, domainName=None, variableDomainType=None, unitsLabel=None,):
    self.variableName = variableName
    self.domainName = domainName
    self.variableDomainType = variableDomainType
    self.unitsLabel = unitsLabel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.variableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domainName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.variableDomainType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.unitsLabel = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VariableInfo')
    if self.variableName is not None:
      oprot.writeFieldBegin('variableName', TType.STRING, 1)
      oprot.writeString(self.variableName)
      oprot.writeFieldEnd()
    if self.domainName is not None:
      oprot.writeFieldBegin('domainName', TType.STRING, 2)
      oprot.writeString(self.domainName)
      oprot.writeFieldEnd()
    if self.variableDomainType is not None:
      oprot.writeFieldBegin('variableDomainType', TType.I32, 3)
      oprot.writeI32(self.variableDomainType)
      oprot.writeFieldEnd()
    if self.unitsLabel is not None:
      oprot.writeFieldBegin('unitsLabel', TType.STRING, 4)
      oprot.writeString(self.unitsLabel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.variableName is None:
      raise TProtocol.TProtocolException(message='Required field variableName is unset!')
    if self.domainName is None:
      raise TProtocol.TProtocolException(message='Required field domainName is unset!')
    if self.variableDomainType is None:
      raise TProtocol.TProtocolException(message='Required field variableDomainType is unset!')
    if self.unitsLabel is None:
      raise TProtocol.TProtocolException(message='Required field unitsLabel is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.variableName)
    value = (value * 31) ^ hash(self.domainName)
    value = (value * 31) ^ hash(self.variableDomainType)
    value = (value * 31) ^ hash(self.unitsLabel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimulationDataSetRef:
  """
  Attributes:
   - simId
   - simName
   - modelId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'simId', None, None, ), # 1
    (2, TType.STRING, 'simName', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'modelId', None, None, ), # 4
  )

  def __init__(self, simId=None, simName=None, modelId=None,):
    self.simId = simId
    self.simName = simName
    self.modelId = modelId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.simId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.simName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.modelId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimulationDataSetRef')
    if self.simId is not None:
      oprot.writeFieldBegin('simId', TType.STRING, 1)
      oprot.writeString(self.simId)
      oprot.writeFieldEnd()
    if self.simName is not None:
      oprot.writeFieldBegin('simName', TType.STRING, 2)
      oprot.writeString(self.simName)
      oprot.writeFieldEnd()
    if self.modelId is not None:
      oprot.writeFieldBegin('modelId', TType.STRING, 4)
      oprot.writeString(self.modelId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.simId is None:
      raise TProtocol.TProtocolException(message='Required field simId is unset!')
    if self.simName is None:
      raise TProtocol.TProtocolException(message='Required field simName is unset!')
    if self.modelId is None:
      raise TProtocol.TProtocolException(message='Required field modelId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.simId)
    value = (value * 31) ^ hash(self.simName)
    value = (value * 31) ^ hash(self.modelId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DataAccessException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataAccessException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
