#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from pyvcell import VCellProxy
from pyvcell.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  FilePath exportRequest(ExportRequestSpec exportRequestSpec)')
  print('  FilePath exportAllRequest(SimulationDataSetRef simulationDataSetRef)')
  print('  SimulationDataSetRefList getSimsFromOpenModels()')
  print('  SimulationDataSetRefList getSimsFromModel(ModelRef modelRef)')
  print('  VariableList getVariableList(SimulationDataSetRef simulationDataSetRef)')
  print('  ModelRefList getBioModels()')
  print('  ModelRefList getMathModels()')
  print('  User getUser()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = VCellProxy.Client(protocol)
transport.open()

if cmd == 'exportRequest':
  if len(args) != 1:
    print('exportRequest requires 1 args')
    sys.exit(1)
  pp.pprint(client.exportRequest(eval(args[0]),))

elif cmd == 'exportAllRequest':
  if len(args) != 1:
    print('exportAllRequest requires 1 args')
    sys.exit(1)
  pp.pprint(client.exportAllRequest(eval(args[0]),))

elif cmd == 'getSimsFromOpenModels':
  if len(args) != 0:
    print('getSimsFromOpenModels requires 0 args')
    sys.exit(1)
  pp.pprint(client.getSimsFromOpenModels())

elif cmd == 'getSimsFromModel':
  if len(args) != 1:
    print('getSimsFromModel requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSimsFromModel(eval(args[0]),))

elif cmd == 'getVariableList':
  if len(args) != 1:
    print('getVariableList requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVariableList(eval(args[0]),))

elif cmd == 'getBioModels':
  if len(args) != 0:
    print('getBioModels requires 0 args')
    sys.exit(1)
  pp.pprint(client.getBioModels())

elif cmd == 'getMathModels':
  if len(args) != 0:
    print('getMathModels requires 0 args')
    sys.exit(1)
  pp.pprint(client.getMathModels())

elif cmd == 'getUser':
  if len(args) != 0:
    print('getUser requires 0 args')
    sys.exit(1)
  pp.pprint(client.getUser())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
