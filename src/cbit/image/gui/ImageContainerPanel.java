package cbit.image.gui;
import java.awt.event.*;
import java.util.*;
import javax.swing.SwingConstants;

import org.vcell.util.Range;

import cbit.image.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class ImageContainerPanel extends javax.swing.JPanel implements ActionListener, ItemListener, java.beans.PropertyChangeListener {
	private javax.swing.JPanel ivjAxisPanel = null;
	private javax.swing.JButton ivjButton1 = null;
	private javax.swing.JButton ivjButton2 = null;
	private ImageContainer ivjImageContainer = null;
	private javax.swing.JLabel ivjLabel1 = null;
	private javax.swing.JLabel ivjLabel2 = null;
	private javax.swing.JLabel ivjSliceLabel = null;
	private javax.swing.JPanel ivjSlicePanel = null;
	private javax.swing.JRadioButton ivjXAxisCheckbox = null;
	private javax.swing.JRadioButton ivjYAxisCheckbox = null;
	private javax.swing.JRadioButton ivjZAxisCheckbox = null;
	private ImageContainerPanelTool ivjImageContainerPanelTool = null;
	private javax.swing.JLabel ivjStatusLabel = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private ScalePanel ivjScalePanel1 = null;
	private Vector dataSetHistory = new Vector(0);
	private Vector scaleSettingsHistory = new Vector(0);
	private int index = 0;
	private javax.swing.JButton ivjButton3 = null;
	private javax.swing.JButton ivjButton4 = null;
	private javax.swing.ButtonGroup ivjButtonGroup1 = null;
	private boolean fieldSpatialPlotEnabled = false;
	private ImageContainer fieldImageContainer = null;
	private ImagePaneScroller ivjImagePaneScroller = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ImageContainerPanel() {
	super();
	initialize();
}


/**
 * ImageContainerPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public ImageContainerPanel(java.awt.LayoutManager layout) {
	super(layout);
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getButton2()) 
		connEtoM1(e);
	if (e.getSource() == getButton1()) 
		connEtoM2(e);
	if (e.getSource() == getButton4()) 
		connEtoM14(e);
	if (e.getSource() == getButton3()) 
		connEtoM15(e);
	// user code begin {2}
	// user code end
}

/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}


/**
 * Comment
 */
public void checkScaleSettingsHistory() throws java.rmi.RemoteException, org.vcell.util.DataAccessException {
	String newDataSet = getImageContainer().getDataID();
	if (scaleSettingsHistory.capacity() != 0) scaleSettingsHistory.setElementAt(getScalePanel1().getScaleRange(), index);
	if (dataSetHistory.contains(newDataSet)) {
		getScalePanel1().setScaleRange((Range)scaleSettingsHistory.elementAt(dataSetHistory.indexOf(newDataSet)));
	} else {
		dataSetHistory.addElement(newDataSet);
		Range defaultManualRange = new Range(0.0, Math.pow(10, (int)((Math.log(getScalePanel1().getDataRange().getMax())) / Math.log(10)) + 1));
		getScalePanel1().setScaleRange(defaultManualRange);
		scaleSettingsHistory.addElement(defaultManualRange);
	}
	index = dataSetHistory.indexOf(newDataSet);
	return;
}


/**
 * conn9:  (ImageContainer.this --> SliceLabel.text)
 * @param value cbit.image.ImageContainer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void conn9(ImageContainer value) {
	try {
		// user code begin {1}
		// user code end
		if ((getImageContainer() != null)) {
			getSliceLabel().setText(String.valueOf(getImageContainer().getSlice()));
		}
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC1:  (ImageContainerPanelTool.clickedPoint --> ImageContainerPanel.firePropertyChange(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.firePropertyChange("imageContainerPanelToolClickedPoint", arg1.getOldValue(), arg1.getNewValue());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (ImageContainerPanelTool.endLine --> ImageContainerPanel.firePropertyChange(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.firePropertyChange("imageContainerPanelToolEndLine", arg1.getOldValue(), arg1.getNewValue());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC3:  ( (ImageContainer,dataRange --> ScalePanel1,dataRange).normalResult --> ImageContainerPanel.checkScaleSettingsHistory()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3() {
	try {
		// user code begin {1}
		// user code end
		this.checkScaleSettingsHistory();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  ( (ImageContainer,this --> ScalePanel1,dataRange).normalResult --> ImageContainerPanel.checkScaleSettingsHistory()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4() {
	try {
		// user code begin {1}
		// user code end
		this.checkScaleSettingsHistory();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (ImageContainerPanelTool.sliceNumber --> ImageContainerPanel.firePropertyChange(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.firePropertyChange("imageContainerPanelToolSliceNumber", arg1.getOldValue(), arg1.getNewValue());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (ImageContainerPanelTool.slicePlane --> ImageContainerPanel.firePropertyChange(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.firePropertyChange("imageContainerPanelToolSlicePlane", arg1.getOldValue(), arg1.getNewValue());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  ( (ScalePanel1,scaleRange --> ImageContainerPanel,refreshScaling()V).normalResult --> ImageContainerPanel.updateScaleSettingsHistory()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7() {
	try {
		// user code begin {1}
		// user code end
		this.updateScaleSettingsHistory();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC8:  (ImageContainer.pixels --> ImageContainerPanel.refreshImage()V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.refreshImage();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC9:  (ImageContainer.this --> ImageContainerPanel.refreshImage()V)
 * @param value cbit.image.gui.ImageContainer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(ImageContainer value) {
	try {
		// user code begin {1}
		// user code end
		this.refreshImage();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM1:  (Button2.action.actionPerformed(java.awt.event.ActionEvent) --> ImageContainerPanelTool.decrementSlice()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().decrementSlice();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM10:  (ScalePanel1.scaleRange --> ImageContainerPanel.refreshScaling()V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.refreshScaling();
		connEtoC7();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM11:  (ScalePanel1.autoMode --> ImageContainerPanel.refreshScaling()V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM11(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.refreshScaling();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM12:  (ScalePanel1.colorMode --> ImageContainerPanel.refreshScaling()V)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.refreshScaling();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM13:  (ScalePanel1.colorMode --> ImageContainer.colorMode)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainer().setColorMode(getScalePanel1().getColorMode());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM14:  (Button4.action.actionPerformed(java.awt.event.ActionEvent) --> ImageContainerPanelTool.decrementSlice10()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().decrementSlice10();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM15:  (Button3.action.actionPerformed(java.awt.event.ActionEvent) --> ImageContainerPanelTool.incrementSlice10()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().incrementSlice10();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM16:  (ImageContainerPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroup1().add(getXAxisCheckbox());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM17:  (ImageContainerPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM17() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroup1().add(getZAxisCheckbox());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM18:  (ImageContainerPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroup1().add(getYAxisCheckbox());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM2:  (Button1.action.actionPerformed(java.awt.event.ActionEvent) --> ImageContainerPanelTool.incrementSlice()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().incrementSlice();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM3:  (ZAxisCheckbox.item.itemStateChanged(java.awt.event.ItemEvent) --> ImageContainerPanelTool.setAxisZ()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().setAxisZ();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM4:  (XAxisCheckbox.item.itemStateChanged(java.awt.event.ItemEvent) --> ImageContainerPanelTool.setAxisX()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM4(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().setAxisX();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM5:  (YAxisCheckbox.item.itemStateChanged(java.awt.event.ItemEvent) --> ImageContainerPanelTool.setAxisY()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainerPanelTool().setAxisY();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM6:  (ScalePanel1.autoMode --> ImageContainer.autoMode)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM6(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainer().setAutoMode(getScalePanel1().getAutoMode());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM7:  (ImageContainer.realBounds --> ScalePanel1.realBounds)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		if ((getImageContainer() != null)) {
			getScalePanel1().setDataRange(getImageContainer().getDataRange());
		}
		connEtoC3();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM8:  (ImageContainer.this --> ScalePanel1.realBounds)
 * @param value cbit.image.ImageContainer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8(ImageContainer value) {
	try {
		// user code begin {1}
		// user code end
		if ((getImageContainer() != null)) {
			getScalePanel1().setDataRange(getImageContainer().getDataRange());
		}
		connEtoC4();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM9:  (ScalePanel1.inputMinMax --> ImageContainer.inputMinMax)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getImageContainer().setScaleRange(getScalePanel1().getScaleRange());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * The firePropertyChange method was generated to support the propertyChange field.
 * @param propertyName java.lang.String
 * @param oldValue java.lang.Object
 * @param newValue java.lang.Object
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}


/**
 * Return the AxisPanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getAxisPanel() {
	if (ivjAxisPanel == null) {
		try {
			ivjAxisPanel = new javax.swing.JPanel();
			ivjAxisPanel.setName("AxisPanel");
			ivjAxisPanel.setBorder(new javax.swing.border.EtchedBorder());
			ivjAxisPanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsLabel1 = new java.awt.GridBagConstraints();
			constraintsLabel1.gridx = 0; constraintsLabel1.gridy = 0;
			constraintsLabel1.gridwidth = 3;
			constraintsLabel1.ipady = 5;
			getAxisPanel().add(getLabel1(), constraintsLabel1);

			java.awt.GridBagConstraints constraintsZAxisCheckbox = new java.awt.GridBagConstraints();
			constraintsZAxisCheckbox.gridx = 0; constraintsZAxisCheckbox.gridy = 1;
			constraintsZAxisCheckbox.insets = new java.awt.Insets(0, 5, 5, 0);
			getAxisPanel().add(getZAxisCheckbox(), constraintsZAxisCheckbox);

			java.awt.GridBagConstraints constraintsXAxisCheckbox = new java.awt.GridBagConstraints();
			constraintsXAxisCheckbox.gridx = 1; constraintsXAxisCheckbox.gridy = 1;
			constraintsXAxisCheckbox.insets = new java.awt.Insets(0, 0, 5, 0);
			getAxisPanel().add(getXAxisCheckbox(), constraintsXAxisCheckbox);

			java.awt.GridBagConstraints constraintsYAxisCheckbox = new java.awt.GridBagConstraints();
			constraintsYAxisCheckbox.gridx = 2; constraintsYAxisCheckbox.gridy = 1;
			constraintsYAxisCheckbox.insets = new java.awt.Insets(0, 0, 5, 0);
			getAxisPanel().add(getYAxisCheckbox(), constraintsYAxisCheckbox);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAxisPanel;
}

/**
 * Return the Button1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getButton1() {
	if (ivjButton1 == null) {
		try {
			ivjButton1 = new javax.swing.JButton();
			ivjButton1.setName("Button1");
			ivjButton1.setText("+1");
			ivjButton1.setPreferredSize(new java.awt.Dimension(31, 25));
			ivjButton1.setFont(new java.awt.Font("dialog", 1, 12));
			ivjButton1.setMinimumSize(new java.awt.Dimension(31, 25));
			ivjButton1.setMargin(new java.awt.Insets(2, 5, 2, 5));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButton1;
}


/**
 * Return the Button2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getButton2() {
	if (ivjButton2 == null) {
		try {
			ivjButton2 = new javax.swing.JButton();
			ivjButton2.setName("Button2");
			ivjButton2.setText("-1");
			ivjButton2.setMargin(new java.awt.Insets(2, 5, 2, 5));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButton2;
}


/**
 * Return the Button3 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getButton3() {
	if (ivjButton3 == null) {
		try {
			ivjButton3 = new javax.swing.JButton();
			ivjButton3.setName("Button3");
			ivjButton3.setText("+10");
			ivjButton3.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButton3;
}


/**
 * Return the Button4 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getButton4() {
	if (ivjButton4 == null) {
		try {
			ivjButton4 = new javax.swing.JButton();
			ivjButton4.setName("Button4");
			ivjButton4.setText("-10");
			ivjButton4.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButton4;
}


/**
 * Return the ButtonGroup1 property value.
 * @return javax.swing.ButtonGroup
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.ButtonGroup getButtonGroup1() {
	if (ivjButtonGroup1 == null) {
		try {
			ivjButtonGroup1 = new javax.swing.ButtonGroup();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonGroup1;
}


/**
 * This method was created in VisualAge.
 * @return java.util.Vector
 */
public Vector getDataSetHistory() {
	return dataSetHistory;
}


/**
 * Return the ImageContainer property value.
 * @return cbit.image.ImageContainer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ImageContainer getImageContainer() {
	// user code begin {1}
	// user code end
	return ivjImageContainer;
}

/**
 * Method generated to support the promotion of the imageContainerNormalAxis attribute.
 * @return int
 */
public int getImageContainerNormalAxis() {
		return getImageContainer().getNormalAxis();
}


/**
 * Return the ImageContainerPanelTool property value.
 * @return cbit.image.ImageContainerPanelTool
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private ImageContainerPanelTool getImageContainerPanelTool() {
	// user code begin {1}
	// user code end
	return ivjImageContainerPanelTool;
}


/**
 * Method generated to support the promotion of the imageContainerPanelToolBeginLine attribute.
 * @return cbit.vcell.math.CoordinateIndex
 */
public org.vcell.util.CoordinateIndex getImageContainerPanelToolBeginLine() {
		return getImageContainerPanelTool().getBeginLine();
}


/**
 * Method generated to support the promotion of the imageContainerPanelToolClickedPoint attribute.
 * @return cbit.vcell.math.CoordinateIndex
 */
public org.vcell.util.CoordinateIndex getImageContainerPanelToolClickedPoint() {
		return getImageContainerPanelTool().getClickedPoint();
}


/**
 * Method generated to support the promotion of the imageContainerPanelToolEndLine attribute.
 * @return cbit.vcell.math.CoordinateIndex
 */
public org.vcell.util.CoordinateIndex getImageContainerPanelToolEndLine() {
		return getImageContainerPanelTool().getEndLine();
}


/**
 * Method generated to support the promotion of the imageContainerPanelToolSliceNumber attribute.
 * @return int
 */
public int getImageContainerPanelToolSliceNumber() {
		return getImageContainerPanelTool().getSliceNumber();
}


/**
 * Method generated to support the promotion of the imageContainerPanelToolSlicePlane attribute.
 * @return int
 */
public int getImageContainerPanelToolSlicePlane() {
		return getImageContainerPanelTool().getSlicePlane();
}


/**
 * Method generated to support the promotion of the imageContainerSlice attribute.
 * @return int
 */
public int getImageContainerSlice() {
		return getImageContainer().getSlice();
}


/**
 * Return the ImagePane property value.
 * @return cbit.image.ImagePaneScroller
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public cbit.image.ImagePaneScroller getImagePaneScroller() {
	if (ivjImagePaneScroller == null) {
		try {
			ivjImagePaneScroller = new cbit.image.ImagePaneScroller();
			ivjImagePaneScroller.setName("ImagePaneScroller");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjImagePaneScroller;
}

/**
 * Return the Label1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLabel1() {
	if (ivjLabel1 == null) {
		try {
			ivjLabel1 = new javax.swing.JLabel();
			ivjLabel1.setName("Label1");
			ivjLabel1.setText("Axis:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLabel1;
}


/**
 * Return the Label2 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getLabel2() {
	if (ivjLabel2 == null) {
		try {
			ivjLabel2 = new javax.swing.JLabel();
			ivjLabel2.setName("Label2");
			ivjLabel2.setText("Slice:");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLabel2;
}


/**
 * Accessor for the propertyChange field.
 * @return java.beans.PropertyChangeSupport
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}


/**
 * Return the ScalePanel1 property value.
 * @return cbit.image.ScalePanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.image.ScalePanel getScalePanel1() {
	if (ivjScalePanel1 == null) {
		try {
			ivjScalePanel1 = new cbit.image.ScalePanel();
			ivjScalePanel1.setName("ScalePanel1");
			ivjScalePanel1.setBorder(new javax.swing.border.EtchedBorder());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScalePanel1;
}

/**
 * Method generated to support the promotion of the scalePanel1Visible attribute.
 * @return boolean
 */
public boolean getScalePanel1Visible() {
		return getScalePanel1().isVisible();
}


/**
 * This method was created in VisualAge.
 * @return java.util.Vector
 */
public Vector getScaleSettingsHistory() {
	return scaleSettingsHistory;
}


/**
 * Return the SliceLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getSliceLabel() {
	if (ivjSliceLabel == null) {
		try {
			ivjSliceLabel = new javax.swing.JLabel();
			ivjSliceLabel.setName("SliceLabel");
			ivjSliceLabel.setText("0");
			ivjSliceLabel.setHorizontalAlignment(SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSliceLabel;
}


/**
 * Return the SlicePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getSlicePanel() {
	if (ivjSlicePanel == null) {
		try {
			ivjSlicePanel = new javax.swing.JPanel();
			ivjSlicePanel.setName("SlicePanel");
			ivjSlicePanel.setBorder(new javax.swing.border.EtchedBorder());
			ivjSlicePanel.setLayout(new java.awt.GridBagLayout());

			java.awt.GridBagConstraints constraintsLabel2 = new java.awt.GridBagConstraints();
			constraintsLabel2.gridx = 1; constraintsLabel2.gridy = 0;
			constraintsLabel2.gridwidth = 3;
			constraintsLabel2.ipady = 5;
			getSlicePanel().add(getLabel2(), constraintsLabel2);

			java.awt.GridBagConstraints constraintsButton2 = new java.awt.GridBagConstraints();
			constraintsButton2.gridx = 1; constraintsButton2.gridy = 1;
			constraintsButton2.insets = new java.awt.Insets(0, 0, 5, 0);
			getSlicePanel().add(getButton2(), constraintsButton2);

			java.awt.GridBagConstraints constraintsButton1 = new java.awt.GridBagConstraints();
			constraintsButton1.gridx = 3; constraintsButton1.gridy = 1;
			constraintsButton1.insets = new java.awt.Insets(0, 0, 5, 0);
			getSlicePanel().add(getButton1(), constraintsButton1);

			java.awt.GridBagConstraints constraintsSliceLabel = new java.awt.GridBagConstraints();
			constraintsSliceLabel.gridx = 2; constraintsSliceLabel.gridy = 1;
			constraintsSliceLabel.ipadx = 20;
			constraintsSliceLabel.insets = new java.awt.Insets(0, 0, 5, 0);
			getSlicePanel().add(getSliceLabel(), constraintsSliceLabel);

			java.awt.GridBagConstraints constraintsButton4 = new java.awt.GridBagConstraints();
			constraintsButton4.gridx = 0; constraintsButton4.gridy = 1;
			constraintsButton4.insets = new java.awt.Insets(0, 5, 5, 0);
			getSlicePanel().add(getButton4(), constraintsButton4);

			java.awt.GridBagConstraints constraintsButton3 = new java.awt.GridBagConstraints();
			constraintsButton3.gridx = 4; constraintsButton3.gridy = 1;
			constraintsButton3.insets = new java.awt.Insets(0, 0, 5, 5);
			getSlicePanel().add(getButton3(), constraintsButton3);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSlicePanel;
}

/**
 * Gets the spatialPlotEnabled property (boolean) value.
 * @return The spatialPlotEnabled property value.
 * @see #setSpatialPlotEnabled
 */
public boolean getSpatialPlotEnabled() {
	return fieldSpatialPlotEnabled;
}


/**
 * Return the StatusLabel property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public javax.swing.JLabel getStatusLabel() {
	if (ivjStatusLabel == null) {
		try {
			ivjStatusLabel = new javax.swing.JLabel();
			ivjStatusLabel.setName("StatusLabel");
			ivjStatusLabel.setText(" ");
			ivjStatusLabel.setMaximumSize(new java.awt.Dimension(25, 25));
			ivjStatusLabel.setPreferredSize(new java.awt.Dimension(25, 25));
			ivjStatusLabel.setMinimumSize(new java.awt.Dimension(25, 25));
			ivjStatusLabel.setHorizontalAlignment(SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusLabel;
}

/**
 * Return the XAxisCheckbox property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getXAxisCheckbox() {
	if (ivjXAxisCheckbox == null) {
		try {
			ivjXAxisCheckbox = new javax.swing.JRadioButton();
			ivjXAxisCheckbox.setName("XAxisCheckbox");
			ivjXAxisCheckbox.setText("YZ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjXAxisCheckbox;
}


/**
 * Return the YAxisCheckbox property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getYAxisCheckbox() {
	if (ivjYAxisCheckbox == null) {
		try {
			ivjYAxisCheckbox = new javax.swing.JRadioButton();
			ivjYAxisCheckbox.setName("YAxisCheckbox");
			ivjYAxisCheckbox.setText("ZX");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjYAxisCheckbox;
}


/**
 * Return the ZAxisCheckbox property value.
 * @return javax.swing.JRadioButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JRadioButton getZAxisCheckbox() {
	if (ivjZAxisCheckbox == null) {
		try {
			ivjZAxisCheckbox = new javax.swing.JRadioButton();
			ivjZAxisCheckbox.setName("ZAxisCheckbox");
			ivjZAxisCheckbox.setSelected(true);
			ivjZAxisCheckbox.setText("XY");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZAxisCheckbox;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION --------- in ImageContainerPanel ");
	exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getScalePanel1().addPropertyChangeListener(this);
	getButton2().addActionListener(this);
	getButton1().addActionListener(this);
	getYAxisCheckbox().addItemListener(this);
	getXAxisCheckbox().addItemListener(this);
	getZAxisCheckbox().addItemListener(this);
	getButton4().addActionListener(this);
	getButton3().addActionListener(this);
}

/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ImageContainerPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(455, 433);

		java.awt.GridBagConstraints constraintsAxisPanel = new java.awt.GridBagConstraints();
		constraintsAxisPanel.gridx = 1; constraintsAxisPanel.gridy = 2;
		constraintsAxisPanel.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsAxisPanel.anchor = java.awt.GridBagConstraints.SOUTH;
		constraintsAxisPanel.insets = new java.awt.Insets(0, 5, 5, 5);
		add(getAxisPanel(), constraintsAxisPanel);

		java.awt.GridBagConstraints constraintsSlicePanel = new java.awt.GridBagConstraints();
		constraintsSlicePanel.gridx = 1; constraintsSlicePanel.gridy = 1;
		constraintsSlicePanel.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsSlicePanel.anchor = java.awt.GridBagConstraints.SOUTH;
		constraintsSlicePanel.weighty = 1.0;
		constraintsSlicePanel.insets = new java.awt.Insets(0, 5, 5, 5);
		add(getSlicePanel(), constraintsSlicePanel);

		java.awt.GridBagConstraints constraintsStatusLabel = new java.awt.GridBagConstraints();
		constraintsStatusLabel.gridx = 0; constraintsStatusLabel.gridy = 3;
		constraintsStatusLabel.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsStatusLabel.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getStatusLabel(), constraintsStatusLabel);

		java.awt.GridBagConstraints constraintsScalePanel1 = new java.awt.GridBagConstraints();
		constraintsScalePanel1.gridx = 1; constraintsScalePanel1.gridy = 0;
		constraintsScalePanel1.fill = java.awt.GridBagConstraints.HORIZONTAL;
		constraintsScalePanel1.anchor = java.awt.GridBagConstraints.NORTH;
		constraintsScalePanel1.insets = new java.awt.Insets(5, 5, 5, 5);
		add(getScalePanel1(), constraintsScalePanel1);

		java.awt.GridBagConstraints constraintsImagePaneScroller = new java.awt.GridBagConstraints();
		constraintsImagePaneScroller.gridx = 0; constraintsImagePaneScroller.gridy = 0;
constraintsImagePaneScroller.gridheight = 3;
		constraintsImagePaneScroller.fill = java.awt.GridBagConstraints.BOTH;
		constraintsImagePaneScroller.weightx = 1.0;
		constraintsImagePaneScroller.weighty = 1.0;
		constraintsImagePaneScroller.insets = new java.awt.Insets(4, 5, 5, 0);
		add(getImagePaneScroller(), constraintsImagePaneScroller);
		initConnections();
		connEtoM16();
		connEtoM17();
		connEtoM18();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the ItemListener interface.
 * @param e java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void itemStateChanged(java.awt.event.ItemEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getYAxisCheckbox()) 
		connEtoM5(e);
	if (e.getSource() == getXAxisCheckbox()) 
		connEtoM4(e);
	if (e.getSource() == getZAxisCheckbox()) 
		connEtoM3(e);
	// user code begin {2}
	// user code end
}

/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		java.awt.Frame frame;
		try {
			Class aFrameClass = Class.forName("com.ibm.uvm.abt.edit.TestFrame");
			frame = (java.awt.Frame)aFrameClass.newInstance();
		} catch (java.lang.Throwable ivjExc) {
			frame = new java.awt.Frame();
		}
		ImageContainerPanel aImageContainerPanel;
		aImageContainerPanel = new ImageContainerPanel();
		frame.add("Center", aImageContainerPanel);
		frame.setSize(aImageContainerPanel.getSize());
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of java.awt.Panel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("scaleRange"))) 
		connEtoM10(evt);
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("autoMode"))) 
		connEtoM11(evt);
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("colorMode"))) 
		connEtoM12(evt);
	if (evt.getSource() == getImageContainer() && (evt.getPropertyName().equals("dataRange"))) 
		connEtoM7(evt);
	if (evt.getSource() == getImageContainer() && (evt.getPropertyName().equals("pixels"))) 
		connEtoC8(evt);
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("colorMode"))) 
		connEtoM13(evt);
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("scaleRange"))) 
		connEtoM9(evt);
	if (evt.getSource() == getScalePanel1() && (evt.getPropertyName().equals("autoMode"))) 
		connEtoM6(evt);
	if (evt.getSource() == getImageContainerPanelTool() && (evt.getPropertyName().equals("endLine"))) 
		connEtoC2(evt);
	if (evt.getSource() == getImageContainerPanelTool() && (evt.getPropertyName().equals("sliceNumber"))) 
		connEtoC5(evt);
	if (evt.getSource() == getImageContainerPanelTool() && (evt.getPropertyName().equals("slicePlane"))) 
		connEtoC6(evt);
	if (evt.getSource() == getImageContainerPanelTool() && (evt.getPropertyName().equals("clickedPoint"))) 
		connEtoC1(evt);
	// user code begin {2}
	// user code end
}

/**
 * This method was created by a SmartGuide.
 */
public void refreshImage() {
	if (getImageContainer()==null){
		getImagePaneScroller().getImagePaneView().clear();
		return;
	}	
	try {
		int nX = getImageContainer().getDisplayWidth();
		int nY = getImageContainer().getDisplayHeight();
		int nZ = 1;
		SourceDataInfo sourceData = new SourceDataInfo(SourceDataInfo.INT_RGB_TYPE,getImageContainer().getPixels(),new org.vcell.util.Extent(1,1,1),new org.vcell.util.Origin(0,0,0),getImageContainer().getDataRange(),0,nX,1,nY,nX,nZ,nX*nY);
		getImagePaneScroller().getImagePaneModel().setSourceData(sourceData);
	}catch (Exception e){
		getImagePaneScroller().getImagePaneView().clear();
		e.printStackTrace(System.out);
	}		
}


/**
 * This method was created in VisualAge.
 */
public void refreshScaling() {
	getImageContainer().refreshDisplayScale();
	getImageContainer().refreshDisplayPixels();
	refreshImage();
}


/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}


/**
 * This method was created in VisualAge.
 */
public void repaintImage() {
	getImagePaneScroller().repaint();
}


/**
 * Set the ImageContainer to a new value.
 * @param newValue cbit.image.ImageContainer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setImageContainer(ImageContainer newValue) {
	if (ivjImageContainer != newValue) {
		try {
			cbit.image.gui.ImageContainer oldValue = getImageContainer();
			/* Stop listening for events from the current object */
			if (ivjImageContainer != null) {
				ivjImageContainer.removePropertyChangeListener(this);
			}
			ivjImageContainer = newValue;

			/* Listen for events from the new object */
			if (ivjImageContainer != null) {
				ivjImageContainer.addPropertyChangeListener(this);
			}
			conn9(ivjImageContainer);
			connEtoM8(ivjImageContainer);
			connEtoC9(ivjImageContainer);
			// user code begin {1}
			if (getImageContainerPanelTool()!=null){
				getImageContainerPanelTool().setImageContainer(getImageContainer());
			}else{
				setImageContainerPanelTool(new ImageContainerPanelTool(this,getImageContainer()));
			}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Set the ImageContainerPanelTool to a new value.
 * @param newValue cbit.image.ImageContainerPanelTool
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setImageContainerPanelTool(ImageContainerPanelTool newValue) {
	if (ivjImageContainerPanelTool != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjImageContainerPanelTool != null) {
				ivjImageContainerPanelTool.removePropertyChangeListener(this);
			}
			ivjImageContainerPanelTool = newValue;

			/* Listen for events from the new object */
			if (ivjImageContainerPanelTool != null) {
				ivjImageContainerPanelTool.addPropertyChangeListener(this);
			}
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Method generated to support the promotion of the scalePanel1Visible attribute.
 * @param arg1 boolean
 */
public void setScalePanel1Visible(boolean arg1) {
		getScalePanel1().setVisible(arg1);
}


/**
 * This method was created in VisualAge.
 * @param text java.lang.String
 */
public void setSliceLabelText(String text) {
	getSliceLabel().setText(text);
}


/**
 * Sets the spatialPlotEnabled property (boolean) value.
 * @param spatialPlotEnabled The new value for the property.
 * @see #getSpatialPlotEnabled
 */
public void setSpatialPlotEnabled(boolean spatialPlotEnabled) {
	boolean oldValue = fieldSpatialPlotEnabled;
	fieldSpatialPlotEnabled = spatialPlotEnabled;
	firePropertyChange("spatialPlotEnabled", new Boolean(oldValue), new Boolean(spatialPlotEnabled));
}


/**
 * This method was created in VisualAge.
 * @param statusText java.lang.String
 */
public void setStatusText(String statusText) {
	getStatusLabel().setText(statusText);
}


/**
 * Comment
 */
public void updateScaleSettingsHistory() {
	if ((scaleSettingsHistory.capacity() != 0) && getImageContainer().getDataID().equals(dataSetHistory.elementAt(index))) scaleSettingsHistory.setElementAt(getScalePanel1().getScaleRange(), index);
	return;
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GF7FBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E165FD8FD8D45715B8CDB0A1A9A6A4B1899A1B92C39212E0C2DA5B500D5B352D5D9FE96D06323AE133F443A6362589ED6D4636B6EB5B878C4AC40CA41246EC7CC30CE9D091C17E08084ADF85A59185919593C666418C8CB3434C8386C45DF36FFD673EB7EF5EB04816FC7BFDBF3E6F705EBD771CFB4FBD675CFB4F3D6F3EB7C26E36084C3474DCC1C84B94643F7DE90230A8CC90FEB06365DE44D5FC1CE094
	D4FF9FG3CA58CDEB640359172721ECEB066886B1DD9106E04F458D38946F761FE23F022AD7FD63871D30FGF90D5F0F9C1E381EDF97E3BDEBE93A3EA09B2EEF82F4810EDC23BFA675F796EC127141B29EA1ADDD900272894DC841E6993782E832GD78550124F68ADF0E5824C282C1069BA6F0892D67E40153E1E1423AA93A1CE66CD152FF9426BE933F6123AA2281C04E78724BB81C863B304FFD8138F572A167E5E435D172CD221F54054AB96768ED9ABAB1B48ED1D43AE192CF65155E2320B361CDD242C1402
	AC4AAB8809D04EDC0A5BE5A36537413D8DA0F89762B75889BE996ED71174EEEC53210F2BE419BBAEBFADAC5DB7E0586027CD793BD9DBDAF6ABEDB2777DA47DBD2A7F3DA5C44F211097833098A085A02BA041188F70BE35FB793EDDF02D39A455B986869C769A273356E6F6FD62B00BB6382F2C049C99F7DA6CF6384C0240EC7BF0C1010EBC938163DBF05DFCCCA7D1A5E8676853CF88C9DF3FA7FD2D0ECE1222AE27D797B0DDF494A8BAE1F57F52EF5D1E82EFBF742E7B2C202EBB7853E59919BAF5C79CDC1691AA
	1793212ABB2900587AFE6A830B60BECDAE17619F27783CBD8A1E79E4914513F49564C56CC15F68F893E5E9B64C93F20A6F5555C378F7C3538D05CC064D05DAD97E4BC14AEEACE4F51E60326CF492FC0A8A4FE4F9077AA9C9076CCDB0AEAFCEB0B27F2AA8A3FD343A947A8C0084908A908D908710D40ABEF6ED5F5EC97AD80B49A5558ED9EDE651A5B05E0A123F40D574C8AED3135DAD196C5DE23B49E5B5DD3209EEC12629A9A1BA386445F7147AFEB754F1CC049EEA122C8EBB14EE9A90A55165E6B4A7CB5EA2B4
	AE116636D987C428E040A9E039E7CBB64255E6F2CBE71CE613A4AA94AC7F7392E213E1D3BB14888540BD530BD8CE74359A5A1FDB16E05CD106FAF80116F7C2F441E8D1D9596CF0748FB95BC8CB84290C685930070C9D95F05FD206BAB66DA738D8C84773F25EAAFDDBD5CE3D351B08EFF20DE29F0B346540F5B9509B4AE14C8728AFC77F79D5877ACF7D7A79C241323BF57DA737EAD9C6E7B9739B29DC5B0F1E2265939967C25EC20024F29C734BED9D246CF27D7EF4BDE0104BA06D48136FD99DA7E99D467FE579
	84B265EB06DC761B5C064FD5D09BC23D1B76A798AB76236E1BCB7318AF571A5CA2FA6FC997B81EE8D6AC4164CCF34E02AB717DE20092GB01170G4099GB2E91F85E8GB88670A1ADDF906AG4AG0EG9C841889309B60A46987GFBG76833C83F0G60A3D9661DG07GCE81FCCC6B9704D600ED821B1F49BCDF8350447538174A5782ED73GC4G44812CG58D411E02C8630G04814482A483E49DC8B09681F4G8481C48144832C82482BCCB0B682B8814281968124G649C847D81F48104G44GA48288
	D5B08F8134GF8GA2G62GD6D421AF3DEFEFC98FEC4337E43D3DA33771BDD59E367DC3D9CF9F4BFA5AAD6BD1ED1BB2D92F87E43D9F12EDD0A35B846D5424AA7F242C6FD65926E7A710D314ED9E28BD2313745D191324FBE012F47F3FG732D2FCD4A37087D09BF6D15EDDF264AC31FA0BEC77C07788B719F62E7443F481812A95737C5E07EC6FC0D78A371B1621B44175838427C77042AFC622B448F097F2D97181F7B1313787406C934FD32E366071324DB77FF401E7F17005932360C58C29C966DD23D68946D
	E638F14BF9CDE54486F2BC536360BCA7A95E8971CF9D849CEE0EBFD3C66CEE12A417755210A4360A12E43577AA7997E9DD6E21CBCEA5F4423A4CE5447F9CA3907FF0FAEB99099D3A9DF63BC8A7AB4EA267775358C5340983A0F41DE348AEB17CE0B9D95B750B23F26CB4D43EC6A0310FED0844E1EC3D94E3A27E60F441BA49B5CAC2B941F20844B56F6F59245251A64011F5DF95DCDB8EE1DCB272A146A5BB469E9596FD6ECC570B31439F3ABDBD66900B85969FD26292A6D34FFEFD59EDB4061271EEA66B05DC52
	67F416F1345FEE9496973C6913AF48F9679A5E5567EDF3B8103F340448D2BBA4C98E7BB117E348D94C620A2CCA02DF8E322FA23AB90CF1C54AFE120FB11D9CD054B9ECB6E6A6225743C4173F37654A3A4807F475E1264BB7F97E40G6647C2BADE15DFFA04643F4C7389E49DD172199C4BAAC8EC67968707C48835C9F0FA025BBC2962EDCDDE3BECFF163F3C02585F260AEBD750BA031D38169F0774AC00D8395E78A32CEEC6F7F890692A2A99DDDB359E5D6FB91DC5268B52502D2CA6F4CF3910AE9C52A44E0911
	69622A5565353A112E3A0665F754301856D92326DBAFA1DD049F3A5CDAC2779DCE97DB43E229F838A68398A03F1017F77B9052F555CED4DE5DB052F9EAD9FC96865708DA25BCC637FE846996573258AD892E29355AFA1F67F4B9F5AC064F2FE3FA2C2ED33777D18F52F548F4B6380E83C45429755CB70AF4B1B2DDDC9DEBCF12D7F99F0EA15D2ABA45EE04BE27DECD77EBCE17DF2F788B212B7622FB66B2172F1E65BB6B755AB1E39C69026A953FA2746175EABD37DCC13A68FA9657AED6519772769A2EA2DDE2BD
	0B01512FD6F81577B0275B5440689657AB7AD66CF67E9A5295B53038FA312A5D8A5D1B8252B5B630989C69022A55F45F65F4DD8DACE647FA2586F5BB6CE9C897524062FB7DF66424F33F1769346DE065AD66F4318DECDD985F404ADB8E572A23D0AE35479C835235G4E8290FA1451AFB92A365BE719C8178AF843B105AE7F181A6E6DB5DCAF47183FF79DE3F4F33D6816F13A8547D87FC13AA5DEF4372CC53A6547D83FC53A55DEF4073210AE37B141D8G50524868429A557DA34D487B071C9F572868A5996E99
	5D79ADC837D2264BEED268F6B4A15DDF37A1DDC59323EBD151D91AD04FFF584D47DD404DEAD2640BEDD24BB71F6F35A6B6B13B2EE8726E3FEC4EFCEDA7194769FEE81FE95864A9F40FC0ACD2D9F9DC357FB9036EE1504D6363384F69A9A2F3DE8524DBGAC47F14E7F71FA5C671C559FA5F41DDC1A61EF6FB668B813A37238B267071F9D49E0F36A6903244E65103772B84E271F9FD06F3554385D0EEEAB5D6611672AB7AB55B18143ED2CFC832EBDD617DBEA02204D03735AFB15C4DE328FA42365FD312D8338EF
	1CF582461C9338EF9C617AD018543E313C3F58DD02FA889BFBC8683AFBCE7ABABFFA701CE06D8FBF2168E16532528CA64FACAECFBC64E7B523BC49E78AA6A78F8FE2985F9F8B37685ADB95558838C7FA65285A168BB7DC715B066AE6A6FBD733520630DD3F135BB01F6EC1127AA3A0BF91004510F70A6A98B2679336C7D68157E6G96F3658E927B393BCDB67134495EAB225F5E1AC7E2E8175863925D16D64806D6646FEC67324F5FDAAD173B6409F9C216E9C63A5EFEFB68AFFA534D1FB019C3BFD1E4DF74631F
	24AF85E072778EE68BACCEDC8AB4591F22EC7FB4C87C4DB4A4B9483EA7234DF3A1EDBD500DF35A1BDDC42EEE074DC1B7C9393F3D60C25DACG5A54CF513E07CF913C5D619AB059CE0B6EA11B44702BEA087D06685EA5E9B6DFBDB4DA5D1243B52A56413C0DEA9DD4DD7BCCD787A19BAC69BBCE3236B71FD4F450816D37F19D0C3B31DD61C093FF925B75B245DB6DD6498AB6989373F7B2B90B6C5B09EE4C667CE6151F9556DCF243AA29DBE26EF610884B4AAF17307C2C9668F7G8C7F8A47FBG975302751E9AA2
	EB97132B371879D2DF3B5A17D200AE77947892C073A9649925BC12456AE67A99BF077A89DA32C05834F1262EFE8818CF49BEF2CA51CF680BBFC90FF8917593BB04F2A681CD6EE9145FB60C78E640851FC6D97EF958DB7E17B37464DF8874713C2C7291ACAB85F0F92DD856D7C63C4B124E681555817436D6ACCB70205F8583EEA1AF2B57C3F4835EE5123B1B3C763943874F6606F88FBE9BDB494BA898C5BDB3F9BE302A65A9E803FE8EA0810434A1CF9B6301C5B4136F2ED1BEE6GCDA227FBFD142CD11DD60FE8
	63EB543B36EFD04682BA7A11DE404AE99EC31D651CC9B0B61E41F21E9F536F0F1BAEE33DC1C09B4B699F3C2C9D07987DF2CE3F82E8735B117E44B86A0051BDB10EF2F481CDB827BBF045F78C993D023471C017F59647045C4364CA5767DC5EBDD7317EEA2073F05A07697A275BA2F6777B99A6987FF3D7312E9860CDB90B7EF163B54467F5006FF4A0FE3F0078B0404581B0BF780500FEA01C43361D258F1C5DB6EB37A26F3DE9A8EF8550B94FE1398752315CA840A5F37CAF5311FE53F9701B735CDFB2489E1CE8
	B7B743A4A77B0121196C3541DCAF36389CCE51A50D56D9082D5890D4E8037B42D64985EAB828421C3C54876BF19D8C7890EBDBC886E99B29AF64BC4A75BD834A3B88F02B4E631C96B1227675228B4C57BB60EA3B00326F4A5CC7ECCEB7818A5925C5F47540D8AF1A732998269129106EB59556506C86F23F937D7D238EB2771945EE970DF4DA090259384FE43BB993E58B06BA97DEC059BE685713EDA5DC33BA51EF8AB712322DF6FFE59FDC437D82F8BABA31CD7356107DD42BA48E9412FF2D924CCFCC7BBECDEA
	02FC39C12C4E01C692D738C52946E3F51FD37A6E1FF8DDE1D0CF9C17F1A0CDC55F2150FFEDAD528B97E16C3F48690DAA7A738AFDCF9652BB01B66AA26AE92B2E1E12A1FF65C5EC6F0F327EF7B67C37EB9BFDECD8DC2448364B08FE1F7DD902317EB32C778E5696C27E695040A508B7190F7E2391FDF47CB35E0737705882F0293C0CD7363C01E53400430BB816EF5B0AE56C789C4BB8398D4B68A4384F310CEFD2FCB71451AF1ADB9CD63B444AF8F59B16310417313DG75EC6802B5E3976AF919C5CF4F926407F4
	216D16CB9BFD7CD12D27FFA960738470A4F621FC077660784B1E8D5C3AC7FBCEA04724BC4F5C213AC7E04F4FD359BA47441E1F2F637857A93EC305E772DC25F81276C0DE12891F793EF71834357AD2023193C08288850886D8F28957B78FD412E78E93BED3EF32CB307CB159DA3DB607715976C15276FEF1D4CEDFB8281EAF189EF68CCC6D0C473E6B66E36D3EFA046CCD26C09B8D5D89464DG25GED5D5866640385015A0CE7836446B2F966CC319DD1D3EC4772EA528E89648E830882D884104C5B312BAA206D
	9ABC3A36E3F2FD5D2915CBB0FB7B64E6CD1A71FD47072FD0132E567031FE55BCCE64562C9FABABE92C40764CD9FF7E0108EB7F8EB32E7D2F1A090F07C1BA8AE01199FD3C3216449C0910DE8910ADC2BC84508CE0818895D1D71E2A0381F5C5864BB6879BB96B34CFB664368F8C8632253E4EAE87640B9675787E6A1ADAFD258179966B56176C43B7B91F78158F1F56A712B475B17BBDD5C76C379272F2FA40F6G75G9600E000289E345F33D507A6E93FBA40B5BA9C7D3E96C4D9EFF0CFCD27E1817962FA74782A
	242955F7BCA0DF32EEFDAB26D85F1F82722D6A516B57FF295DAA686E671DB6192D8E366C9664E7F8E5455AE7F8E47FA527B741382397637AF96DB81FD775E27FAF4AA07DDF02F4A8C0E4AF767F628662BF8BA11D883082A05B12E0AC82E886F0DA50FFB69F2A8D64BF7CD8970C81781CD44709182E3EBDB4B59DAF894897E25163F38DCF2D3E2000FC911A7A188D5EB760989CEBC19BFC270D58E08524332C8946BCAB1E2F299A1922FF87642B306A4996FD86E5EB3122ECFB695AA8845291G31DC36B51E290DE7
	39BEFC051AF43CD50FEF198F1F96D22CFAFD68359EBFFB624D26CB220D751D178CFAFDE7B514175307FD671C957BCEFE9F6A263F0F68268B529E0030BE544D6C51296966919FBE2DEE227A7478CE0FCD4DCF3A8272AD522DEF6B6529352F4007CF5B3EC45D7ADE19E2FD2B825637C2373E8563D35367F78372E5756B71DD3BB2357AE686644B532D2F646A5474D963432755E705EEFD4BFC78A6573E178372356856F74B352955F7EFC0BE0BEEFD07042955F7A2A0DF10EEFD3F8A48972E4B77153429597DF19FBE
	2D5D23F56BBB12BEB53DFC9210EF31EEFD2F7970CD2EFDE999DA3E2D1AF412EEFDB3A95FCAB9AF4BB671196A4DB61C9F1EB5CCCDAF4F8764AB52484066408D2DA426531983B10414677F44911C639AEDB84759699C978469F000985E061919D3EB43FD817962B4ED10675FFEA29BF97E1C2C48E6A132558FA498BB812481142DE64D54E4BB9910AFF4C00F4F30F6EA753D9D10AFD2373E58A956770F8179966A56E74B1ADAFDE38179168E68593A3D9F7DB0F5GED3D1D5AFA07BD41D88550E6C7DB97992756678F
	7B70E97B3C4D2E4777C34A97AC67055BA76E7351DC4EDB36CCCD4EFBFD7834F2AE5215F347D64217A867258610D3F0201CE736CDCD4EEE9FBE2D1C398E5DB5B565AB10732A9D934B5946654C8F781E1A3E1C658179AC8EBD1FDC4F637FA0877AE431C8FCB2965271GA9DC36A41FBAA62743D7FC788A3565B83D7958FBC98F50B3BD1BA02FG0061FEDEC8F0AD1036B8D12E7FACA27B1E21100E84D8883094A015678B45A41FBCDFA6FB7759036C6CDA51A0668797F5287875F437D046E3399369D98BF20CC26B40
	33797E684815BC733D5E736DEC4FE27BE17F673FF79E56BF7F3D77307E796F3243EFB1BC1421FEBB8E738F9D1E78FCF843E17F6743EFBA62DF4E19C774653C6B083E1C330FCCAC6783C7A616B3355A3FAC2FD56B4B7207EAFDD97EDCBD31ACEBEB7C4932057A4633FF59C0795DEE51CDB7A76BCD12C94E7B39C45E5370B9BF7F29E9C0B97F700A738D1926C1F2FCD2DC043E771C286EFFED035E7EEB997475E7767C48C3E32471C1767CA80D633FC471A1AABCFB2E94CC775CE99A72D68D62DEDAFD2DFF9D1F2855
	577129DA9293399DC32EEED12B470E5ACDBCCF59F0A30FEC09BA980D0972CBA6D72F68E3878B65E7F97E7887EB7D590A69BAF250CB5745083F6872426FC37C3BEE23022F5B4FE5F9264E3FEE3EDB272F1B38BA7F3AF92EAE30EE926B7C6B66453A403AC9291BD8B75FF2FB69209C71EE498B3F9F719F8F2D1371ADBDAE47C0CB39BCB78D94635C5469423929061EE11A8569E80045AE9C439FE9A7BE1E6472766595F25A6076676311F41FF813DB6B6373A9FE07DB6B6365996863C510B74B0DBEFE30413F9DEB9B
	746D5858605F0EA79B825B3123413F9DBFEF88ECC7CB83517BA52B596A125F76E076786D10171DAA50CE0F8EFB5BE93FBC3E64692E5FD649BA4F167C693E6C8C51E51E24557DE10AAF10343A7FFFED287B8A481BAB61F3F4770837DC9532DCCF1D5113CB98124F188F79136BC13AB71CBF2415AB1A62CB0734F21599D02EEA480B9C624F77BD2ABE7F896973AC06C9256751C82C14B50C7B307F1D093E3EF998FD7D3774DCE19B24EDG4143686B1FD9755AB5F71835A7C63EAE9ED65A4764FF110E5B09435AF625
	D07C72E1ED3B867B30DDABA02FED845B95BF2A9E4BAAF83F3FE54C4BEFCA90FF6632DA8F87B87D8763EA3CD24E2BDE78F20E7F6695EFBB974B783E2BEAF9CAB9FD76B5EF7A92993FC803AF157112600DAF136D151906760A65BAD81A262E330457B91C6EDD46BE993FABC3CD3F0F7BC2A4BD3735844ACD9A419877BFA9AE95522BB96E90FD3E126DC9B0EE76208CC226DACF45824E778F6A6EFF97F8643588DC5BBC5E3E4F7C60A5EAEF0BC76B9F2FD23C64517A07447DA3887216F33996FB49350F4B75D9FF070E
	DC0D239347531D106F545084C3BA9CA0FAD46B63AF51757422D11FB6D07C12D11FB6D8308D0910D7B506ED702CD137210C5B7760DAB5DE7135DFFB6195FFF8B04B2BCF1422AEAE746B59A8E20C35E781DC634674ECF48F15B7E9CC5B3E2FD2FC4A1836FD793CFDABA12F63B2BFC3EBD47BE39977471768992D05C03764B27ADE719B84178469D40E7B63E602DB8D696CF1ACF35196F519653C4C03DB314C4D6348FF53D6AC330063FE34954B2C62E506EED317D94C4BDC1B077D2619733766E13F696438B9F958EF
	EC3C4C4F8B3CECD246772DF4475571F1E607B038C60E6B5964A136DE9E575A64890ADFBC2E3549FE91ED928FF925D7D02E0DFB54EDD5464958BD64BC314DB46A9812E0AC3EC24F4472F7DB43A19DF3054915F805BD63E37B23CF51F93147E59A00702C55A9F68BCB2E52B30B0548DB8169E6G9BC0A8C074D514E5BE0DD948E1C4F652060F71FB086E6891B7B90361FFFC0054C50ED48E3969A3C8997FD3974573A3BBB8E6DB6DA406248721893E355BC55EB9A5718BFBF639DC74B90F8D6D4A3D16E04C3F06E773
	1E6ED353D4DFE3B4CE3886DFC37B7F0C1E8D1A8B69980E6B6A45BD042557F0CE3D5AA770F16AE6557D2DE63DB16BEF8572F87D855461AAD67B760E2084E3C510624B4DC17EE221EF50F83BABC87B7D206FD27CF810767BC147A81E2443A1EFF5906A7C5B740CC65717A07DA5448DF490DC882443B9AE2183ED9379A5344DE3990ABD3E2E3A2F4A18FE3D1D1956BAD81B779BD08FAB399E428D28876186544341B3CA5B6BD577BFEA1BFEBD7CECDA6BE0ED0EBB03FAE839817530339D755049757028C1E97B57D477
	878D532F0736E92D030D0D9923E47CA6734081DE6FB62F67CB51200BC5B7A8FDF6698D7E7A6FG6D0FA9B730FE3A1E6347A9BE7BC6854F7A6FFF51B587C997C15E5C9B518EC3F41FB8ABB84138A998F1EB7B50B6859C17C5F163101E9B0C767A29EABC7D156AFE24EF7A6D95B62DF5B0FBEDCEDBA35B0B6C39B15CB399783ED3D2B0514B0FE9BAA69867D723C14EAFE1795BE8BAEF86FFF7847377317CBE1A2E1E01FA7E3BB16CABDD9C777EE534070D631E3550588B5271B3509EA9AA9B7CC6F5BF768558632EE9
	2D0335B9289FF5134475709F941782E943CD0833D35DEC02F4BE47D515238E2BB84EC91FC304C2BA1263369BD02F31B7F13DDAD4FAD55D0FD93EG3DCEEB9D2C4DAE2E5745DC8F7F5C0F7A0A673861DE54CD5E4D281B39AAFDBC243AAF7C82F4F3ECDA6BE07D758FC66F7E3E618D12AE38997BF3639B5E7D7DB31A6E647939DB3C7B7BAE1A9E07FC16B6EFA56939BC7DA4CDAF61695F51F4AACF976511F4F6882647E93A1A273FC753DDA1FC1E3522ED03B86ED6AB5AB61463623B5136C9A1E85B47C5451E8BD477
	07446937ED7B34564166445F6F4175DA8A34B96F96DCDF95F71133447C7C89F91B2A3272184BEA2EB575B653559A5B47ABADA47C9D4067848839853FC36079AB3E3B9E7D70BC216D047EF788125B2E24C75CA26F695D223C5B6B697BC9BA5BBB3CE1EF164CA75C8AF17D2D849733D77D3D9D62E35D996C39AB4BFF49AB1F2C4556252973F30B5479C45E5B3D780FFA6593FD90598B85FC2F7B079FE15BD67FB0C630FDA3586F77F103EEE5ED0A142FE14BE72735BDB216415A3639874F47A45D0A7B22AF5267CC55
	DFCEB0F6GB83F0C767878AF5B851D77C5F496192C6CDF77617B20A1DF4632C77A697E91249381D6FC997BE7C4B11963AFB9DCF4131D2D41B774607AB3AB947C82208D40924A1EAFAF8825657556CF60DF9932CEB2E488A23C216C5B4824CDD1214A5E816BFF379463FAF6F5A8DFDB1590DC5E4C84E369CC44994A306FF64C44FE7A4C907946D294249782A4822C64F9F1B4AF67B6765D1188797BBD723935A1FFFD0C14F1BD7DE921CC3FD23EC6717AFB7C563176BA4AC7DFC41FC59DB39BAE23EB8937C83EEDA5
	1A6BEF23FB716D68832537212D03BB70BD6F105B487726631A09C7B3FB7E22836D3964B65F362BEDC9A0196893609DB9EF65ED0ABDD9592FFE22147D24814B96EE77ADBBA3C0593937EB4BFE7324D2F6F5BB161D27D3F6E60032CBEF577AE1F9A67AE1756D68F3B1EB508F4D9C771B356807A137232D5DC3245FA4C2BA95C088CBB0668294GD407A14D8D1426AD0CFD2707FC0307FC7F09FC6B06FCCFC6BE5FB85485D742B3D95FC854E9BBC22EDC8E1129C03E9738BC1BE9DD6B2F438FB3A648C35FA4FA47339E
	EB391F06DA517F180F4E23733087E4898E43F1E5EB9F5AF316CE7B8359B38AF8F62A7CF523302D0F3C43EAF1382CE3642BAC369A1B3557CE5EE695188C877AF00ED990067D646799F9F05DEE557F16CB83FB6FFD3B7CEDF1D17D3D74224B4D69B8767958C8EECF0AFCDD7D4E1CB4D6DF1901FC870E44D8053D227429B8C2BF83173F935B906415FF52E666792CBFC8ADCAFF58F7997537690E6B6FEB85F7A87D01551DECA17343GD4EE35737EF71A54476E0B4927DAE55AD57D440F1CAE31C7F439C4F32BF50C84
	CDCC4FEF59683718217C7ABBD04FB3AC449FFAC0430C66BE3AEEF1C27E789D688F2D65581EE81D762C8D501EC5BE6D39F98F714B812B5DBAB0B4C0A5E4F5FF152E0516GFDA2GEBDBDB1B524E50B30A0EDF69C7198CF7869EABB7818D812E63BB356359136D0A8EBFFAE347843E572A3CFB3EDDFE263DF9E25F295E624FF7D87E58568F8355C75FD35FAE53FFFF6B4475E5EF1B383E23F99FCDD0DF1D6A1D766DDCA7F766CDDC670B3BA76E9FA9E7955BBDE0C55BD568584E9840F64DBE36B31F93840C597F6873
	1EFBA0E0FC6B8A2F170F6DF5C531787BCE6D731927A85EFC277679CCE5A1467BCE48DBFAA73EBBF86CBC1913AA6E02B88F4086908C90893068AEBC87E2BCDAA484F8EF304D61EC9607C51B6A08187C5CE16F75360F0D2D5FD90B3176023FFBCC083D295E6FB730165EA547DF72B57F6559E9644A5A774285523E9D33E09E86B0830C830481C44D42761DBADA405A57E036CAB512E46A3650AF197197612D620802A68F1DD85BBE68510B6F964EE2F2444F521F17176B60D781AE7BEE08376F56BE7BED254F55CA6F
	565A3913622B6F565A79277C3CDAB364455C0DF37D4A3E096C10FB0F3F3D56D7695AA17F9EED7DABA93E749EED7DD77A793991480B3C07FF3F26A7DB6ED7D97702AD6E4575CDA69D93346FBB9432C5C9E5E50354ED914D357292C5DE63DC6B41F95BF3AF2EF1665372E3A09D87108C300D5AD6205F4741BFBD9C6B4B6E0B82773D7F48C65F5B7C7803C27D7375699F7A713DD577B23DB506ABEB585C013C8C3616FA1A3F679B944E56D261F00D8EE75F05126377925F672029A54837B8DCF98E1AA47331316C7DB2
	9C4BD6066B4F756AF8A9EBF602F173EC269302AF1A2D1D9B93FB089C74A9A7BF7777EB8319534F138726F56403C6179C9ECEFF63D51257211B57DBC6724EE97258734D55C35AE72024CDD5A0CF4BEC5409152DD5DCC3A233C74408BA4E2AF863865D6F9993304CE63A981F2D44D92C0C67AE284B4819E3CBCF73D3468219F751EC452672F926F3784E6D4A597A7E45FC497A3940FDB5193FC3DCB087E30B50AEA5FF309D734DBC7FC99349E73E70F9A66AEB6E9C66C38B609AB7071D7BE6B47F3A86E91267A87E32
	CA26E17E1215057E12F3DF605810784B0E7B94FF2938CF6BAF9F55F2FF6167C15750EF3E309715700C507EEA85074F49AF2D634F5B59E3F5997F3BDE05964FAF85FD2060CAE49F0A7571A1524EFA103163BE5461DF3A85AEEBC69F39EEAF5AAE6B7CE49F6A5C49698F18957A16BEB26737120188429472C3A9123B302E61533686927C32F965E7E66223D17771B964A409D95ACDFD726CC82692070B4EA000A45FE3E0DF40C23BF7DFC69996F2991AFB949F5AECD16469361077B36C62C89E7F40D13D9526A272C3
	A979A54585F97B4AF83C335A26709515EF57729D0530ABFF3B59EA32B9FA37976481EF713E1DA8D3F0B977EFAE53B63BA2D32DC3A97BDD43E4E4125F233771BEB0F722FEA3BA15FE11E0657DE2AE4A92B2C87259FC76C421F27F346A3E3AF07A77E74FCDEB9D4C1FDA4E7BBFFBFB763C7E595B0B67754F70F71F1F78FD017E737E5FEBF01DD7FF771E79FE070B6C134E853B4482A4812CGB0FC857B02F001789D79A5A25FD82A41CCE3FF5A29307E17AF78EF6BAB97827FE651EB9748F8F24981E344GA91F3F53
	F00158CBF2B8A912617EF4016848E56D35C80CD4469BBA093F59449E0AE67BBCF5B44E4803F695FD8577FE22A82E8A52ED9CF719BEBF30C0BA1863DEB3639ED1B847A5D33A94C88B77A3EE1C5265C23A74FE0C554E291EB7DCD25D3F7A851C29B1CC6B33875666F57C79DAA3EF73EF7A15F63E2E3A3FD177FC655F364DF33F00BA8E7584FC8F7CFE5D774E8372E95F5D135F7F8A4827859657FF50CB62688577EB637DDD943F68FEED3C7F759E0C7717C0DE51D7F1DD79CDB709B7E6C1BA86E0A9C0AA009081EBEA
	008200EA00B6G9BC0B0C0B8C0B440A200F80065G2BA2F0CC093DC876767C4D2F7283AABA3038CCD6B23448723DD80C6B0E6C87A0C6GE0734BCF76619AE27C81DCC32C233FB331G52CBG16BF00EB175CD2EC63EA40154EC37AD394EF03F4B0414D43321B4BF06EDAB06FFA57A1F78E11FBD6CE69B016134A6BFC1A3EC73063C10819815A9EC4FD9F2134B6C807BC08BA7B73455D93688C3F554930F45BC49E5FABC7088C72BBEF1FFD642F8C984D0F435C4F3E5A59E66A653E376D1C5A7722C01E058FCE3C1F
	AD1F2971FA67A29EF816CF0AEF38DD4D378AF832A3A76653FE2FB38F68BBA251FE4FE522EF04C5225E7FC8E963A01D8C30AA92FDA3EDAD7AC64EC3B01EBD047407A9BE885261GB18FE15987325026F18F6979460AA34C8F66F894BFD8B1443F837FB0167FCB7AFD638AC837GD89E46F1344DEB1D9F8478D98FCF2C8BF91EB513F85EAD47282CAC0B57B7D922201C05814A125F1FAE7732A370AC1F94DF1E4D4B0E40137D48E4781E77BA631C87BC258178D81B3BDC7E630EDED760384369225F3D07F821ED54A9
	3FFFB464A2FAF4747438C59E5F0C39F2B82E495D62F0DB490BC9AC0EBE5F637DDC6E6F49CF1649B176BF74507DEA13C733DF7DBC0DC19A210DED0F601A794EEE7F7B6F0F5338A388E8C39F4175609BA22E87E3F5F415A6F86F2F1375A001F7E4BFDC7208F6BD787BEE7D3D758DB43EC9847A65DC563B4C93BF1719EF467E17930572EE677B6E25D17A7222AC741B98C053994564A5B8E714A2AFFB77F451C622AF2B5DE6350BF56C17AD39BFFDCC06B2793EC8F57FAD5D7D3E3F9530BA9226358E660FBFF07B777B
	9F3B837B7D8BEE7DF8BB596D9BEF7F542D9FEF3F6AD6475B8C37027E1ED4AF4C659D1C6E379CF70E63DE27E5925CD92BD932F03CC05F45A478C611D40878B59211EB0462BAE45CBA956E1C0C4B11C85F05A603EBA26FBB92FDCEE53559645F2F20B4D6BBF4E52E0F2D74B7822CCE13CA6E8FB96E9C376DFD7B269683BE9A10CFBF86FCA9A01F96D82CF70D46C163D15A98B00462C32234B160DBA57C9DE948DB9505F351FF17CE6D19C87EF573B1793ECF63314EC735F27F9345DB9E554AFD1647F59264A5BE0AF2
	1FAAD357DF75984C310FCDE69EBA207B1DC1334C6B51A90349373B1D48917A18D66ED20A8FFFCCAB775F1FC139A3A1AF6BF17ECE7AB0A9132F73D9C8076F248F678A2A5F0B20BF5F42F62464338FF4EF5376B82BCBFE470962023DF02B8D3EF4E9193EF4B35BFD696EECD753B11D857EB611FE1F887CEDA27DBE31B4A01F3E0D8669B751A39E575AE80C62239F575AA8E38D5AA89672B6C723EF2D8D78DD9FFD5FFA673A7918FC6C5B6CC151DA391F217850E82D5C75BC1E8D073C55DC6E43DE5F876A1A1FE01466
	CF26CF7CD677DB1FA1B26FDC1DB218FCA67A1B9BB17335F277D17C4279DA39DF9BC63963A02F60895CDF696F7375C3E71F2F3FDE3B6CCB97FC5917AE225C176E21F2DF3A7DB6DF3AAA1BAF5D2F2C3EF42FD955F4ACAECC9E03DBB956F2F6CF30773A2F4CEBBFB8E3DC61CBB1CF060F2DB98E726FCF07BD017B2F15D784AE4F452BCA390313AAD7FE0F56BC515EBA2B3B351F2F111E50DFA379DFB75D18AEF05F1BD1225C5F263AFF37E47A633822AF200E9F16AAEDDA2A3A3FD8BA7DF58FCFEB9D2C9FD84AFC7B46
	C019EF9FEA21FB9F4213F07FA4767BEF8C639E6366A7F18CABEED7F4D4293A7F5E196957D7523456411E751A7ECA46C0F90E2721B143EF762CD770989A637BCAEB94BD84296E0DEB26DFA75B3F00BAE257AAED7A0E6A7E785A692F3BFBDA6BE0FEFEA64B370F1C4F726DA359ECFF907A42B86FA3033C0F0470BE52BB226848293A7F4370746B6B6D11692F235A6B3BD109506E54A7A79347F4F8FD5BC008C9B06646CC4CA71F0598765E5FF9183E6B4B76B4168C631EC63ECED9985F60BE0C76FCE3D50C729BA82C
	2E8FB5F5BDEBD06A8A61F5B56A541591202ECED5DD4CF74E0A3EFE57A97A7A1D239F693E1F0EB8299F693A53F14E7FA35F6B3644E03C11CA37BCD97E37F8FE844F5F206A4F69DE5FD1CF841A54G76E1FC5F76DA3389CF01DD1F1A180F35613D915F76EF9D71ED7F32E1DF3A970655F46FD25BBD6739919A977DCBA1D39252BB4E413FF367615F798E783727586D92B670582A09EEBEA48F17D4E63C7CE0C63AE0E89256304D18A641C0F6D41A04CC3A6152A4E4C88E2707BCD5CF1715C7A09D0A5CDD6C9E942E8A
	865F2C0CBD45C5DEF99CA0EF373FBC0E4DD4038F167EF9E10509311210D6F4BD74202837FD03501A5B7E7579684F6BF35305F45015C5E44A499CA1D3A4D58FF96E318DF857FB9D14787E83E5BFDB726F6D6E8CE1CD13709EB92B5CAA3A584FAD1A49E76C5AC597A97D28E0F412C32BE45793AC602617CC37B4EA931B055C1E5364B73E5D12E866BF28601604F7684F1E6D9D122C363D0DA637C5A29BEC871B85031D7C7C0270B64BA63F0A36D77E65B4AAE7DACDB5EDA6DD6B003C9B293C2414C2DE4A46E7B6FC74
	4171653199C27AD1618D1B43E4BEEA6A169C2EA641A8D948AF75B9ECE60F7388ABA80B3AAC695686A86EFD5EFC525842B698C938507D1E2F042ECFD9FF944C6DF189FBA9A599EA8AB905394EE2A23FB1A93A1AGCCD0658E1E77252D52DFFFF46C5D4EF4A1CDEEA4B15F3B9E27A42C69B18DD8ED23F0430E25D0433E8FC936B947DD1F7EC45CD1E80F7442AF1F1D77EFD5ABD2213023C2A67D1DA590A9C721E22724EF0A3EFB4B3AD949DFA692BB2B51E520E42364B2595D64B7432070BCCD1BB10B0BDEF85733C5
	F7BF7A7AF9AA3A42AA895B181100F5EF2F689858DB5353E3350B3CG3098943F0597CFE88AB5B4EFFB6EF8677832BFDF828F2B97B2860A0A687FE27AFF9F79DFCCB14594D33C8F4C36C21870CF1B6F41B6D33724096D4407BC64EE1BE7022E3511F70B49F562CC9FEC6644D8685AF9DEB53D2713A2DCDE6007C6AD1BC192B2495943CA70A1FA482C1213F97D69E365B320BB2F294F8B2E1A516D774C2179E9F9FF6FE9653CA0FB0EEA99A71DEB8160631F664F31AF6F917CBFCFED9DB059EC124956DFE3B713E72B
	352312281C539998A7653B11C64EE4F9927D3ED81F0A67FFGD0CB878802EA0CDC67AAGG6810GGD0CB818294G94G88G88GF7FBB0B602EA0CDC67AAGG6810GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGA1ABGGGG
**end of data**/
}
}