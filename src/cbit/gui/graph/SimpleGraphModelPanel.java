package cbit.gui.graph;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.gui.graph.GraphPane;
import java.util.*;
import javax.swing.*;
import javax.swing.plaf.basic.*;

import org.vcell.util.gui.JDesktopPaneEnhanced;

import java.awt.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class SimpleGraphModelPanel extends JPanel implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private JPanel ivjFeatureSizePanel = null;
	private cbit.gui.graph.GraphPane ivjGraphPane = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private boolean ivjConnPtoP1Aligning = false;
	private JPanel ivjJPanel1 = null;
	private JToolBar ivjJToolBar1 = null;
	private ButtonModel ivjSelection = null;
	private org.vcell.util.gui.JToolBarToggleButton ivjSelectButton = null;
	private org.vcell.util.gui.ButtonGroupCivilized ivjButtonGroupCivilized = null;
	private JScrollPane ivjJScrollPane1 = null;
	private JLabel ivjJLabel3 = null;
	private JButton ivjAnnealLayoutButton = null;
	private JButton ivjCircleLayoutButton = null;
	private JLabel ivjJLabel4 = null;
	private JButton ivjLevellerLayoutButton = null;
	private JButton ivjRandomLayoutButton = null;
	private JButton ivjRelaxerLayoutButton = null;
	private JButton ivjZoomInButton = null;
	private JButton ivjZoomOutButton = null;
	private JButton ivjGlgLayoutJButton = null;
	private JDesktopPaneEnhanced fieldDesktopPane = new JDesktopPaneEnhanced();
	private SimpleGraphModel ivjSimpleGraphModel = null;
	private SimpleGraphCartoonTool ivjSimpleGraphModelTool1 = null;
	private cbit.util.graph.Graph fieldGraph = null;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public SimpleGraphModelPanel() {
	super();
	initialize();
}
/**
 * CartoonPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public SimpleGraphModelPanel(java.awt.LayoutManager layout) {
	super(layout);
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getZoomInButton()) 
		connEtoC1(e);
	if (e.getSource() == getZoomOutButton()) 
		connEtoC2(e);
	if (e.getSource() == getRelaxerLayoutButton()) 
		connEtoM12(e);
	if (e.getSource() == getCircleLayoutButton()) 
		connEtoM7(e);
	if (e.getSource() == getRandomLayoutButton()) 
		connEtoM1(e);
	if (e.getSource() == getGlgLayoutJButton()) 
		connEtoM9(e);
	if (e.getSource() == getLevellerLayoutButton()) 
		connEtoM13(e);
	if (e.getSource() == getAnnealLayoutButton()) 
		connEtoM2(e);
	// user code begin {2}
	// user code end
}
/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}
/**
 * connEtoC1:  (ZoomInButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomInButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomInButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (ZoomOutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomOutButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomOutButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM1:  (Button1.action.actionPerformed(java.awt.event.ActionEvent) --> CanvasTool.randomize()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layout(this.getRandomizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM10:  (ReactionCartoonEditorPanel.initialize() --> GraphPane.graphModel)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10() {
	try {
		// user code begin {1}
		// user code end
		getGraphPane().setGraphModel(getSimpleGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM12:  (RelaxerButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layout(this.getRelaxer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM13:  (LevellerButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layout(this.getLeveller());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM16:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.graphPane)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().setGraphPane(getGraphPane());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM18:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.buttonGroup)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18() {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().setButtonGroup(getButtonGroupCivilized());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM2:  (AnnealButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layout(this.getAnnealer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM3:  (SimpleGraphModelPanel.graph --> SimpleGraphModel.graph)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModel().setGraph(this.getGraph());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM5:  (ReactionCartoonEditorPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroupCivilized().add(getSelectButton());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM7:  (CircleButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layout(this.getCircularizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM8:  (SimpleGraphModelPanel.initialize() --> SimpleGraphModelTool1.setSimpleGraphModel(Lcbit.vcell.constraints.gui.SimpleGraphModel;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8() {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().setSimpleGraphModel(getSimpleGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM9:  (GlgLayoutJButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layoutGlg()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSimpleGraphModelTool1().layoutGlg();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetSource:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			if ((getSelection() != null)) {
				getButtonGroupCivilized().setSelection(getSelection());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetTarget:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			setSelection(getButtonGroupCivilized().getSelection());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP2SetTarget:  (Selection.actionCommand <--> ReactionCartoonTool1.modeString)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if ((getSelection() != null)) {
			getSimpleGraphModelTool1().setModeString(getSelection().getActionCommand());
		}
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * The firePropertyChange method was generated to support the propertyChange field.
 * @param propertyName java.lang.String
 * @param oldValue java.lang.Object
 * @param newValue java.lang.Object
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}
/**
 * Comment
 */
private java.lang.String getAnnealer() {
	return CartoonTool.ANNEALER;
}
/**
 * Return the AnnealLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAnnealLayoutButton() {
	if (ivjAnnealLayoutButton == null) {
		try {
			ivjAnnealLayoutButton = new javax.swing.JButton();
			ivjAnnealLayoutButton.setName("AnnealLayoutButton");
			ivjAnnealLayoutButton.setText("anl");
			ivjAnnealLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setActionCommand("AnnealLayout");
			ivjAnnealLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjAnnealLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAnnealLayoutButton;
}
/**
 * Return the ButtonGroup1 property value.
 * @return cbit.gui.ButtonGroupCivilized
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.util.gui.ButtonGroupCivilized getButtonGroupCivilized() {
	if (ivjButtonGroupCivilized == null) {
		try {
			ivjButtonGroupCivilized = new org.vcell.util.gui.ButtonGroupCivilized();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonGroupCivilized;
}
/**
 * Return the CircleLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCircleLayoutButton() {
	if (ivjCircleLayoutButton == null) {
		try {
			ivjCircleLayoutButton = new javax.swing.JButton();
			ivjCircleLayoutButton.setName("CircleLayoutButton");
			ivjCircleLayoutButton.setText("crc");
			ivjCircleLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setActionCommand("CircleLayout");
			ivjCircleLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjCircleLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCircleLayoutButton;
}
/**
 * Comment
 */
private java.lang.String getCircularizer() {
	return CartoonTool.CIRCULARIZER;
}
/**
 * Comment
 */
private java.lang.String getCycleizer() {
	return CartoonTool.CYCLEIZER;
}
/**
 * Gets the desktopPane property (javax.swing.JDesktopPane) value.
 * @return The desktopPane property value.
 * @see #setDesktopPane
 */
public javax.swing.JDesktopPane getDesktopPane() {
	return fieldDesktopPane;
}
/**
 * Return the FeatureSizePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getFeatureSizePanel() {
	if (ivjFeatureSizePanel == null) {
		try {
			ivjFeatureSizePanel = new javax.swing.JPanel();
			ivjFeatureSizePanel.setName("FeatureSizePanel");
			ivjFeatureSizePanel.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjFeatureSizePanel.setLayout(new java.awt.BorderLayout());
			ivjFeatureSizePanel.setMinimumSize(new java.awt.Dimension(22, 396));
			getFeatureSizePanel().add(getJPanel1(), "South");
			getFeatureSizePanel().add(getJScrollPane1(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFeatureSizePanel;
}
/**
 * Comment
 */
private java.lang.String getForceDirect() {
	return CartoonTool.FORCEDIRECT;
}
/**
 * Return the GlgLayoutJButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getGlgLayoutJButton() {
	if (ivjGlgLayoutJButton == null) {
		try {
			ivjGlgLayoutJButton = new javax.swing.JButton();
			ivjGlgLayoutJButton.setName("GlgLayoutJButton");
			ivjGlgLayoutJButton.setText("glg");
			ivjGlgLayoutJButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjGlgLayoutJButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGlgLayoutJButton;
}
/**
 * Gets the graph property (cbit.vcell.mapping.potential.Graph) value.
 * @return The graph property value.
 * @see #setGraph
 */
public cbit.util.graph.Graph getGraph() {
	return fieldGraph;
}
/**
 * Return the GraphPane property value.
 * @return cbit.vcell.graph.GraphPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.graph.GraphPane getGraphPane() {
	if (ivjGraphPane == null) {
		try {
			ivjGraphPane = new cbit.gui.graph.GraphPane();
			ivjGraphPane.setName("GraphPane");
			ivjGraphPane.setBounds(0, 0, 372, 364);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphPane;
}
/**
 * Return the JLabel3 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel3() {
	if (ivjJLabel3 == null) {
		try {
			ivjJLabel3 = new javax.swing.JLabel();
			ivjJLabel3.setName("JLabel3");
			ivjJLabel3.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel3;
}
/**
 * Return the JLabel4 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel4() {
	if (ivjJLabel4 == null) {
		try {
			ivjJLabel4 = new javax.swing.JLabel();
			ivjJLabel4.setName("JLabel4");
			ivjJLabel4.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel4;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjJScrollPane1.setMinimumSize(new java.awt.Dimension(22, 396));
			getJScrollPane1().setViewportView(getGraphPane());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}
/**
 * Return the JToolBar1 property value.
 * @return javax.swing.JToolBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JToolBar getJToolBar1() {
	if (ivjJToolBar1 == null) {
		try {
			ivjJToolBar1 = new javax.swing.JToolBar();
			ivjJToolBar1.setName("JToolBar1");
			ivjJToolBar1.setFloatable(false);
			ivjJToolBar1.setBorder(new javax.swing.border.EtchedBorder());
			ivjJToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
			getJToolBar1().add(getSelectButton(), getSelectButton().getName());
			getJToolBar1().add(getJLabel3(), getJLabel3().getName());
			getJToolBar1().add(getZoomInButton(), getZoomInButton().getName());
			getJToolBar1().add(getZoomOutButton(), getZoomOutButton().getName());
			getJToolBar1().add(getJLabel4(), getJLabel4().getName());
			getJToolBar1().add(getRandomLayoutButton(), getRandomLayoutButton().getName());
			getJToolBar1().add(getCircleLayoutButton(), getCircleLayoutButton().getName());
			getJToolBar1().add(getAnnealLayoutButton(), getAnnealLayoutButton().getName());
			getJToolBar1().add(getLevellerLayoutButton(), getLevellerLayoutButton().getName());
			getJToolBar1().add(getRelaxerLayoutButton(), getRelaxerLayoutButton().getName());
			getJToolBar1().add(getGlgLayoutJButton(), getGlgLayoutJButton().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJToolBar1;
}
/**
 * Comment
 */
private java.lang.String getLeveller() {
	return CartoonTool.LEVELLER;
}
/**
 * Return the LevellerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getLevellerLayoutButton() {
	if (ivjLevellerLayoutButton == null) {
		try {
			ivjLevellerLayoutButton = new javax.swing.JButton();
			ivjLevellerLayoutButton.setName("LevellerLayoutButton");
			ivjLevellerLayoutButton.setText("lev");
			ivjLevellerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setActionCommand("LevellerLayout");
			ivjLevellerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjLevellerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLevellerLayoutButton;
}
/**
 * Accessor for the propertyChange field.
 * @return java.beans.PropertyChangeSupport
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}
/**
 * Comment
 */
private java.lang.String getRandomizer() {
	return CartoonTool.RANDOMIZER;
}
/**
 * Return the RandomLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRandomLayoutButton() {
	if (ivjRandomLayoutButton == null) {
		try {
			ivjRandomLayoutButton = new javax.swing.JButton();
			ivjRandomLayoutButton.setName("RandomLayoutButton");
			ivjRandomLayoutButton.setText("rnd");
			ivjRandomLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setActionCommand("RandomLayout");
			ivjRandomLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRandomLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRandomLayoutButton;
}
/**
 * Comment
 */
private java.lang.String getRelaxer() {
	return CartoonTool.RELAXER;
}
/**
 * Return the RelaxerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRelaxerLayoutButton() {
	if (ivjRelaxerLayoutButton == null) {
		try {
			ivjRelaxerLayoutButton = new javax.swing.JButton();
			ivjRelaxerLayoutButton.setName("RelaxerLayoutButton");
			ivjRelaxerLayoutButton.setText("rlx");
			ivjRelaxerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setActionCommand("RelaxerLayout");
			ivjRelaxerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRelaxerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRelaxerLayoutButton;
}
/**
 * Return the JToolBarToggleButton2 property value.
 * @return cbit.gui.JToolBarToggleButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.util.gui.JToolBarToggleButton getSelectButton() {
	if (ivjSelectButton == null) {
		try {
			ivjSelectButton = new org.vcell.util.gui.JToolBarToggleButton();
			ivjSelectButton.setName("SelectButton");
			ivjSelectButton.setText("");
			ivjSelectButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setActionCommand("select");
			ivjSelectButton.setSelected(true);
			ivjSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select.gif")));
			ivjSelectButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSelectButton;
}
/**
 * Return the selection1 property value.
 * @return javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.ButtonModel getSelection() {
	// user code begin {1}
	// user code end
	return ivjSelection;
}
/**
 * Return the SimpleGraphModel property value.
 * @return cbit.vcell.graph.SimpleGraphModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private SimpleGraphModel getSimpleGraphModel() {
	if (ivjSimpleGraphModel == null) {
		try {
			ivjSimpleGraphModel = new SimpleGraphModel();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSimpleGraphModel;
}
/**
 * Return the SimpleGraphModelTool1 property value.
 * @return cbit.vcell.graph.SimpleGraphCartoonTool
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private SimpleGraphCartoonTool getSimpleGraphModelTool1() {
	if (ivjSimpleGraphModelTool1 == null) {
		try {
			ivjSimpleGraphModelTool1 = new SimpleGraphCartoonTool();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSimpleGraphModelTool1;
}
/**
 * Comment
 */
private java.lang.String getStabilizer() {
	return CartoonTool.STABILIZER;
}
/**
 * Return the ZoomInButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomInButton() {
	if (ivjZoomInButton == null) {
		try {
			ivjZoomInButton = new javax.swing.JButton();
			ivjZoomInButton.setName("ZoomInButton");
			ivjZoomInButton.setText("");
			ivjZoomInButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setActionCommand("ZoomIn");
			ivjZoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomin.gif")));
			ivjZoomInButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomInButton;
}
/**
 * Return the ZoomOutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomOutButton() {
	if (ivjZoomOutButton == null) {
		try {
			ivjZoomOutButton = new javax.swing.JButton();
			ivjZoomOutButton.setName("ZoomOutButton");
			ivjZoomOutButton.setText("");
			ivjZoomOutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setActionCommand("ZoomOut");
			ivjZoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomout.gif")));
			ivjZoomOutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomOutButton;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION --------- in CartoonPanel");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getButtonGroupCivilized().addPropertyChangeListener(this);
	getZoomInButton().addActionListener(this);
	getZoomOutButton().addActionListener(this);
	getRelaxerLayoutButton().addActionListener(this);
	getCircleLayoutButton().addActionListener(this);
	getRandomLayoutButton().addActionListener(this);
	getGlgLayoutJButton().addActionListener(this);
	getLevellerLayoutButton().addActionListener(this);
	getAnnealLayoutButton().addActionListener(this);
	this.addPropertyChangeListener(this);
	connPtoP1SetTarget();
	connPtoP2SetTarget();
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CartoonPanel");
		setPreferredSize(new java.awt.Dimension(54, 425));
		setLayout(new java.awt.BorderLayout());
		setSize(472, 422);
		setMinimumSize(new java.awt.Dimension(54, 425));
		add(getFeatureSizePanel(), "Center");
		add(getJToolBar1(), "West");
		initConnections();
		connEtoM5();
		connEtoM10();
		connEtoM16();
		connEtoM8();
		connEtoM18();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		JFrame frame = new javax.swing.JFrame();
		SimpleGraphModelPanel aSimpleGraphModelPanel;
		aSimpleGraphModelPanel = new SimpleGraphModelPanel();
		frame.setContentPane(aSimpleGraphModelPanel);
		frame.setSize(aSimpleGraphModelPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == getButtonGroupCivilized() && (evt.getPropertyName().equals("selection"))) 
		connPtoP1SetTarget();
	if (evt.getSource() == this && (evt.getPropertyName().equals("graph"))) 
		connEtoM3(evt);
	// user code begin {2}
	// user code end
}
/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}
/**
 * Sets the desktopPane property (javax.swing.JDesktopPane) value.
 * @param desktopPane The new value for the property.
 * @see #getDesktopPane
 */
public void setDesktopPane(JDesktopPaneEnhanced desktopPane) {
	JDesktopPane oldValue = fieldDesktopPane;
	fieldDesktopPane = desktopPane;
	firePropertyChange("desktopPane", oldValue, desktopPane);
}
/**
 * Sets the graph property (cbit.vcell.mapping.potential.Graph) value.
 * @param graph The new value for the property.
 * @see #getGraph
 */
public void setGraph(cbit.util.graph.Graph graph) {
	cbit.util.graph.Graph oldValue = fieldGraph;
	fieldGraph = graph;
	firePropertyChange("graph", oldValue, graph);
}
/**
 * Set the selection1 to a new value.
 * @param newValue javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setSelection(javax.swing.ButtonModel newValue) {
	if (ivjSelection != newValue) {
		try {
			ivjSelection = newValue;
			connPtoP1SetSource();
			connPtoP2SetTarget();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
/**
 * Comment
 */
private void zoomInButton_ActionPerformed() {
	if (getSimpleGraphModel()!=null){
		switch (getSimpleGraphModel().getZoomPercent()){
			case 195: {
				// already at top, do nothing
				break;
			}
			case 156: {
				getSimpleGraphModel().setZoomPercent(195);
				break;
			}
			case 125: {
				getSimpleGraphModel().setZoomPercent(156);
				break;
			}
			case 100: {
				getSimpleGraphModel().setZoomPercent(125);
				break;
			}
			case 80: {
				getSimpleGraphModel().setZoomPercent(100);
				break;
			}
			case 64: {
				getSimpleGraphModel().setZoomPercent(80);
				break;
			}
			case 50: {
				getSimpleGraphModel().setZoomPercent(64);
				break;
			}
			case 40: {
				getSimpleGraphModel().setZoomPercent(50);
				break;
			}
			case 30: {
				getSimpleGraphModel().setZoomPercent(40);
				break;
			}
			case 20: {
				getSimpleGraphModel().setZoomPercent(30);
				break;
			}
			case 10: {
				getSimpleGraphModel().setZoomPercent(20);
				break;
			}
			default: {
				getSimpleGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}
/**
 * Comment
 */
private void zoomOutButton_ActionPerformed() {
	if (getSimpleGraphModel()!=null){
		switch (getSimpleGraphModel().getZoomPercent()){
			case 195: {
				getSimpleGraphModel().setZoomPercent(156);
				break;
			}
			case 156: {
				getSimpleGraphModel().setZoomPercent(125);
				break;
			}
			case 125: {
				getSimpleGraphModel().setZoomPercent(100);
				break;
			}
			case 100: {
				getSimpleGraphModel().setZoomPercent(80);
				break;
			}
			case 80: {
				getSimpleGraphModel().setZoomPercent(64);
				break;
			}
			case 64: {
				getSimpleGraphModel().setZoomPercent(50);
				break;
			}
			case 50: {
				getSimpleGraphModel().setZoomPercent(40);
				break;
			}
			case 40: {
				getSimpleGraphModel().setZoomPercent(30);
				break;
			}
			case 30: {
				getSimpleGraphModel().setZoomPercent(20);
				break;
			}
			case 20: {
				getSimpleGraphModel().setZoomPercent(10);
				break;
			}
			case 10: {
				// can't zoom out any further
				break;
			}
			default: {
				getSimpleGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GF3FBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8DF8945539B0EA50D823C68D029AB53534451AEA6A253729C5EFDA51D225AD66C6AF5A20D83916BE45164FD2BFEAF3F532C9A40B8102202282868818C88CA1BF90C288898910C000C8A2C48C125D6CE4F713591F6CCEC2426F771EF366BDB3BBBB1BCD526B73BDCFFDFC19BD6FB96F6FF94F6F1CB391D6FF9C1715EEDAAD8869D902725F4EF4C1089EAF88575ED873A462AABFC9B68B1A7FB6G2C94
	366C4904E7A364AD3CAF591CABB85F4F06F487246747A51B5F075F2B84777B630660C788B96D10B76D6A36DF8EAFE7CE974AD9C25316E5B970DC8E5089B8720C7F04489FDA36C641C7A8F804F493608AC81918E5EB955CC2A8138D38DA003682D6DE02A7D3E0FCD525D22E6326A94222A7FC26E5040F06A742CC05F621724C93DECF1FD4C8E4BDCC75A4B485106E84A046E7887BCEFC8A4F6A16DEFBCD1755A9975B7B1D45F61F456B282AEAF53A3C12F810A40EF8EC2254E2F10B92386FD342AFEBF9B6259704D4
	6095C7F17F68A2B25A613797A072D3443FAA927CBC781D8630FAAB5A356713EAC56F7673BF91D2CADD19ABC258D53415595336D535EBE64F9C5387348E560944575110B795E0864082001C22E4F39140C7346E73ED444EBA2BDC6FF139BC6EBA2FF71FE473D13B60F7D59564A83863E21747E79384D63F0FAEABB250E7B8E0F4CF0D1A0E79E4CA9956F57C717B0554FF3B55344440A729D34E1B9A0A18AFBA0AD41FB059CB170712FD21A8B09683E51F943432E774BD1D11E5A0FB5E57CFE7C4ABFCA6EBE44FABA2
	F56D31113A1E8E3F895D5B24BC45DF2478024FD4BC0B4BF40AA769C6480B7F8CE323FDB96A521CF90F103BFD22219FA67DA24A14DB4CF4A8A8566BF24ACEF83795B319952AAE94BFC303E73AAC26F1CA52555B205FA8C9B633785AE2A76DB426B4591CGB083E0AE00D016ECDE8BD0D206B16632ED9BE10C35D8FC723EFE27E493FD82235DA23E87CFF1D076D91A5CFE59626E92CFD8FCCE0BD5927D02D2E61BC8FCE08D20AB27315F85B28E0AEE51E7111D9EB7F03738C4D97479D919BD62CAD246A7525CB627CB
	8481AE2F00FC770B2B60A9D97C7297DE1BC5965592AC7F08C86AE440F282B88283784D7C526AA07EEA817B9DG035C8FB3A83F43228F7A0B2A2AE60F27375F5BC6AC91E61491BFEF20FDC7947C1EDC06BEBE66A4381C72E4F3FEB972F9D3FCC743274159C554377806300D755B209397AA21FC8B0097A092A03E9CE3684F6D98C38D4BFEA894BDBD41B0065A4FBC1DB1231C454E5CF2FDDB3A0A4AA0FAE6D7A41B8BG9A819C95587FAF31350F321D37A8B2AA4B553698DF9E58AE5196A6A3EF54B23214E7068677
	362E4C92255DB37FBF5CC36AB2926C1A8CB03D826B202ABB0F4574BE0BDF44A8BE6603G94EDEA0DB0BDBB6D8EF83E2B70A5E394E98FDF826C95C86FA2888781B68174AA75709540CE005DGE5G27C9FD8BEC2C5D85309FE08240E625DDB681F808BE824640D5D4E6AA681B39837AFB00B6008BG1381E682AC82D83BB3595CGA08144GCC83188710D319ECAE8768G08G0887C881C883485F15ECEE861081E281266F427AF8C30CCB8F0EA33372DC26433F9B220EB6A83E58EC1037CDF916A9F66FD47C31DB
	416FD5FC30DC7151C145B707C348BA295443D70A0FC345CD2F72740CB25E0603897F0B3CC6832C2E1C5D242E5E5765E5E94AE87199A1F811BAA2FD5AE786F9D86F9FAB75C65A4DA7G6B84B59EAA145F05D4A7C1582E543D11ACB287A2ED15344B8D435807F1D5763F68332D7F1F6A0A75B5A5F6E23BB8A03A658651AB3AED70432F646D3493BFAB63E33707536C21F8AF0C2775B00079B93E5ECE7CEC11E51F535AAF0B2D22ACBB5DF6B57FB015656F37FA552198E59D371378701C05711417BFE9A7E3D117476D
	96E92747C9147CAF69D8A8CA228B142E77743BE506BF63A06B05DEF1C8990B3B9CEF89E4AC157A49384E66608996D25FDE1F5385DDA9199A8855D5E41C2CDC3EC6632385507F1035C4AE6465D76198F7F6930EF179676E95124EF8CDC6F336C95F3D5194D1454618C9D56A9847F4EAF39A6BFE0A0E498A5E4FF4EDB2113275202407CCB4E0E44E20E5D7118515302FDF16BD6E03BECF3F375EB960141C67C49B4B3F5EC174ED85E654FD82EBEB2B04A76CA40E75CB0DB60FC75A4E4B7C3AA757208C9B37DE6BA57A
	A402CDB38166D56138750C1364635CC199306ABD12AA3FE8B7717193F4FCC7BF25D5B19F135F31B47FB51EAFC3BAEA371A4F68EF9735747302729F8F48AF28D673191E0FD25B7CE2DF3F88D3BEB2C9BA4CE365091EF7F4F9A71438E17949BDA4EEA44D7CEACAB51179EBBB2EAB9D55EC5EB22E1A4DDDA641F3BD605B7610F2939DD8EE1122D74E9ED6BEFF8F53F1BEAD7739934B456DE163ECA2BCE76CE17C0A81BF3B06147B28874B15C33A99C02AE1FC63EB98BFD66E85DEAEFFEF3239FA2FDA2EE32F324E23F2
	EF6945F211FBD9FE9CBC9381E6AB65183D22445751FB191D5935EC1E16DF2B35375205652A815F86A0AB652656EA652671F22900DF9432DC029B4B2D2ED375A3650A6A3465AEF830DC8360BBGAE5499712B75E239E9101F8230C8A9D73ECFDBAE338F4BB5835E36AF14FE093CDC443EC07DE28378C9BEAC37G7019752178ED39446B2DBE10DFF53DB6DEDE65655A6A597CCA2AD762301E454B3CFAD26E871731DCF4BD1B0BCDD178A6AA7CD8B92B0065CA9A585C2D310115EBEF50167BB01D5B5B4066FA31CA39
	78862DFE493CDCEA03B2AF2CE7F195285F55A65EBE9A589CB2E7BF6337F63FD6EECD862F0F7DEC3EE9D34A497B35F2DF636562763379E762FE361618311F49E5FE1E1E0965E6ABFC96AA65B28FE87945E4E139B58758FC1758615078197559FFADA463885D6369318CD8860B7DE7E1AC2C2ABAC47BEF361FF38FDD1311BE3A64G6E5BFCEAA1FD2B835263GA69D40B16729E538EF9353BBC5186CCB4988359F1520681BF2C09DF30ABA4FE6303E3B56C5E42EBE886D74A0765BC7FA35EB47BA3F5F5365244BD625
	4FCB6B550EC98C17AEAD05E7375367171BE052B0087D63920968CB56358ADA714777B6ED92F4FBDED5D5C6C31732AFF27100565EE9ABAE1A5E8EE1EF65C1E6E77BC1555E5C232FE5307D05F5F4FF010CE913A0FF96C0F6A35D2790499C017451CCDED7994A0BBE77DD21F3426DA165B5B7AAFB050D9AF94F17E7B0BBCFE46D8C30F320CB1424E2184378E196658477B14BB5832BB22E1361D771D5E44E76D17220033300FBAA2F5951664920E3AAG9B533DF4CF419FB49F38024E17E407534FFC71EADD2DE26B4C
	7B6F919217C4190C76889D5F1FE4DA5D44FCD05D247AA2FE6E9CD392G53A549013AC4C11969CD284BA7F47E63F4BBE5270554FBC1A1333D443D911E961B2D20D953EE0A6B2C4476AE19C54C6E429338FF764375DADD33AD638DF50D7A235D14266818FFC85535A0F90E29BA99F5BD67C4DDA5A8B379906A7A221378476233EFE7730B3E3D5A79C5AA144BB91CECAEB90C31F461CB54E95C4C29421AD5579B6AC4472643CAAC9DD6F5DA74429CD3B677DF835DA3A03E1986E59681B09DDAFA35BA94B5B39D5A1AD1
	677BFACA094E34220B5923C574F5FBFCAE51D6C0BCDBECB9AB9753F9FFF19D4D5ECFFE97E2FBFDF587D9DB1D73F8DCCDEE6674B3F5BAAED0894C5EFBD6E96B207A72570676C62EF0189C4D4C4E68E6555E24276618D21EC2FB33FB515ED4A8337A885A7BFA0F113D4DC7F0CF3DF5DD1E226F31FEB92442CC4634DE2C67CE201FF484FD36C95247A4133D3ECAABFB9614CF8348BB0AF4C7E8DFE857B4C4A66786896514C3D909177F1B340C578D59363438ED3CAD663988AF9730E905E5145B0E3CACAE5E2601CF6A
	D174CB1E4D48AF2B0F212C992EFFAE8EFEFA09746B12E54853AF33A6D9ACD920C1B26DC8C3E47AEDF623FE85A03B73986AF7CEB052EF9264B33AE7B9DDBC6066F13DED9EB37A140C183CEF7B2E8763E3ED8B44FB8B4A19E3680728966417639D2B9F18DC2797750C831E33395C71D6A339391F235CD9E3164B7C5F71E58E777FC1494EE37833BE54A79FE4F5FC0E7A1CB754A766F374770BFD683FA9001B7BB9361F19A76B85B2B6487AD12520B97498D42CAF2C46439D97D13FB547134DAD47D13FDF180C740BBC
	0E7A9D3B04F43100CBB90EFEFC6E92990F2D6A04C1117351E5AC1F538A734AD634E7F58DF952B5BFEFDBB117F11CE3347FF999FDF181682636222CAA817BFB466B0FDF123E50AE4AF5EE37E811C4DFC1E1F0CBD07A42FF2C433EB03FE132D03928B7E45F3F201575012B5B543EB05AD511B1990069F71D007A5920CCEC9B6A772ACE3F32CAC53FE608A3A914FE0CE7FDBA72CC81FEB9DFA04F9F2487725CB4340171BC8E3D1347853D21B1D7EC9F7FC847FAE8G1E973E407AFC4004722682EE811777DEC6203C08
	4D1B183CFA272F2BDF3278C2CAE4FC6D9948B77F84447F89647B9B9D5FC32B57ABF60812E5B014910C674719E8C38C701B49F9DE1D09BCD97A7E4C40B8FAA593F549BC896B3213C857161505FD980F410B81B865BDF1964A1501B67EA46EF9FF1F3FD31CF712454862136ABB0B1CF698035A835FE130F7EDF751B5C4F9BBFB5716457177D2FC23864F6417D8D07F8E48CBEA4777C38FF8499AA67F4BE4F3ADC0BB0097A09AA061CBDCBB5CA8113D50E15F3FB539E5D8DAD82456000DBFFC8F66A2F6770AC3CA3A49
	25ED374A3BE69F69B3E6024C79G4229E4739A004AD32843ACD7D89D768F9A6A407C3CC9A4FEEEBFE57C1E5688985DF6CA679D859D6BA38ACFE94F96E42EBCE44A8851C744A93C93CE29FD84734963FE621305004F798A56F2G55G9DDF21CFBEF4970573893E6BD41C41ECCA3307FB07FE612BC0FB15775F0EF0F4F1BABAE6475AFE321ECE043C940085G599DB0D6GB482C89DE80F433DAF1CBDF538715C6661BF6B751B47286F63E175B536B3A5ACDDC407111DB78D90BBE3A1AF91E0964082005C53E0ABC0
	4BE93473A1776E3031CCA688E023B2FF549B48749C679C1BFDB70425731E8E24E37D6C5F57982C6F8F11C56DBE0B2F4DE33713B8A30337324FFE7FEE6DBEFB64E976DEBA811E5381587E08FBDF36405E5D241E46BEE965A071E36D57906BGB2C0B440D400D9G0B3EC6BF66F842468BFFE5BF12F8B9542377CB4E19C0BF987B33BD082ED817AEB8E3644F952D9F88067BC70A9771CC50B53D68235AB368232B07080FA6C3BA89E0B640A200B51D4966F20076CE7451994F1E9146DABD609ABD1EDE8377A8F6AE6F
	9D1BFF568651697DB35899C8476C5ECE6DA6F32B68CE9CAFFF9144EBE4B1BFABAC5D22CE23BA4A5D17A7846F53A8A7398E62520545FB45D1ED3C67D8E07C8268G70DAB05E3F284273DD119634A9C69A1BCD770425CB32985159DDE313579F16EE3645289ECF5AB0FE97F21B373A4726432E30F4EDD6A39DFEA4208E1295F5F8E10CBA3C9216EE1655086EBE4F585A4FCF0368746DE73E214D2BC534D968C21BBD5E3159FCB1AC1D2D4BC807E9D6EC4397388EE5FDE35321AEAC5DDCC39D9E34229F96F39D7E9044
	EBE4F57137A0BAFDDDF4580C683EFDF1ECB6BF9016CE3699597CF7935A9CE5C31B3F38B4B69D3A4252ADB434F9436531495B9616AEDBB422FBB608EEE4F57A07A0BAFD1D66696431B1782D73E48C2E043CB6G89A092A09EE086408291476087BD64CC51C867A96147611B043159F9F7901D5E4E1CEEA33A26743149BB99C4271717EFA8AF5DB43638D991162E5AD05E0F0368C6E65F23C1F4FA7B5A8C6539B246A66FFC901DDE1EE4A8EFF366587CD99616AE42D05EDF0368C6E6DFFA161EEE3DAE9DEBA86F51A0
	3A115977D4D83A29BAF96C1C6DA3741D6ECC481B8F40F0AB7D84178669DCBB627EAC93DCB9241BB9EE45G41F9A19DE947FEF9320560E2A11D48F18FD09C19BF123DD3065BE19949F9D542A7DC19C403B2CC4631914988F51ECF8BD986B8569FA6FAC31FC77B8F2F71F934473C4667511E742EE4F86021BD7D0D797F699D7E3C5A6F3C214F2BED7605563348E72CE7294FD84FCA5F70FA567AC269390E7A7B993A476A6BF74BCE17C8D9337509B8C876F0E184B95E6FE6438B616E576F7F88B8E69D38C076B5E759
	F1EC7AAFDF2990BCB66D37B9E50F8F193409965F316EEE3E00EE750ADD2877EF7C21FD74345F58C73F739B7B68C57F70BE7A23FFF89F7DC1A6E75E024E929E0511D5403D59B2FADE0E14E911BDAD5BB96FAD7D216D782C5F580E32FE720E4F6F6977F509FADD2B7A5770BCF5A4EF12C597D1C7B9CBC969E50B4FAE8659FA0852333CD0742D7D74FD09536674A9EF7B190D7F43ED5CAFFB0ED4F01EF78C0436711E81E39B278C043671010170B6A68E043671BF86425BB8E3A0D41DB3DBFF62FC9B6B335B67F1C10D
	32F651F979C341F0EFC5592E42F9724B3B71FC4E82BB1E4FF1541036166FC8B6D78334B9307F756FB36A9BA5876BCB47A94F98075A37CE015F53GE6B9827B5BF910DE2C43B1FBBF9A8CDDC79B870D6B28E0B0F49DED9B8CDFC71503216BE86FE078BAEA9C5447A1EB0F3FFAEF85ED4FFE3F68271BCC8D96590267D1FAB4B1DACF5AA173F1D42F110FF31C4A5E3872ACF72A3EEB045F9D4E60714C8B388800C91ABC26EF74D0E89FCF9CB276711DC321FDBCF9A83C0FFFB8945A47D307427B786121615B417EDE2D
	BFCB39BFF7987AB3DE71C91272CC5178E8BE7CCEB370E7EECF32B93FA7904FE47F3DF729263F59DE02FBE7767D6B0C5BE0EB174FA3C94ABBFF36F77622C5FFA61B6C95D7023C669E5CBBF39D4DD66C3275E0DBF56EA2EDB59652D381E676E0DBBDD5B55C5CEEDECF30FD4C16A7A56D78D04A71F73982ECACC57FF6985EA1DA2C704F69D56236B7D0DEB9249BF5388EC8FB81A2B4F8A65B6A567667BBF95D7E3BE0A4FB12C29F2FBC13F4F2D2A0BDDF07CB03F42E8475AB69E53F678930FB8762FF6F516A24365F8F
	C4A31DAA953E4D4A33D38A14AFC3BAD2070B05F4824074A01D3E67554A5E45E57F5CEAA4FB36C23FC08A2EF382028B624B9518D7G69EA009617DEF6CFDF00BF4AD076CF8CE55B947AC16599251393876929BA5C8CC82782AC8C123D5E27353B1263E7DF546255367F0649C827CCB7633BC6F99639836557C23ACD07F3C07A82C034DB2FD35425GFFD4A23E1D1E3B500C4BA58C1FAB840C5775E5CA9F18FBBEF41F7C7EF963BEF95D7950FDF27E7970FD72E767C377496567437749FB4E8F5FA74F50593ACB410F
	CB8F4417AA78CAD360DC864BAF88445717AB7849990178CA855F1199488779FF1A250D13B22E676BD90165114F534B09FF3CBE31DB7479C4DB2B739C692FD35DF4EDCB57401361F7029B4FC29478499D9CF60E89E25DC34A5D6947FEBD8F5215G1DG3207756FEC1C7851D9A23F5BE7F1017B6862426125F7617B11B6854A4F874886FC81C02397E5EE99A034C068F4753B2806CC3FC5F41D1DG652671323F9CA2F7C28E0896395FA712321AFBB62BD7925F606CD0DD979C3A30CCDB474ADA02352FBF6DA6E34C
	FCAFEB93E95E40B6135B97184E07B4BB2331F6AFE99B15FD6C0C8639C34770A5946F556059598DB71D0F127494483379F0AFE182FDF71A67CFB617789177BA45D5C33A0D63648A02F3C0BA0263D2A9AE9A5213B9EE738E02CBA4E90E3B221460D2A13D18634A4D382F11A3A3EEA24515C03A11636E276F6FBAA0ADF15C8A096086A19D4DF1E7E8394910CE6238DFD25CCCC827F2DC061B6096C2BA279FF1EF7620AEF99CE725348D106E60384F681DABAF24A3B82E1D6B974DF1BF6DC57DE2B96EB7F654AF016336
	B9D03FE99CF752057A4D62B83B95751B47F157D8D13F6C811C5BFCE045F5485A811C5B9CEC22776CA1AD81C48C605C46F79467B6318341E3DA8260266B70AC3E665039526C8196DF999C7F870A1F2F413338736C42B3CB0BA12F63AC6A5FD705B6A5F15CA57A0EEF9E2497F15CCB94A78CA61B578CA2EE0D95FDD944F1C394D78969B60E1B52C5E39652039CF7A89B65C6F1DC8F45A510B447BDC5E9D3A13D1063E68BD857E99C37AB9D6BBAFB88F14B1D285FDA0E73B831DE8BB86E329D752B66387AF2542F0563
	3A4A312EE50EFBECAB6A9749F13BC554AF0663E2C554AF0E63F6F07FCD653809D654AF09634EF07F25F05C9595285FFC0E7BF6856A17F30E47E7A16A1747F1AFD199C5102E6638C6AA2391521D67826B0D6C0D4A9C772995F5096438C7F89F924BF14F1BF1EFB4096356D9D117940EFB166266C2FAA14755D039E910DEFD9EF1BF6CC2DF95F05CF29A136510EE6138CA2E1F0D631E627A8DF25C7F2138D8C8CFD5F1DC3F999C1717C1F0A9101E47F163A9EEA12433AFA06EE65E2F2C65383FD2DC81249BB82E4809
	7A35F35CB65E96A40EBBC6F151101E42F18DB654EF9A41DDA05F5E790CB4E9E50CFF4BCF4E153A4533F97C20F20353A53A4987A98AAA4A0B724ACBAB8A15B3EDF1E735E75AAA17DEE9F8A7162EFBAEAA6B9E6519766E6D4A77F29E736377F25AA1AF7AA24E81DEAEA663ADDFAB92C52A2A76F9487D52E6B621E07D64B23A27CE68E7DC44FEF237CCF88A17201F81A83904F7B4863760FD1F786F5DA3CCF29B5F271A5BF65154F80969A9DDD24F604D6D19E3E2B23776234CA910BF779241FD592FBD63CCFCF9A403
	3D0FE17957856413F9A239232E66BF9C10CF747DD1G7DDF8272090F56A9744C36A7B723EDE9CFA688520FA3C2FE3B2860323276D21E5173EECB1F7F40398C968BC73254D8D8E699C9AC3038B2D5931FC4G4F584B98EBC7A8AE815253B9EE669E5E67F0DCE68D3D1FB68E4600F1B826ED5CCB4634DAC83783C8G91GF1GD381D2G96812C3EA259DC8E50F685FFA7C269481DD96F956CEEAC39779AFD853B8FCA6E1812FB1764AEA73917CA6EFEB2BA39A601C4743860711348B0DAA7CA86E58934074037A9FC
	4AC3702373DA05F62A72A4B657AA369A15E73AFF076A2E7F6E48F2DA0746F2745FE3504615919E3F6B906A9B9B84D6A8CF7CAE07D9092315A14A33980B5FC74FD543E20E451F77ADB57ED65653393CE5D0B717AF2C27F185FE1CF6854E652F2BB03ADF43F846ADD1F97E150EEF6CBE1CE8E37C166E40B3D873B93F6A9DC4AFA7AC02D81963344CE2484F3C924BCCAA8D3D9E7A911DA737C3D99B4064AB896E309957AF51D7065AEF3A5FEC3CFEF91C0EB58B00EEB117BF2BA750F70FE62BF6EE110CFDD7C3675B79
	D7C13FF8957299688D6D3B174DAA4F67FB83FD32084D17010F03737A509D5AA7E5F43EBE8D4A4E388AFD72DEAF7AE451D521FCB254EB6C131B287C6C886887A2D0FE0373ADEA374F6EF4238D976C823767EEF284DF217FBD252F855A66889C8BE7BB557CF6BA279F043C88G069BC7677433A1BDAF82ED38E4DDA304EE970CAE014E8BF2474358BE9E7B1C75D61C37B70EE736F70CD7FD60055F91630D666DBF236B00C96375E77D9F277878717A337EC71A702CFF926465DF0D7D6E35C7F1EE9649F133EB78BC0C
	63D66E45F9580C2BD17717F611D8C86569D7E81A5C6DD64E866E526EB511F2217CB396D04EAD87489849BB6851G5BF3082C627189B6E4DF83F3C700C6G47B598F393EC016D709FBDEA1BF95DE65C8E5F21F379C86091F38D465EFAC9250B3606EEC77752D8CA823A19DC07817A3D44EE0FDBE6E5581AE7B164E7C6E21CDA32070BD365BDCC36F1DB3B0D4DAF01D7EDA44A3C2BB0382D55395436E6F32BED49CA57D692508EC6223DB9DEB5FF92DBE7C1DEC2A43635A9F46E1B8A69795C06D365615BDA94DDE32D
	3996E27DDA14656FD3753A55274AFD0C56C38B146B60E5FF6AD77313282FA3A1AF66DA546B9D2AEB9224E7DE0BFACD2A882F5793F46CC9831A6CEF212CD4D993AB5640B8FA33DF4DBB53E59CC7E7E9BD17833F5AEF21FE2C6EA5C88FF2DCABDBA7C2BA61DB2873536670BAAFD9CA57D6C033006B3C712C2A57C21D4E7B87553CAFC2686C227A2D398E6A67BA646998D269B65BC247FE8DDD3F34GDD47F5E81B05559124E32EC35B668FEB9B13133D54B85673284D530157AC2E5FF567D47DF6E6845A7C5CF9B5AF
	B643586629F43D17867C322310677FDCD06916BAC25B3C090EC365C0D79B05B6FFC1E3D00274E0945AFCE0846D3BBBC47B3EC45B779460B5156B17F709684756973F7DCA3B564B3DDDB211B146E8FDB1B7CAF93F92252E1D58D913F7AE537D496BE1CEFEBD1EB771E510EFE11D3074841FB481E40B4F6395FD729043522F72A8FD7F137EF0E7350C470CE747C8770EBCDABAB6A6BFC057229D5733B1B91D6393A95E214133313ACE4675308CF9332F477B9D75827D36488D309E827082C482CC8118FE837A72E799
	A5C218F325ED9EAF3DB02AB9CE436CAB699F2DFDACAEFE3E84571DD39F7A0110F8F5C348EFE84C3E014543E265D97052ED6964496CFBA61D58D7F0E33239814081B08EA086A07EC634AFA3D3395FC64221CE16ADDD8E7AF592FE3849A91ED5516445810B798F2A092E5D1247A2ABE71FD84CEF2F46F5FC520D7C8EFAB599532CF423815FD91C2F666F9D205C82003CE8D8F7C63333F89D51F4BFECCF5EB03EEA0EE6B6B3999F55909FF9FCCE5012FDF3C5199F5760BAE4F2B46AD3DCCE6201FD4F0BDD83D26E8367
	11FABB54EC310AD219427721FED27614667B8D8C5F7956B2854F3F1340F519DE23724177C82BBB48773058A5E0365902C4ACBFE3A549A717F6A551A8BFEA8B49E797270D72EF5DCA76B270623236844BB73FCB562D4A655DG86AC7F0DF3643D4DC1494E72146BD16C2EF9F740B7A3D214BADA9C0DF7517FEF17D1FE4ECD58671D576C05B9AB48F953907B9F2515C5F9251505D8F683DDAF4A3EFE117129542CE32552039ABE78F913A61745AEB641E22A003CD2A4875F8A8A0B6925E5761632E063B6A7A9625F46
	D62B45F6E7774642C2E58E7315E6CDDBE89E091EEC6F2A0F2EA349DAA06FA65C971BF1DA3BF714377518615E51625367CC6DB731B83EF0135A37A73A72B202571FCDBDA35109517D37E63E5C56BBF23AC91A79721FDD7F1C0F49D7C41C6EC09F7F4C2572DFB4A2FB180F2BFB514789BC2E1EF72B3CB6BAC7EEE33AD725FB54BEF2BA39CF255B67EA7C27FD836DCCF18E63BF5127726F300EDC2F077CAA5DF3DDA32223EB508AAB2ED5675F046B528FE9AC27C1BA77E6445DDB0A6B57F20E7BFDA92EDFBBEF467569
	4F1B88CE06F4A4474D2438381B5937DE982E35E938734F04FEA4E3E5E408F2CC06B42C0C112EEBC36D5D313165C13A561F8EFA4C3A99472C3F54648D43AFCD511951D751BD005CDB124DEBEF413169F88169BF8EEA3E5742627F7EAA0C7F46DBF0FF7C65AA7D7E7833A66D7E761A5D7A7DF1527F287907F66B77477F98C0FFE137FEFF9C69D95C4D512C33160DA2DE0581156E4E1145AB25FBC233A628495E2027BBG8B75020DF5BE27C55AD814379D7EAFA9643A3E22D997BCBE8A193917D43A0CD174B1E517D5
	BAF994FD4C0D69AA5D4E7251597820C925FDE86B48E5BE2D991F370E229E97E72AF4ED237069B39DAADDFF4568EC7C7BE91576C26148E52EBDB336185B5B2952FDBC8A5F5CE1D5699EB40F4E46C73AD45AF7C6A173C51BCAF74FA8EC4C6CD669BE9B053CCE07CA7758A8ED7C3ED325FDF994B21F504CEB2E99C53BFA25D7255BB00AF65C2419E3EC9AE51FA3F9D45ADD361148E46B368F687C042D4FEC1748773B8D577230BABB843C0ED9FBE0A65BE631F31A77AF137E1A1F27E2CBFCA5EF7DE5522773EF335125
	927BFC0FF2CF0F76696C77A31A5F876551FE47FFB420FC037F9B15416CEF96C21F01EC950C4FC0FEC97141F7E94E88435FFB328B216FBD39856DF73A153F5551C76AE69C0C6F31GC9GA9G73EF4135FA1AC03E69483E5022DF276F37594999CC7257B7E4147FC2FAE8DBDFCE8F7FB7BB7E12CE4E1DDABD3092F4917E087F9B7D7B923247CB118C77FABA71114FE9F7482C280297689DE9C96C26E856969A2B096D5D96492FFE0F6EBB55F88EAAB3A659DC9D03E7963272C87C6B4F3797334D042A2A7DF217C334
	6DD336961439521F789E049C036797BE58C35F63C0FABAC0EA8C4E37049AB2081D947DB2DB371D95F15D36763E6F88EBBF2EB5613CC99FCF0BE214755A84F55D266EC79C2A5984CF2D4A2D64DF2CA2FF71097D475B1A6A6B1A71BB375DA13EF3CBF79118DDF776609C30ED821EE9AB36A1AEEA824E2F874C5AFD2769001FBDE178B9B50B3F9F7B088E8B20EC762D303687E8GE887705E0AB1F8771282A1745EA25BBC2867DF37D33EA99070DD108860B569566175E173632F697AA49E4AA65E0A75355D9CFC7E35
	116FCB4F3B151DFFCD03E76EC4655BA0F4DE1ED41AB70C3C02095AF9795BE5C4EEB5609AA7225CE732681E8EBD4D3A9D5F5D561218525C34584E6ED93C51243FE7C1741001D764C4DC3B9E554C1DFFDDB34C19105252223C32DDBB8A1532B9FB097D75A27996980EB3FD1AF79A4D3BC6420B554B3F855C5F08835D26CE9C3EDED88C9477056ED7AA7A4277ABB5FD443FA27487EDC3DE3C2757C76C72F4F77BC55EFFB57665F2DC133F4563F712510A69FEEFF5383D5599BADB14BB84E169747721995D4230F4FAE0
	FB525753FEE75EC47DDE752D943FF022FE2F7A63BD38D71D86F91D13F02F7A44G095F69101E8B10F99B2C9981CAG9A81BAG645B300DBE57B7DC9BE51D253E0D5E9374FDA5825137B19FCE3EAD54DD66B21B91DD22D2FE26819D5BBF381E6EB34C057C4FB96EE60ADB2C6018AD0F8CF3BF78B1DF78D87B0D4FF88CCB71850FE14F7A0C473097FC5AB1CCFB2EB9D07F533DDA7DD95BFCC373DEEF05F9A4ED134501570CF1307A76E4F3736D585FA71AF1EC0B389D473617E959E910CE81D8F0BB76D9F3CA037B0A
	8D1AF7021FB60DC49FA6F747A19CE7B26FC039D79EA1F22BA15D86A05D01FBC3CFD421EFF62723EFFEDB053E791300F70913D611BDD127DBF23A45FA76D740F8DC5DC2BE29257C0E557C5E3C671B1F0756FC23B2D8CCD90639A76C98889F57FD8346F1FDF6A0B82EAF8C98477515835A38E638EB943EBEFE291B612F27F70C5938FB4462365869FCCBB94F5F03672AA3F88C2C6F45BD43E80EBBE443F2D3B96EBE9B16CB3A8367FC16ADB982DF231CF45AE487432F9DDC26629BC5E28F2F3340B94F486BBAE20CF4
	8F0F1ACE793BFECB69F8F007FEBC68227805F7684703853C9FC8033C4ED81C63FD7B30DE7E74D8352F1D9D9B5C6FB2B92F51B63BA0D6AF7FCD0ADF9C2B179FF98465E75E19ECF65C097317867A6E1E3DA32F689D6E9DB9ABEFBF2F167F05ED38724ADA1004A17E9DAC4D6FD74D5FFC7BFFFB69B7A90345FD62E13A778E7E1CFBA736051DC730ADE45E05751CF6C435BD6B287A7B06A35F3C9F3E7F0D4AE0E350EF8F874F67DFBE0C71D182FEE8847082C4G4471FD7623C77206619DFB970BFF96434B1BB10693G
	BF7FAE6CE736F712EFCB694E439F74B9ED7BAC4AEBD0B6761DE846B1B76FEE9C7BA2A84FF6C8FB81A26F46B137179E76EE85DA8777636A663175B19B47C877552869D89F30185A94F7373EEFC827FDC07C5D7A3E61DB5C2F091037B60E7F0D41E6B5CE17E862B73A791B0F59FB3FD1996CEFB1EF5975BA74C8712F88D9FE1F70CE705C296E06E77FAB7ECC43EA13E0EA925EF250012AC948BACBC632C1AFF86CDEE033435FA750F78BAC8541AF8BEF3137526CB7BBF3G92D6F0891094E57F5C01322A0C173E13E1
	92B201BD1B82B48919E49C87A9BEA6AD8326GC416E05282653CC4B935A08B99BEE9D09616851C8A20EAAD89A64C6872F549C20E7604C24822BE378D0AEA8FBB04ACEA176CA173A4F1C006469BF026A1E4E10BDB82195A839246C5516D746FB22D8577EE6A72380A1DD6D7F17F002B58E2150BC5D8AE9513390F0D3F4EBD75E8E72263D76FEEB489D9CD425B5DCED1323552973A4DC2AECDB5087EAE1F53CB562732708E7DB47AB672E974ED4A27511B0515349C3E88A66C09A26B1B05D59AF6871C1268D63316EB
	323EB85ECC1CC1B93BC5F99B24F7538ACE17058F0B0BBB68C7D3BB585B658E75F483E893FC6401305F6055F9A2DCEA9D133581E41D2887D9F97592B9EC03A255177D9A11AA12F078E40CA2B78EA3D2F907AE8B2B8C5E2C939E1F0DD628B6B61685EC74BF766D0A17E7BEFF421FA13C55A4FCC04E85370ABE76A7CEEC6433AB4A5F98BEA0183D9ED8D813130050AE7D7411651707205D882B3B0F133F096717C59B7F5613DF965EE5955BAFBB25ED0D963F039E2A0228496451406A3AAE0F6AC7A6C469205FAA2A9F
	21AA66D42BFE36E27306C37392B3845381E1296431588ED83AE07D5FA418E507CF74BBBC12ED503B3716B24ABECB06B6F2F4AA9358FD444DA5469537419204AB59BBF8E75432794B8EC0A39A74895BE8C9F2DC3318173055BBAC64EF8B093EA6197CB5E70FAF1F67DD31DE5E726B036FF7180474C02320236B36381C52907CE8GDFFAD8F7D08949333463649DA07DCB838748013367DE7955BD3F2BDE38G189D903268B76EC125DC355451FE17D574DD9DBFE15D5BB1F32FA39AFB093948598C8BAB371F7C6D90
	E01E27339933386A45377C2AE4423D2F1F222A2B243270B12BB3A05DE697BD2EEDF55D5D3010658C20F5827BF51CBDA9D32CAB734E60CD6F9EFA7ACDABC4D4031061AAA9217FEE277F1612FF37D34CF60A59DE8A5536D09876BFFD7EA05ACC4310A67612989AA43F2A87C759B44A02C210E0F7844792C1D7719AA529BD641FBA724FBECA54C07FBDB8EAFB88D5134E0E4F7FC56CB875AFE2C7573F089D523F089D7DA16CC80F02FF5E9BF9CA96527388703F3FF1D9FBFEFD71782E10F7154B6359FA2CB1DEFFFEFD
	9DBD1F9B817838F85C3FF66DA1FF2BBA54BB6FD617C512E40B54DB673611775F7B06E4D1FD673A31067077E399A513659556903DFBB4B47F8FD0CB878859A4B3AFF7A9GG3805GGD0CB818294G94G88G88GF3FBB0B659A4B3AFF7A9GG3805GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG31A9GGGG
**end of data**/
}
}
