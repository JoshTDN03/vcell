package cbit.vcell.math;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.io.Serializable;
import java.util.StringTokenizer;

import org.vcell.util.Matchable;

import cbit.vcell.parser.Expression;
import cbit.vcell.parser.ExpressionBindingException;
import cbit.vcell.parser.ExpressionException;
import cbit.vcell.parser.NameScope;
import cbit.vcell.parser.SymbolTable;
import cbit.vcell.parser.SymbolTableEntry;
import cbit.vcell.units.VCUnitDefinition;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public abstract class Variable implements SymbolTableEntry, Serializable, Matchable {
	private String name = null;
	private transient int symbolTableIndex = -1;
	public static final String COMBINED_IDENTIFIER_SEPARATOR = "::";
/**
 * This method was created by a SmartGuide.
 * @param name java.lang.String
 */
protected Variable (String name) {
	this.name = name;
}
/**
 * This method was created in VisualAge.
 * @param symbolTable cbit.vcell.parser.SymbolTable
 */
public void bind(SymbolTable symbolTable) throws ExpressionBindingException {
}
/**
 * This method was created in VisualAge.
 * @return boolean
 * @param object java.lang.Object
 */
protected boolean compareEqual0(Matchable object) {
	Variable var = null;
	if (object == null){
		return false;
	}
	if (!(object instanceof Variable)){
		return false;
	}else{
		var = (Variable)object;
	}

	//
	// compare names
	//
	if (!getName().equals(var.getName())){
		return false;
	}

	return true;
}
/**
 * This method was created in VisualAge.
 * @return double
 */
public double getConstantValue() throws ExpressionException {
	throw new ExpressionException("constant value not supported");
}
/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.parser.Expression
 * @exception java.lang.Exception The exception description.
 */
public Expression getExpression() {
	return null;
}
/**
 * This method was created in VisualAge.
 * @return int
 */
public int getIndex() {
	return symbolTableIndex;
}
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String getName() {
	return name;
}
/**
 * Insert the method's description here.
 * Creation date: (7/31/2003 10:31:25 AM)
 * @return cbit.vcell.parser.NameScope
 */
public NameScope getNameScope() {
	return null;
}
/**
 * Insert the method's description here.
 * Creation date: (3/31/2004 3:02:23 PM)
 * @return cbit.vcell.units.VCUnitDefinition
 */
public VCUnitDefinition getUnitDefinition() {
	return null;
}
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public abstract String getVCML() throws MathException;

/**
 * This method was created by a SmartGuide.
 * @return boolean
 * @exception java.lang.Exception The exception description.
 */
public boolean isConstant() {
	return false;
}	
/**
 * This method was created in VisualAge.
 * @param symbolTableIndex int
 */
public void setIndex(int symbolTableIndex) {
	this.symbolTableIndex = symbolTableIndex;
}
/**
 * This method was created in VisualAge.
 * @return java.lang.String
 */
public String toString() {
	return getClass().getName().substring(getClass().getName().lastIndexOf('.')+1)+" <"+getName()+">";
}

public static String getNameFromCombinedIdentifier(String combinedIdentifier){
	String name = combinedIdentifier;
	if (name.contains(COMBINED_IDENTIFIER_SEPARATOR)){
		StringTokenizer tokenizer = new StringTokenizer(name,COMBINED_IDENTIFIER_SEPARATOR,false);
		String domainString = tokenizer.nextToken(); // throw away
		name = tokenizer.nextToken();
	}
	return name;
}

}
