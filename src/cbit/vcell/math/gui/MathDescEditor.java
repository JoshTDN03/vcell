package cbit.vcell.math.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import javax.swing.*;

import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

import cbit.gui.MultiPurposeTextPanel;
import cbit.vcell.math.*;

import javax.swing.JPanel;
import javax.swing.text.BadLocationException;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class MathDescEditor extends JPanel implements ActionListener, KeyListener {
	private JButton ivjCancelButton = null;
	private MathDescription ivjMathDescription = null;
	private JButton ivjApplyButton = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private MultiPurposeTextPanel vcmlPane = null;

/**
 * Constructor
 */
public MathDescEditor() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	if (e.getSource() == getApplyButton()) 
		applyChanges(e);
	if (e.getSource() == getCancelButton()) 
		cancelChanges(e);

}


/**
 * Comment
 */
private void apply_ExceptionOccurred(java.lang.Throwable e) throws javax.swing.text.BadLocationException {
	JOptionPane.showMessageDialog(this, e.getMessage(), "Error While Saving", JOptionPane.ERROR_MESSAGE);
	if (e instanceof MathFormatException){
		int lineNumber = ((MathFormatException)e).getLineNumber();
		if (lineNumber>=0){
			int lineStartOffset = getVCMLPane().getLineStartOffset(Math.max(0,lineNumber-1));
			//int lineEndOffset = getVCMLPane().getLineEndOffset(lineNumber);
			getVCMLPane().setCaretPosition(lineStartOffset);
			//getVCMLPane().select(lineStartOffset,lineEndOffset);
		}
	}
}

/**
 * connEtoM1:  (ApplyButton.action.actionPerformed(java.awt.event.ActionEvent) --> tempMathDescription.this)
 * @param arg1 java.awt.event.ActionEvent
 */
private void applyChanges(java.awt.event.ActionEvent arg1) {
	try {
		if ((getMathDescription() != null)) {
			setMathDescription(MathDescription.fromEditor(getMathDescription(), getVCMLPane().getText()));
		}
		getCancelButton().setEnabled(false);
		getApplyButton().setEnabled(false);
	} catch (java.lang.Throwable ivjExc) {
		try {
			apply_ExceptionOccurred(ivjExc);
		} catch (BadLocationException e) {			
			handleException(e);
		}
	}
}

/**
 * connEtoM24:  (CancelButton.action.actionPerformed(java.awt.event.ActionEvent) --> lineNumberedTextPanel1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
private void cancelChanges(java.awt.event.ActionEvent arg1) {
	try {
		if ((getMathDescription() != null)) {
			getVCMLPane().setText(getMathDescription().getVCML_database());
		}
		getVCMLPane().setCaretPosition(0);
		getApplyButton().setEnabled(false);
		getCancelButton().setEnabled(false);

	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}

/**
 * Return the ApplyButton property value.
 * @return javax.swing.JButton
 */
private javax.swing.JButton getApplyButton() {
	if (ivjApplyButton == null) {
		try {
			ivjApplyButton = new javax.swing.JButton();
			ivjApplyButton.setName("ApplyButton");
			ivjApplyButton.setText("Apply Changes");
			ivjApplyButton.setEnabled(false);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjApplyButton;
}

/**
 * Return the CancelButton property value.
 * @return javax.swing.JButton
 */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			ivjCancelButton.setEnabled(false);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}

/**
 * Return the lineNumberedTextPanel1 property value.
 * @return cbit.gui.MultiPurposeTextPanel
 */
private MultiPurposeTextPanel getVCMLPane() {
	if (vcmlPane == null) {
		try {
			vcmlPane = new cbit.gui.MultiPurposeTextPanel();
			vcmlPane.setAutoCompletionWords(getAutoCompletionWords());
			vcmlPane.setKeywords(getkeywords());
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return vcmlPane;
}


/**
 * Return the MathDescription property value.
 * @return cbit.vcell.math.MathDescription
 */
public cbit.vcell.math.MathDescription getMathDescription() {
	return ivjMathDescription;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
private void initConnections() throws java.lang.Exception {
	getApplyButton().addActionListener(this);
	getCancelButton().addActionListener(this);
	getVCMLPane().getTextPane().addKeyListener(this);
}

/**
 * Initialize class
 */
private void initialize() {
	try {
		setName("MathDescEditor");
		setLayout(new java.awt.GridBagLayout());
		setSize(981, 242);

		java.awt.GridBagConstraints constraintsApplyButton = new java.awt.GridBagConstraints();
		constraintsApplyButton.gridx = 0; constraintsApplyButton.gridy = 1;
		constraintsApplyButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getApplyButton(), constraintsApplyButton);

		java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
		constraintsCancelButton.gridx = 1; constraintsCancelButton.gridy = 1;
		constraintsCancelButton.anchor = java.awt.GridBagConstraints.WEST;
		constraintsCancelButton.insets = new java.awt.Insets(0, 9, 9, 0);
		constraintsCancelButton.fill = java.awt.GridBagConstraints.BOTH;
		constraintsCancelButton.gridwidth = 1;		
		add(getCancelButton(), constraintsCancelButton);
		
		java.awt.GridBagConstraints constraintslineNumberedTextArea1 = new java.awt.GridBagConstraints();
		constraintslineNumberedTextArea1.gridx = 0; constraintslineNumberedTextArea1.gridy = 0;
		constraintslineNumberedTextArea1.gridwidth = 6;
		constraintslineNumberedTextArea1.fill = java.awt.GridBagConstraints.BOTH;
		constraintslineNumberedTextArea1.weightx = 1.0;
		constraintslineNumberedTextArea1.weighty = 1.0;
		constraintslineNumberedTextArea1.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getVCMLPane(), constraintslineNumberedTextArea1);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}

/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyPressed(java.awt.event.KeyEvent e) {
	if (getApplyButton().isEnabled()) {
		return;
	}
	if (e.getSource() == getVCMLPane().getTextPane()) {
		int keyCode = e.getKeyCode();
		if (!e.isActionKey() && keyCode != KeyEvent.VK_CONTROL && keyCode != KeyEvent.VK_SHIFT) {
			getApplyButton().setEnabled(true);	
			getCancelButton().setEnabled(true);
		}
	}
}

/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyReleased(java.awt.event.KeyEvent e) {
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
public void keyTyped(java.awt.event.KeyEvent e) {
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MathDescEditor aMathDescEditor = new MathDescEditor();
		frame.setContentPane(aMathDescEditor);
		
		JMenuBar mb = new JMenuBar();
		JMenu menu = aMathDescEditor.getEditMenu();
		mb.add(menu);
		frame.setJMenuBar(mb);
		
		frame.setSize(aMathDescEditor.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aMathDescEditor.getVCMLPane().setText("Rate\n");
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}

/**
 * Set the MathDescription to a new value.
 * @param newValue cbit.vcell.math.MathDescription
 */
public void setMathDescription(cbit.vcell.math.MathDescription newValue) {
	if (ivjMathDescription != newValue) {
		try {
			MathDescription oldValue = getMathDescription();
			ivjMathDescription = newValue;			
			getVCMLPane().setText(getMathDescription().getVCML_database());
			getVCMLPane().setCaretPosition(0);
			firePropertyChange("mathDescription", oldValue, newValue);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
}

public boolean hasUnappliedChanges() {
	if (getApplyButton().isEnabled()) {
		return true;
	}	
	return false;
}

public List<String> getAutoCompletionWords() {
	 // must be ordered
	 List<String> autoCompletionWords = new ArrayList<String>();
	 autoCompletionWords.add(VCML.BoundaryXm);
	 autoCompletionWords.add(VCML.CompartmentSubDomain);
	 autoCompletionWords.add(VCML.Constant);
	 autoCompletionWords.add(VCML.Diffusion);
	 autoCompletionWords.add(VCML.Action);
	 autoCompletionWords.add(VCML.FastInvariant);
	 autoCompletionWords.add(VCML.FastRate);	 
	 autoCompletionWords.add(getTemplate_FastSystem());
	 autoCompletionWords.add(BoundaryConditionType.NEUMANN_STRING);
	 autoCompletionWords.add(VCML.Function);
	 autoCompletionWords.add(VCML.InFlux);
	 autoCompletionWords.add(VCML.Initial);
	 autoCompletionWords.add(getTemplate_JumpCondition());
	 autoCompletionWords.add(getTemplate_JumpProcess());
	 autoCompletionWords.add(VCML.MathDescription);
	 autoCompletionWords.add(VCML.MembraneRate);
	 autoCompletionWords.add(VCML.MembraneRegionVariable);
	 autoCompletionWords.add(VCML.MembraneSubDomain);
	 autoCompletionWords.add(VCML.MembraneVariable); 
	 autoCompletionWords.add(getTemplate_OdeEquation());
	 autoCompletionWords.add(VCML.OutFlux);
	 autoCompletionWords.add(getTemplate_PdeEquation());
	 autoCompletionWords.add(BoundaryConditionType.PERIODIC_STRING);
	 autoCompletionWords.add(VCML.Priority);
	 autoCompletionWords.add(VCML.ProbabilityRate);
	 autoCompletionWords.add(VCML.Rate);
	 autoCompletionWords.add(VCML.StochVolVariable);
	 autoCompletionWords.add(VCML.UniformRate);
	 autoCompletionWords.add(VCML.Value);
	 autoCompletionWords.add(VCML.VarIniCondition);
	 autoCompletionWords.add(VCML.VelocityX);
	 autoCompletionWords.add(VCML.VolumeRate);
	 autoCompletionWords.add(VCML.VolumeRegionVariable);
	 autoCompletionWords.add(VCML.VolumeVariable);
	 autoCompletionWords.add(VCML.Steady);
	 
	 String functions[] = {
	 		"abs()",
	 		"acos()",
	 		"acosh()",
	 		"acot()",
	 		"acoth()",
	 		"acsc()",
	 		"acsch()",
	 		"asec()",
	 		"asech()",
	 		"asin()",
	 		"asinh()",
	 		"atan()",
	 		"atan2(,)",
	 		"atanh()",
	 		"ceil()",
	 		"cos()",
	 		"cosh()",
	 		"cot()",
	 		"coth()",
	 		"csc()",
	 		"csch()",
	 		"exp()",
	 		"factorial()",
	 		"field(,,,,)",
	 		"floor()",
	 		"grad(,)",
	 		"log()",
	 		"log10()",
	 		"logbase(,)",
	 		"max(,)",
	 		"min(,)",
	 		"pow(,)",
	 		"sec()",
	 		"sech()",
	 		"sin()",
	 		"sinh()",
	 		"sqrt()",
	 		"tan()",
	 		"tanh()",
	 };
	 for (String f : functions) {
	 	autoCompletionWords.add(f);
	 }
	 
	 return autoCompletionWords;
}

public String getTemplate_OdeEquation() {	
	return VCML.OdeEquation + " varName " + VCML.BeginBlock + "\n" 
		+ "\t\t" + VCML.Rate + " 0.0;\n" 
		+ "\t\t" + VCML.Initial + "0.0;\n"
		+ "\t}\n";
}

public String getTemplate_PdeEquation() {	
	return VCML.PdeEquation + " varName " + VCML.BeginBlock + "\n"
		+ "\t\t" + VCML.BoundaryXm + " 0.0;\n"
		+ "\t\t" + VCML.BoundaryXp + " 0.0;\n"
		+ "\t\t" + VCML.Rate + " 0.0;\n" 
		+ "\t\t" + VCML.Diffusion + " 0.0;\n" 
		+ "\t\t" + VCML.Initial + " 0.0;\n"
		+ "\t}\n";
}
public String getTemplate_JumpCondition() {	
	return VCML.JumpCondition + " varName " + VCML.BeginBlock + "\n" 
		+ "\t\t" + VCML.InFlux + " 0.0;\n" 
		+ "\t\t" + VCML.OutFlux + " 0.0;\n" 
		+ "\t}\n";
}

public String getTemplate_FastSystem() {	
	return VCML.FastSystem + " " + VCML.BeginBlock + "\n" 
		+ "\t\t" + VCML.FastInvariant + " 0.0;\n" 
		+ "\t\t" + VCML.FastRate + " 0.0;\n" 
		+ "\t}\n";
}

public String getTemplate_JumpProcess() {	
	return VCML.JumpProcess + " varName " + VCML.BeginBlock + "\n" 
		+ "\t\t" + VCML.ProbabilityRate + " 0.0;\n" 
		+ "\t\t Effect 0.0;\n" 
		+ "\t}\n";
}

public JMenu getEditMenu() {
	return getVCMLPane().createEditMenu();
}


public static List<String> getkeywords() {
	 // must be ordered
	 List<String> keywords = new ArrayList<String>();
	 keywords.add(VCML.BoundaryXm);
	 keywords.add(VCML.BoundaryXp);
	 keywords.add(VCML.BoundaryYm);
	 keywords.add(VCML.BoundaryYp);
	 keywords.add(VCML.BoundaryZm);
	 keywords.add(VCML.BoundaryZp);
	 keywords.add(VCML.CompartmentSubDomain);
	 keywords.add(VCML.Constant);
	 keywords.add(VCML.Diffusion);
	 keywords.add(VCML.Action);
	 keywords.add(VCML.Exact);
	 keywords.add(VCML.FastInvariant);
	 keywords.add(VCML.FastRate);
	 keywords.add(VCML.FastSystem);
	 keywords.add(BoundaryConditionType.NEUMANN_STRING);
	 keywords.add(VCML.Function);
	 keywords.add(VCML.InFlux);
	 keywords.add(VCML.Initial);
	 keywords.add(VCML.JumpCondition);
	 keywords.add(VCML.JumpProcess);
	 keywords.add(VCML.MathDescription);
	 keywords.add(VCML.MembraneRate);
	 keywords.add(VCML.MembraneRegionEquation);
	 keywords.add(VCML.MembraneRegionVariable);
	 keywords.add(VCML.MembraneSubDomain);
	 keywords.add(VCML.MembraneVariable); 
	 keywords.add(VCML.OdeEquation);
	 keywords.add(VCML.OutFlux);
	 keywords.add(VCML.PdeEquation);
	 keywords.add(BoundaryConditionType.PERIODIC_STRING);
	 keywords.add(VCML.Priority);
	 keywords.add(VCML.ProbabilityRate);
	 keywords.add(VCML.Rate);
	 keywords.add(VCML.StochVolVariable);
	 keywords.add(VCML.UniformRate);
	 keywords.add(VCML.Value);
	 keywords.add(VCML.VarIniCondition);
	 keywords.add(VCML.VelocityX);
	 keywords.add(VCML.VelocityY);
	 keywords.add(VCML.VelocityZ);
	 keywords.add(VCML.VolumeRate);
	 keywords.add(VCML.VolumeRegionEquation);
	 keywords.add(VCML.VolumeRegionVariable);
	 keywords.add(VCML.VolumeVariable);
	 keywords.add(VCML.Steady);

	 return keywords;
}
}