package cbit.vcell.math.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import javax.swing.*;
import java.util.*;
import cbit.vcell.math.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class MathDescEditor extends JPanel implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.beans.PropertyChangeListener, javax.swing.event.DocumentListener {
	private JButton ivjCancelButton = null;
	private MathDescription ivjMathDescription = null;
	private JButton ivjApplyButton = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private JButton ivjCreateConstrSolnButton = null;
	private javax.swing.text.Document ivjdocument1 = null;
	private cbit.vcell.numericstest.gui.SolutionTemplatePanel ivjsolutionTemplatePanel1 = null;
	private boolean fieldConstructedSolnButtonVisibility = false;
	private JButton ivjSensitivitySolnButton = null;
	private boolean fieldApproxSensSolnButtonVisibility = false;
	private JButton ivjExpandFunctionButton = null;
	private boolean fieldMakeCanonicalVisibility = false;
	private JButton ivjFlattenButton = null;
	private boolean fieldFlattenVisibility = false;
	private boolean ivjConnPtoP2Aligning = false;
	private boolean ivjConnPtoP1Aligning = false;
	private cbit.gui.LineNumberedTextPanel ivjlineNumberedTextArea1 = null;
	private JTextArea ivjtextArea1 = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public MathDescEditor() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getApplyButton()) 
		connEtoM1(e);
	if (e.getSource() == getCreateConstrSolnButton()) 
		connEtoC2(e);
	if (e.getSource() == getSensitivitySolnButton()) 
		connEtoC3(e);
	if (e.getSource() == getCancelButton()) 
		connEtoM24(e);
	if (e.getSource() == getExpandFunctionButton()) 
		connEtoM2(e);
	if (e.getSource() == getFlattenButton()) 
		connEtoM13(e);
	// user code begin {2}
	// user code end
}

/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}


/**
 * Comment
 */
private void apply_ExceptionOccurred(java.lang.Throwable e) throws javax.swing.text.BadLocationException {
	JOptionPane.showMessageDialog(this, e.getMessage(), "Error While Saving", JOptionPane.ERROR_MESSAGE);
	if (e instanceof MathFormatException){
		int lineNumber = ((MathFormatException)e).getLineNumber();
		if (lineNumber>=0){
			int lineStartOffset = getlineNumberedTextArea1().getLineStartOffset(Math.max(0,lineNumber-1));
			int lineEndOffset = getlineNumberedTextArea1().getLineEndOffset(lineNumber);
			getlineNumberedTextArea1().setCaretPosition(lineStartOffset);
			getlineNumberedTextArea1().select(lineStartOffset,lineEndOffset);
		}
	}
}


/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void changedUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  ( (SaveButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,read(Lcbit.vcell.math.CommentStringTokenizer;)V).exceptionOccurred --> MathDescEditor.save_ExceptionOccurred(Ljava.lang.Throwable;)V)
 * @param exception java.lang.Throwable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.lang.Throwable exception) {
	try {
		// user code begin {1}
		// user code end
		this.apply_ExceptionOccurred(exception);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC2:  (CreateConstrSolnButton.action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor.createConstructedSolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;)
 * @return java.lang.String
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.lang.String connEtoC2(java.awt.event.ActionEvent arg1) {
	String connEtoC2Result = null;
	try {
		// user code begin {1}
		// user code end
		connEtoC2Result = this.createConstructedSolution(arg1);
		connEtoM17(connEtoC2Result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
	return connEtoC2Result;
}

/**
 * connEtoC3:  (SensitivitySolnButton.action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor.createSensitivitySolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;)
 * @return java.lang.String
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.lang.String connEtoC3(java.awt.event.ActionEvent arg1) {
	String connEtoC3Result = null;
	try {
		// user code begin {1}
		// user code end
		connEtoC3Result = this.createSensitivitySolution(arg1);
		connEtoM22(connEtoC3Result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
	return connEtoC3Result;
}

/**
 * connEtoM1:  (ApplyButton.action.actionPerformed(java.awt.event.ActionEvent) --> tempMathDescription.this)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			setMathDescription(cbit.vcell.math.MathDescription.fromEditor(getMathDescription(), getlineNumberedTextArea1().getText()));
		}
		connEtoM5();
		connEtoM4();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		connEtoC1(ivjExc);
	}
}

/**
 * connEtoM10:  (MathDescEditor.testFrameworkEnabled --> CreateConstrSolnButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setVisible(this.getConstructedSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM11:  (MathDescEditor.initialize() --> CreateConstrSolnButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM11() {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setVisible(this.getConstructedSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM12:  (MathDescription.this --> CreateConstrSolnButton.enabled)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setEnabled((getMathDescription() != null));
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM13:  (FlattenButton.action.actionPerformed(java.awt.event.ActionEvent) --> textArea1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(this.flattenMath());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM14:  (MathDescription.this --> SensitivitySolnButton.enabled)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM14(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setEnabled((getMathDescription() != null));
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM15:  (MathDescEditor.approxSensSolnButtonVisibility --> SensitivitySolnButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM15(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setVisible(this.getApproxSensSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM16:  (MathDescEditor.initialize() --> SensitivitySolnButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setVisible(this.getApproxSensSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM17:  ( (CreateConstrSolnButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor,createConstructedSolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;).normalResult --> textArea1.text)
 * @param result java.lang.String
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM17(java.lang.String result) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM18:  (MathDescEditor.makeCanonicalVisibility --> ExpandFunctionButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getExpandFunctionButton().setVisible(this.getMakeCanonicalVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM19:  (MathDescEditor.initialize() --> ExpandFunctionButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM19() {
	try {
		// user code begin {1}
		// user code end
		getExpandFunctionButton().setVisible(this.getMakeCanonicalVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM2:  (ExpandFunctionButton.action.actionPerformed(java.awt.event.ActionEvent) --> textArea1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(this.makeCanonical());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM20:  (MathDescEditor.initialize() --> FlattenButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM20() {
	try {
		// user code begin {1}
		// user code end
		getFlattenButton().setEnabled(this.getFlattenVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM21:  (MathDescEditor.flattenVisibility --> FlattenButton.enabled)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM21(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getFlattenButton().setEnabled(this.getFlattenVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM22:  ( (SensitivitySolnButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor,createSensitivitySolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;).normalResult --> textArea1.text)
 * @param result java.lang.String
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM22(java.lang.String result) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM24:  (CancelButton.action.actionPerformed(java.awt.event.ActionEvent) --> lineNumberedTextPanel1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			getlineNumberedTextArea1().setText(getMathDescription().getVCML_database());
		}
		connEtoM25();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM25:  ( (CancelButton,action.actionPerformed(java.awt.event.ActionEvent) --> lineNumberedTextPanel1,text).normalResult --> lineNumberedTextPanel1.caretPosition)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM25() {
	try {
		// user code begin {1}
		// user code end
		getlineNumberedTextArea1().setCaretPosition(0);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM3:  (MathDescription.this --> lineNumberedTextPanel1.text)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			getlineNumberedTextArea1().setText(getMathDescription().getVCML_database());
		}
		connEtoM7();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM4:  ( (ApplyButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,this).normalResult --> ApplyButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM4() {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM5:  ( (ApplyButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,this).normalResult --> CancelButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5() {
	try {
		// user code begin {1}
		// user code end
		getCancelButton().setEnabled(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM6:  (textArea1.key.keyPressed(java.awt.event.KeyEvent) --> ApplyButton.enabled)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM6(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM7:  ( (CancelButton,action.actionPerformed(java.awt.event.ActionEvent) --> TextArea1,text).normalResult --> TextArea1.caretPosition)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7() {
	try {
		// user code begin {1}
		// user code end
		getlineNumberedTextArea1().setCaretPosition(0);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM8:  (textArea1.key.keyPressed(java.awt.event.KeyEvent) --> CancelButton.enabled)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getCancelButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM9:  (document1.document.changedUpdate(javax.swing.event.DocumentEvent) --> ApplyButton.enabled)
 * @param evt javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(javax.swing.event.DocumentEvent evt) {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP1SetTarget:  (lineNumberedTextArea1.textArea <--> textArea1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			settextArea1(getlineNumberedTextArea1().getTextArea());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP2SetSource:  (lineNumberedTextPanel1.document <--> document1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP2Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP2Aligning = true;
			if ((getdocument1() != null)) {
				getlineNumberedTextArea1().setDocument(getdocument1());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP2SetTarget:  (lineNumberedTextPanel1.document <--> document1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP2Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP2Aligning = true;
			setdocument1(getlineNumberedTextArea1().getDocument());
			// user code begin {2}
			// user code end
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * Comment
 */
private String createConstructedSolution(java.awt.event.ActionEvent actionEvent) {
	String text = null;
	MathDescription newMath = null;
	try {
		cbit.vcell.numericstest.ConstructedSolutionTemplate constructedSolutionTemplate = new cbit.vcell.numericstest.ConstructedSolutionTemplate(getMathDescription());
		getsolutionTemplatePanel1().setConstructedSolutionTemplate(constructedSolutionTemplate);
		int option = javax.swing.JOptionPane.showConfirmDialog(this, getsolutionTemplatePanel1(), "Edit Solution Templates:", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.PLAIN_MESSAGE);
		if (option != JOptionPane.OK_OPTION) {
			return getMathDescription().getVCML_database();
		}
		newMath = cbit.vcell.solver.test.MathTestingUtilities.constructExactMath(getMathDescription(),new Random(),constructedSolutionTemplate);
		text = newMath.getVCML_database();
	} catch (Throwable e) {
		e.printStackTrace(System.out);
		return "error : "+e.getMessage();
	}
	return text;
}


/**
 * Comment
 */
private String createSensitivitySolution(java.awt.event.ActionEvent actionEvent) {
	//
	// Get the list of constants in the mathDescription
	//
	Vector constsVector = new Vector();
	Enumeration enumVars = getMathDescription().getVariables();
	while (enumVars.hasMoreElements()) {
		Variable var = (Variable)enumVars.nextElement();
		if (var instanceof Constant){
			constsVector.addElement(var);
		}
	}
	Constant constantsList[] = (Constant[])cbit.util.BeanUtils.getArray(constsVector, Constant.class);

	//
	// Get the names of the constants in the mathDesc to display in the list box
	//	
	String constantNamesList[] = new String[constantsList.length];
	for (int i = 0; i < constantsList.length; i++){
		constantNamesList[i] = constantsList[i].getName();
	}

	String mathDescText = null;
	try {
		mathDescText = getMathDescription().getVCML_database();
	} catch (MathException e) {
		e.printStackTrace(System.out);
	}
	// To select sensitivity parameter, popup list box containing the names of constants 
	javax.swing.JList list = new javax.swing.JList(constantNamesList);
	list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
	list.setSelectedIndex(0);
	javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(list);
	int selection = javax.swing.JOptionPane.showConfirmDialog(this,scrollPane,"Select Sensitivity Parameter :",javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.PLAIN_MESSAGE);
	if (selection != javax.swing.JOptionPane.OK_OPTION){
		return mathDescText;
	}
	if (list.getSelectedIndex() < 0) {
		return mathDescText;
	}

	//
	// From the selected name in the list, get the index of corresponding constant from the Constants list. That is the sensitivity parameter.
	//
	String newSensParamName = (String)list.getSelectedValue().toString();
	int newSensParamIndex = -1;
	for (int i=0;i<constantNamesList.length;i++){
		if (constantNamesList[i].equals(newSensParamName)){
			newSensParamIndex = i;
		}
	}
	if (newSensParamIndex==-1){
		throw new RuntimeException("No such Constant/Parameter Exists "+newSensParamName);
	}
	Constant sensParameter = constantsList[newSensParamIndex];

	//
	// Using the selected sensitivity parameter and the current MathDesc, create the math description for sensitivity analysis of that parameter.
	// Return the mathDesc as text to be displayed in the text area of MathDescEditor.
	//

	try {
		MathDescription sensMathDesc = cbit.vcell.solver.test.MathTestingUtilities.constructOdesForSensitivity(getMathDescription(),sensParameter);
		mathDescText = sensMathDesc.getVCML_database();
	} catch (Exception e) {
		e.printStackTrace(System.out);
		throw new RuntimeException(e.getMessage());
	}
	
	return mathDescText;
}


/**
 * The firePropertyChange method was generated to support the propertyChange field.
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}


/**
 * Comment
 */
public java.lang.String flattenMath() throws Exception {
	if (getMathDescription()==null){
		throw new RuntimeException("math is null");
	}
	MathDescription newMath = MathDescription.createCanonicalMathDescription(getMathDescription());
	return newMath.getVCML_database();
}


/**
 * Return the ApplyButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getApplyButton() {
	if (ivjApplyButton == null) {
		try {
			ivjApplyButton = new javax.swing.JButton();
			ivjApplyButton.setName("ApplyButton");
			ivjApplyButton.setText("Apply Changes");
			ivjApplyButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjApplyButton;
}

/**
 * Gets the approxSensSolnButtonVisibility property (boolean) value.
 * @return The approxSensSolnButtonVisibility property value.
 * @see #setApproxSensSolnButtonVisibility
 */
public boolean getApproxSensSolnButtonVisibility() {
	return fieldApproxSensSolnButtonVisibility;
}


/**
 * Return the CancelButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			ivjCancelButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}

/**
 * Gets the constructedSolnButtonVisibility property (boolean) value.
 * @return The constructedSolnButtonVisibility property value.
 * @see #setConstructedSolnButtonVisibility
 */
public boolean getConstructedSolnButtonVisibility() {
	return fieldConstructedSolnButtonVisibility;
}


/**
 * Return the CreateConstrSolnButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCreateConstrSolnButton() {
	if (ivjCreateConstrSolnButton == null) {
		try {
			ivjCreateConstrSolnButton = new javax.swing.JButton();
			ivjCreateConstrSolnButton.setName("CreateConstrSolnButton");
			ivjCreateConstrSolnButton.setText("Create Constructed Solution");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCreateConstrSolnButton;
}


/**
 * Return the document1 property value.
 * @return javax.swing.text.Document
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.text.Document getdocument1() {
	// user code begin {1}
	// user code end
	return ivjdocument1;
}


/**
 * Return the ExpandFunctionButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getExpandFunctionButton() {
	if (ivjExpandFunctionButton == null) {
		try {
			ivjExpandFunctionButton = new javax.swing.JButton();
			ivjExpandFunctionButton.setName("ExpandFunctionButton");
			ivjExpandFunctionButton.setText("Expand Functions");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExpandFunctionButton;
}


/**
 * Return the FlattenButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getFlattenButton() {
	if (ivjFlattenButton == null) {
		try {
			ivjFlattenButton = new javax.swing.JButton();
			ivjFlattenButton.setName("FlattenButton");
			ivjFlattenButton.setText("Flatten");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFlattenButton;
}


/**
 * Gets the flattenVisibility property (boolean) value.
 * @return The flattenVisibility property value.
 * @see #setFlattenVisibility
 */
public boolean getFlattenVisibility() {
	return fieldFlattenVisibility;
}


/**
 * Return the lineNumberedTextPanel1 property value.
 * @return cbit.gui.LineNumberedTextPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.LineNumberedTextPanel getlineNumberedTextArea1() {
	if (ivjlineNumberedTextArea1 == null) {
		try {
			ivjlineNumberedTextArea1 = new cbit.gui.LineNumberedTextPanel();
			ivjlineNumberedTextArea1.setName("lineNumberedTextArea1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjlineNumberedTextArea1;
}

/**
 * Gets the makeCanonicalVisibility property (boolean) value.
 * @return The makeCanonicalVisibility property value.
 * @see #setMakeCanonicalVisibility
 */
public boolean getMakeCanonicalVisibility() {
	return fieldMakeCanonicalVisibility;
}


/**
 * Return the MathDescription property value.
 * @return cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public cbit.vcell.math.MathDescription getMathDescription() {
	// user code begin {1}
	// user code end
	return ivjMathDescription;
}

/**
 * Accessor for the propertyChange field.
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}


/**
 * Return the SensitivitySolnButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getSensitivitySolnButton() {
	if (ivjSensitivitySolnButton == null) {
		try {
			ivjSensitivitySolnButton = new javax.swing.JButton();
			ivjSensitivitySolnButton.setName("SensitivitySolnButton");
			ivjSensitivitySolnButton.setText("Create Approx. Sensitivity Solution");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSensitivitySolnButton;
}


/**
 * Return the solutionTemplatePanel1 property value.
 * @return cbit.vcell.numericstest.gui.SolutionTemplatePanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.numericstest.gui.SolutionTemplatePanel getsolutionTemplatePanel1() {
	if (ivjsolutionTemplatePanel1 == null) {
		try {
			ivjsolutionTemplatePanel1 = new cbit.vcell.numericstest.gui.SolutionTemplatePanel();
			ivjsolutionTemplatePanel1.setName("solutionTemplatePanel1");
			ivjsolutionTemplatePanel1.setLocation(71, 607);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjsolutionTemplatePanel1;
}

/**
 * Return the textArea1 property value.
 * @return javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextArea gettextArea1() {
	// user code begin {1}
	// user code end
	return ivjtextArea1;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getApplyButton().addActionListener(this);
	getCreateConstrSolnButton().addActionListener(this);
	this.addPropertyChangeListener(this);
	getSensitivitySolnButton().addActionListener(this);
	getCancelButton().addActionListener(this);
	getlineNumberedTextArea1().addPropertyChangeListener(this);
	getExpandFunctionButton().addActionListener(this);
	getFlattenButton().addActionListener(this);
	connPtoP2SetTarget();
	connPtoP1SetTarget();
}

/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MathDescEditor");
		setLayout(new java.awt.GridBagLayout());
		setSize(981, 242);

		java.awt.GridBagConstraints constraintsApplyButton = new java.awt.GridBagConstraints();
		constraintsApplyButton.gridx = 0; constraintsApplyButton.gridy = 1;
		constraintsApplyButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getApplyButton(), constraintsApplyButton);

		java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
		constraintsCancelButton.gridx = 1; constraintsCancelButton.gridy = 1;
		constraintsCancelButton.anchor = java.awt.GridBagConstraints.WEST;
		constraintsCancelButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getCancelButton(), constraintsCancelButton);

		java.awt.GridBagConstraints constraintsCreateConstrSolnButton = new java.awt.GridBagConstraints();
		constraintsCreateConstrSolnButton.gridx = 2; constraintsCreateConstrSolnButton.gridy = 1;
		constraintsCreateConstrSolnButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getCreateConstrSolnButton(), constraintsCreateConstrSolnButton);

		java.awt.GridBagConstraints constraintsSensitivitySolnButton = new java.awt.GridBagConstraints();
		constraintsSensitivitySolnButton.gridx = 3; constraintsSensitivitySolnButton.gridy = 1;
		constraintsSensitivitySolnButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getSensitivitySolnButton(), constraintsSensitivitySolnButton);

		java.awt.GridBagConstraints constraintsExpandFunctionButton = new java.awt.GridBagConstraints();
		constraintsExpandFunctionButton.gridx = 4; constraintsExpandFunctionButton.gridy = 1;
		constraintsExpandFunctionButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getExpandFunctionButton(), constraintsExpandFunctionButton);

		java.awt.GridBagConstraints constraintsFlattenButton = new java.awt.GridBagConstraints();
		constraintsFlattenButton.gridx = 5; constraintsFlattenButton.gridy = 1;
		constraintsFlattenButton.insets = new java.awt.Insets(0, 9, 9, 9);
		add(getFlattenButton(), constraintsFlattenButton);

		java.awt.GridBagConstraints constraintslineNumberedTextArea1 = new java.awt.GridBagConstraints();
		constraintslineNumberedTextArea1.gridx = 0; constraintslineNumberedTextArea1.gridy = 0;
		constraintslineNumberedTextArea1.gridwidth = 6;
		constraintslineNumberedTextArea1.fill = java.awt.GridBagConstraints.BOTH;
		constraintslineNumberedTextArea1.weightx = 1.0;
		constraintslineNumberedTextArea1.weighty = 1.0;
		constraintslineNumberedTextArea1.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getlineNumberedTextArea1(), constraintslineNumberedTextArea1);
		initConnections();
		connEtoM11();
		connEtoM16();
		connEtoM19();
		connEtoM20();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void insertUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyPressed(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == gettextArea1()) 
		connEtoM6(e);
	if (e.getSource() == gettextArea1()) 
		connEtoM8(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyReleased(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyTyped(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MathDescEditor aMathDescEditor;
		aMathDescEditor = new MathDescEditor();
		frame.setContentPane(aMathDescEditor);
		frame.setSize(aMathDescEditor.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
public String makeCanonical() throws Exception {
	if (getMathDescription()==null){
		throw new RuntimeException("mathDescription is null");
	}
	MathDescription newMath = new MathDescription(getMathDescription());
	String answer = cbit.vcell.client.PopupGenerator.showInputDialog(this,"enter any function to expand separated by spaces","");
	HashSet varsToKeep = newMath.getStateVariableNames();
	if (answer!=null && answer.length()>0){
		StringTokenizer st = new StringTokenizer(answer);
		while (st.hasMoreTokens()){
			String token = st.nextToken();
			System.out.println("adding function '"+token+"'");
			varsToKeep.add(token);
		}
	}
	newMath = newMath.createMathWithExpandedEquations(newMath,varsToKeep);
	return newMath.getVCML_database();
}


/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == this && (evt.getPropertyName().equals("constructedSolnButtonVisibility"))) 
		connEtoM10(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("approxSensSolnButtonVisibility"))) 
		connEtoM15(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("makeCanonicalVisibility"))) 
		connEtoM18(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("flattenVisibility"))) 
		connEtoM21(evt);
	if (evt.getSource() == getlineNumberedTextArea1() && (evt.getPropertyName().equals("document"))) 
		connPtoP2SetTarget();
	if (evt.getSource() == getlineNumberedTextArea1() && (evt.getPropertyName().equals("textArea"))) 
		connPtoP1SetTarget();
	// user code begin {2}
	// user code end
}

/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}


/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void removeUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Sets the approxSensSolnButtonVisibility property (boolean) value.
 * @param approxSensSolnButtonVisibility The new value for the property.
 * @see #getApproxSensSolnButtonVisibility
 */
public void setApproxSensSolnButtonVisibility(boolean approxSensSolnButtonVisibility) {
	boolean oldValue = fieldApproxSensSolnButtonVisibility;
	fieldApproxSensSolnButtonVisibility = approxSensSolnButtonVisibility;
	firePropertyChange("approxSensSolnButtonVisibility", new Boolean(oldValue), new Boolean(approxSensSolnButtonVisibility));
}


/**
 * Sets the constructedSolnButtonVisibility property (boolean) value.
 * @param constructedSolnButtonVisibility The new value for the property.
 * @see #getConstructedSolnButtonVisibility
 */
public void setConstructedSolnButtonVisibility(boolean constructedSolnButtonVisibility) {
	boolean oldValue = fieldConstructedSolnButtonVisibility;
	fieldConstructedSolnButtonVisibility = constructedSolnButtonVisibility;
	firePropertyChange("constructedSolnButtonVisibility", new Boolean(oldValue), new Boolean(constructedSolnButtonVisibility));
}


/**
 * Set the document1 to a new value.
 * @param newValue javax.swing.text.Document
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setdocument1(javax.swing.text.Document newValue) {
	if (ivjdocument1 != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjdocument1 != null) {
				ivjdocument1.removeDocumentListener(this);
			}
			ivjdocument1 = newValue;

			/* Listen for events from the new object */
			if (ivjdocument1 != null) {
				ivjdocument1.addDocumentListener(this);
			}
			connPtoP2SetSource();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Sets the flattenVisibility property (boolean) value.
 * @param flattenVisibility The new value for the property.
 * @see #getFlattenVisibility
 */
public void setFlattenVisibility(boolean flattenVisibility) {
	boolean oldValue = fieldFlattenVisibility;
	fieldFlattenVisibility = flattenVisibility;
	firePropertyChange("flattenVisibility", new Boolean(oldValue), new Boolean(flattenVisibility));
}


/**
 * Sets the makeCanonicalVisibility property (boolean) value.
 * @param makeCanonicalVisibility The new value for the property.
 * @see #getMakeCanonicalVisibility
 */
public void setMakeCanonicalVisibility(boolean makeCanonicalVisibility) {
	boolean oldValue = fieldMakeCanonicalVisibility;
	fieldMakeCanonicalVisibility = makeCanonicalVisibility;
	firePropertyChange("makeCanonicalVisibility", new Boolean(oldValue), new Boolean(makeCanonicalVisibility));
}


/**
 * Set the MathDescription to a new value.
 * @param newValue cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setMathDescription(cbit.vcell.math.MathDescription newValue) {
	if (ivjMathDescription != newValue) {
		try {
			cbit.vcell.math.MathDescription oldValue = getMathDescription();
			ivjMathDescription = newValue;
			connEtoM12(ivjMathDescription);
			connEtoM14(ivjMathDescription);
			connEtoM3(ivjMathDescription);
			firePropertyChange("mathDescription", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Set the textArea1 to a new value.
 * @param newValue javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void settextArea1(javax.swing.JTextArea newValue) {
	if (ivjtextArea1 != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjtextArea1 != null) {
				ivjtextArea1.removeKeyListener(this);
			}
			ivjtextArea1 = newValue;

			/* Listen for events from the new object */
			if (ivjtextArea1 != null) {
				ivjtextArea1.addKeyListener(this);
			}
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GC3D2B1B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E155BD8DD8D4E53AD6D8141854D21139C90A0A05052BA6154F2E35363A9B4FC6655D1DDA6C3A1B3B4B6EFADB37387761F63DF78F83A808A0A995DBE61AD458AA81E2A22072B3886E22207C080849409CE0E01899E68EB0A066FD3F73FD6F19B3E74EB0B8ED7B5C4B733C4F1973FE6F7F77FE3F67BB87AE6B23106484ED9647A5A4F36C6FE88247C577F15CC5531CB044C51F5324F2323FFDGEFF31651A438
	2E0732B5CFE9D2B339760494380F03FB53131A54776077AE6E45F6D3AF7C7020C787E5E37C8F2FCD2C4764C0BDDB457B1A3E6DF04DG08879C396A4E937DD77A3299FE77F90AC7C850F2DCF6A321996B5B4DF07EC093823096A01651F3C0C38D18DAD24C685A6F8A6362FEE2532693B9B219889D0D14570FDD77F2EFA59CECA23A660AF6921E95D09687C01CCF645E64F261DA56505FF3222B53A8648DF771A6D35E00DE684D6B99B216141C01DFBA5E5ED5EDB08A96DB18A86B8FFDA9A2AF47D9613E2819603A73
	087C0DF01F84773B1B917FD4A141BB60F7A0C0D8B37AF47C33B2E6F36B5565DCD06D17E9BBBC783432197A925B6C74A938F71D76AFE27C43C7C91CF3DAB42935G6DGD3GC2GD682FCA0567B924767F02D68942AAC838396F30555DAE9B2584ED88C3C89FE1714C089431D673BACB68347513ADD58F7D0451E090072AD3FE1BE9A133043D84F61679F65E2165C2B5D2A921318302BDACD8B0D452696E7CC286ECD9EF5E7DEF04DC3D75D97B839EE7F1756A6A62B688EDD39B6B10749A93E60546D38C06A7A95B1
	87DA61B761CBA375AE62E3C57C8A991E6624C944137B98A8ABEF455CE84DC0DB6A1266F01985772946A17819GEDE8AB35E1C52B5216670A086C58D62A731CE44BE6919FF451092736BCAD66A939AFEF5324C635EBD2E9FEAD3BCA5AE86B95CD2AG90G908A308AE0BDC05C954C314D0EAFA619E38DFA1BD0B9E4B499F89BC7F9170D3E8BD75EA15874274DF6C1EF6E62DB74B6233E53445BB9C6737DD19203CE973E9F0A395F85BAEAF8B3EF538BC60B99246B87F8013759A9CD54685B0446460B25CD46819E94
	8CD8B9143BF6F497DCCDFA3B50ECB568855EC9C14BE3C6C91D8C6BDBC0A288005FB4AE3F9AA7714A6A50249E84A86B40B8DC98A3727E4E5B4C3C2924244EE2699F32B691CF38008E92672D7D246FE8005F3D9D9863D72F91DCB45C47CAF26E9C5BA91323B3F691737536D1ECE36B73208367B683FD369E7A9A00BAG2B9EF36875D64CA1DD7AA26E603F5C231AC359CF2FCD7457535C8951AB5B526B228EE2679AA80B85C86984FFBB316F376535AA64919B08CD22ECA62FC82F5E6E5440AA2325BA263969A07EA5
	325F49B25A496AC8137D26712F3BCE6A328E7C6A85706F44BA787158DE1A5315FABB0FD9DCEF0384648D4E9A21F63ED09482570FB8BACE6E9079297CC3G07818EG54839C8778AB118BC05ACC8D40E90023G47GCE82B483D481D483DC8238CC5A87C0A30091E0B64092GC8872E87E0B5C7FAB018A7G8CG5C84E08198A4B984F0063481A9265AA344569070F38D40A6006CAE68FFGFA818281A28156832498B42979G2DGD3G42G228162817672B066GD8810281D6824482E4F6EBD20B81BAG7C81A2
	GB4GDC0FA6B5972081408190823086E093C0F6AF688768858884086C459CDBDDB8C5BBF1FD6EE057DD0AFA455FD8A7F21E832C8E8E31BA48E0F514A12B078CD6D7A7D9DDE1FDE0FDE1DC6B99EDA32BB72C872CB75459456A300755E1862BAB2CA739FD230A7B1BA611571EE076A46916CC12EE75B730657FAB50DC6CBB6CAD97319FCA1561647D8D69371295BCE4FCA273F3B2277D0061B027C95E6EE73F5F81780423390D797BA1C7739B73905BG49654FB8E75E4A731CG99678BB81A5FC7980E64B666355C
	3ED245FD4DB7086351C9529D1BA45D49FFF29E7CDFGBAB67D60AA4991FE18B78BBA5E4A1B8D70434E4AFEF415649F1BCFF5DBA41EA891EF0579D795CCF86C927E452BA4877502E0B3F68E89FCA3AF88C6F30F337C95D117FD28536A1C3A212EDFDEA579EC99017917C47F1B2BE46E52E5B11BF9F11014D8D8F92CB8F762CD7CG98DDE599B28B947F7AB8D9DB767323EC6E764678960E4C3DCCC3E49EC857EB91FA521E2CB663G8C3DE4AA49659B493CEACFFF36ACC66BE17CA06B4EA4A84BB6621CE8E4BF4E09
	F24696F2AB2FD835EAF37C60F9B3348EA31D0784981DF3A2EA53EB5754ED7F1DB807E3F8FB22087B9FB361F5DDC152BEE097D7ED5AA1AB33992DA4D02C6C364F093D86CB579091D640A14FC739E41EEC3718064439ACBFE0B5410C35C18FD3448224F9E6A761952072ABE04ECBF8699CE7AAC76C8E87FFD682E80CB847613FA665B84FE4131BAA0B49C42B8E4A0A7BC8FC0FFC1145623389F8137AE8FCB3247259D27994388F1615537A294C1757CF98AB5F88D72E9F668B220C6CC214118D387CFE278CEA6B796B
	1944FFFEF00807A58219D47FDD4A150B57F7AA4ADAD85E50F27DF512B7A659FCFCCDBF5159F68477A04A613E954051CF673B117DD4F73809503DD50CF4D9F0CF66CE87CD142E5C44F2E400504DBA06F471A6BA3F4A9CF04A4BA339A952F517A01DE9004A739B207E068ED0F9543E14D224BBE826F4BA3836830C838482D03A5CB2248B155191FF885D8AG2A3776B852C583AE96A045C27556DA64FA371FC03A908B1D7BC7DA283C4DF04D34225E4613C817E325F24A2CD4EE2FD5AE6FC0B9520DB33AA0859D0D5F
	3FCBF461D6BA7FA4F1C639F9123C0595C8374ACA639B4364EDE472283F0ECA24638621AFGA89E24729C03F27B4A2A24388C32758E230FF721CB53A15DF69B1513E323F48DB6B95DAFA5BA83239BD750D1FF97D5A3DD100D4E2B51DFA257692F7E149497A6EF95DCE381D26CF23DC7EA10EE371D529559DD69285E04DA242B3353B9BC6ADD652237742C6407CC5EB840AC97F9DB6A11AE42CE5782A8EF0DDDAE6F9909AE566EAC174B23F47E8DD23D89B45F33615A8AB0AE485BE567B9248B90683A835BE528A017
	17F49E6956B2BA31FD406F0DGA9C3301E917D30B5CA719B226D37E848295769C7D993526906283E76A1B57B36B4CB6DFC082E03546D8B13687C981D5C3ED9000B99A2F42BDB24B8B3FDEB06E87BA47A77G1E525DFD8169F207A9DD79B0DD3BB78DD3BA2A373DD52ADFD6BEBECC5BF984DCD78DE3BB1FFD9169B4B2BAD2AF04EE13C4975D06F4C9A3B46FF60FD07A76916A6F5291C27770A5A9AEA3F48D087962B7A20FCBDD3B14878E1AA76A72F6DEC63AEC87DDCB223CFC07DC5ED2092E5DC1573AA44EF2F914
	2E77AB24939CF46D2B24E37B47874838A66E9F776907750EBC7B884C1DCACA7EA68E4BF43F58DF5C73A174818E5C973EEAA66371AA380F8108F3609C6505F45C978E6A8F638CEBDFCA7434573DFD140D2F234EB9CA5278F0A29D6F1F97777F2DD0B6E594477A186B723D298A3B5D52E59437455898B90D134FE1A8AE105B8657EE234DAE1C06C926834753FB45B58E59B7E3E80E7A5A76856E0D870D629E7B72B31FF06AFB6C4E7DF51C8161FEEC57E10CC36058BC2E631E195AB48FF108E27EEF1445A1AB2DA811
	6EEB7E680B6D4C1E1CB128BB0030B102CF4CA7F34D20B13451AE9CD531518CB3B01B314BAE70F601BE8FE8D41BFDB15F477251770DE3D84FFC81511FF39546AF00A6GEA5749C2344B8438502BE857F8A131CBEC2BA25D69E2240B811A2CF1CD2A7F3858AEACD93298540D537DC4812EF49E98D1DC88D73DB8094B2317865E56ED318D7006DC1229F97A91A1CFDCBF64D50845556477811CC7EEA8A6F6883DC6BB2D0FC5FB4AB15E0F4E61D274D335EA4FAB82FE57230D9E277590BF6E2C0F386757E9D32257E929
	CF7B0F21CF6557E09C3E06F510F502DC45793E543EEA52BAC87E59AC83F47E1CDB27FCCC23482052BA51BB135E5C135788AB9AF3CF69812FBC54C72198FD8CFFF199575AF7272A0FE25FFB0D7A26396674B168766814B0G6A6333120FB9DFC35EFD0D75F2300444D5EF6BA920BA47AF224EA9D1CB396CDD53BD6A8C7A1A6D75FF6D5439F25DBA6D5AF5985799A55BD95C36DF077E6ABA46F5EE9AD95F710EAEDE74363E2BEB488633FCA94633EB495E005EEAB50DDE29D6D2654A625954EB330C1049F369019656
	CE676C1267C559752FD46D775F512B9D3FCE6D8E3D6E34BFG72A264F9343F20946D5F84B439D3507E9367885E8C392BB71D676DC3A60136012D3CDA9B68180231FE46C076E3F8B33158405A686AD2EC234294ECE3674AD0EFB860B6GD05A5F16A16D6E1B10F670B852B681AE60A6EC0F03FDEA362C3A89ED519C7735BD5298C4A6113D9971B986DFE5B15B855BD017409B30BBE23524AA83725F2DC9F0785C67488974C78336E65E0C764EBAC17AC3DC0366F57582B3EF204FC8F2E5A39DD327E3044CE8AA6305
	936E71FF7384463476E60C6978C934E18A60A2A59BDEBBC976363ADC3CB5D78E8902455CE2349BBB0DA623B04AF46DACA73A06899A56F6D46E79F2EC031BC0E66EADA8778991EFB49B85235EE49C63F38FD07ABD95C85F8134413720FDAFD620FD5100CB71C3B947AA310F24777ACA393F147721CA64AD87BE079F664B31BA35FC0910E427D4FD33FC59D06A4C17C65EEC87DF07A1DA5FB8DF78AA74E795583AD932B72A4AB596F1D56E31A852A1EF51D4CD2AE9AA72BE205BC37B9F1B45C1ECD52DE6D64FBF5139
	577336EA2C37D01099A3499D2CD62F671FC974D937EAD26BEE45FA3E63945A6787389537221CBF1DA27B33837AFE3ECAEF36180DDDFA134CB0DA1FB5CDEA7599A74958D363EE77D7B5E8C74AEDB0E73D8DE91F2DD1377B73DA24F7GED44EDE83761AC62E38137579FF32C31CA4D26D6FF547347336EF574C53DB4AF813AD009B62C1E0CA15DB06591F817EAE1FCFF28475845GCF566DE85B62864457814E6FF61417FD4E577C267BC90D25727D249537D35FB642153B83F5541D93F312F7885416E9675037EC20
	E93883471746349C387670C2CB55193AAB504369BB75F6083AFBB320F28E1DC71F7CC146CAC95F7C73E42E5E253771C2030534B8F1BECB7B3D1F1C47B5C07C9D981B879A511E7CE9E07FB41423EDE2F304C256661A10AE84E8B492DDD49336B9D6F74DC8179920C92D8DC0BDAFB4CB7DAB60A283F0FC6BE9413EF813C43B2985E564CE0731F4BA6A3AF0A1C5B69E50317F0D0AF24EB976C7EE8DD09D7BFB9784EB032753B1FF65F459B905D757E983DE45317F298B126DF7026DF7225E3B8BD3B867FEA6451DEAF5
	75FBEA2B649F70C5CA3C9BDB49B310FEFEB48F2041465B6D6E3975F7FE54E54C7A70227B18F572229427BBB1CEEBAE224E5C9990279998D3EB9B52864FC05A7FECC35F228117920876F5DC7AE6F37420CB2E797D52A5E92C819D0EC04C6F7D837B147D17DAF2F338767A2F8F31DEF3F421DCF1DC3F67F9F0A01B87874A6641B30B9243E6627AEB28DD4A273BA0CEF7E1CCCAAF232D41000B3E8BEDCDE87A48594F10E93A2A25D4463A4BD27FF9B7741FF7236C3B3E127AC940C55C0D4F122777AB4F86455E6DBCEF
	30D9769B011E19793338D64F7C8EBDB333C3426F3090FC318CCF755FA452137B8EA80B798E1E7350A513BE2BB58856E9G81G21G2BGB684619AFDCF82F9F6B761B91A53E6811670FAD3234B8399BC4F1210C8F31E5DEB9264EBAA9A07ABDF10B8F077CC7EDC8635FF6196B21EE481DFBEC0ADC0874014FB50764B5A035EEC47F3BD4CE8EACF14E8CF488D58C379DE9179A2EF000F361B3F643B77E5875A64E78C135E7E1BB651C34E47B2FD7177A84F4BDC4F1F685CDB713D1E726BE5F10F206EDE1AC789927E
	D7A23ED506277955DF00E7998DD03666DE4C6F6AC25F6258D8F823F124FC75455E4E799D3C4FD5A6653B6C152FC141C77B069D0DA48FD5765A68E41143317696CB8A5355FB9F6E2BDDBBA55FD7DB31631A477D249026FB65FD4E7A0D1C7F6FECDF6D3E9432AF4885EBD2F7839481B4G88G01GCB0331ADAC54127EF44236A0F666CD965A33D7A91F1632D89DB866DB0C0FFA65DB9B6C4AC77DFBEF9B71EFA314255C8FF3C900B2008E00F100107B513F3734A73D79A79D45736663F3BE7A7832D73E15772B79F8
	DF9A71D183E5F1G5BE7425A90208E2097A0E0A67AF8A63172C6FC4467676EEEB2FB6FA9D15A9BBA5355BEF5BF673A716DD17AB9D335AE53C5BF21AC8EE07B8360A7C09DC0AFC0408368E7C86271C966EA9560EAAD16FE9597B16FCAFD73315A0DAFCFF19F7E00AB9FED6BA7F8EC6B2B9E40FEB04ACD169AEC164923FC974AFC331DF763D35A1EB9CB0DEF239B1F9A644ED25AB9F25CB7BB273A71A97328EC16DA0C437AF06D52B48BE3DCFA42B79BCE3B71A9E395209A2BF8B7BEB588F50B554DA7FD33B3500DCF
	992BC8D5BBDB4BFD6B4B3A3D72C52B6A4B2970CDDF21D73ED8D5FD9AB73E494573B7EEFC4AF8F25FD563DBD0691B3EE5EEFCCAFD595FD54BF5EB9D66FA7EF7B1577B2BFC33E1540DCFE9C32F2A4FA5BA5F74553A71A975CDD15517D96DDB8E6D714A972C2AAF46C7FD3F774A97212AAF7014EF71FC500DCF994FB52AB974F5936650FAA9078CB53E79EC734A177D209ADFFE2DEF7ACEF8654BD75557F756B7FD8E2FFC358F2A45780EAA0CF147039863A3753E59D06515AFD85567BF3971CDAE2F7E6C46274C2B88
	D5FD4B9BFC53772C9BDF1E62FE0DC29FDDEFF187483E2873193878G3C4EE8664F8E8DF412F302CD3CC3101DF318A6BDDBDB7FA0BE7FDEF2082CD533E7EBD27381EAE7E3DD5DF54E373A1A6D152FE3369A5F61733E452E420DCF99BB072A3E67C53EC0C51992C2E565146F21C65F627218D73EC8D5BB7B1BFC53B76A15AFDAD55F11E69F5B28D73ED8D5FDBFF7631BDC3D7F5A0DCFD96FDC089A1F29E5B273546C90E53D7F07D7BEF5BB13AEF865D358C95706F7E61035218E4ABAG9CGC1G11GEB8162C3F0ED
	782677B53034701D4C9A78E96F762A7A793CD73E4C07547826357AD67F773B71A96BBFD7D51F6E62E46A3F7CA1E57D7F540DEFF2F6463871A96DECD235F328EDB2F61A5C6C7C33D7BEF5BB53AFF9631B22EA674BEEFC130B4BEF5D7814F189FEC82DDDEC4FA46DA2824A22GB6GF0F3B429B9G65G06B958AEEA12483BB5135D9B723EEFF2355D37385E6E154FEF0E6A38F6593738563B71A963BACBD55FEBEEFC13736FCFDE79162A6A3B6FAB5F744D734A972550C75F6B8D954FF8EE0032F8G0A7B3D0960F6
	4F053950DC1C77A4DB447729615E8A608F908E908D3089E0FBA8523DC3697A6999DBF22E1D1C9DA767E94999D8F21E17525DE6A66FB2C74B64219C390DC447C4BE5D8834CA3E4C97F513FD74E496BF727CFB0702BE759F2417G19DB323D59E44F6FBFB5A52B3F7F54162C7E7ED3C7725B948FB264EF27E3F9EF72446FC7D913555E0F22B9B0AC1E07A54FE4A22567E40B37F836BDF20B3A6D5F5F22EE7B2AAD935B9E3545136D9F0A717C19164C4FEDC3E641B8400B22695C1FF710E746500B1D9FB253AE0EC837
	AB1F63F152BB54EF13E751792168E35756C24E3DFF24E7B8D1C8932F3755F7F7CB1306C6AB5F056D695EFCECBBF5D21B78D772BA93EB2731325F03854AF7447F11C0F55C712D6A20F571DB013C6369765E5CD998C5B8FCF6F9EBF1AA232996ACE78AA47B7CADEA7D16157583FEF08D8ED59B6F266EA44FF44321EC8D40FA00F8006CF9D80F0FED757ABC3A5AB141736807D2BC67FAD80AFA2EBF1AC27A913BE5485645AB73F9D9CA36D4669CCDCF8B7CG8993EBABA23F20377570EE6D61D9111F16F9627FE90A27
	B6434EED9CCBE3F550C08EA6C3ADD03EFD5BBC7B1A3BCD5D573CED1EFDBD324D3B2FA736F97635FA1BF7DF4FEE1B58D7ED090B2F8D686BC3E99354EB1A07FACD1B20DE533C7B7A63B44F3EC627F9777565B462CB2751E03431379BE93B7B713B4497AB74FD3CDDFC5025538BFA66FFD4092C3DD595C87A7625CFD057699E6ABAFD023ACE1FC4DD27CFD0576913286B74096B1A1E03473E65085437D471EAFDCB71BC5A1F544135E31E5A1C68B5F1BF083C07A34C43B3CFF71649F594C93409471156DF22FD7438BC
	760512BD0BD43F71B30B5990B14FFD2EC36559CE48F59F13F46FB8093AD7C93A1FB839CDC6DB100FB2E6143B602577EEAFD5383613438C3F2352053E9069DF2D147BF6D8726D97E754FC53B01FB6FA74EDCE150B1EA2448F6ADC70C790DFD36D027F92713BCE397AD144702BCF395097233D37286E83F173291DD973BD597BC00D0B3CE3086F29F555FF04619FBAAB27AF4CC77DB35C1E319048E5FA4BBC6AB7553B6A791261F39BDC74C8757B3AAB3EC8FA36B061336686957D74EC4FE762371F8C7315E7FE72C5
	3CF53E724C4F9307704C4FB8142D1F0FF93A661C6BD8D4486C6DBB6FE26F914C755F0867D0F58BB429CD8BF01D125708795F3BC0FADF2151B5BEC7B14F1A64ED6830B31E4D2EF6E07EE73448690FCAED6E169654B9AE69BCF481E99B84CB83E96F345F8A4E705C574E4ED06FEB67E5F86EEB43B33C77354BB2BC7735ABB23C77354FE6A8479A6AE33C0B0F4EF77B1FE9154769CBA9CE17AEE21C8225B8A53749E90BA55A00B6248D15E83F3CA427AD1474E5363B54D7950E6B6FE6FA0E7507196A315E1F69B9561F
	E7FA0F7561CC4F31AE49749E6B2A4C0947356F353B74B507916F386C9A83ECBB6FFF65C2FF9469FF6A02AF147A72277A49F7AACC7AD14B1040F119E162BBA35277A8A221AE229750FEA0FE81BD27CE57D80BC7087EEE1BFEG4C9597BF9BC55E048164ED05FB93C0GC0B8C0D498566BFF1FA13C95641DADF67A0D62DF69A77DC49579061A09963077795EA75F0E28123DBF64FC4B827D182FA76B8F5737C5A492C6332F1E2C972A9DD63D59F0EA484C56A9CEBDBF3FC46A7294BD3F2B60FD2E0348B7A99EA061F7
	AAE8DDB63C1DAE2FCB367621F1D9A4FDC322E8A10DE7AD3B76AE443EEC36F8764F9F6E03A5DC1295571221926E91834111EFA344AD44354E741D1EF3BFE827FA6E4F5C293EAE8F59B9713ABCEC27271C2576357168C74A43E873D3BC7A11A5615E6FC3BF8C8477B0413DA54E3B44B1C5423DFF9CF151926FAA11F7835C47C938837D2803FB84F9BFBD094F759A9EC13AB74E90DC875CDBA55C053348BBAE61E60A4F422360BEC6427D398969E2A55C7CAA24AB8EC75CD69D5269A45C02D2448505633E4021BC3830
	7178CB596F9F9C7A767785B45F2A8E56564F63BB2334BEF6B5E2DDEE8847BA2A16F0F192EEE68B621296A14EA63D4B10A56166CA6FAC64AC42B374EF7563FC2388F026C558E795F410FDC9698CAEF9C321242446E6B4D46AFB6A449E10BE77BDEAA27C21403782E06DA2BC076B78944F61064F1F4335C62B3F5F3E3E691AF663A25A36B39FF51E438D6FDD27254F1A278E20EFF5D06E7728782CF9C07E3E9371675789F4FF1A167F5A251C34BF729DADE779FBE6F9B93177112D727253AE6549B2FE6A5BF31F20EF
	1B1F0B60CC4B7CBCFE27B60A793409DD83B75C1F30723951C46A5BCB7968DB6EE368DBC20152769FA449EDBBDC2034ED86330D66506396FCD72463B172DD5F747709451A47886F87D69D638BFD4CFD3E1A40E4A0C4828D01F7D8D954E34E39AA4D27178DE87F5E88D89B0A7A72BFF06AFB11C7FDC5916A73F3B5FD7B194C5A88253E2ABE5457940163635BE5A4865DFA131D176AA7E4C4FE463FF85B4D2A5FFF924793E657B83BEEFEE7E68215DBF0DCAE1762FE51679A5BDF6DF67ADA5E0F3EAED571B5D9616B9A
	20A100310D1179CAF59DBFA96A328D7174BE752C2B6E4F77B8F51B4F226ED8955DDB953AB783CD66E2276E1C45CA5D0B1BDCF535FD645475EEB36A4ADF6C2EABD521CB87B4BA192ED619AEAA7B5ADE276CBDBA14EDD0111D66C536C3A61B4A7BFEA94A73D311073469CCDEB05004B3F964FE25DBDCBEEFA43F73257BF6457D6296577B5BAF3A566113EDF8CF47944EB419E7336EE3D1468D7351B567A3E2DF9D35D83996DDAA62B50B15EB5163A69C9BB6C0D96D77707D260EFDE4FE968E77EBG56834483E4AF51
	2496AD41B95609DDA48E936EA7B7D92CF5B089B34926CDEC8FFE60C67D236D7E692D58AFAFFD72E1AE72D61D47F7BFEA173079A43B663EF6FF8239D27F5E7C1878978CE5CB81B4G1BG1216EAD2F7AFC57FEE5D455E01A20FBAAA84C15F55ABFECDC5FAF0E264C71CE8B269E77308895F9D726C5B731764FDDA66CC13B64103EF79CB591E48D267F8CA479B6DA01E2533C259C7229F1C78AD987C23ED72DD7299972677175BB1263B9F194B69FE2E536E7720B70C690B17699D6777A6525C5FE4107727541E44EE
	698C6EB29CBF6E7914E825BCEDFDF29EDAB7151F911EDE2077DB06F5B1748179C6E60B3E4F7D6993A09BEC96ABEF93C6A9D67CDA9C53BFA8FD2FA7F459C471D8C2BE9D4FF8E61FC51E988FBC1E658CFE6E14D3530CF2329E1FC8F750DF1DBC75BA6429FB9C63357C20337C0F25D86E27AAF353C9B59C15738A79F4A86BDF961B1C3F1F147D2EB2FD7B736C76EFD5874D9763BE4F6BBF6BBE75755F70BE75755F783E091F997B6D737CCD4DE97B645F5424797D3078AD6E95D0FF9A004DG194BB529B94BB1577F72
	71471C586F2874B955069E3A66571B85543F79E34F3EA66E777EBD766D7B49DEC82785967883C4BE62F76EA775A5D82CA212625E5BCFE2E4B376748A149477137613FCB3715DA21A7A391AFC0A0615AF5ACFBA9C55768BDE7D8D169F751DFDFC1750246F1172E46B203C9FAD0778B4AD1F786C83557BC6BE199374822D9FC09840CA0035G9B8138C8D8F38364821483348218G26G84810482C482C4C5E2FDDC7A6400A75B814996CCF4A3C6EFA455426CCF69165B3F9E6445C5CEECBFBB0F74D906BC5FE8F746
	4A4EFEC6F2C77A1E047849AF7AA6B555B96C72DEF44A93B01EBDB131CE4A976AF2F6BB9FF8F413622BF3B9DB598ABC26C971B5393C5FB085F802A645976732C79F86BCAB3C705138FDAF4FF39BF9A24FFB9BF9A6CF7C1E9A64F65328156DD52E4EA3FB05166EEEBBAF3545283CCC89F75A0E1F0E207B9DFB4431B97A89BA8723387DA2AE1661280CAD851EEDCDAF70EE6B3B856A6DF9F701FBFB5ED7205E1EBFAB1037E70ABBD8C07A329E4877D6092EC042DD14F0DF0AB2896E0251A074CA78B251AE022F6509C2
	44D70AF60D0838D6EC83B25CC5062BABA0718617FB4937F7A96EDC8119EFF79BCDA6FA5FAC52984D90FEA99EED220DC62BDEE6779589F7D12A0B0F3A5D6BA727DBDEBF94B73D5F1D6E6EFEF73A274E3A532DBC6BCE57556CCE575B6CCE572FF327336A5C69524A5C69B24B64F4F42D2A7FF4BBA775A5E2D5D17CEEC73A930FD545517FBB744AC88388887FB7AED9605245AD6B3DD56277246C823705EED58B5C87F4EFFA2F6C63D6FB71EBC582371F15D6089F894A5BAB5B2416D1E552FD693D38B18D7237322DE8
	3B0D5BA1FDD26334D8556B078F17A43EB6B7D14BA51D66365054BF4DA5117CBD4DA50B69FD1ACB0454F710E3EE299CCEFD614FBE48FD4DED79A7E0D3DD30C9F2E05FAD38AE1F7F47CF6D72382731FD851BFF2FF04E43695857BDC66A399D700E95B8FEBDBECAA6FE1E465E46813D49A468CD7D95E6839907ABC7855EB937699FA3726DC8438AE919ED0C585DA76379DFD0CB8788F42831D0EEA0GG78EAGGD0CB818294G94G88G88GC3D2B1B6F42831D0EEA0GG78EAGG8CGGGGGGGGGGG
	GGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG28A0GGGG
**end of data**/
}
}