/* Generated By:JJTree: Do not edit this line. Node.java */

package cbit.vcell.units.parser;

import cbit.vcell.matrix.RationalNumber;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public interface Node {
	public final static String MU = "\u03BC";
	public final static String SUPER_PLUS  = "\u207A";
	public final static String SUPER_MINUS = "\u207B";
	
	public final static String SUPER_0     = "\u2070";
	public final static String SUPER_1     = "\u00B9";
	public final static String SUPER_2     = "\u00B2";
	public final static String SUPER_3     = "\u00B3";
	public final static String SUPER_4     = "\u2074";
	public final static String SUPER_5     = "\u2075";
	public final static String SUPER_6     = "\u2076";
	public final static String SUPER_7     = "\u2077";
	public final static String SUPER_8     = "\u2078";
	public final static String SUPER_9     = "\u2079";
	
	public final static String[] superScripts_0_to_9 = new String[] {
		SUPER_0,
		SUPER_1,
		SUPER_2,
		SUPER_3,
		SUPER_4,
		SUPER_5,
		SUPER_6,
		SUPER_7,
		SUPER_8,
		SUPER_9
	};

	public enum UnitTextFormat {
		plain,
		unicode,
		html
	};

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  public void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  public void jjtClose();

  /** This pair of methods are used to inform the node of its
    parent. */
  public void jjtSetParent(Node n);
  public Node jjtGetParent();

  /** This method tells the node to add its argument to the node's
    list of children.  */
  public void jjtAddChild(Node n, int i);

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  public Node jjtGetChild(int i);

  /** Return the number of children the node has. */
  public int jjtGetNumChildren();
  
  String toInfix(RationalNumber power);
  
  String toSymbol(RationalNumber power, UnitTextFormat format);
  
  public String toInfix();
  
  public String toSymbol(UnitTextFormat format);
}
