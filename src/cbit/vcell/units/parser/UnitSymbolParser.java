/* Generated By:JJTree&JavaCC: Do not edit this line. UnitSymbolParser.java */
package cbit.vcell.units.parser;

public class UnitSymbolParser/*@bgen(jjtree)*/implements UnitSymbolParserTreeConstants, UnitSymbolParserConstants {/*@bgen(jjtree)*/
  protected JJTUnitSymbolParserState jjtree = new JJTUnitSymbolParserState();
  public static void main(String args[]) {
    UnitSymbolParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 0.2:  Reading from standard input . . .");
      parser = new UnitSymbolParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 0.2:  Reading from file " + args[0] + " . . .");
      try {
        parser = new UnitSymbolParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 0.2:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("VCELL Unit Symbol Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.unit.parser.UnitSymbolParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.unit.parser.UnitSymbolParser inputfile");
      return;
    }
    try {
      SimpleNode n = parser.UnitSymbol();
      n.dump("");
      System.out.println("infix = "+n.toInfix());
      System.out.println("symbol = "+n.toSymbol());
      UnitSymbol unitSymbol1 = new UnitSymbol(n.toInfix());
      UnitSymbol unitSymbol2 = new UnitSymbol(n.toSymbol());
      System.out.println("infix1 = "+unitSymbol1.getUnitSymbolAsInfix());
      System.out.println("symbol1 = "+unitSymbol1.getUnitSymbol());
      System.out.println("infix2 = "+unitSymbol2.getUnitSymbolAsInfix());
      System.out.println("symbol2 = "+unitSymbol2.getUnitSymbol());

      System.out.println("Java Parser Version 0.2:  Java program parsed successfully.");
    } catch (Exception e) {
      System.out.println("Java Parser Version 0.2:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
  final public ASTUnitSymbol UnitSymbol() throws ParseException {
 /*@bgen(jjtree) UnitSymbol */
  ASTUnitSymbol jjtn000 = new ASTUnitSymbol(JJTUNITSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        NumericScale();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          jj_consume_token(11);
          break;
        case MULT:
          jj_consume_token(MULT);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
        jj_consume_token(12);
      } else if (jj_2_2(2147483647)) {
        NumericScale();
        jj_consume_token(12);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONE_LITERAL:
        case IDENTIFIER:
        case 14:
          MultiplicativeExpression();
          jj_consume_token(12);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void MultiplicativeExpression() throws ParseException {
    ASTMultNode jjtn001 = new ASTMultNode(JJTMULTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ONE_LITERAL:
        jj_consume_token(ONE_LITERAL);
        break;
      case IDENTIFIER:
      case 14:
        PowerTerm();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
        case 13:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case 13:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MULT:
            jj_consume_token(MULT);
            break;
          case 13:
            jj_consume_token(13);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE_LITERAL:
            jj_consume_token(ONE_LITERAL);
            break;
          case IDENTIFIER:
          case 14:
            PowerTerm();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case DIV:
          DivTerm();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void DivTerm() throws ParseException {
 /*@bgen(jjtree) InvertTermNode */
  ASTInvertTermNode jjtn000 = new ASTInvertTermNode(JJTINVERTTERMNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIV);
      PowerTerm();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PowerTerm() throws ParseException {
 /*@bgen(jjtree) PowerTerm */
  ASTPowerTerm jjtn000 = new ASTPowerTerm(JJTPOWERTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BaseExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POWER:
      case SUB:
      case INTEGER_LITERAL:
      case ONE_LITERAL:
      case 14:
        ExponentExpression();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExponentExpression() throws ParseException {
 /*@bgen(jjtree) ExponentExpression */
  ASTExponentExpression jjtn000 = new ASTExponentExpression(JJTEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POWER:
        jj_consume_token(POWER);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
        Negative();
        break;
      case INTEGER_LITERAL:
      case ONE_LITERAL:
      case 14:
        RationalNumberExponent();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Negative() throws ParseException {
 /*@bgen(jjtree) Negative */
  ASTNegative jjtn000 = new ASTNegative(JJTNEGATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUB);
      RationalNumberExponent();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BaseExpression() throws ParseException {
    if (jj_2_3(2147483647)) {
      Name();
    } else if (jj_2_4(2147483647)) {
      jj_consume_token(14);
      MultiplicativeExpression();
      jj_consume_token(15);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericScale() throws ParseException {
 /*@bgen(jjtree) NumericScale */
  ASTNumericScale jjtn000 = new ASTNumericScale(JJTNUMERICSCALE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new Double(t.image);
        break;
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new Double(t.image);
        break;
      case ONE_LITERAL:
        t = jj_consume_token(ONE_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new Double(t.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
void IntegerBase() #IntegerBaseNode:
{ Token t; }
{
  t = <INTEGER_LITERAL> 
  { jjtThis.value = new Integer(t.image); }
}
*/
  final public void RationalNumberExponent() throws ParseException {
 /*@bgen(jjtree) RationalNumberExponent */
  ASTRationalNumberExponent jjtn000 = new ASTRationalNumberExponent(JJTRATIONALNUMBEREXPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ONE_LITERAL:
        t1 = jj_consume_token(ONE_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image));
        break;
      case INTEGER_LITERAL:
        t1 = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image));
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_5(2147483647)) {
          jj_consume_token(14);
          t1 = jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(DIV);
          t2 = jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(15);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image));
        } else if (jj_2_6(2147483647)) {
          jj_consume_token(14);
          t1 = jj_consume_token(ONE_LITERAL);
          jj_consume_token(DIV);
          t2 = jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(15);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image));
        } else if (jj_2_7(2147483647)) {
          jj_consume_token(14);
          t1 = jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(DIV);
          t2 = jj_consume_token(ONE_LITERAL);
          jj_consume_token(15);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image));
        } else if (jj_2_8(2147483647)) {
          jj_consume_token(14);
          t1 = jj_consume_token(ONE_LITERAL);
          jj_consume_token(DIV);
          t2 = jj_consume_token(ONE_LITERAL);
          jj_consume_token(15);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) IdNode */
  ASTIdNode jjtn000 = new ASTIdNode(JJTIDNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t_name=null;
    try {
      t_name = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.name = t_name.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(ONE_LITERAL)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(ONE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(ONE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(ONE_LITERAL)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(ONE_LITERAL)) return true;
    return false;
  }

  public UnitSymbolParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x808,0x4300,0x4300,0x2018,0x2008,0x4300,0x2018,0x4186,0x2,0x4184,0x1a0,0x180,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public UnitSymbolParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public UnitSymbolParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UnitSymbolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public UnitSymbolParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UnitSymbolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public UnitSymbolParser(UnitSymbolParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(UnitSymbolParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[16];
    for (int i = 0; i < 16; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
