package cbit.vcell.graph;
/*�
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
�*/
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.vcell.relationship.RelationshipEvent;
import org.vcell.relationship.RelationshipListener;
import org.vcell.relationship.RelationshipModel;
import org.vcell.relationship.RelationshipObject;

import cbit.gui.graph.*;
import cbit.vcell.model.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public abstract class ModelCartoon extends GraphModel 
implements java.beans.PropertyChangeListener, Model.Owner, RelationshipListener {
	public static final String PROPERTY_NAME_MODEL = "model";
	private Model fieldModel = null;

	/**
	 * Insert the method's description here.
	 * Creation date: (5/13/2003 9:46:54 AM)
	 * @return cbit.vcell.model.Model
	 */
	public Model getModel() {
		return fieldModel;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (5/13/2003 9:46:54 AM)
	 * @param newFieldModel cbit.vcell.model.Model
	 */
	public void setModel(Model newFieldModel) {
		Model oldModel = fieldModel;
		if (oldModel != null){
			oldModel.removePropertyChangeListener(this);
		}
		fieldModel = newFieldModel;
		if(fieldModel != null){
			fieldModel.removePropertyChangeListener(this);
			fieldModel.addPropertyChangeListener(this);
		}
		refreshAll();
		firePropertyChange(PROPERTY_NAME_MODEL, oldModel, newFieldModel);
	}
	
	@Override
	public void searchText(String text) {
		String lowerCaseText = text.toLowerCase();
		Set<Object> selectedObjectsNew = new HashSet<Object>();
		for(Map.Entry<Object, Shape> entry : objectShapeMap.entrySet()) {
			Object object = entry.getKey();
			Shape shape = entry.getValue();
			if(!(object instanceof Structure) && text != null && text.length() != 0 && shape.getLabel() != null && shape.getLabel().toLowerCase().contains(lowerCaseText)) {
				selectedObjectsNew.add(object);
			}
		}
		setSelectedObjects(selectedObjectsNew.toArray());
	}
	
	public void relationshipChanged(RelationshipEvent event) {
		RelationshipObject relationshipObject = event.getRelationshipObject();
		refreshRelationshipInfo(relationshipObject);
	}


	public void refreshRelationshipInfo(RelationshipObject relationshipObject) {
		BioModelEntityObject bioModelEntity = relationshipObject.getBioModelEntityObject();
		if(bioModelEntity != null) {
			Shape shape = getShapeFromModelObject(bioModelEntity);
			if(shape instanceof SpeciesContextShape) {
				SpeciesContextShape scShape = (SpeciesContextShape) shape;
				scShape.setLinkText("L");
			}		
		}
	}

	public void refreshRelationshipInfo(RelationshipModel relationshipModel) {
		for(RelationshipObject relationship : relationshipModel.getRelationshipObjects()) {
			refreshRelationshipInfo(relationship);
		}
	}
	
}