package cbit.vcell.graph;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.gui.graph.*;
import cbit.gui.graph.Shape;
import java.awt.event.*;
import java.awt.*;
import java.util.IdentityHashMap;

import cbit.vcell.model.*;
import javax.swing.*;
import cbit.vcell.model.gui.SimpleReactionPanelDialog;
import cbit.vcell.model.gui.FluxReaction_Dialog;

import org.vcell.util.gui.JInternalFrameEnhanced;
import org.vcell.util.gui.ZEnforcer;

import cbit.vcell.client.PopupGenerator;
import cbit.vcell.desktop.VCellTransferable;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class ReactionCartoonTool extends BioCartoonTool {

	//
	class SortStructureHeirarchy implements java.util.Comparator {
		private Model model = null;
		public SortStructureHeirarchy(Model argModel){
			this.model = argModel;
		}
		public int compare(Object o1, Object o2){
			String structName1 = ((ReactionStep)o1).getStructure().getName();
			String structName2 = ((ReactionStep)o2).getStructure().getName();
			Structure struct = model.getTopFeature();
			while(true){
				if(struct.getName().equals(structName1) && struct.getName().equals(structName2)){
					return 0;
				};
				if(struct.getName().equals(structName1)){
					return -1;
				}
				if(struct.getName().equals(structName2)){
					return 1;
				}
				if(struct instanceof Feature){
					struct = ((Feature)struct).getMembrane();
				}else if (struct instanceof Membrane){
					struct = ((Membrane)struct).getInsideFeature();
				}
			}
		}
	}
	//
	
	private ReactionCartoon reactionCartoon = null;

	//
	// for dragging speciesContext's around
	//
	private boolean bMoving = false;
	private Shape movingShape = null;
	private Point movingPointWorld = null;
	private Point movingOffsetWorld = null;

	//
	// for dragging rectangle around
	//
	private boolean bRectStretch = false;
	private RubberBandRectShape rectShape = null;

	//
	// for dragging line around
	//
	private boolean bLineStretch = false;
	private Point endPointWorld = null;
	private RubberBandEdgeShape edgeShape = null;
	private int mode = -1;

	private static final int LINE_TYPE_NULL = 0;
	private static final int LINE_TYPE_CATALYST = 1;
	private static final int LINE_TYPE_PRODUCT = 2;
	private static final int LINE_TYPE_REACTANT = 3;
	private static final int LINE_TYPE_FLUX = 4;
	private static final String lineLabels[] =
		{ "<<?>>", "<<C A T A L Y S T>>", "<<P R O D U C T>>", "<<R E A C T A N T>>", "<<F L U X>>" };
	private static final Color lineColors[] =
		{ Color.red, Color.gray, Color.black, Color.black, Color.black };
	private static final Cursor lineCursors[] =
		{
			Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR),
			Cursor.getPredefinedCursor(Cursor.HAND_CURSOR),
			Cursor.getPredefinedCursor(Cursor.HAND_CURSOR),
			Cursor.getPredefinedCursor(Cursor.HAND_CURSOR),
			Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)};

/**
 * This method was created by a SmartGuide.
 * @param canvas cbit.vcell.graph.CartoonCanvas
 */
public ReactionCartoonTool () {
	super();
}


/**
 * Insert the method's description here.
 * Creation date: (9/9/2002 10:25:37 AM)
 * @return cbit.vcell.graph.GraphModel
 */
public GraphModel getGraphModel() {
	return getReactionCartoon();
}


/**
 * This method was created in VisualAge.
 * @return java.lang.String
 * @param line cbit.vcell.graph.RubberBandEdgeShape
 * @param screenPoint java.awt.Point
 */
private int getLineTypeFromWorld(SpeciesContext speciesContext, Point worldPoint) throws Exception {
	Shape mouseOverShape = getReactionCartoon().pickWorld(worldPoint);
	if (mouseOverShape instanceof ReactionStepShape){
		//
		// check if the ReactionStep already has a ReactionParticipant for this SpeciesContext
		//
		ReactionStep reactionStep = (ReactionStep)mouseOverShape.getModelObject();
		ReactionParticipant[] rps = reactionStep.getReactionParticipants(speciesContext);
		if (mouseOverShape instanceof SimpleReactionShape){
			switch (mouseOverShape.getAttachmentFromAbs(worldPoint)){
				case Shape.ATTACH_LEFT:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Reactant) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_REACTANT;
				}
				case Shape.ATTACH_CENTER:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Catalyst) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_CATALYST;
				}
				case Shape.ATTACH_RIGHT:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Product) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_PRODUCT;
				}
			}
		}else if (mouseOverShape instanceof FluxReactionShape){
			switch (mouseOverShape.getAttachmentFromAbs(worldPoint)){
				case Shape.ATTACH_LEFT:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Flux) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_FLUX;
				}
				case Shape.ATTACH_CENTER:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Catalyst) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_CATALYST;
				}
				case Shape.ATTACH_RIGHT:{
					for (int i = 0; i < rps.length; i++){
						if (rps[i] instanceof Flux) {
							return LINE_TYPE_NULL;
						}
					}
					return LINE_TYPE_FLUX;
				}
			}
		}
	}
	return LINE_TYPE_NULL;
}


/**
 * Insert the method's description here.
 * Creation date: (5/14/2003 10:51:54 AM)
 * @return cbit.vcell.graph.ReactionCartoon
 */
public ReactionCartoon getReactionCartoon() {
	return reactionCartoon;
}


/**
 * Insert the method's description here.
 * Creation date: (6/7/2004 7:35:12 AM)
 * @return cbit.vcell.model.ReactionStep[]
 * @param shape cbit.vcell.graph.Shape
 * @param MenuAction java.lang.String
 */
private ReactionStep[] getReactionStepArray(Shape shape, String menuAction) {
	if(shape instanceof ReactionStepShape){
		Shape[] reactionStepShapeArr = getReactionCartoon().getSelectedShapes();
		if(reactionStepShapeArr != null && reactionStepShapeArr.length > 0){
			ReactionStep[] rxStepsArr = new ReactionStep[reactionStepShapeArr.length];
			for(int i=0;i<reactionStepShapeArr.length;i+= 1){
				rxStepsArr[i] = (ReactionStep)reactionStepShapeArr[i].getModelObject();
			}
			//java.util.Arrays.sort(rxStepsArr,new SortStructureHeirarchy(getReactionCartoon().getModel()));
			return rxStepsArr;
		}
	}
	return null;
}


/**
 * This method was created in VisualAge.
 */
public void layout(String layoutName) throws Exception {
	if (getReactionCartoon().getStructure() instanceof Membrane){
		if (RANDOMIZER.equals(layoutName)){
			getReactionCartoon().setRandomLayout(true);
			getGraphPane().repaint();
		}else{
			System.out.println(layoutName+" not yet implemented for Membranes");
		}
		saveDiagram();
		return;
	}

	//
	// for non-membranes, use RPI's layout stuff
	//
	
	edu.rpi.graphdrawing.Blackboard bb = new edu.rpi.graphdrawing.Blackboard();
	java.util.HashMap nodeShapeMap = new java.util.HashMap();
	//
	// add nodes
	//
	java.util.Enumeration shapeEnum = getReactionCartoon().getShapes();
	while (shapeEnum.hasMoreElements()){
		Shape shape = (Shape)shapeEnum.nextElement();
		edu.rpi.graphdrawing.Node newNode = null;
		if (shape instanceof SpeciesContextShape){
			newNode = bb.addNode(((SpeciesContextShape)shape).getLabel());
		}
		if (shape instanceof ReactionStepShape){
			newNode = bb.addNode(((ReactionStepShape)shape).getLabel());
		}
		//
		// initialize node location to current absolute position
		//
		if (newNode!=null){
			newNode.XY(shape.getAbsLocation().x,shape.getAbsLocation().y);
			nodeShapeMap.put(newNode.label(),shape);
		}
	}

	//
	// add edges
	//
	shapeEnum = getReactionCartoon().getShapes();
	while (shapeEnum.hasMoreElements()){
		Shape shape = (Shape)shapeEnum.nextElement();
		edu.rpi.graphdrawing.Edge newEdge = null;
		if (shape instanceof ReactionParticipantShape){
			ReactionParticipantShape rpShape = (ReactionParticipantShape)shape;
			SpeciesContextShape scShape = (SpeciesContextShape)rpShape.startShape;
			ReactionStepShape rsShape = (ReactionStepShape)rpShape.endShape;
			if (rpShape instanceof ReactantShape){
				newEdge = bb.addEdge(scShape.getLabel(),rsShape.getLabel());
			}else if (rpShape instanceof ProductShape){
				newEdge = bb.addEdge(rsShape.getLabel(),scShape.getLabel());
			}else if (rpShape instanceof CatalystShape){
				newEdge = bb.addEdge(scShape.getLabel(),rsShape.getLabel());
			}else if (rpShape instanceof FluxShape){
				//
				// check if coming or going
				//
				SpeciesContext sc = scShape.getSpeciesContext();
				if (sc.getStructure() == rsShape.getReactionStep().getStructure().getParentStructure()){
					newEdge = bb.addEdge(scShape.getLabel(),rsShape.getLabel());
				}else{
					newEdge = bb.addEdge(rsShape.getLabel(),scShape.getLabel());
				}
			}
		}
		//
		// edge doesn't need any init now.
		//
		//newEdge.
	}

	bb.setArea(0,0,getGraphPane().getWidth(),getGraphPane().getHeight());
	bb.globals.D(20);
	
	bb.addEmbedder(ANNEALER,new edu.rpi.graphdrawing.Annealer(bb));
	bb.addEmbedder(CIRCULARIZER,new edu.rpi.graphdrawing.Circularizer(bb));
	bb.addEmbedder(CYCLEIZER,new edu.rpi.graphdrawing.Cycleizer(bb));
	bb.addEmbedder(FORCEDIRECT,new edu.rpi.graphdrawing.ForceDirect(bb));
	bb.addEmbedder(LEVELLER,new edu.rpi.graphdrawing.Leveller(bb));
	bb.addEmbedder(RANDOMIZER,new edu.rpi.graphdrawing.Randomizer(bb));
	bb.addEmbedder(RELAXER,new edu.rpi.graphdrawing.Relaxer(bb));
	bb.addEmbedder(STABILIZER,new edu.rpi.graphdrawing.Stabilizer(bb));

	bb.setEmbedding(layoutName);

java.util.Vector nodeList = bb.nodes();
for (int i = 0; i < nodeList.size(); i++){
	edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
System.out.println("Node "+node.label()+" @ ("+node.x()+","+node.y()+")");
}
	bb.PreprocessNodes();
	
	edu.rpi.graphdrawing.Embedder embedder = bb.embedder();
	embedder.Init();
	for (int i = 0; i < 1000; i++){
		embedder.Embed();
	}

	bb.removeDummies();
	nodeList = bb.nodes();
	//
	// calculate offset and scaling so that resulting graph fits on canvas
	//
	double lowX = 100000;
	double highX = -100000;
	double lowY = 100000;
	double highY = -100000;
	for (int i = 0; i < nodeList.size(); i++){
		edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
		lowX = Math.min(lowX,node.x());
		highX = Math.max(highX,node.x());
		lowY = Math.min(lowY,node.y());
		highY = Math.max(highY,node.y());
	}
	double scaleX = getGraphPane().getWidth()/(1.5*(highX-lowX));
	double scaleY = getGraphPane().getHeight()/(1.5*(highY-lowY));
	int offsetX = getGraphPane().getWidth()/6;
	int offsetY = getGraphPane().getHeight()/6;
	for (int i = 0; i < nodeList.size(); i++){
		edu.rpi.graphdrawing.Node node = (edu.rpi.graphdrawing.Node)nodeList.elementAt(i);
		Shape shape = (Shape)nodeShapeMap.get(node.label());
		Point parentLoc = shape.getParent().getAbsLocation();
		shape.setLocation(new Point((int)(scaleX*(node.x()-lowX))+offsetX+parentLoc.x,(int)((scaleY*(node.y()-lowY))+offsetY+parentLoc.y)));
System.out.println("Shape "+shape.getLabel()+" @ "+shape.getAbsLocation());
	}

	getGraphPane().repaint();
	saveDiagram();
}


/**
 * This method calls the glg layout library.
 * Creation date: (8/28/2002 3:44:20 PM)
 */
public void layoutGlg() throws Exception {
	//****In the case of Membranes DO as before!****
	if (getReactionCartoon().getStructure() instanceof Membrane) {
		getReactionCartoon().setRandomLayout(true);
		getGraphPane().repaint();
		saveDiagram();
		return;
	}
	//System.out.println("****************Begining of the layout code *********");
	//****For NON-membranes apply layout****
	//
	//Create graph object
	//
	com.genlogic.GraphLayout.GlgGraphLayout graph = new com.genlogic.GraphLayout.GlgGraphLayout();
	graph.SetUntangle(true); //true
	//specify dimensions for the graph! 400x400
	//System.out.println("H:"+getGraphPane().getHeight()+" W"+getGraphPane().getWidth());
	com.genlogic.GraphLayout.GlgCube graphDim = new com.genlogic.GraphLayout.GlgCube();
	com.genlogic.GraphLayout.GlgPoint newPoint = new com.genlogic.GraphLayout.GlgPoint(0,0,0);
	graphDim.p1 = newPoint;
	//newPoint = new com.genlogic.GlgPoint(getGraphPane().getWidth()-20, getGraphPane().getHeight()-10, 0);//400,400,0
	newPoint = new com.genlogic.GraphLayout.GlgPoint(1600,1600, 0);
	graphDim.p2 = newPoint;
	graph.dimensions = graphDim;

	//
	//Add nodes (Vertex) to the graph
	//
	java.util.Enumeration shapeEnum = getReactionCartoon().getShapes();
	com.genlogic.GraphLayout.GlgGraphNode graphNode;
	java.util.HashMap nodeMap = new java.util.HashMap(); 
	
	while (shapeEnum.hasMoreElements()) {
		Shape shape = (Shape)shapeEnum.nextElement();

		//add to the graph			
		if (shape instanceof SpeciesContextShape) {
			graphNode = graph.AddNode(null, 0, null);
		} else if (shape instanceof ReactionStepShape) {
			graphNode = graph.AddNode(null, 0, null);
		} else {
			continue;
		}
		
		//add to the hashmap
		nodeMap.put(shape,graphNode);
	}
	//
	//Add edges
	//
	shapeEnum = getReactionCartoon().getShapes();
	
	while (shapeEnum.hasMoreElements()) {
		Shape shape = (Shape)shapeEnum.nextElement();
		
		if (shape instanceof ReactionParticipantShape) {
			ReactionParticipantShape rpShape = (ReactionParticipantShape)shape;
			SpeciesContextShape scShape = (SpeciesContextShape)rpShape.startShape;
			ReactionStepShape rsShape =(ReactionStepShape)rpShape.endShape;

			if (rpShape instanceof ReactantShape) {
				graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(scShape),(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(rsShape),null, 0 ,null);
			} else if (rpShape instanceof ProductShape) {
				graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(rsShape),(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(scShape),null, 0 ,null);
			} else if (rpShape instanceof CatalystShape) {
				graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(scShape),(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(rsShape),null, 0 ,null);
			} else if (rpShape instanceof FluxShape) {
				//check if coming or going
				SpeciesContext sc = scShape.getSpeciesContext();
				if (sc.getStructure()== rsShape.getReactionStep().getStructure().getParentStructure()) {
					graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(scShape),(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(rsShape),null, 0 ,null);					
				} else {
					graph.AddEdge((com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(scShape),(com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(rsShape),null, 0 ,null);
				}
			} else {
				continue;
			}
		}
	}

	//
	//call layout algorithm
	//
	while (!graph.SpringIterate()) {
		;
	}
	graph.Update();

	//
	//resize and scale the graph
	//
	//com.genlogic.GlgObject edgeArray = graph.edge_array;
	java.util.Vector edgeVector = graph.edge_array;
	double distance, minDistance = Double.MAX_VALUE;
	
	for (int i = 0; i < edgeVector.size(); i++){
		com.genlogic.GraphLayout.GlgGraphEdge edge = (com.genlogic.GraphLayout.GlgGraphEdge)edgeVector.elementAt(i);
		distance = java.awt.geom.Point2D.distance(edge.start_node.display_position.x, edge.start_node.display_position.y, edge.end_node.display_position.x, edge.end_node.display_position.y);
		minDistance = distance<minDistance?distance:minDistance;
	}
	double ratio = 1.0;
	if (minDistance > 40) {
		ratio = 40.0/minDistance;
	}
	
	//
	//Update positions
	//
	shapeEnum = getReactionCartoon().getShapes();
	Point place;
	com.genlogic.GraphLayout.GlgPoint glgPoint;
	while (shapeEnum.hasMoreElements()) {
		Shape shape= (Shape)shapeEnum.nextElement();
		//test if it is contained in the nodeMap
		graphNode = (com.genlogic.GraphLayout.GlgGraphNode)nodeMap.get(shape);
		
		if (graphNode!= null) {
			glgPoint = graph.GetNodePosition(graphNode);
			//glgPoint = graphNode.display_position;
			place = new Point();
			place.setLocation(glgPoint.x*ratio+30, glgPoint.y*ratio+30);
			shape.setLocation(place);		
		}
	}	
	
	//
	//Print positions
	//
	/*System.out.println("*Positions are:");
	com.genlogic.GraphLayout.GlgCube dim = graph.dimensions;
	System.out.println("point1 x:"+ dim.p1.x +" ,Y:"+ dim.p1.y);
	System.out.println("point2 x:"+ dim.p2.x +" ,Y:"+ dim.p2.y);
	System.out.println("Iteration:"+graph.iteration);
	System.out.println("NodeCount:"+graph.node_count);
	com.genlogic.GlgObject nodeArray =graph.node_array;
	System.out.println("nodearray size"+nodeArray.GetSize());
	for (int i = 0; i < nodeArray.GetSize(); i++){
		com.genlogic.GraphLayout.GlgGraphNode node = (com.genlogic.GraphLayout.GlgGraphNode)nodeArray.GetElement(i);

		com.genlogic.GlgPoint display = node.display_position;
		System.out.println("Node "+i+":");
		System.out.println(" Display Position X:"+ display.x+" ,Y:"+ display.y);
		display = node.position;
		System.out.println(" Position X:"+ display.x+" ,Y:"+ display.y);
		System.out.println(" Anchered:"+ node.anchor);

	}*/
	//
	//	System.out.println("*************** END of the Layout code! **************");
	//
	//
	//getGraphPane().repaint();
	
	Dimension graphSize = new Dimension((int)(1600*ratio)+50,(int)(1600*ratio)+50);
	getGraphPane().setSize(graphSize);
	getGraphPane().setPreferredSize(graphSize);

	//update the window
	getGraphPane().invalidate();
	((JViewport)getGraphPane().getParent()).revalidate();
	saveDiagram();
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 3:56:54 PM)
 * @param shape cbit.vcell.graph.Shape
 * @param menuAction java.lang.String
 */
protected void menuAction(Shape shape, String menuAction) {
	//
	if(shape == null){return;}
	//	
	if (menuAction.equals(PROPERTIES_MENU_ACTION)){
		if (shape instanceof FluxReactionShape){
			showFluxReactionPropertiesDialog((FluxReactionShape)shape,shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}else if (shape instanceof SimpleReactionShape){
			showSimpleReactionPropertiesDialog((SimpleReactionShape)shape,shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}else if (shape instanceof ReactantShape){
			showReactantPropertiesDialog((ReactantShape)shape,shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}else if (shape instanceof ProductShape){
			showProductPropertiesDialog((ProductShape)shape,shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}else if (shape instanceof SpeciesContextShape){
			showEditSpeciesDialog(getGraphPane(),((SpeciesContextShape)shape).getSpeciesContext(),shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}else if (shape instanceof ReactionContainerShape){
			ReactionContainerShape rcs = (ReactionContainerShape)shape;
			if (rcs.getStructure() instanceof Feature){
				//
				// showFeaturePropertyDialog is invoked in two modes:
				//
				// 1) parent!=null and child==null
				//      upon ok, it adds a new feature to the supplied parent.
				//
				// 2) parent==null and child!=null
				//      upon ok, edits the feature name
				//
				showFeaturePropertiesDialog(getGraphPane(),(getReactionCartoon().getModel() == null?null:getReactionCartoon().getModel()),null,(Feature)rcs.getStructure(),shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
			}else if (rcs.getStructure() instanceof Membrane){
				showMembranePropertiesDialog(getGraphPane(),(Membrane)rcs.getStructure(),shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
			}			//showEditSpeciesDialog(((SpeciesContextShape)shape).getSpeciesContext(),shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
		}
		
	}else if(menuAction.equals(ADD_SPECIES_MENU_ACTION)){
		if(shape instanceof ReactionContainerShape){
			showCreateSpeciesContextDialog(getGraphPane(),getReactionCartoon().getModel(),((ReactionContainerShape)shape).getStructure(),shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()),null);
		}
	}else if(menuAction.equals(COPY_MENU_ACTION)){
		if (shape instanceof SpeciesContextShape){
			Species species = ((SpeciesContextShape)shape).getSpeciesContext().getSpecies();
			cbit.vcell.desktop.VCellTransferable.sendToClipboard(species);
		}else if (shape instanceof ReactionStepShape){
			ReactionStep[] reactionStepArr = getReactionStepArray(shape,menuAction);
			if(reactionStepArr != null){
				cbit.vcell.desktop.VCellTransferable.sendToClipboard(reactionStepArr);
			}
		}		
	}else if (menuAction.equals(PASTE_MENU_ACTION) || menuAction.equals(PASTE_NEW_MENU_ACTION)){
		if (shape instanceof ReactionContainerShape){
			//See if Species
			Species species = (Species)VCellTransferable.getFromClipboard(VCellTransferable.SPECIES_FLAVOR);
			if(species != null){
				IdentityHashMap<Species, Species> speciesHash = new IdentityHashMap<Species, Species>();
				pasteSpecies(species,getReactionCartoon().getModel(),((ReactionContainerShape)shape).getStructure(),menuAction.equals(PASTE_NEW_MENU_ACTION), speciesHash);
			}
			//See if ReactionStep[]
			ReactionStep[] reactionStepArr = (ReactionStep[])VCellTransferable.getFromClipboard(VCellTransferable.REACTIONSTEP_ARRAY_FLAVOR);
			if(reactionStepArr != null){
				try {
					pasteReactionSteps(reactionStepArr,getReactionCartoon().getModel(),((ReactionContainerShape)shape).getStructure(),menuAction.equals(PASTE_NEW_MENU_ACTION), getGraphPane());
				} catch (Exception e) {
					e.printStackTrace(System.out);
					cbit.vcell.client.PopupGenerator.showErrorDialog("Error while pasting reaction:\n" + e.getMessage());
				}
			}
		}
	}else if (menuAction.equals(DELETE_MENU_ACTION) || menuAction.equals(CUT_MENU_ACTION)){
		try {
			if (shape instanceof ReactantShape || shape instanceof ProductShape || shape instanceof CatalystShape){
				ReactionParticipant reactionParticipant = ((ReactionParticipantShape)shape).getReactionParticipant();
				ReactionStep reactionStep = reactionParticipant.getReactionStep();
				reactionStep.removeReactionParticipant(reactionParticipant);
			}
			if (shape instanceof ReactionStepShape){
				ReactionStep[] reactionStepArr = getReactionStepArray(shape,menuAction);
				if(reactionStepArr != null){
					if (menuAction.equals(CUT_MENU_ACTION)){
						VCellTransferable.sendToClipboard(reactionStepArr);
					}
				}
				for(int i = 0;i<reactionStepArr.length;i+= 1){
					getReactionCartoon().getModel().removeReactionStep(reactionStepArr[i]);
				}
			}
			if (shape instanceof SpeciesContextShape){
				getReactionCartoon().getModel().removeSpeciesContext(((SpeciesContextShape)shape).getSpeciesContext());
				if (menuAction.equals(CUT_MENU_ACTION)){
					VCellTransferable.sendToClipboard(((SpeciesContextShape)shape).getSpeciesContext().getSpecies());
				}
			}
		}catch (java.beans.PropertyVetoException e){
			cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
		}catch (Exception e){
			cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
		}
				
	}else if (menuAction.equals(ADD_ENZYME_REACTION_MENU_ACTION)){
		try{
			if(shape instanceof ReactionContainerShape){
				showReactionBrowserDialog(getReactionCartoon(),((ReactionContainerShape)shape).getStructure(),null);
			}
		}catch(Exception e){
			cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
		}
	} else if (menuAction.equals(HIGH_RES_MENU_ACTION) || menuAction.equals(MED_RES_MENU_ACTION) ||
			   menuAction.equals(LOW_RES_MENU_ACTION)) { 
		try {
			String resType = null;
			if (menuAction.equals(HIGH_RES_MENU_ACTION)) {
				resType = cbit.vcell.publish.ITextWriter.HIGH_RESOLUTION;
			} else if (menuAction.equals(MED_RES_MENU_ACTION)) {
				resType = cbit.vcell.publish.ITextWriter.MEDIUM_RESOLUTION;
			} else if (menuAction.equals(LOW_RES_MENU_ACTION)) {
				resType = cbit.vcell.publish.ITextWriter.LOW_RESOLUTION;
			}
			if(shape instanceof ReactionContainerShape){
				showSaveReactionImageDialog(((ReactionContainerShape)shape).getStructure(), resType);
			}
		} catch(Exception e) {
			cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
		}
	}else if(menuAction.equals(ANNOTATE_MENU_ACTION)){
		if(shape instanceof ReactionStepShape){
			//MIRIAMHelper.showMIRIAMAnnotationDialog(((SimpleReactionShape)shape).getReactionStep());
			//System.out.println("Menu action annotate activated...");
			ReactionStep rs = ((ReactionStepShape)shape).getReactionStep();
			try{
				String newAnnotation = org.vcell.util.gui.DialogUtils.showAnnotationDialog(getGraphPane(), rs.getAnnotation());
				rs.setAnnotation(newAnnotation);
			}catch(org.vcell.util.gui.UtilCancelException e){
				//Do Nothing
			}catch (Throwable exc) {
				exc.printStackTrace(System.out);
				PopupGenerator.showErrorDialog(getGraphPane(), "Failed to edit annotation!\n"+exc.getMessage());
			}
//			javax.swing.JTextArea jta = new javax.swing.JTextArea(rs.getAnnotation(),10,40);
//			javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
//			javax.swing.JOptionPane.showMessageDialog(getGraphPane(),jsp,"Edit Reaction Annotation",javax.swing.JOptionPane.PLAIN_MESSAGE);
//			String result = jta.getText();
//			if((result != null) && (result.length() == 0)){
//				result = null;
//			}
//			if(!Compare.isEqualOrNull(result, rs.getAnnotation())){
//				rs.setAnnotation(result);
//			}
		}
	}else{
		//
		// default action is to ignore
		//
		System.out.println("unsupported menu action '"+menuAction+"' on shape '"+shape+"'");
	}

}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseClicked(java.awt.event.MouseEvent event) {
	
	java.awt.Point screenPoint = new java.awt.Point(event.getX(),event.getY());
	java.awt.Point worldPoint = screenToWorld(screenPoint);

	try {
		//
		// if right mouse button, then do popup menu
		//
		if ((event.getModifiers() & (MouseEvent.BUTTON2_MASK | MouseEvent.BUTTON3_MASK)) != 0){
			return;
		}
		switch (mode) {
			case SELECT_MODE: {
				if (event.getClickCount()==2){
					Shape selectedShape = getReactionCartoon().getSelectedShape();
					if (selectedShape != null){
						menuAction(selectedShape,PROPERTIES_MENU_ACTION);
						//if(selectedShape instanceof SpeciesContextShape){
							//showEditSpeciesDialog(((SpeciesContextShape)selectedShape).getSpeciesContext(),worldPoint);
						//}else if(selectedShape instanceof SimpleReactionShape){
							//showSimpleReactionPropertiesDialog((SimpleReactionShape)selectedShape,worldPoint);
						//}else if(selectedShape instanceof FluxReactionShape){
							//showFluxReactionPropertiesDialog((FluxReactionShape)selectedShape,worldPoint);
						//}else if(selectedShape instanceof ProductShape){
							//showProductPropertiesDialog((ProductShape)selectedShape,worldPoint);
						//}else if(selectedShape instanceof ReactantShape){
							//showReactantPropertiesDialog((ReactantShape)selectedShape,worldPoint);
						//}
						//selectedShape.showPropertiesDialog(desktop, selectedShape.getLocationOnScreen());
					}
				}
				//else{
		//boolean bShift = (event.getModifiers() & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK;
		//boolean bCntrl = (event.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK;
		//selectEventFromWorld(worldPoint,bShift,bCntrl);
				//}	
				break;		
			}	
			case STEP_MODE: {
				Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);	
			
				if (pickedShape instanceof ReactionContainerShape){
					Structure structure = ((ReactionContainerShape)pickedShape).getStructure();
					if (structure == getReactionCartoon().getStructure()){
						String newReactionStepName = getReactionCartoon().getModel().getFreeReactionStepName();
						ReactionStep reactionStep = new SimpleReaction(structure,newReactionStepName);
						getReactionCartoon().getModel().addReactionStep(reactionStep);
						ReactionStepShape rsShape = (ReactionStepShape)getReactionCartoon().getShapeFromModelObject(reactionStep);
						Point parentLocation = rsShape.getParent().getAbsLocation();
						rsShape.setLocation(new Point(worldPoint.x-parentLocation.x,worldPoint.y-parentLocation.y));
						saveDiagram();
						//setMode(SELECT_MODE);
					}else{
						// adding flux step to feature compartment within Membrane panel (ignore)
					}
				}
				break;
			}	
			case FLUX_MODE: {
				Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);	
			
				if (pickedShape instanceof ReactionContainerShape){
					Structure structure = ((ReactionContainerShape)pickedShape).getStructure();
					if (structure instanceof Membrane){
						Membrane membrane = (Membrane)structure;
						String newFluxReactionName = getReactionCartoon().getModel().getFreeFluxReactionName();
						FluxReaction fluxReaction = new FluxReaction(membrane,null,null,newFluxReactionName);
						getReactionCartoon().getModel().addReactionStep(fluxReaction);
						ReactionStepShape frShape = (ReactionStepShape)getReactionCartoon().getShapeFromModelObject(fluxReaction);
						Point parentLocation = frShape.getParent().getAbsLocation();
						frShape.setLocation(new Point(worldPoint.x-parentLocation.x,worldPoint.y-parentLocation.y));
						saveDiagram();
						//setMode(SELECT_MODE);
						Shape shape = getReactionCartoon().getShapeFromModelObject(fluxReaction);
						showFluxReactionPropertiesDialog((FluxReactionShape)shape, shape.getLocationOnScreen(getGraphPane().getLocationOnScreen()));
					}else{
//						setMode(SELECT_MODE);
//						throw new Exception("fluxes only applicable to membranes");
					}
				}
				break;
			}	
			case SPECIES_MODE: {
				Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);	
			
				if (pickedShape instanceof ReactionContainerShape){
					if (false){
						Model model = getReactionCartoon().getModel();
						Point parentLocation = pickedShape.getAbsLocation();
						cbit.vcell.model.Species newSpecies = new cbit.vcell.model.Species(model.getFreeSpeciesName(),null);
						model.addSpecies(newSpecies);
						cbit.vcell.model.SpeciesContext newSpeciesContext = new cbit.vcell.model.SpeciesContext(newSpecies,((ReactionContainerShape)pickedShape).getStructure());
						model.addSpeciesContext(newSpeciesContext);
						Shape scShape = getReactionCartoon().getShapeFromModelObject(newSpeciesContext);
						scShape.setLocation(new Point(worldPoint.x-parentLocation.x,worldPoint.y-parentLocation.y));
						saveDiagram();
					}else{
						Point parentLocation = pickedShape.getAbsLocation();
						Point scShapeLocation = new Point(worldPoint.x-parentLocation.x,worldPoint.y-parentLocation.y);
						showCreateSpeciesContextDialog(getGraphPane(),getReactionCartoon().getModel(),((ReactionContainerShape)pickedShape).getStructure(),pickedShape.getLocationOnScreen(getGraphPane().getLocationOnScreen()),scShapeLocation);
					}
				}
			}
			default:
				break;
		}	
	}catch (Exception e){
		System.out.println("CartoonTool.mouseClicked: uncaught exception");
		e.printStackTrace(System.out);
		Point canvasLoc = getGraphPane().getLocationOnScreen();
		canvasLoc.x += screenPoint.x;
		canvasLoc.y += screenPoint.y;
		cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
	}				
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseDragged(java.awt.event.MouseEvent event) {
	
	if ((event.getModifiers() & (MouseEvent.BUTTON2_MASK | MouseEvent.BUTTON3_MASK)) != 0){
		return;
	}
	boolean bShift = (event.getModifiers() & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK;
	boolean bCntrl = (event.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK;
	//
	try {
		switch (mode){
			case SELECT_MODE: {
				java.awt.Point worldPoint = screenToWorld(event.getX(),event.getY());
				if (bMoving){
					Shape selectedShapes[] = getReactionCartoon().getAllSelectedShapes();
					//
					// constrain to stay within the corresponding parent for the "movingShape" as well as all other selected (hence moving) shapes.
					//
					Point movingParentLoc = movingShape.getParent().getAbsLocation();
					Dimension movingParentSize = movingShape.getParent().getSize();
					worldPoint.x = Math.max(movingOffsetWorld.x+movingParentLoc.x,Math.min(movingOffsetWorld.x+movingParentLoc.x+movingParentSize.width-movingShape.getSize().width, worldPoint.x));
					worldPoint.y = Math.max(movingOffsetWorld.y+movingParentLoc.y,Math.min(movingOffsetWorld.x+movingParentLoc.y+movingParentSize.height-movingShape.getSize().height, worldPoint.y));
					for (int i = 0; selectedShapes!=null && i < selectedShapes.length; i++){
						if (selectedShapes[i]!=movingShape){
							Point selectedParentLoc = selectedShapes[i].getParent().getAbsLocation();
							Dimension selectedParentSize = selectedShapes[i].getParent().getSize();
							int selectedMovingOffsetX = movingOffsetWorld.x + (movingShape.getAbsLocation().x-selectedShapes[i].getAbsLocation().x);
							int selectedMovingOffsetY = movingOffsetWorld.y + (movingShape.getAbsLocation().y-selectedShapes[i].getAbsLocation().y);
							worldPoint.x = Math.max(selectedMovingOffsetX+selectedParentLoc.x,Math.min(selectedMovingOffsetX+selectedParentLoc.x+selectedParentSize.width-selectedShapes[i].getSize().width, worldPoint.x));
							worldPoint.y = Math.max(selectedMovingOffsetY+selectedParentLoc.y,Math.min(selectedMovingOffsetY+selectedParentLoc.y+selectedParentSize.height-selectedShapes[i].getSize().height, worldPoint.y));
						}
					}

					getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
					Point newMovingPoint = new Point(worldPoint.x-movingOffsetWorld.x,worldPoint.y-movingOffsetWorld.y);
					int deltaX = newMovingPoint.x - movingPointWorld.x;
					int deltaY = newMovingPoint.y - movingPointWorld.y;
					movingPointWorld = newMovingPoint;
					movingShape.setLocation(new Point(movingPointWorld.x-movingParentLoc.x,movingPointWorld.y-movingParentLoc.y));
					//
					// for any other "movable" shapes that are selected, move them also
					//
					for (int i = 0; selectedShapes!=null && i < selectedShapes.length; i++){
						if (selectedShapes[i]!=movingShape){
							selectedShapes[i].setLocation(new Point(selectedShapes[i].getLocation().x + deltaX, selectedShapes[i].getLocation().y + deltaY));
						}
					}
					getGraphPane().invalidate();
					((JViewport)getGraphPane().getParent()).revalidate();
					getGraphPane().repaint();
				}else if (bRectStretch){
					//
					// constain to stay within parent
					//
					Point parentLoc = rectShape.getParent().getAbsLocation();
					Dimension parentSize = rectShape.getParent().getSize();
					worldPoint.x = Math.max(1,Math.min(parentSize.width-1,worldPoint.x-parentLoc.x)) + parentLoc.x;
					worldPoint.y = Math.max(1,Math.min(parentSize.height-1,worldPoint.y-parentLoc.y)) + parentLoc.y;
					getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
					//getGraphPane().repaint();
					Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
					java.awt.geom.AffineTransform oldTransform = g.getTransform();
					g.scale(0.01*getReactionCartoon().getZoomPercent(),0.01*getReactionCartoon().getZoomPercent());
					g.setXORMode(Color.white);
					rectShape.setEnd(endPointWorld);
					rectShape.paint(g,0,0);
					endPointWorld = worldPoint;
					rectShape.setEnd(endPointWorld);
					rectShape.paint(g,0,0);
					g.setTransform(oldTransform);
				}else{
					Shape shape = (getGraphModel().getSelectedShape() != null?getGraphModel().getSelectedShape():getReactionCartoon().pickWorld(worldPoint));
					if (!bCntrl && !bShift && (shape instanceof SpeciesContextShape || shape instanceof ReactionStepShape)){
						bMoving=true;
						movingShape = shape;
						movingPointWorld = shape.getAbsLocation();
						movingOffsetWorld = new Point(worldPoint.x-movingPointWorld.x,worldPoint.y-movingPointWorld.y);
					}else if (shape instanceof ReactionContainerShape || bShift || bCntrl){
						bRectStretch = true;
						endPointWorld = new Point(worldPoint.x+1,worldPoint.y+1);
				 		rectShape = new RubberBandRectShape(worldPoint,endPointWorld,getReactionCartoon());
						rectShape.setEnd(endPointWorld);
						if(!(shape instanceof ReactionContainerShape)){
							shape.getParent().addChildShape(rectShape);
						}else{
							shape.addChildShape(rectShape);
						}
						Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
						java.awt.geom.AffineTransform oldTransform = g.getTransform();
						g.scale(0.01*getReactionCartoon().getZoomPercent(),0.01*getReactionCartoon().getZoomPercent());
						g.setXORMode(Color.white);
						rectShape.paint(g,0,0);
						g.setTransform(oldTransform);
					}		
				}		
				break;
			}
			case LINE_MODE: {
				int x = event.getX();
				int y = event.getY();
				java.awt.Point screenPoint = new java.awt.Point(x,y);
				java.awt.Point worldPoint = new java.awt.Point((int)(x*100.0/getReactionCartoon().getZoomPercent()),(int)(y*100.0/getReactionCartoon().getZoomPercent()));
				if (bLineStretch){
					//
					// repaint last location with XOR
					//
					Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
					g.setXORMode(Color.white);
					edgeShape.setEnd(endPointWorld);
					java.awt.geom.AffineTransform oldTransform = g.getTransform();
					g.scale(getReactionCartoon().getZoomPercent()*0.01,getReactionCartoon().getZoomPercent()*0.01);
					edgeShape.paint_NoAntiAlias(g,0,0);
					g.setTransform(oldTransform);

					//
					// set label and color for line depending on attachment area on ReactionStepShape
					//
					SpeciesContext speciesContext = (SpeciesContext)edgeShape.getStartShape().getModelObject();
					int lineType = getLineTypeFromWorld(speciesContext,worldPoint);
					edgeShape.setLabel(lineLabels[lineType]);
					edgeShape.forgroundColor = lineColors[lineType];
					getGraphPane().setCursor(lineCursors[lineType]);
					
					//
					// move line and paint with XOR
					//
					endPointWorld = worldPoint;
					edgeShape.setEnd(worldPoint);
					oldTransform = g.getTransform();
					g.scale(getReactionCartoon().getZoomPercent()*0.01,getReactionCartoon().getZoomPercent()*0.01);
					edgeShape.paint_NoAntiAlias(g,0,0);
					g.setTransform(oldTransform);
				}else{
					if (edgeShape != null){
						return;
					}	
					Shape startShape = getReactionCartoon().pickWorld(worldPoint);
					if (startShape instanceof SpeciesContextShape){
						SpeciesContextShape speciesContextShape = (SpeciesContextShape)startShape;
						bLineStretch = true;
						endPointWorld = worldPoint;
				 		edgeShape = new RubberBandEdgeShape(speciesContextShape,null,getReactionCartoon());
						edgeShape.setEnd(worldPoint);
						Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
						g.setXORMode(Color.white);
						java.awt.geom.AffineTransform oldTransform = g.getTransform();
						g.scale(getReactionCartoon().getZoomPercent()*0.01,getReactionCartoon().getZoomPercent()*0.01);
						edgeShape.paint(g,0,0);
						g.setTransform(oldTransform);
					}	
				}		
				break;
			}
			default: {
				break;
			}
		}		
	}catch (Exception e){
		System.out.println("CartoonTool.mouseDragged: uncaught exception");
		e.printStackTrace(System.out);
	}			
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mousePressed(java.awt.event.MouseEvent event) {
	//
	if(getReactionCartoon() == null){return;}
	try {
		//
		int eventX = event.getX();
		int eventY = event.getY();
		java.awt.Point screenPoint = new java.awt.Point(eventX,eventY);
		java.awt.Point worldPoint = new java.awt.Point((int)(eventX*100.0/getReactionCartoon().getZoomPercent()),(int)(eventY*100.0/getReactionCartoon().getZoomPercent()));
		//
		//Always select with MousePress
		//
		boolean bShift = (event.getModifiers() & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK;
		boolean bCntrl = (event.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK;
		if(mode == SELECT_MODE || (event.getModifiers() & MouseEvent.BUTTON1_MASK) != 0){
			selectEventFromWorld(worldPoint,bShift,bCntrl);
		}
		//
		// if mouse popupMenu event, popup menu
		if (event.isPopupTrigger() && mode == SELECT_MODE){
			popupMenu(getReactionCartoon().getSelectedShape(),eventX,eventY);
			return;
		}
	}catch (Exception e){
		System.out.println("CartoonTool.mousePressed: uncaught exception");
		e.printStackTrace(System.out);
	}				
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseReleased(java.awt.event.MouseEvent event) {
	//
	if(getReactionCartoon() == null){return;}
	//
	try {
		//Pick shape
		int eventX = event.getX();
		int eventY = event.getY();
		java.awt.Point screenPoint = new java.awt.Point(eventX,eventY);
		java.awt.Point worldPoint = new java.awt.Point((int)(eventX*100.0/getReactionCartoon().getZoomPercent()),(int)(eventY*100.0/getReactionCartoon().getZoomPercent()));
		Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);
		//
		// if mouse popupMenu event, popup menu
		//
		if (event.isPopupTrigger() && mode == SELECT_MODE){
			////boolean bShift = (event.getModifiers() & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK;
			////boolean bCntrl = (event.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK;
			////selectEventFromWorld(worldPoint,bShift,bCntrl);
			//if(pickedShape == getReactionCartoon().getSelectedShape()){
				popupMenu(getReactionCartoon().getSelectedShape(),event.getX(),event.getY());
			//}
			////popupMenu(pickedShape,event.getX(),event.getY());
			return;
		}
		//
		if ((event.getModifiers() & (MouseEvent.BUTTON2_MASK | MouseEvent.BUTTON3_MASK)) != 0){
			return;
		}
		//
		// else do select and move
		//
		switch (mode){
			case SELECT_MODE:{
				getGraphPane().setCursor(Cursor.getDefaultCursor());
				//int x = event.getX();
				//int y = event.getY();
				if (bMoving){
					getGraphPane().invalidate();
					((JViewport)getGraphPane().getParent()).revalidate();
					getGraphPane().repaint();
					saveDiagram();
				}else if (bRectStretch){
					Point absLoc = rectShape.getLocation();
					Dimension size = rectShape.getSize();
					//
					// remove temporary rectangle
					//
					getReactionCartoon().removeShape(rectShape);
					rectShape = null;
					Rectangle rect = new Rectangle(absLoc.x,absLoc.y,size.width,size.height);
					boolean bShift = (event.getModifiers() & InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK;
					boolean bCntrl = (event.getModifiers() & InputEvent.CTRL_MASK) == InputEvent.CTRL_MASK;
					selectEventFromWorld(rect,bShift,bCntrl);
					getGraphPane().repaint();
				}
				bMoving=false;
				movingShape=null;
				bRectStretch=false;
				rectShape=null;
				break;
			}
			case LINE_MODE: {
				getGraphPane().setCursor(Cursor.getDefaultCursor());
				//int x = event.getX();
				//int y = event.getY();
				//java.awt.Point screenPoint = new java.awt.Point(x,y);
				//java.awt.Point worldPoint = new java.awt.Point((int)(x*100.0/cartoon.getZoomPercent()),(int)(y*100.0/cartoon.getZoomPercent()));
				//Shape shape = cartoon.pickWorld(worldPoint);
				if (bLineStretch){
					bLineStretch = false;
					//
					// set label and color for line depending on attachment area on ReactionStepShape
					//
					SpeciesContext speciesContext = (SpeciesContext)edgeShape.getStartShape().getModelObject();
					int lineType = getLineTypeFromWorld(speciesContext,worldPoint);

					//
					// remove temporary edge
					//
					getReactionCartoon().removeShape(edgeShape);
					edgeShape = null;
					
					if (pickedShape instanceof SimpleReactionShape){
						SimpleReaction simpleReaction = (SimpleReaction)pickedShape.getModelObject();
						//
						// add reactionParticipant to model
						//
						switch (lineType){
							case LINE_TYPE_CATALYST:{
								simpleReaction.addCatalyst(speciesContext);
								getReactionCartoon().notifyChangeEvent();
								setMode(SELECT_MODE);
								break;
							}
							case LINE_TYPE_REACTANT:{
								simpleReaction.addReactant(speciesContext,1);
								getReactionCartoon().notifyChangeEvent();
								setMode(SELECT_MODE);
								break;
							}
							case LINE_TYPE_PRODUCT:{
								simpleReaction.addProduct(speciesContext,1);
								getReactionCartoon().notifyChangeEvent();
								setMode(SELECT_MODE);
								break;
							}
							case LINE_TYPE_NULL:{
								getGraphPane().repaint();
								break;
							}
						}
					}else if (pickedShape instanceof FluxReactionShape){
						FluxReaction fluxReaction = (FluxReaction)pickedShape.getModelObject();
						//
						// add reactionParticipant to model
						//
						switch (lineType){
							case LINE_TYPE_CATALYST:{
								fluxReaction.addCatalyst(speciesContext);
								getReactionCartoon().notifyChangeEvent();
								setMode(SELECT_MODE);
								break;
							}
							case LINE_TYPE_FLUX:{
								//
								// assure that there are the appropriate speciesContexts
								//
								Membrane membrane = (Membrane)fluxReaction.getStructure();
								Feature feature = membrane.getOutsideFeature();
								SpeciesContext sc = reactionCartoon.getModel().getSpeciesContext(speciesContext.getSpecies(),feature);
								if (sc==null){
									reactionCartoon.getModel().addSpeciesContext(speciesContext.getSpecies(),feature);
								}	
								feature = membrane.getInsideFeature();
								sc = reactionCartoon.getModel().getSpeciesContext(speciesContext.getSpecies(),feature);
								if (sc==null){
									reactionCartoon.getModel().addSpeciesContext(speciesContext.getSpecies(),feature);
								}	

								fluxReaction.setFluxCarrier(speciesContext.getSpecies(),reactionCartoon.getModel());
								getReactionCartoon().notifyChangeEvent();
								setMode(SELECT_MODE);
								break;
							}
							case LINE_TYPE_NULL:{
								getGraphPane().repaint();
								break;
							}
						}
					}else{
						getGraphPane().repaint();
					}
				}
				break;
			}
			default:{
				break;
			}
		}
	}catch (Exception e){
		System.out.println("CartoonTool.mouseReleased: uncaught exception");
		e.printStackTrace(System.out);
	}			
		
}


/**
 * This method was created in VisualAge.
 */
public void saveDiagram() throws Exception {
	getReactionCartoon().setPositionsFromReactionCartoon(getReactionCartoon().getModel().getDiagram(getReactionCartoon().getStructure()));
}


/**
 * This method was created by a SmartGuide.
 * @param x int
 * @param y int
 */
private void selectEventFromWorld(Point worldPoint, boolean bShift, boolean bCntrl) {
	//
	if(getReactionCartoon() == null){return;}
	//
	if (!bShift && !bCntrl){
		//
		Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);
		//
		if (pickedShape == null || !pickedShape.isSelected()){
			getReactionCartoon().clearSelection();
		}
		if (pickedShape != null && pickedShape.isSelected()){
			return;
		}
		if(pickedShape != null){
			getReactionCartoon().select(pickedShape);
		}

	}else if (bShift){
		Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);
		if (pickedShape==null){
			return;
		}
		if (pickedShape instanceof ReactionContainerShape){
			return;
		}
		if(getReactionCartoon().getSelectedShape() instanceof ReactionContainerShape){
			getReactionCartoon().clearSelection();
		}
		getReactionCartoon().select(pickedShape);
	}else if (bCntrl){
		Shape pickedShape = getReactionCartoon().pickWorld(worldPoint);
		if (pickedShape==null){
			return;
		}
		if (pickedShape instanceof ReactionContainerShape){
			return;
		}
		if (pickedShape.isSelected()){
			getReactionCartoon().deselect(pickedShape);
		}else{
			getReactionCartoon().select(pickedShape);
		}
	}
}


/**
 * This method was created in VisualAge.
 * @param rect java.awt.Rectangle
 * @param bShift boolean
 * @param bCntrl boolean
 */
private void selectEventFromWorld(Rectangle rect, boolean bShift, boolean bCntrl) {
	if (!bShift && !bCntrl){
		getReactionCartoon().clearSelection();
		Shape shapes[] = getReactionCartoon().pickWorld(rect);
		for (int i = 0; i < shapes.length; i++){
			if (shapes[i] instanceof ElipseShape){
				getReactionCartoon().select(shapes[i]);
			}
		}
	}else if (bShift){
		if(getReactionCartoon().getSelectedShape() instanceof ReactionContainerShape){
			getReactionCartoon().clearSelection();
		}
		Shape shapes[] = getReactionCartoon().pickWorld(rect);
		for (int i = 0; i < shapes.length; i++){
			if (shapes[i] instanceof ElipseShape){
				getReactionCartoon().select(shapes[i]);
			}
		}
	}else if (bCntrl){
		if(getReactionCartoon().getSelectedShape() instanceof ReactionContainerShape){
			getReactionCartoon().clearSelection();
		}
		Shape shapes[] = getReactionCartoon().pickWorld(rect);
		for (int i = 0; i < shapes.length; i++){
			if (shapes[i] instanceof ElipseShape){
				if (shapes[i].isSelected()){
					getReactionCartoon().deselect(shapes[i]);
				}else{
					getReactionCartoon().select(shapes[i]);
				}
			}
		}
	}
}


/**
 * Insert the method's description here.
 * Creation date: (5/14/2003 10:51:54 AM)
 * @param newReactionCartoon cbit.vcell.graph.ReactionCartoon
 */
public void setReactionCartoon(ReactionCartoon newReactionCartoon) {
	reactionCartoon = newReactionCartoon;
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 3:47:34 PM)
 * @return boolean
 * @param shape cbit.vcell.graph.Shape
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuAction(Shape shape, String menuAction) {
	
	if (menuAction.equals(ANNOTATE_MENU_ACTION)){
		if (shape instanceof ReactionStepShape){
			return true;
		}
	}
	if (menuAction.equals(COPY_MENU_ACTION)){
		if (shape instanceof SpeciesContextShape ||
			shape instanceof ReactionStepShape){
			return true;
		}
	}
	if (menuAction.equals(PASTE_MENU_ACTION) || menuAction.equals(PASTE_NEW_MENU_ACTION)){
		if (shape instanceof ReactionContainerShape){
			return true;
		}
	}
	if (menuAction.equals(DELETE_MENU_ACTION)){
		if (shape instanceof ReactionStepShape ||
			shape instanceof ReactantShape || 
			shape instanceof ProductShape || 
			shape instanceof CatalystShape){
			return true;
		}
	}
	if (menuAction.equals(CUT_MENU_ACTION)){
		if (shape instanceof SpeciesContextShape ||
			shape instanceof ReactionStepShape){
			return true;
		}
	}

	if (menuAction.equals(ADD_SPECIES_MENU_ACTION)){
		if (shape instanceof ReactionContainerShape){
			return true;
		}
	}
	if (menuAction.equals(ADD_ENZYME_REACTION_MENU_ACTION)){
		if (shape instanceof ReactionContainerShape){
			return true;
		}
	}

	if (menuAction.equals(HIGH_RES_MENU_ACTION) || menuAction.equals(MED_RES_MENU_ACTION) ||
		menuAction.equals(LOW_RES_MENU_ACTION)) {       
		if (shape instanceof ReactionContainerShape){
			return true;
		}
	}
	if (menuAction.equals(PROPERTIES_MENU_ACTION)){
		if (shape instanceof ReactionStepShape || 
			shape instanceof SpeciesContextShape || 
			shape instanceof ReactantShape || 
			shape instanceof ProductShape || 
			shape instanceof CatalystShape ||
			shape instanceof ReactionContainerShape){
			return true;
		}
	}
	return false;
}


/**
 * Insert the method's description here.
 * Creation date: (5/9/2003 9:11:06 AM)
 * @return boolean
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuActionEnabled(Shape shape, java.lang.String menuAction) {

	if(menuAction.equals(PROPERTIES_MENU_ACTION)){
		if(shape instanceof CatalystShape){
			return false;
		}
	}
	if (menuAction.equals(ADD_ENZYME_REACTION_MENU_ACTION)){
		if (!(shape instanceof ReactionContainerShape) ||
			!shape.getModelObject().equals(getReactionCartoon().getStructure())){
			return false;
		}
	}
	if (shape instanceof ReactionContainerShape){
		boolean bPasteNew = menuAction.equals(PASTE_NEW_MENU_ACTION);
		boolean bPaste = menuAction.equals(PASTE_MENU_ACTION);
		if(bPaste || bPasteNew){
			//Paste if there is a species on the system clipboard and it doesn't exist in structure
			Species species = (Species)VCellTransferable.getFromClipboard(VCellTransferable.SPECIES_FLAVOR);
			if(species != null){
				if(getReactionCartoon().getModel().contains(species)) {
					if (getReactionCartoon().getModel().getSpeciesContext(species,((ReactionContainerShape)shape).getStructure()) != null) {
						return bPasteNew ? true : false;
					} else {
						return bPasteNew ? false : true;
					}
				} else {
					return bPasteNew ? false : true;
				}
			}
			//Paste if there is a ReactionStepArr on the system clipboard and structure types match
			ReactionStep[] reactionStepArr = (ReactionStep[])VCellTransferable.getFromClipboard(VCellTransferable.REACTIONSTEP_ARRAY_FLAVOR);
			if(reactionStepArr != null){
				Structure targetStructure = ((ReactionContainerShape)shape).getStructure();
				for(int i=0;i<reactionStepArr.length;i+= 1){
					if(!reactionStepArr[i].getStructure().getClass().equals(targetStructure.getClass())){
						return false;
					}
				}
				return true;
			}
			
			return false;
		}
	}

	return true;
}


/**
 * This method was created by a SmartGuide.
 */
public void showFluxReactionPropertiesDialog(FluxReactionShape fluxReactionShape, java.awt.Point location) {
	if(getReactionCartoon() == null){
		return;
	}
	FluxReaction_Dialog fluxReaction_Dialog = new FluxReaction_Dialog((Frame)null,true);
	fluxReaction_Dialog.init(fluxReactionShape.getFluxReaction(), getReactionCartoon().getModel());
	fluxReaction_Dialog.setTitle("Flux Reaction Editor");
	org.vcell.util.BeanUtils.centerOnScreen(fluxReaction_Dialog);
	ZEnforcer.showModalDialogOnTop(fluxReaction_Dialog, getGraphPane());
	//fluxReaction_Dialog.show();
	//
	// update in case of name change (should really be a listener)
	//
	fluxReactionShape.refreshLabel();
	getReactionCartoon().fireGraphChanged();
}


/**
 * This method was created by a SmartGuide.
 */
public void showProductPropertiesDialog(ProductShape productShape, java.awt.Point location) {
	if(getReactionCartoon() == null || getDialogOwner(getGraphPane()) == null){
		return;
	}
	Product product = (Product)productShape.getModelObject();
	String typed = JOptionPane.showInputDialog(getDialogOwner(getGraphPane()), "Current stoichiometry is: " + product.getStoichiometry(), "Input stoichiometry", JOptionPane.QUESTION_MESSAGE);
	if (typed != null) {
		try {
			product.setStoichiometry(Integer.parseInt(typed));
			productShape.refreshLabel();
			getReactionCartoon().fireGraphChanged();
		} catch (NumberFormatException exc) {
			JOptionPane.showMessageDialog(getDialogOwner(getGraphPane()), "You did not type a valid number", "Error:", JOptionPane.ERROR_MESSAGE);
		}
	}
}


/**
 * This method was created by a SmartGuide.
 */
public void showReactantPropertiesDialog(ReactantShape reactantShape, java.awt.Point location) {
	if(getReactionCartoon() == null || getDialogOwner(getGraphPane()) == null){
		return;
	}
	Reactant reactant = (Reactant)reactantShape.getModelObject();
	String typed = JOptionPane.showInputDialog(getDialogOwner(getGraphPane()), "Current stoichiometry is: " + reactant.getStoichiometry(), "Input stoichiometry", JOptionPane.QUESTION_MESSAGE);
	if (typed != null) {
		try {
			reactant.setStoichiometry(Integer.parseInt(typed));
			reactantShape.refreshLabel();
			getReactionCartoon().fireGraphChanged();
		} catch (NumberFormatException exc) {
			JOptionPane.showMessageDialog(getDialogOwner(getGraphPane()), "You did not type a valid number", "Error:", JOptionPane.ERROR_MESSAGE);
		}
	}
}


/**
 * This method was created by a SmartGuide.
 */
public void showReactionBrowserDialog(ReactionCartoon sCartoon, Structure struct,java.awt.Point location) throws Exception{
	if(getReactionCartoon() == null || getDocumentManager() == null || getDialogOwner(getGraphPane()) == null){
		return;
	}
	JInternalFrameEnhanced jif = new JInternalFrameEnhanced("Create Reaction within structure '"+struct.getName()+"'",true,true);
	cbit.vcell.model.gui.DBReactionWizardPanel dbrqWiz = new cbit.vcell.model.gui.DBReactionWizardPanel();
	dbrqWiz.setModel(getReactionCartoon().getModel());
	dbrqWiz.setStructure(struct);
	dbrqWiz.setDocumentManager(getDocumentManager());
	jif.setContentPane(dbrqWiz);
	
	//cbit.vcell.model.gui.DBReactionQueryDialog dbReactionQueryDialog = new cbit.vcell.model.gui.DBReactionQueryDialog("Create Reaction within structure "+struct,true);
	//dbReactionQueryDialog.setModel(getReactionCartoon().getModel());
	//dbReactionQueryDialog.setStructure(struct);
	//dbReactionQueryDialog.setDocumentManager(getDocumentManager());
	//dbReactionQueryDialog.setTitle("Create Reaction within structure "+struct);
	if(location != null){
		jif.setLocation(location);
	}
	getDialogOwner(getGraphPane()).add(jif, JDesktopPane.MODAL_LAYER);
	jif.pack();
	org.vcell.util.BeanUtils.centerOnComponent(jif, getDialogOwner(getGraphPane()));
	jif.show();
}


//TO DO: allow user preferences for directory selection. 
	public void showSaveReactionImageDialog(Structure struct, String resLevel) throws Exception {

		if (struct == null || getReactionCartoon().getModel() == null) {             //or throw exception?
			System.err.println("Insufficient params for generating reactions image.");
			return;
		}
		if (resLevel == null) {                                //default resolution.
			resLevel = cbit.vcell.publish.ITextWriter.HIGH_RESOLUTION;
		}
		Model model = getReactionCartoon().getModel();
		System.out.println("Processing save as Image request for: " + struct.getName() + " " + model.getName() + "(" + resLevel + ")");
		//set file filter
		org.vcell.util.SimpleFilenameFilter gifFilter = new org.vcell.util.SimpleFilenameFilter("gif");
		final java.io.File defaultFile = new java.io.File(model.getName() + "_" + struct.getName() + ".gif");
		cbit.vcell.client.server.ClientServerManager csm = (cbit.vcell.client.server.ClientServerManager)getDocumentManager().getSessionManager();
		cbit.vcell.client.server.UserPreferences userPref = csm.getUserPreferences();
		String defaultPath = userPref.getGenPref(cbit.vcell.client.server.UserPreferences.GENERAL_LAST_PATH_USED);
		org.vcell.util.gui.VCFileChooser fileChooser = new org.vcell.util.gui.VCFileChooser(defaultPath);
		fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		fileChooser.setMultiSelectionEnabled(false);
		fileChooser.addChoosableFileFilter(gifFilter);
		fileChooser.setSelectedFile(defaultFile);
		fileChooser.setDialogTitle("Save Image As...");
		//a hack to fix the jdk 1.2 problem (?) of losing the selected file name once the user changes the directory.
		class FileChooserFix implements java.beans.PropertyChangeListener {
			public void propertyChange(java.beans.PropertyChangeEvent ev) {    
				JFileChooser chooser = (JFileChooser)ev.getSource();       
				if (JFileChooser.DIRECTORY_CHANGED_PROPERTY.equals(ev.getPropertyName())) {      
					java.io.File directory = (java.io.File)ev.getNewValue(); 
					chooser.setSelectedFile(defaultFile);     
				}  
			} 
		}
		fileChooser.addPropertyChangeListener(new FileChooserFix());
		//process user input
		if (fileChooser.showSaveDialog(getDialogOwner(getGraphPane())) == JFileChooser.APPROVE_OPTION) {
			java.io.File selectedFile = fileChooser.getSelectedFile();
			if (selectedFile != null) {
				if (selectedFile.exists()) {
					int question = javax.swing.JOptionPane.showConfirmDialog(getDialogOwner(getGraphPane()), 
																			 "Overwrite file: " + selectedFile.getPath() + "?");
					if (question == javax.swing.JOptionPane.NO_OPTION || question == javax.swing.JOptionPane.CANCEL_OPTION) {
						return;
					}
				}
				//System.out.println("Saving reactions image to file: " + selectedFile.toString());
				getDocumentManager().generateReactionsImage(model, struct, resLevel, new java.io.FileOutputStream(selectedFile));
				//reset the user preference for the default path, if needed.
		        String newPath = selectedFile.getParent();
		        if (!newPath.equals(defaultPath)) {
					userPref.setGenPref(cbit.vcell.client.server.UserPreferences.GENERAL_LAST_PATH_USED, newPath);
		        }
			} else {
				//throw cbit.vcell.client.task.UserCancelException.CANCEL_FILE_SELECTION;
			}
		} else {
			//throw cbit.vcell.client.task.UserCancelException.CANCEL_FILE_SELECTION;            //best available
		}
	}


/**
 * This method was created by a SmartGuide.
 */
public void showSimpleReactionPropertiesDialog(SimpleReactionShape simpleReactionShape, java.awt.Point location) {
	SimpleReactionPanelDialog simpleReactionDialog = new SimpleReactionPanelDialog((Frame)null,true);
	simpleReactionDialog.setSimpleReaction(simpleReactionShape.getSimpleReaction());
	simpleReactionDialog.setTitle("Reaction Kinetics Editor");
	org.vcell.util.BeanUtils.centerOnScreen(simpleReactionDialog);
	ZEnforcer.showModalDialogOnTop(simpleReactionDialog, getGraphPane());
	
	//
	//cleanup listeners after window closed for GC
	simpleReactionDialog.cleanupOnClose();

	//
	// update in case of name change (should really be a listener)
	//
	simpleReactionShape.refreshLabel();
	getReactionCartoon().fireGraphChanged();
}


/**
 * This method was created in VisualAge.
 * @param mode int
 */
public void updateMode(int newMode) {
	if (newMode==mode){
		return;
	}

	if ((newMode == FLUX_MODE) && (getReactionCartoon() != null) && (!(getReactionCartoon().getStructure() instanceof Membrane))){
		setMode(mode);
		return;
	}
	bMoving = false;
	movingShape = null;

	bRectStretch = false;
	rectShape = null;

	bLineStretch = false;
	edgeShape = null;
	endPointWorld = null;
	if(getReactionCartoon() != null){
		getReactionCartoon().clearSelection();
	}

	this.mode = newMode;
	if(getGraphPane() != null){
		switch (mode){
			case LINE_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
				break;
			}
			case STEP_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
				break;
			}
			case FLUX_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
				break;
			}
			case SPECIES_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				break;
			}
			case SELECT_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				break;
			}
			default:{
				System.out.println("ERROR: mode " + newMode + "not defined");
				break;
			}
		}
	}
	return;
}
}