package cbit.vcell.graph;
/*�
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
�*/
import cbit.gui.graph.*;
import cbit.gui.graph.Shape;
import java.awt.*;
import cbit.vcell.model.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class MembraneShape extends StructureShape {
	private static final int memSpacingX = 15;
	private static final int memSpacingY = 15;
	private static double AngleOffset = Math.PI/6;
	private static double BeginAngle = Math.PI/2.0 + AngleOffset;
	private static double EndAngle = 3.0*Math.PI/2.0 - AngleOffset;
	private static double TotalAngle = EndAngle - BeginAngle;

	/**
	 * MembraneSpape constructor comment.
	 * @param feature cbit.vcell.model.Feature
	 * @param graphModel cbit.vcell.graph.GraphModel
	 */
	public MembraneShape(Membrane membrane, Model model, GraphModel graphModel) {
		super(membrane, model, graphModel);
		defaultBG = java.awt.Color.lightGray;
		backgroundColor = defaultBG;
	}


	/**
	 * This method was created by a SmartGuide.
	 * @return cbit.vcell.model.Membrane
	 */
	public Membrane getMembrane() {
		return (Membrane)getStructure();
	}


	/**
	 * This method was created by a SmartGuide.
	 * @return int
	 * @param g java.awt.Graphics
	 */
	@Override
	public Dimension getPreferedSize(java.awt.Graphics2D g) {

		java.awt.FontMetrics fm = g.getFontMetrics();
		labelSize.height = fm.getMaxAscent() + fm.getMaxDescent();
		labelSize.width = fm.stringWidth(getLabel());

		//
		// has 1 child (featureShape)
		//
		FeatureShape featureShape = (FeatureShape)childShapeList.get(0);
		Dimension featureDim = featureShape.getPreferedSize(g);

		preferredSize.width = featureDim.width + memSpacingX*2;
		preferredSize.height = featureDim.height + memSpacingY*2;
		return preferredSize;
	}


	/**
	 * This method was created by a SmartGuide.
	 * @return java.awt.Point
	 * @param angleRad double
	 */
	private Point getRadialPosition(double angleRad) {
		//
		//  assuming: 
		//
		//   x^2       y^2    
		//  -----  +  -----  =  1
		//   a^2       b^2
		//
		//
		//
		int a = shapeSize.width/2 - memSpacingX/2;
		int b = shapeSize.height/2 - memSpacingY/2;

		if (Math.abs(angleRad - Math.PI/2) < 1E-6){
			return new Point(0,b);
		}
		if (Math.abs(angleRad - 3*Math.PI/2) < 1E-6){
			return new Point(0,-b);
		}

		double tan_alpha = Math.tan(angleRad);

		double absX = Math.sqrt(1.0/(1.0/(a*a) + tan_alpha*tan_alpha/(b*b)));
		double absY = Math.abs(tan_alpha) * absX;

		double x, y;
		if (angleRad > Math.PI/2 && angleRad < 3*Math.PI/2){
			x = -absX;
		}else{
			x = absX;
		}		
		if (angleRad > Math.PI && angleRad < 2*Math.PI){
			y = -absY;
		}else{
			y = absY;
		}		
		return new Point((int)x+a,(int)y+b);
	}


	/**
	 * This method was created by a SmartGuide.
	 * @return int
	 * @param g java.awt.Graphics
	 */
	@Override
	public void refreshLayout() {

		//
		// this is like a row/column layout  (1 column)
		//
		int centerX = shapeSize.width/2;

		//
		// find featureShape child
		//
		FeatureShape featureShape = null;
		for (int i=0;i<countChildren();i++){
			if (childShapeList.get(i) instanceof FeatureShape){
				featureShape = (FeatureShape)childShapeList.get(i);
			}
		}

		//
		// calculate total height of all children (not including label)
		//
//		Dimension featureDim = featureShape.shapeSize;

		//
		// position featureShape (and label)
		//
		int currentY = 0;
		labelPos.x = centerX - labelSize.width/2;
		labelPos.y = currentY;
		currentY += memSpacingY;

		featureShape.relativePos.x = centerX - featureShape.shapeSize.width/2;
		featureShape.relativePos.y = currentY;
		currentY += featureShape.shapeSize.height + memSpacingY;

		//
		// position speciesContextShapes
		//
		//
		// angle = 0 at north pole and increases counter clockwise
		//
		int numSpeciesContexts = countChildren()-1;

		if (numSpeciesContexts>0){
			double deltaAngle = TotalAngle/(numSpeciesContexts+1);
			double currentAngle = BeginAngle + deltaAngle;
			for (int i=0;i<countChildren();i++){
				Shape shape = childShapeList.get(i);
				if (shape instanceof SpeciesContextShape){
					shape.relativePos = getRadialPosition(currentAngle);
					currentAngle = (currentAngle + deltaAngle) % (2*Math.PI);
				}	
			}	
		}				
	}


	/**
	 * This method was created by a SmartGuide.
	 * @param g java.awt.Graphics
	 */
	@Override
	public void resize(java.awt.Graphics2D g, Dimension newSize) throws Exception {

		int deltaX = newSize.width - shapeSize.width;
		int deltaY = newSize.height - shapeSize.height;

		shapeSize = newSize;
		//
		// allocate all extra new space to featureShape
		//
		FeatureShape featureShape = (FeatureShape)childShapeList.get(0);
		Dimension featureSize = new Dimension(featureShape.shapeSize);
		featureSize.width += deltaX;
		featureSize.height += deltaY;
		featureShape.resize(g,featureSize);

		refreshLayout();
	}
}