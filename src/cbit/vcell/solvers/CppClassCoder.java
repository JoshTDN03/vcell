/*
 * Copyright (C) 1999-2011 University of Connecticut Health Center
 *
 * Licensed under the MIT License (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *  http://www.opensource.org/licenses/mit-license.php
 */

package cbit.vcell.solvers;

import java.io.*;
import cbit.vcell.field.FieldFunctionArguments;
import cbit.vcell.field.FieldUtilities;
import cbit.vcell.parser.Expression.FunctionFilter;
import cbit.vcell.parser.ASTFuncNode;
import cbit.vcell.parser.Expression;
import cbit.vcell.parser.ExpressionException;
import cbit.vcell.parser.FunctionInvocation;
import cbit.vcell.simdata.VariableType;
import cbit.vcell.solver.SimulationJob;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public abstract class CppClassCoder {
	
	private String className = null;
	private String parentClassName = null;
	protected CppCoder cppCoder = null;
	protected final SimulationJob simulationJob;

	private static final String C_FIELDVAR_PREFIX = "vcell_fieldvar_";
	private static final String C_LOCALVAR_PREFIX = "vcell_localvar_";
	private static final String C_LOCALFIELD_PREFIX = "vcell_localfield_";
	private static final String C_GLOBALFIELD_PREFIX = "vcell_globalfield_";
/**
 * This method was created by a SmartGuide.
 * @param className java.lang.String
 */
public CppClassCoder (SimulationJob simJob, CppCoder cppCoder, String className, String parentClassName) {
	simulationJob = simJob;
	this.cppCoder = cppCoder;
	this.className = className;
	this.parentClassName = parentClassName;
}
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String getClassName() {
	return className;
}
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String getParentClassName() {
	return parentClassName;
}
/**
 * This method was created by a SmartGuide.
 */
public void initialize() throws Exception {
	return;
}
   public abstract void writeDeclaration(PrintWriter out) throws Exception;               
   public abstract void writeImplementation(PrintWriter out) throws Exception;
/**
 * This method was created in VisualAge.
 * @return java.lang.String
 */
public static String getEscapedFieldVariableName_C(String var) {
	if (var == null){
		throw new IllegalArgumentException("input string is null");
	}
	return CppClassCoder.C_FIELDVAR_PREFIX + var;
}
public static String getEscapedLocalVariableName_C(String var) {
	if (var == null){
		throw new IllegalArgumentException("input string is null");
	}
	return CppClassCoder.C_LOCALVAR_PREFIX + var;
}
public static String getEscapedLocalFieldVariableName_C(FieldFunctionArguments fieldFuncArgs) {
	if (fieldFuncArgs == null) {
		throw new IllegalArgumentException("input fieldFuncArgs is null");
	}
	return CppClassCoder.C_LOCALFIELD_PREFIX + fieldFuncArgs.getUniqueID();
}
public static String getEscapedLocalFieldVariableName_C(String fieldname, String varname, String timeExp, String varType) {	
	if (fieldname == null || varname == null || timeExp == null) {
		throw new IllegalArgumentException("TokenMangler::getEscapedLocalFieldVariableName_C() : input args can't be null");
	}
	try {
		return CppClassCoder.C_LOCALFIELD_PREFIX + FieldFunctionArguments.getUniqueID(fieldname, varname, new Expression(timeExp), varType);
	} catch (ExpressionException e) {		
		e.printStackTrace(System.out);
		throw new IllegalArgumentException("TokenMangler::getEscapedLocalFieldVariableName_C() : time expression is not correctly formatted");
	}
}

String infix_C(Expression exp) throws ExpressionException {
	exp = new Expression(exp);

	FunctionInvocation[] functionInvocations = exp.getFunctionInvocations(new FieldUtilities.FieldFunctionFilter());
	// substitute variable name for field functions
	if (functionInvocations!=null){
		for (int i = 0; i < functionInvocations.length; i++) {
			Expression[] arguments = functionInvocations[i].getArguments();
			String escapedLocalVariableName = CppClassCoder.getEscapedLocalFieldVariableName_C(			 			
	 				arguments[0].infix(),
	 				arguments[1].infix(),
	 				arguments[2].infix(),
	 				(arguments.length==4)?(arguments[3].infix()):VariableType.UNKNOWN.getTypeName()
	 			);
			exp.substituteInPlace(functionInvocations[i].getFunctionExpression(), new Expression(escapedLocalVariableName));
		}
	}
	// substitute local variable names
	String[] symbols = exp.getSymbols();
	if (symbols  != null) {
		for (int i = 0; i < symbols.length; i++) {
			if (!symbols[i].startsWith(CppClassCoder.C_LOCALFIELD_PREFIX)){
				exp.substituteInPlace(new Expression(symbols[i]), new Expression(getEscapedLocalVariableName_C(symbols[i])));
			}
		}
	}
	return exp.infix_C();
}
/**
 * Insert the method's description here.
 * Creation date: (9/21/2006 2:51:03 PM)
 * @return java.lang.String
 */
public static String getEscapedGlobalFieldVariableName_C(FieldFunctionArguments fieldFuncArgs){
	return CppClassCoder.C_GLOBALFIELD_PREFIX + fieldFuncArgs.getUniqueID();
}               
}
