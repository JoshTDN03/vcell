package cbit.vcell.solvers;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.Enumeration;

import cbit.vcell.math.BoundaryConditionType;
import cbit.vcell.math.CompartmentSubDomain;
import cbit.vcell.math.MembraneSubDomain;
import cbit.vcell.solver.SimulationJob;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderFeature extends CppClassCoder {
	protected CompartmentSubDomain volumeSubDomain = null;
	protected MembraneSubDomain membraneSubDomain = null;
/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderFeature(CppCoderVCell cppCoderVCell, SimulationJob argSimulationJob, 
										CompartmentSubDomain volSubDomain, MembraneSubDomain memSubDomain) 
{
	super(argSimulationJob, cppCoderVCell,"Feature"+volSubDomain.getName(), "Feature");
	this.volumeSubDomain = volSubDomain;
	this.membraneSubDomain = memSubDomain;
}
/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.math.CompartmentSubDomain
 */
public CompartmentSubDomain getCompartmentSubDomain() {
	return volumeSubDomain;
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {
	int handle = simulationJob.getSimulation().getMathDescription().getHandle(volumeSubDomain);	
	out.println(getClassName()+"::"+getClassName()+"(string& Aname, int priority)");
	out.println(": Feature(Aname, "+handle+", priority)");
 	out.println("{");
 	out.println("\tstring varname;");
 	Enumeration<CppClassCoder> enum1 = cppCoder.getCppClassCoders();
 	while (enum1.hasMoreElements()){
 		CppClassCoder coder = enum1.nextElement();
 		if (coder instanceof CppClassCoderVolumeVarContext){
 			CppClassCoderVolumeVarContext vcClassCoder = (CppClassCoderVolumeVarContext)coder;
 			if (vcClassCoder.getCompartmentSubDomain() == volumeSubDomain){
 	 			out.println("\tvarname=" + "\""+vcClassCoder.getVariable().getName()+"\";");
 	 			out.println("\taddVolumeVarContext(new "+vcClassCoder.getClassName()+"(this, varname));");
			}	
		}
 		if (coder instanceof CppClassCoderMembraneVarContext){
 			CppClassCoderMembraneVarContext vcClassCoder = (CppClassCoderMembraneVarContext)coder;
 			if (vcClassCoder.getInsideCompartment() == volumeSubDomain){
 				out.println("\tvarname=" + "\""+vcClassCoder.getVariable().getName()+"\";");
				out.println("\taddMembraneVarContext(new "+vcClassCoder.getClassName()+"(this, varname));");
			}	
		}
 		if (coder instanceof CppClassCoderMembraneRegionVarContext){
 			CppClassCoderMembraneRegionVarContext vcClassCoder = (CppClassCoderMembraneRegionVarContext)coder;
  			if (vcClassCoder.getInsideCompartment() == volumeSubDomain){
  				out.println("\tvarname=" + "\""+vcClassCoder.getVariable().getName()+"\";");
				out.println("\taddMembraneRegionVarContext(new "+vcClassCoder.getClassName()+"(this, varname));");
			}	
		}
// 		if (coder instanceof CppClassCoderVolumeRegionVarContext){
// 			CppClassCoderVolumeRegionVarContext vcClassCoder = (CppClassCoderVolumeRegionVarContext)coder;
// 			if (vcClassCoder.getCompartmentSubDomain() == volumeSubDomain){
// 				out.println("\tvarname=" + "\""+vcClassCoder.getVariable().getName()+"\";");
//				out.println("\taddVolumeRegionVarContext(new "+vcClassCoder.getClassName()+"(this, varname));");
//			}	
//		}
 		if (coder instanceof CppClassCoderFastSystem){
 			CppClassCoderFastSystem vcClassCoder = (CppClassCoderFastSystem)coder;
 			if (vcClassCoder.getCompartment() == volumeSubDomain){
				out.println("\tfastSystem = new "+vcClassCoder.getClassName()+"();");
			}	
		}
	}		
	out.println("}");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("   "+getClassName() + "(string& featureName, int priority);");

	String returnValue = "{ return BOUNDARY_VALUE; }";
	String returnFlux = "{ return BOUNDARY_FLUX; }";
	String returnPeriodic = "{ return BOUNDARY_PERIODIC; }";
	
	// XM 
	BoundaryConditionType[] bcts = {
		volumeSubDomain.getBoundaryConditionXm(), volumeSubDomain.getBoundaryConditionXp(), // Xm, Xp
		volumeSubDomain.getBoundaryConditionYm(), volumeSubDomain.getBoundaryConditionYp(), // Ym, Yp
		volumeSubDomain.getBoundaryConditionZm(), volumeSubDomain.getBoundaryConditionZp() // Zm, Zp
	};
	String[] methods = {
		"virtual BoundaryType getXmBoundaryType()", "virtual BoundaryType getXpBoundaryType()", // Xm, Xp
		"virtual BoundaryType getYmBoundaryType()", "virtual BoundaryType getYpBoundaryType()", // Ym, Yp
		"virtual BoundaryType getZmBoundaryType()", "virtual BoundaryType getZpBoundaryType()"  // Zm, Zp
	}; 
	for (int i = 0; i < bcts.length; i ++) {
		if (bcts[i].isDIRICHLET()){
			out.println("\t" + methods[i] + " " + returnValue);
		}else if (bcts[i].isNEUMANN()){
			out.println("\t" + methods[i] + " " + returnFlux);
		}else if (bcts[i].isPERIODIC()){
			out.println("\t" + methods[i] + " " + returnPeriodic);
		}
	}
	out.println("");	
	out.println("};");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeConstructor(out);
	out.println("");
}
}
