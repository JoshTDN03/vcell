package cbit.vcell.solvers;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;

import cbit.vcell.field.FieldDataIdentifierSpec;
import cbit.vcell.field.FieldFunctionArguments;
import cbit.vcell.math.*;
import cbit.vcell.parser.*;
import cbit.vcell.solver.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderFastSystem extends CppClassCoder {
	private Simulation simulation = null;
	private SubDomain subDomain = null;
	private FastSystem fastSystem = null;
/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderFastSystem(CppCoderVCell cppCoderVCell, FastSystem fastSystem,
								SubDomain subDomain,Simulation argSimulation,String parentClass) throws Exception
{
	super(cppCoderVCell,parentClass+subDomain.getName(), parentClass);
	this.fastSystem = fastSystem;
	this.simulation = argSimulation;
	this.subDomain = subDomain;
}
/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.model.Feature
 */
public SubDomain getCompartment() {
	return subDomain;
}
/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.math.Variable
 */
public FastSystem getFastSystem() {
	return fastSystem;
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {
	out.println(getClassName()+"::"+getClassName()+"()");
	out.println(": "+getParentClassName()+"("+getFastSystem().getNumIndependentVariables()+","+getFastSystem().getNumDependentVariables()+")");
	out.println("{");
	out.println("   setTolerance(1e-7);");
	out.println("   ");

	int varCount=0;
	Enumeration enum_vars = getFastSystem().getIndependentVariables();
	while (enum_vars.hasMoreElements()){
		Variable var = (Variable)enum_vars.nextElement();
		out.println("   pVars["+varCount+"] = var_"+var.getName()+" = NULL;");
		varCount++;
	}
	out.println("");
	
	varCount=0;
	enum_vars = getFastSystem().getDependentVariables();
	while (enum_vars.hasMoreElements()){
		Variable var = (Variable)enum_vars.nextElement();
		out.println("   pDependentVars["+varCount+"] = var_"+var.getName()+" = NULL;");
		varCount++;
	}
	out.println("");
	
	Enumeration enum_pc = getFastSystem().getPseudoConstants();
	while (enum_pc.hasMoreElements()){
		PseudoConstant pc = (PseudoConstant)enum_pc.nextElement();
		out.println("   "+pc.getName()+" = 0.0;");
	}
	out.println("}");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("    "+getClassName() + "();");
	out.println("    virtual bool resolveReferences(Simulation *sim);");
	out.println("    void initVars();");
	out.println("    void updateDependentVars();");
	out.println(" protected:");
	out.println("    void updateMatrix();");
	out.println(" private:");
	out.println("\tMesh *mesh;");
	out.println("\tSimulation *simulation;");

	Enumeration enum_vars = getFastSystem().getIndependentVariables();
	while (enum_vars.hasMoreElements()){
		Variable var = (Variable)enum_vars.nextElement();
		out.println("   Variable    *var_"+var.getName()+";");
	}
	enum_vars = getFastSystem().getDependentVariables();
	while (enum_vars.hasMoreElements()){
		Variable var = (Variable)enum_vars.nextElement();
		out.println("   Variable    *var_"+var.getName()+";");
	}
	out.println("");

	Enumeration enum_pc = getFastSystem().getPseudoConstants();
	while (enum_pc.hasMoreElements()){
		PseudoConstant pc = (PseudoConstant)enum_pc.nextElement();
		out.println("   double     "+pc.getName()+";");
	}
	out.println("};");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeFastFunctionDeclarations(java.io.PrintWriter out, Expression exp, String volumeIndexString) throws Exception {

	if (exp == null){
		throw new Exception("null expression");
	}	

	boolean wc_defined = false;
	Enumeration enum1 = simulation.getRequiredVariables(exp);

	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		if (var instanceof ReservedVariable){
			//
			// define reserved symbols (x,y,z,t)
			//
			ReservedVariable rv = (ReservedVariable)var;
			if (rv.isTIME()){
				out.println("   double t = simulation->getTime_sec();");
			}else if (rv.isX()){
				if (!wc_defined){
					out.println("   WorldCoord wc = mesh->getVolumeWorldCoord("+volumeIndexString+");");
					wc_defined = true;
				}	
				out.println("   double x = wc.x;");
			}else if (rv.isY()){
				if (!wc_defined){
					out.println("   WorldCoord wc = mesh->getVolumeWorldCoord("+volumeIndexString+");");
					wc_defined = true;
				}	
				out.println("   double y = wc.y;");
			}else if (rv.isZ()){
				if (!wc_defined){
					out.println("   WorldCoord wc = mesh->getVolumeWorldCoord("+volumeIndexString+");");
					wc_defined = true;
				}	
				out.println("   double z = wc.z;");
			}		
		}		
	}	
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeConstructor(out);
	out.println("");
	writeResolveReferences(out);
	out.println("");
	writeInitVars(out,"initVars");
	out.println("");
	writeUpdateDependentVars(out,"updateDependentVars");
	out.println("");
	writeUpdateMatrix(out,"updateMatrix");
	out.println("");
	out.println("");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeInitVars(java.io.PrintWriter out, String functionName) throws Exception {

	out.println("void "+getClassName()+"::"+functionName+"()");
	out.println("{");

	int varCount=0;
	Enumeration enum1 = getFastSystem().getIndependentVariables();

//out.println("  Variable *ip3 = theApplication->getSimulation()->getVariableFromName(\"IP3\");");
//out.println("  if (ip3) printf(\"initVars(), ip3[%d] = %lg\\n\",currIndex,ip3->getCurr(currIndex));");
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   double "+var.getName()+" = var_"+var.getName()+"->getCurr(currIndex);");
		out.println("   setX("+varCount+","+var.getName()+");");
		varCount++;
	}
	enum1 = getFastSystem().getDependentVariables();
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   double "+var.getName()+" = var_"+var.getName()+"->getCurr(currIndex);");
	}

	MathDescription mathDesc = simulation.getMathDescription();
	int invariantCount=0;
	enum1 = getFastSystem().getPseudoConstants();
	while (enum1.hasMoreElements()){
		PseudoConstant pc = (PseudoConstant)enum1.nextElement();
		out.println("   "+pc.getName()+" = "+simulation.substituteFunctions(pc.getPseudoExpression()).flatten().infix_C()+";");
		invariantCount++;
	}
		
	out.println("}");
	out.println("");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeResolveReferences(java.io.PrintWriter out) throws Exception {
	out.println("bool "+getClassName()+"::resolveReferences(Simulation *sim)");
	out.println("{");
	out.println("   ASSERTION(sim);");
	out.println("   this->mesh = sim->getMesh();");
	out.println("\tthis->simulation = sim;");
	out.println("");
	Enumeration enum1 = getFastSystem().getIndependentVariables();
	int varCount=0;
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   var_"+var.getName()+" = sim->getVariableFromName(\""+var.getName()+"\");");
		out.println("   if (var_"+var.getName()+"==NULL){");
		out.println("      printf(\"could not resolve '"+var.getName()+"'\\n\");");
		out.println("      return FALSE;");
		out.println("   }");
		out.println("   pVars["+varCount+"] = var_"+var.getName()+";");
		out.println("");
		varCount++;
	}		  	
	enum1 = getFastSystem().getDependentVariables();
	varCount=0;
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   var_"+var.getName()+" = sim->getVariableFromName(\""+var.getName()+"\");");
		out.println("   if (var_"+var.getName()+"==NULL){");
		out.println("      printf(\"could not resolve '"+var.getName()+"'\\n\");");
		out.println("      return FALSE;");
		out.println("   }");
		out.println("   pDependentVars["+varCount+"] = var_"+var.getName()+";");
		out.println("");
		varCount++;
	}		  	
	out.println("   return TRUE;");
	out.println("}");
	out.println("");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeUpdateDependentVars(java.io.PrintWriter out, String functionName) throws Exception {

	out.println("void "+getClassName()+"::"+functionName+"()");
	out.println("{");

	int varCount=0;
	Enumeration enum1 = getFastSystem().getIndependentVariables();
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   double "+var.getName()+" = getX("+varCount+");");
		varCount++;
	}

	Enumeration enum_exp = getFastSystem().getDependencyExps();
	Enumeration enum_var = getFastSystem().getDependentVariables();
	while (enum_exp.hasMoreElements()){
		Expression exp = (Expression)enum_exp.nextElement();
		Variable depVar = (Variable)enum_var.nextElement();
		out.println("   var_"+depVar.getName()+"->setCurr(currIndex,"+exp.infix_C()+");");
	}
	
	out.println("}");
	out.println("");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeUpdateMatrix(java.io.PrintWriter out, String functionName) throws Exception {

	out.println("void "+getClassName()+"::"+functionName+"()");
	out.println("{");

	//
	// collect all expressions into one and declare x,y,z,t if necessary
	//
	Expression expTemp = new Expression("0.0;");
	Enumeration enum_fre = getFastSystem().getFastRateExpressions();
	while (enum_fre.hasMoreElements()){
		Expression fre = (Expression)enum_fre.nextElement();
		expTemp = Expression.add(expTemp,fre);
	}
	writeFastFunctionDeclarations(out,expTemp,"currIndex");	
	
	int varCount=0;
	Enumeration enum1 = getFastSystem().getIndependentVariables();
	while (enum1.hasMoreElements()){
		Variable var = (Variable)enum1.nextElement();
		out.println("   double "+var.getName()+" = getX("+varCount+");");
		varCount++;
	}

	FieldFunctionArguments[] fieldFuncArgs = simulation.getMathDescription().getFieldFunctionArguments();

	for (int i = 0; fieldFuncArgs != null && i < fieldFuncArgs.length; i ++) {
		String localvarname = FieldDataIdentifierSpec.getLocalVariableName_C(fieldFuncArgs[i]);
		String globalvarname = FieldDataIdentifierSpec.getGlobalVariableName_C(fieldFuncArgs[i]);
		out.println("\tdouble " + localvarname + " = " + globalvarname + "->getData()[currIndex];");	
	}
	
	int frCount=0;
	enum_fre = getFastSystem().getFastRateExpressions();
	while (enum_fre.hasMoreElements()){
		Expression fre = (Expression)enum_fre.nextElement();
		varCount=0;
		Enumeration enum_var = getFastSystem().getIndependentVariables();
		while (enum_var.hasMoreElements()){
			Variable var = (Variable)enum_var.nextElement();
			Expression exp = simulation.substituteFunctions(fre).flatten();
			Expression differential = exp.differentiate(var.getName());
			differential.bindExpression(simulation);
			out.println("   setMatrix("+frCount+", "+varCount+", "+differential.flatten().infix_C()+");");
			varCount++;
		}
		Expression exp = Expression.negate(fre);
		exp = simulation.substituteFunctions(exp);
		out.println("   setMatrix("+frCount+", "+varCount+", "+exp.flatten().infix_C()+");");
		frCount++;
		out.println("");
	}
	out.println("}");
	out.println("");
}
}
