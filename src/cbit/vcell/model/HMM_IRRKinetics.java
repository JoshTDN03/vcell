package cbit.vcell.model;

import java.beans.PropertyVetoException;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;
import cbit.vcell.parser.*;
import cbit.util.*;
import javax.swing.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class HMM_IRRKinetics extends DistributedKinetics {
/**
 * MassActionKinetics constructor comment.
 * @param name java.lang.String
 * @param exp cbit.vcell.parser.Expression
 */
public HMM_IRRKinetics(ReactionStep reactionStep) throws ExpressionException {
	super(KineticsDescription.HMM_irreversible.getName(),reactionStep);
	try {
		KineticsParameter rateParm = new KineticsParameter(getDefaultParameterName(ROLE_ReactionRate),new Expression(0.0),ROLE_ReactionRate,null);
		KineticsParameter currentParm = new KineticsParameter(getDefaultParameterName(ROLE_CurrentDensity),new Expression(0.0),ROLE_CurrentDensity,null);
		KineticsParameter kmParm = new KineticsParameter(getDefaultParameterName(ROLE_Km),new Expression(0.0),ROLE_Km,null);
		KineticsParameter vMaxParm = new KineticsParameter(getDefaultParameterName(ROLE_Vmax),new Expression(0.0),ROLE_Vmax,null);

		if (reactionStep.getStructure() instanceof Membrane){
			setKineticsParameters(new KineticsParameter[] { rateParm, currentParm, kmParm, vMaxParm });
		}else{
			setKineticsParameters(new KineticsParameter[] { rateParm, kmParm, vMaxParm });
		}
		
		updateGeneratedExpressions();
		refreshUnits();
	}catch (PropertyVetoException e){
		e.printStackTrace(System.out);
		throw new RuntimeException("unexpected exception: "+e.getMessage());
	}

}
/**
 * Checks for internal representation of objects, not keys from database
 * @return boolean
 * @param obj java.lang.Object
 */
public boolean compareEqual(cbit.util.Matchable obj) {
	if (obj == this){
		return true;
	}
	if (!(obj instanceof HMM_IRRKinetics)){
		return false;
	}
	
	HMM_IRRKinetics hmm = (HMM_IRRKinetics)obj;

	if (!compareEqual0(hmm)){
		return false;
	}
	
	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (5/12/2004 3:23:27 PM)
 * @return cbit.util.Issue[]
 */
public void gatherIssues(Vector issueList) {

	super.gatherIssues(issueList);

	//
	// check for correct number of reactants
	//
	ReactionParticipant reactionParticipants[] = getReactionStep().getReactionParticipants();
	int reactantCount = 0;
	for (int i = 0; i < reactionParticipants.length; i++){
		if (reactionParticipants[i] instanceof Reactant){
			reactantCount++;
		}
	}
	if (reactantCount!=1){
		issueList.add(new Issue(this,ISSUECATEGORY_KineticsApplicability,"HMM_IRRKinetics must have exactly one reactant",Issue.SEVERITY_ERROR));
	}
}
/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 9:52:55 AM)
 * @return cbit.vcell.model.KineticsDescription
 */
public KineticsDescription getKineticsDescription() {
	return KineticsDescription.HMM_irreversible;
}
/**
 * Gets the kineticsParameters index property (cbit.vcell.model.KineticsParameter) value.
 * @return The kineticsParameters property value.
 * @param index The index value into the property array.
 * @see #setKineticsParameters
 */
public KineticsParameter getKineticsParameterFromRole(int role) {
	if (role == ROLE_KmFwd) {
		role = ROLE_Km;
	} else if (role == ROLE_VmaxFwd) {
		role = ROLE_Vmax;
	}

	return super.getKineticsParameterFromRole(role);	
}
/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 3:48:16 PM)
 * @return cbit.vcell.model.KineticsParameter
 */
public KineticsParameter getKmParameter() {
	return getKineticsParameterFromRole(ROLE_Km);
}
/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 3:48:16 PM)
 * @return cbit.vcell.model.KineticsParameter
 */
public KineticsParameter getVmaxParameter() {
	return getKineticsParameterFromRole(ROLE_Vmax);
}
/**
 * Insert the method's description here.
 * Creation date: (3/31/2004 3:56:05 PM)
 */
protected void refreshUnits() {
	if (bRefreshingUnits){
		return;
	}
	try {
		bRefreshingUnits=true;
		
		Reactant R0 = null;
		int reactantCount = 0;
		ReactionParticipant reactionParticipants[] = getReactionStep().getReactionParticipants();
		for (int i = 0; i < reactionParticipants.length; i++){
			if (reactionParticipants[i] instanceof Reactant){
				reactantCount++;
				R0 = (Reactant)reactionParticipants[i];
			}
		}
		if (reactantCount!=1){
			System.out.println("HMM_IRRKinetics.refreshUnits(): HMM_IRRKinetics must have exactly one reactant");
			return;
		}

		Kinetics.KineticsParameter rateParm = getReactionRateParameter();
		Kinetics.KineticsParameter currentDensityParm = getCurrentDensityParameter();
		Kinetics.KineticsParameter kmParm = getKmParameter();
		Kinetics.KineticsParameter vmaxParm = getVmaxParameter();
		if (getReactionStep().getStructure() instanceof Membrane){
			if (rateParm!=null){
				rateParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_molecules_per_um2_per_s);
			}
			if (currentDensityParm!=null){
				currentDensityParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_pA_per_um2);
			}
			if (vmaxParm!=null){
				vmaxParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_molecules_per_um2_per_s);
			}
			if (kmParm!=null){
				kmParm.setUnitDefinition(R0.getSpeciesContext().getUnitDefinition());
			}
		}else{
			if (rateParm!=null){
				rateParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_uM_per_s);
			}
			if (vmaxParm!=null){
				vmaxParm.setUnitDefinition(cbit.vcell.units.VCUnitDefinition.UNIT_uM_per_s);
			}
			if (kmParm!=null){
				kmParm.setUnitDefinition(R0.getSpeciesContext().getUnitDefinition());
			}
		}
	}finally{
		bRefreshingUnits=false;
	}
}
/**
 * Insert the method's description here.
 * Creation date: (10/19/2003 12:05:14 AM)
 * @exception cbit.vcell.parser.ExpressionException The exception description.
 */
protected void updateGeneratedExpressions() throws cbit.vcell.parser.ExpressionException, PropertyVetoException {
	KineticsParameter rateParm = getKineticsParameterFromRole(ROLE_ReactionRate);
	KineticsParameter currentParm = getKineticsParameterFromRole(ROLE_CurrentDensity);
	if (currentParm==null && rateParm==null){
		return;
	}

	KineticsParameter km = getKineticsParameterFromRole(ROLE_Km);
	KineticsParameter vMax = getKineticsParameterFromRole(ROLE_Vmax);
	
	MembraneVoltage V = null;
	if (getReactionStep().getStructure() instanceof Membrane){
		V = ((Membrane)getReactionStep().getStructure()).getMembraneVoltage();
	}
	
	ReactionParticipant reactionParticipants[] = getReactionStep().getReactionParticipants();
	Reactant R0 = null;
	for (int i = 0; i < reactionParticipants.length; i++){
		if (reactionParticipants[i] instanceof Reactant){
			R0 = (Reactant)reactionParticipants[i];
			break;
		}
	}
	if (R0==null){
		System.out.println("HMM_IRRKinetics.updateGeneratedExpressions(): HMM_IRRKinetics must have exactly one reactant");
		return;
//		throw new RuntimeException("HMM_IRRKinetics must have exactly one reactant");
	}
	
	//		new Expression("A0*R0/(A1+R0)"),
	Expression newRateExp = new Expression(vMax.getName()+"*"+R0.getName()+"/("+km.getName()+"+"+R0.getName()+")");
	newRateExp.bindExpression(getReactionStep());
	rateParm.setExpression(newRateExp);
	if (getReactionStep().getPhysicsOptions() == ReactionStep.PHYSICS_MOLECULAR_AND_ELECTRICAL){
		int z = (int)getReactionStep().getChargeCarrierValence().getConstantValue();
		ReservedSymbol F = ReservedSymbol.FARADAY_CONSTANT;
		ReservedSymbol F_nmol = ReservedSymbol.FARADAY_CONSTANT_NMOLE;
		ReservedSymbol N_PMOLE = ReservedSymbol.N_PMOLE;
		Expression tempCurrentExpression = null;
		if (getReactionStep() instanceof SimpleReaction){
			tempCurrentExpression = Expression.mult(new Expression("("+z+"*"+F.getName()+"/"+N_PMOLE.getName()+")"), new Expression(rateParm.getName()));
		}else{
			tempCurrentExpression = Expression.mult(new Expression(z+"*"+F_nmol.getName()), new Expression(rateParm.getName()));
		}
		tempCurrentExpression.bindExpression(getReactionStep());
		if (currentParm == null){
			addKineticsParameter(new KineticsParameter(getDefaultParameterName(ROLE_CurrentDensity),tempCurrentExpression,ROLE_CurrentDensity,cbit.vcell.units.VCUnitDefinition.UNIT_pA_per_um2));
		}else{
			currentParm.setExpression(tempCurrentExpression);
		}
	}else{
		if (currentParm != null && !currentParm.getExpression().isZero()){
			//removeKineticsParameter(currentParm);
			currentParm.setExpression(new Expression(0.0));
		}
	}
}
}
