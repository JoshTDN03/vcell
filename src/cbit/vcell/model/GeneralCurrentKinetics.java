package cbit.vcell.model;

import java.beans.PropertyVetoException;
import java.util.Vector;

import org.vcell.util.Issue;
import org.vcell.util.Matchable;

import cbit.vcell.parser.Expression;
import cbit.vcell.parser.ExpressionException;
import cbit.vcell.parser.NameScope;
import cbit.vcell.units.VCUnitDefinition;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class GeneralCurrentKinetics extends DistributedKinetics {
/**
 * MassActionKinetics constructor comment.
 * @param name java.lang.String
 * @param exp cbit.vcell.parser.Expression
 */
public GeneralCurrentKinetics(ReactionStep reactionStep) throws ExpressionException {
	super(KineticsDescription.GeneralCurrent.getName(),reactionStep);
	try {
		KineticsParameter currentParm = new KineticsParameter(getDefaultParameterName(ROLE_CurrentDensity),new Expression(0.0),ROLE_CurrentDensity,null);
		KineticsParameter rateParm = new KineticsParameter(getDefaultParameterName(ROLE_ReactionRate),new Expression(0.0),ROLE_ReactionRate,null);

		setKineticsParameters(new KineticsParameter[] { currentParm, rateParm });
		updateGeneratedExpressions();
		refreshUnits();
	}catch (PropertyVetoException e){
		e.printStackTrace(System.out);
		throw new RuntimeException("unexpected exception: "+e.getMessage());
	}
}
/**
 * Checks for internal representation of objects, not keys from database
 * @return boolean
 * @param obj java.lang.Object
 */
public boolean compareEqual(Matchable obj) {
	if (obj == this){
		return true;
	}
	if (!(obj instanceof GeneralCurrentKinetics)){
		return false;
	}
	
	GeneralCurrentKinetics gck = (GeneralCurrentKinetics)obj;

	if (!compareEqual0(gck)){
		return false;
	}
	
	return true;
}
/**
 * Insert the method's description here.
 * Creation date: (5/12/2004 3:08:25 PM)
 * @return cbit.util.Issue[]
 */
public void gatherIssues(Vector<Issue> issueList){

	super.gatherIssues(issueList);
	
	if (getReactionStep() instanceof SimpleReaction){
		issueList.add(new Issue(this,ISSUECATEGORY_KineticsApplicability,"General Current Kinetics expected within a flux reaction only",Issue.SEVERITY_ERROR));
	}
}
/**
 * Insert the method's description here.
 * Creation date: (8/5/2002 6:02:20 PM)
 * @return cbit.vcell.model.KineticsDescription
 */
public KineticsDescription getKineticsDescription() {
	return KineticsDescription.GeneralCurrent;
}
/**
 * Insert the method's description here.
 * Creation date: (3/31/2004 3:56:05 PM)
 */
protected void refreshUnits() {
	if (bRefreshingUnits){
		return;
	}
	try {
		bRefreshingUnits = true;
			
		Kinetics.KineticsParameter rateParm = getReactionRateParameter();
		if (getReactionStep() instanceof FluxReaction){
			if (rateParm != null){
				rateParm.setUnitDefinition(VCUnitDefinition.UNIT_uM_um_per_s);
			}
		}else if (getReactionStep() instanceof SimpleReaction){
			throw new RuntimeException("General Current Kinetics not expected within a flux reaction only");
		}
		Kinetics.KineticsParameter currentDensityParm = getCurrentDensityParameter();
		if (currentDensityParm != null){
			currentDensityParm.setUnitDefinition(VCUnitDefinition.UNIT_pA_per_um2);
		}
	}finally {
		bRefreshingUnits = false;
	}
	
}
/**
 * Insert the method's description here.
 * Creation date: (10/18/2003 11:57:27 PM)
 */
protected void updateGeneratedExpressions() throws ExpressionException, PropertyVetoException {
	KineticsParameter currentParm = getCurrentDensityParameter();
	KineticsParameter rateParm = getReactionRateParameter();
	if (currentParm==null && rateParm==null){
		return;
	}

	if (getReactionStep().getPhysicsOptions() == ReactionStep.PHYSICS_MOLECULAR_AND_ELECTRICAL){
		Expression z = new Expression(getReactionStep().getChargeCarrierValence().getConstantValue());
		Expression current = getSymbolExpression(currentParm);
		Expression tempRateExpression = null;
		if (getReactionStep() instanceof SimpleReaction){
			Expression F = getSymbolExpression(ReservedSymbol.FARADAY_CONSTANT);
			Expression N_PMOLE = getSymbolExpression(ReservedSymbol.N_PMOLE);
//			tempRateExpression = Expression.mult(new Expression("("+N_PMOLE.getName()+"/("+z+"*"+F.getName()+"))"), current);
			tempRateExpression = Expression.mult(Expression.div(N_PMOLE, Expression.mult(z, F)), current);
		}else{
			Expression F_nmol = getSymbolExpression(ReservedSymbol.FARADAY_CONSTANT_NMOLE);
//			tempRateExpression = new Expression(currentParm.getName()+"/("+z+"*"+F_nmol.getName()+")");
			tempRateExpression = Expression.div(current, Expression.mult(z, F_nmol));
		}
		if (rateParm == null){
			addKineticsParameter(new KineticsParameter(getDefaultParameterName(ROLE_ReactionRate),tempRateExpression,ROLE_ReactionRate,VCUnitDefinition.UNIT_molecules_per_um2_per_s));
		}else{
			rateParm.setExpression(tempRateExpression);
		}
	}else{
		if (rateParm != null && !rateParm.getExpression().isZero()){
			//removeKineticsParameter(rateParm);
			rateParm.setExpression(new Expression(0.0));
		}
	}
}
}
