package cbit.vcell.model.gui;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import cbit.vcell.client.PopupGenerator;
import cbit.vcell.model.Membrane;
import cbit.vcell.model.Structure;
/**
 * This class was generated by a SmartGuide.
 * 
 */
@SuppressWarnings("serial")
public class MembraneEditorPanel extends JPanel implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private static final String PROPERTY_NAME_MEMBRANE = "membrane";
	private JCheckBox overrideSizeNameCheckBox;
	private JCheckBox overrideVoltageNameCheckBox;
	private JTextField sizeNameTextField;
	private JLabel sizeNameLabel;
	private javax.swing.JButton applyButton = null;
	private javax.swing.JButton revertButton = null;
	private javax.swing.JLabel membraneNameLabel = null;
	private javax.swing.JTextField membraneNameTextField = null;
	private javax.swing.JPanel ivjPanel1 = null;
	private Membrane fieldMembrane = null;
	private javax.swing.JLabel voltageNameLabel = null;
	private javax.swing.JTextField voltageNameTextField = null;
/**
 * Constructor
 */
public MembraneEditorPanel() {
	super();
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	if (e.getSource() == getRevertButton()) 
		revert();
	if (e.getSource() == getApplyButton()) 
		apply();
}

private void revert() {
	updateInterface();	
}

/**
 * conn2:  (Button1.action.actionPerformed(java.awt.event.ActionEvent) --> Feature.name)
 * @param arg1 java.awt.event.ActionEvent
 */
private void apply() {
	try {
		getMembrane().setName(getMembraneNameTextField().getText());
		getMembrane().getMembraneVoltage().setName(getVoltageNameTextField().getText());
		getMembrane().getStructureSize().setName(getSizeNameTextField().getText());
	}catch (java.beans.PropertyVetoException pve){
		PopupGenerator.showErrorDialog(this, pve.getMessage());
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}
/**
 * Return the Button1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getApplyButton() {
	if (applyButton == null) {
		try {
			applyButton = new javax.swing.JButton("Apply");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return applyButton;
}
/**
 * Return the Button2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRevertButton() {
	if (revertButton == null) {
		try {
			revertButton = new javax.swing.JButton("Revert");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return revertButton;
}
/**
 * Return the JLabel1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getVoltageNameLabel() {
	if (voltageNameLabel == null) {
		try {
			voltageNameLabel = new javax.swing.JLabel("Membrane Voltage Name");
			voltageNameLabel.setName("VoltageNameLabel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return voltageNameLabel;
}
/**
 * Return the JTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getVoltageNameTextField() {
	if (voltageNameTextField == null) {
		try {
			voltageNameTextField = new javax.swing.JTextField();
			voltageNameTextField.setName("VoltageNameTextField");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return voltageNameTextField;
}
/**
 * Return the Label1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMembraneNameLabel() {
	if (membraneNameLabel == null) {
		try {
			membraneNameLabel = new javax.swing.JLabel("Membrane Name");
			membraneNameLabel.setName("Label1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return membraneNameLabel;
}
/**
 * Return the Membrane property value.
 * @return cbit.vcell.model.Membrane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private Membrane getMembrane() {
	// user code begin {1}
	// user code end
	return fieldMembrane;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getMembraneNameTextField() {
	if (membraneNameTextField == null) {
		try {
			membraneNameTextField = new javax.swing.JTextField();
			membraneNameTextField.getDocument().addDocumentListener(new DocumentListener() {
				public void changedUpdate(final DocumentEvent e) {
					updateDependentText();
				}
				public void insertUpdate(final DocumentEvent e) {
					updateDependentText();
				}
				public void removeUpdate(final DocumentEvent e) {
					updateDependentText();
				}
			});
			membraneNameTextField.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
			membraneNameTextField.setName("NameTextField");
			membraneNameTextField.setColumns(20);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return membraneNameTextField;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	 System.out.println("--------- UNCAUGHT EXCEPTION --------- in FeatureDialog ");
	 exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	addPropertyChangeListener(this);
	getRevertButton().addActionListener(this);
	getApplyButton().addActionListener(this);
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		java.awt.GridBagLayout gridBagLayout = new java.awt.GridBagLayout();
		setLayout(gridBagLayout);

		java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 0; gbc.gridy = 0;
		gbc.anchor = java.awt.GridBagConstraints.EAST;
		gbc.insets = new java.awt.Insets(20, 4, 4, 4);
		add(getMembraneNameLabel(), gbc);			

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1; gbc.gridy = 0;
		gbc.gridwidth = 2;
		gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1.0;
		gbc.insets = new java.awt.Insets(20, 4, 4, 4);
		add(getMembraneNameTextField(), gbc);
				
		gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(4, 4, 4, 4);
		gbc.weightx = 1;
		gbc.gridwidth = 2;
		gbc.gridy = 1;
		gbc.gridx = 1;
		add(getSizeNameTextField(), gbc);
		
		gbc = new GridBagConstraints();
		gbc.gridy = 1;
		gbc.gridx = 3;
		add(getOverrideSizeNameCheckBox(), gbc);
		
		gbc = new GridBagConstraints();
		gbc.insets = new Insets(4, 10, 4, 5);
		gbc.anchor = GridBagConstraints.EAST;
		gbc.gridy = 1;
		gbc.gridx = 0;
		add(getSizeNameLabel(), gbc);
		
		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 0; gbc.gridy = 2;
		gbc.anchor = java.awt.GridBagConstraints.EAST;
		gbc.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getVoltageNameLabel(), gbc);

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1; gbc.gridy = 2;
		gbc.gridwidth = 2;
		gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1.0;
		gbc.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getVoltageNameTextField(), gbc);
		
		gbc = new GridBagConstraints();
		gbc.gridy = 2;
		gbc.gridx = 3;
		gbc.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getOverrideVoltageNameCheckBox(), gbc);
		
		JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 4));
		panel.add(getApplyButton());
		panel.add(getRevertButton());

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1; gbc.gridy = 3;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.insets = new java.awt.Insets(4, 4, 4, 4);
		gbc.anchor = GridBagConstraints.PAGE_START;
		add(panel, gbc);
		
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}
/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	if (evt.getSource() == this && (evt.getPropertyName().equals(PROPERTY_NAME_MEMBRANE))) {
		updateInterface();
	}
}

	/**
	 * Set the Membrane to a new value.
	 * @param newValue cbit.vcell.model.Membrane
	 */
	public void setMembrane(Membrane newValue) {
		Membrane oldValue = fieldMembrane;
		fieldMembrane = newValue;
		firePropertyChange(PROPERTY_NAME_MEMBRANE, oldValue, newValue);
	}
	
	private void updateInterface() {
		if (fieldMembrane!=null){
			boolean bOverrideSizeName = !fieldMembrane.getStructureSize().getName().equals(Structure.getDefaultStructureSizeName(fieldMembrane.getName()));
			getOverrideSizeNameCheckBox().setSelected(bOverrideSizeName);
			boolean bOverrideVoltageName = !fieldMembrane.getMembraneVoltage().getName().equals(Membrane.getDefaultMembraneVoltageName(fieldMembrane.getName()));
			getOverrideVoltageNameCheckBox().setSelected(bOverrideVoltageName);
			getMembraneNameTextField().setText(fieldMembrane.getName());
			getVoltageNameTextField().setText(fieldMembrane.getMembraneVoltage().getName());
			getSizeNameTextField().setText(fieldMembrane.getStructureSize().getName());
			updateDependentText();
		}
	}
	
	/**
	 * @return
	 */
	protected JLabel getSizeNameLabel() {
		if (sizeNameLabel == null) {
			sizeNameLabel = new JLabel("Membrane Size Name [um^2]");
		}
		return sizeNameLabel;
	}
	/**
	 * @return
	 */
	protected JTextField getSizeNameTextField() {
		if (sizeNameTextField == null) {
			sizeNameTextField = new JTextField();
		}
		return sizeNameTextField;
	}
	/**
	 * @return
	 */
	protected JCheckBox getOverrideVoltageNameCheckBox() {
		if (overrideVoltageNameCheckBox == null) {
			overrideVoltageNameCheckBox = new JCheckBox();
			overrideVoltageNameCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
			overrideVoltageNameCheckBox.setText("override");
		}
		return overrideVoltageNameCheckBox;
	}

	private void updateDependentText(){
		if (!getOverrideSizeNameCheckBox().isSelected()){
			getSizeNameTextField().setEditable(false);
			if (getMembraneNameTextField().getText().length()>0 && !getSizeNameTextField().getText().equals(Structure.getDefaultStructureSizeName(getMembraneNameTextField().getText()))){
				getSizeNameTextField().setText(Structure.getDefaultStructureSizeName(getMembraneNameTextField().getText()));
			}
		}else{
			getSizeNameTextField().setEditable(true);
		}
		if (!getOverrideVoltageNameCheckBox().isSelected()){
			getVoltageNameTextField().setEditable(false);
			if (getMembraneNameTextField().getText().length()>0 && !getVoltageNameTextField().getText().equals(Membrane.getDefaultMembraneVoltageName(getMembraneNameTextField().getText()))){
				getVoltageNameTextField().setText(Membrane.getDefaultMembraneVoltageName(getMembraneNameTextField().getText()));
			}
		}else{
			getVoltageNameTextField().setEditable(true);
		}
	}
	/**
	 * @return
	 */
	protected JCheckBox getOverrideSizeNameCheckBox() {
		if (overrideSizeNameCheckBox == null) {
			overrideSizeNameCheckBox = new JCheckBox("override");
			overrideSizeNameCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
		}
		return overrideSizeNameCheckBox;
	}
}
