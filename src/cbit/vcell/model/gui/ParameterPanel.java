package cbit.vcell.model.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.vcell.mapping.gui.StructureMappingTableModel;
import cbit.vcell.mapping.gui.StructureMappingTableRenderer;
import cbit.vcell.model.*;
import java.beans.*;

import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
/**
 * This type was created in VisualAge.
 */
public class ParameterPanel extends javax.swing.JPanel implements PropertyChangeListener {
	private javax.swing.JScrollPane ivjJScrollPane1 = null;
	private ParameterTableModel ivjParameterTableModel = null;
	private javax.swing.JTable ivjScrollPaneTable = null;
	private cbit.vcell.model.Kinetics fieldKinetics = null;
	private boolean ivjConnPtoP2Aligning = false;
	private Kinetics ivjkinetics1 = null;

/**
 * Constructor
 */
public ParameterPanel() {
	super();
	initialize();
}

/**
 * Insert the method's description here.
 * Creation date: (8/9/2006 10:11:57 PM)
 */
public void cleanupOnClose() {
	getParameterTableModel().setKinetics(null);
}

/**
 * connEtoC1:  (ParameterPanel.initialize() --> ParameterPanel.parameterPanel_Initialize()V)
 */
private void connEtoC1() {
	try {
		this.parameterPanel_Initialize();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}


/**
 * connEtoM1:  (kinetics1.this --> ParameterTableModel.kinetics)
 * @param value cbit.vcell.model.Kinetics
 */
private void connEtoM1(cbit.vcell.model.Kinetics value) {
	try {
		if ((getkinetics1() != null)) {
			getParameterTableModel().setKinetics(getkinetics1());
		}
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}


/**
 * connEtoM2:  (ParameterPanel.initialize() --> ScrollPaneTable.model)
 */
private void connEtoM2() {
	try {
		getScrollPaneTable().setModel(getParameterTableModel());
		getScrollPaneTable().createDefaultColumnsFromModel();

		//set column renderer, except for expression/value column.
		for(int i=0; i<getScrollPaneTable().getModel().getColumnCount(); i++) {
			if (i != ParameterTableModel.COLUMN_VALUE) {
				TableColumn column=getScrollPaneTable().getColumnModel().getColumn(i);
				column.setCellRenderer(new ParameterTableCellRenderer(getScrollPaneTable().getDefaultRenderer(Boolean.class)));
			}
		}
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}

/**
 * connPtoP2SetSource:  (ParameterPanel.kinetics <--> kinetics1.this)
 */
private void connPtoP2SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP2Aligning == false) {
			ivjConnPtoP2Aligning = true;
			if ((getkinetics1() != null)) {
				this.setKinetics(getkinetics1());
			}
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		handleException(ivjExc);
	}
}


/**
 * connPtoP2SetTarget:  (ParameterPanel.kinetics <--> kinetics1.this)
 */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP2Aligning == false) {
			ivjConnPtoP2Aligning = true;
			setkinetics1(this.getKinetics());
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		handleException(ivjExc);
	}
}


/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjJScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			getJScrollPane1().setViewportView(getScrollPaneTable());
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}

/**
 * Gets the kinetics property (cbit.vcell.model.Kinetics) value.
 * @return The kinetics property value.
 * @see #setKinetics
 */
public cbit.vcell.model.Kinetics getKinetics() {
	return fieldKinetics;
}


/**
 * Return the kinetics1 property value.
 * @return cbit.vcell.model.Kinetics
 */
private cbit.vcell.model.Kinetics getkinetics1() {
	return ivjkinetics1;
}


/**
 * Return the ParameterTableModel property value.
 * @return cbit.vcell.model.gui.ParameterTableModel
 */
private ParameterTableModel getParameterTableModel() {
	if (ivjParameterTableModel == null) {
		try {
			ivjParameterTableModel = new cbit.vcell.model.gui.ParameterTableModel(getScrollPaneTable());
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjParameterTableModel;
}

/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
private javax.swing.JTable getScrollPaneTable() {
	if (ivjScrollPaneTable == null) {
		try {
			ivjScrollPaneTable = new javax.swing.JTable();
			ivjScrollPaneTable.setName("ScrollPaneTable");
			getJScrollPane1().setColumnHeaderView(ivjScrollPaneTable.getTableHeader());
			getJScrollPane1().getViewport().setBackingStoreEnabled(true);
			ivjScrollPaneTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
			ivjScrollPaneTable.setBounds(0, 0, 200, 200);
			ivjScrollPaneTable.setAutoCreateColumnsFromModel(false);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjScrollPaneTable;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION --------- in ParameterPanel ");
	exception.printStackTrace(System.out);
	if (exception instanceof cbit.vcell.parser.ExpressionBindingException){
		javax.swing.JOptionPane.showMessageDialog(this, exception.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
	}
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
private void initConnections() throws java.lang.Exception {
	this.addPropertyChangeListener(this);
	connPtoP2SetTarget();
}

/**
 * Initialize the class.
 */
private void initialize() {
	try {
		setName("ParameterPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(509, 240);

		java.awt.GridBagConstraints constraintsJScrollPane1 = new java.awt.GridBagConstraints();
		constraintsJScrollPane1.gridx = 0; constraintsJScrollPane1.gridy = 0;
		constraintsJScrollPane1.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJScrollPane1.weightx = 1.0;
		constraintsJScrollPane1.weighty = 1.0;
		constraintsJScrollPane1.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getJScrollPane1(), constraintsJScrollPane1);
		initConnections();
		parameterPanel_Initialize();
		connEtoM2();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}

/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		ParameterPanel aParameterPanel;
		aParameterPanel = new ParameterPanel();
		frame.setContentPane(aParameterPanel);
		frame.setSize(aParameterPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
public void parameterPanel_Initialize() {

	getScrollPaneTable().setDefaultRenderer(cbit.vcell.parser.ScopedExpression.class,new ScopedExpressionTableCellRenderer());
	
	getParameterTableModel().addTableModelListener(
		new javax.swing.event.TableModelListener(){
			public void tableChanged(javax.swing.event.TableModelEvent e){
				ScopedExpressionTableCellRenderer.formatTableCellSizes(getScrollPaneTable(),null,null);
			}
		}
	);
}


/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == this && (evt.getPropertyName().equals("kinetics"))) 
		connPtoP2SetTarget();
	// user code begin {2}
	// user code end
}

/**
 * Sets the kinetics property (cbit.vcell.model.Kinetics) value.
 * @param kinetics The new value for the property.
 * @see #getKinetics
 */
public void setKinetics(cbit.vcell.model.Kinetics kinetics) {
	Kinetics oldValue = fieldKinetics;
	fieldKinetics = kinetics;
	firePropertyChange("kinetics", oldValue, kinetics);
}


/**
 * Set the kinetics1 to a new value.
 * @param newValue cbit.vcell.model.Kinetics
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setkinetics1(cbit.vcell.model.Kinetics newValue) {
	if (ivjkinetics1 != newValue) {
		try {
			cbit.vcell.model.Kinetics oldValue = getkinetics1();
			ivjkinetics1 = newValue;
			connPtoP2SetSource();
			connEtoM1(ivjkinetics1);
			firePropertyChange("kinetics", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GF9FBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135BB8DD4D45719EEEBF25C33EE57741055246EAEEB4D1624541A333432D9F3EA93FBEADA1BA841EE5C032D2D66E45BF5FBE8CB76500D4D5E79911CC423D61212AC29F6EB92CC10002292C465E70099C1214CG2365C49E4C831E8EB333EF5E408C8C305F7DFB73E6F80FC1CF42B95FF9F33F7B737DFF773B77BDD0493174FDA6F389C226FD087D1DB7A164B9035025BDCF3D48F1356F655810666F77GC7
	50DBFDD6F8BA20AF7BFA0E6DB0EA1D5E8F6DFEE8FB207DDB78FD9435CF67D7438F83BA1B20EF4F235745796974491CCEB1E9AF099E0067EBG8300434F4C77B07D74E8A943AFE6F88EA6B3604A7118FF0E16B1DCBE0C598F3886GF7B99D6F03A7E5601E3ADAB62E7F3E8CD4709D59FC902F23D91343E6B6B71FBD0F237FB22DB809E96DA6FC62B965509EG4042DB505BB5A761D95FF5FB6452502024D40E8F09BEDF65D840AB7AAAC742D2DDDD17A08BE322A24ADD02DF74E1753D0F572B185CCF66A31487EB25
	93DC862161015FC100A56F2B7898466F065FFB81CABE60F2DDFC2F1E716D19DA07F2CF0FD98F9948D5718115477DC1DCAE6F2D9D66B7098D1607302E17C1DF9640A600BDG87AAF2EC95G7FC3EC7F37727B70EC9CD41A83E3E381FFE3B05864734AD7311C703B2E8EFA982EDB9C8A48DE0428FDFF9A2D5061E7BE20738A6FF89E55C94699EE6B4C6EB5A86F9F7F5ADC2C23133C0CA9333D026A223FA22E93CA3BFA5208F62CA2519793E977A1AD6D455736D9766950CE3F304D320C2D33DAC3BB2F825B7AB3D358
	569B613709690262BFC77047CF457154AF57901F416DDA68DBF90A7B0667B54ECB07F595BADC3DDCD78FAB1ED8EAC6151407524AE4DE0ECF63356D151466C115178F89FED403E73C90BF456D2550D788C07DABBD0C63547BE10EED91408A0035GDBG76G20AA6EE3AF489FAE5047A02814263064730AB222F353C3EF40D30CA8326074079441BFA4768A32A48C7A4490E2E39E8EE19D8CA64CDBC3FCFF88E83409FED19694A960D7C3B6C4472C8B9D41E3E411743A25B191880C8591DF779B2123707489A125A7
	689594B1BE0276FFBB04EDB2AE74420A30G7C26FA795EB831A948DF8B60D075502460755AC59992C6DDDDC7A0F0BB9CF4E3C9500AAA2CE787499D7D70DB2962BAFEEA82637220DD202E93D5FE23D947AE8DE17685B94AE3EC8971297D55B93693G75555CF7FE66613EE3BF7895D4316DFEDD5FA9295FE6692F26BE23D4A747D09AD99B7337927A56D773FC1F95759844568936467E6A44982B2F560FB9635C71BDC39A7B585322B3EF21B4283E4F13384B835E8A81CACFF31DE7A947298FB789A111FBED278C8E
	A7FA639620FC3EBBDD4AF85947F8B806E8AEF9D51565AC99D3856BFBG9681E4GEC81A8BC2D6AB4B620110B2F4557D908CC47962C5BE7F4E9E1BA8797C84B3600B1D4170F0471FEA60E0BFE45AE86C53F97FE04D85F23E13C8E0B776100BAE79D4187A1BFB4C3C006D47C63E19C4302224852E0D891DD2222C87E11F87F37882DD0F8B098CFAD1C5666B016B3B08179C19D3FB50CE3EBA860770B44286A94567FAC09ED51A70E81534D0130DF21786D63387E39ADC6D9EE59B1DE04F0EE7005F11E22B545DA816B
	B3A8CBE360AAB8552160999C77B7A7CBB5BABA8EB8DC9B596169B943E3F7628FBCF6CFCCBE0CB65C8C1A757620958F7D15B97B8C0D2B4DE76231CBF9FAFAC21F77DC12E398BEC4F9FD36844FCDAEF2ACE47C6E5B18275B12DFD42421D0B56278F56F9C554EA1290DE4F996DB41C9CCFF8F7005EAA036EAF8ECF5C5F0BF4FE7AC281A83BE9FB58174F9EA301E36CF15B0B92B206D2821FAA27BBE690F45CAB43AC85774D3BA97230731AF087F9796E19B415C352B7632C7FF1354574BECC77BBB2258F6BECD4E9EB8
	0BE95E1E66356A093314DE7DD91A9B3B6079BB40BFC7461D1D6163B2B57DB8FFEEBCCBF96CBA074721D9F53DF3B4B7541F0B0F2F84FC819917250EDBF90E524DE24F4D6768FA142E9F71F18D67E93F871EC1003473DA3A17CDFCDC46F91A07B05D759A3A54AFFEF9927BAA290BEF8963C224B2B48171D6D7F705F8882D011FA27B989E3F61BC2FF5DFA435C5A1348F5766584AEB39DFEFBD48EB5D345B99E820B357E2D443B754D2FE3D351A9A3EEF42C2FD6B31A9CCF3B574E555F23F7AF6D43B5FB606C201A109
	EC754C266313DA3F27382949D760B9AC49A1458909A9426D7FE71318DFDC8BB0B42B0D90290D307FEF823A68A35873BF42780BB11C8F30AFD0B9074EF0B917CDBE04866EFF507C2A011C310F28FCABBF0A4BD9302D46C275DFB9D90996F6AE51049F2BE327DB353ADEFFE85A1007DCC63BC0434332777F53C2E5CE1B66B257546558FCGB47EDD317D1A3CC0F147E6309E14D1A9C4F978C5E3832331F94DAA14DD3C542CF736997D528A736ABA16476A62BC58F76EB0FBGA89F9F4FF0BE4AAE407970826763A7B3
	DABEA85D2F7CCECBF73FF00FAE5D25BF99B1AF3DC069E5DD08535D30F507B9F7AB27FBF216535D8BE3EA6A7919316492FE121C0F384EE357B95DC51B33D069513F54250B41D7CF6925554769AE7D618EF37A8FB95D9D04AE26319B4614DD64725A9146CBFEC911841FB4A9161F247C7C629C0E69E0C28E3F69548C6B25BC2EBA2A55CD7D6C473ABCAEB9B4EAF6DF243C45AE46F97400DEFC2AEE16A3B59EE08C3A44F9FCF98E0FF46F4B9F576EFD35B03E9FE091C01ABA371CDCC80CD1D7E6F1B7EA62F4B2E15C6E
	CB3CE6FAFA4E992F6CF23C4E2C3ABC376624E79F0978127DB2BD7BD8D4FC08605D9ABC257F129A83DE685BF419576B5BE630BC958D30BF818CGC4GD6GE4B7703CE41BBA03D21C071CFEB018DF7039928A97FEAE1942F42156E06DA72734FEC775D09443FA48ED38539A3B044C5BF38773288F1D3C213D0B319E39E2369878F9D9A3DD3B22B16EC3D4F777A23CFF7BG3F84A09DA09B6039C62EB78761EDDE3D7133A1D398DDF70F892FDB886B14B46558AAG6CG5EA63E6E67E3A96D51925135875559035329
	6EB496B7A56A134E4BC8B9AFA3E99E1527490263FA8374658194G9CEE06BC84508520B4F339FE9CEBCAA5D7A3AF1C5D8175E7F3F2714B79754E5C1D1CF24AF9CB1B7564DCE745F22E063E8DG4F8194G145AC1D6G0F1D4BD9B3FDA1257D70E183E4A4E24D95107279616C5D49F7B1653C08DDCF3E73C5D83EE55017893091E0A70035A547F69C405E42653BF7BA259D633B7E826C38EB8E3F7DAD097C694B7973B973AA1365EC5113B333184889FD19G9B81F682D8DBC1CEGFBAB17F37B7445855A3199F08E
	2845F5C4E43C7E8D3ABBDBFEB965BCEFEB62BC3A575E1AB2280BC999C6773AC7E634FBDD2C155E73E440F3BDG2D1D4B49D98C73125B2A564E913C579CE84B311DG28EF63FB1D5FF4F7B246D24EF337A54E2377D34F13FA5987FD0BGA86E89D2732D0676FA152FG2979F62A6DA8E9772BFB34E946689E67CEE0E71B7E9EC5E93C750950C83ECF62C07D7587B34677984F4F685FE37C7B0C7EBD464FE70ED0BC2C213D85657D3F1A197F1E43B42BF74F71B611617BE66CBFB21C7725B1111025BEABC6703B9B08
	2A6E301F069C269CCA5ECB910FE3FBAB36E3E19B0F57653327515CF8ED71CACAC0660B38C5C16E9C9ED61312ABA88EF11EBF070C75F7BF52575F97103E7E7E9E4D2F3F07517C7AABB099737212C91F9713D91F17E2737C3C9CB29B71C26D750272BA5239033A86999E713B162D53B6B626CB89F41DD6576E30984B6132684BF11D1C39C30130BCA4A673BAE0A9D57B6259562908E3189DBAC6A27395C19E9167489AA473E91F517C28851FC387A52FA4339B9FAA6397E6380CADCA60EA353A66B72D46B2EE326A4B
	783455D846ED5654B27E40EAAC63735654B27E4CEAE4F3AA6B706C2B5C1E43F2E02C2B1A2D5DD8E4AC2B23C8DF56EBC54632769425167563A2E3D9452254327A0B126DC97D7A29B78E11388805449059486D02A2B0795FC29ADBB747ED7D75E2E3799FAF56177F49E2E3793FD31CDA7EE70B0D657F576254726FAA1E5F5639DAD92F62582579F824856BC92706F08D49811F8F1F5F91FF4F7C6399DEA714B8F81DF0015CCDF7C05B8B90F3707D7654845E6F539C7A7BE5C692FEBD345919183C8B596220E7DF8C94
	AF53F7A49ABCBB93C7783B74FF033E8EA7BF3FBFE4CA746D53CC8FFBA7719D39CF0886428A1C8B2F60B50ECE719AE9AD4C5F84108FE03DC2EBA52A27C7A770FA43D07102FA4806D2C866EE0F7139DEE8C7GD6GE483BCF70573E29944BCEAB4DA4DE229752056E6AC57D27D3D201EDF9A5AF3EC6E76C4FD0D369B5DA9FC1558A3561EFC2770CF843F34BD79CE21F11C5FA92C04BE5441EBACBB29893D50DE246216CF703AABCD45BD9141386C0E783BE4284522C87D9D517CB6993ECB7BA40055E01FAA8D2A338B
	D35C67F6025C25D7390FD48F14E9E329D218D06A6A5AE4495BA40CF4900F23F174D9F2EF0C67F7DD65F174A8D9F389EE83E4DF65F73811F7797DE966BF2CC26EF67D3B6A1D6EE973162B6C7E74EA7C0EA3F2EB0719527C6F9827D9F5AD47B6FA8D63CECDEB5FDDE09F7811091E2FE87F4D04FE1CDF3E05347D77A574E3FEDF32E87B1FCC6847BA2AE67329EC5FFD074B36773BEB116FEB0B8D3F25D9FB0D4A144B1E4BF6BFE0F2FFE952C2FD70E512178EF466582ABA39DF9EC498E70736CF450DA26E3F0BBAF91E
	7A9AF90736C5EDFF0334713B8A5AEE9B577A939E77497B6CC0828D237A7FEE016620BFCD605FC2D889F40BA1E912DC52C37E6B42FAD1A638EF6C8179E8DEDBB341735AG0CD1G52G32GF23BF8DE5B9EF90B2D590C3FE7003D4D979E7307DAA15F32F7GD43E46293B7BEE2773AE67AD3963F9B4C7FE163CD7A968CA5EFB1692BC7AE3725E33CE4D838720AF78C7FE9F7B6BB62C3BDCE867836C6F4E319D87E8G686F666718AD2DD5A8453D03BB906C00A24427A96729FC5614F7F849C0636D1B45BC5E329EFB
	84E55FEBB7FC97936CE6F1461E653B9EB061A715EF19934B37817A72G108BF2A0C085005D4565ABEDE3772678E886A7B1E1E8143C71D28FFA12B891C7638D157A546B33787B40F1D1D624A141C7374CA6C16E8A782421A873572AD96C2F27GBCAE6E0BA788EF2381D91A8C781539B3392FB7109C006FFCD6405C93EE0C1BC5F66E872E39714DEDEEE1108FE32CB06FF556AEF5477D0272A20F617AB13E5D53F737346FAFA67E971E1AD22B125E56D4B67638BBEFF637381CB7DAEEF63636F21B25CFE86F38EBDF
	790C6EBBF88CBEB765FD91FB6EFD7DC1934D7D74DDBB1E176D66397FC0A4B9775F17107BAFC512F3BF26996F8FC612F3FF627CD511645C4F67D39F7E7398D2FFFFDE737B7129CF3FC6787E27CA037AFF1143788CF15021FF06B86A50BF5B3F69187F9E61778E636FCD4A9D5A6FCDE87C3E5D0EED138F3EF0208776CCGBB002707476E579D58C769CDFDF25C36F8C7709986FF9527F07A8FB80DE5CDF7AE60DBBAA7FE7FBD98D0144098DE1F633F6A4476D282C102E45FC4B9310EE4E9E4D421C3997EB1A739A794
	07891A465A2FE72B13E3AD9E14153DAD5DEEE7F3E347CDD7F3F7E7C7C7D3E3774D460E3E466BAE4463388F1D1BE73E23335BF923731ABBF185574DEBADAD7696BBBFB32DC5BC7694506FB132AEA2B87A17FFD98F1759033FF76E6CC60867019F9D60393B6C4BDFC476FF311B7F007473C0FE8F0D7F065EF89DD8B2F61CFD33F04D0569C420AF2D175B3B7D4A87706C95EE4D3DCD83E4179C88C2BA0ED2AC79C205455176896DBE14856BED6A1D3FBE22745EE9B776170A76547EF2361DFCC381F6F6C7036C7CDB57
	0E4FF501616110287A65657643AA4E996A8A04A4FCEEE6F5DF421DFB9E701D1F02F7EA07E77E244D47079F7419F96ECF9EEF6D236B9D6ECBFE67780C9B6FB7F6408FGAC86D8893096E093C09EC0BE005513E3AB832881F0G7483848196812481E4F8387D7E2E7B64BC76E38790923432A0613065F7F32E5734F9051A16755DF0619C213EBBA71F3038E020FF04565279E4CFD98FBC603CCFF1AF92DCEE82EEB36263C85DC4F0DB919FE7D2F35259DE24723553750E11BC10012EC0BCF68E5E92079437B0224E59
	65B676291F3AD37B54AF5D7AB968D76E39B968E537FE8E3276E8F390FB6F5E03E3FF84EC60D1473D26622E2B3823BDB6066B133C4A280AFF33679506F70818A0479F6B41FCCD901C0761CEE8F057996EE48F0E8B9099CAA3BE3732871FF106A51F0F36CF13B1129F42C45547F942239494B4FC572BB84CB7BD738A6FEA3E31A02CD3FCD964E09C4FD9C774FFBFB676604416799FE8DFC8C60778D13952C99858B9FE264E326B0B96B332BAD191B50893D931D61DE89FD13A93D940A0917C5134B59158F781335A98
	AD3CE74830E65AFB1D45680D6498BD6241366CG7C688D9EE7C25F29F97C52B5A678FCD0F95EEE74FB310FB6C595B13EC73F61416B07789856C97B5E76E03EEFE9667CBFD0CB87880F642F4B9292GG00B3GGD0CB818294G94G88G88GF9FBB0B60F642F4B9292GG00B3GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGCC92GGGG
**end of data**/
}
}