package cbit.vcell.model.gui;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import cbit.vcell.client.PopupGenerator;
import cbit.vcell.model.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class MembraneDialog extends JDialog implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private JCheckBox overrideSizeNameCheckBox;
	private JCheckBox overrideVoltageNameCheckBox;
	private JTextField sizeNameTextField;
	private JLabel sizeNameLabel;
	private javax.swing.JButton okButton = null;
	private javax.swing.JButton cancelButton = null;
	private javax.swing.JLabel membraneNameLabel = null;
	private javax.swing.JTextField membraneNameTextField = null;
	private javax.swing.JPanel ivjPanel1 = null;
	private Membrane fieldMembrane = null;
	private javax.swing.JLabel voltageNameLabel = null;
	private javax.swing.JTextField voltageNameTextField = null;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public MembraneDialog(JFrame parent) {
	super(parent);
	setModal(true);
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getCancelButton()) 
		dispose();
	if (e.getSource() == getOkButton()) 
		OkButtonPressed(e);
	// user code begin {2}
	// user code end
}
/**
 * conn2:  (Button1.action.actionPerformed(java.awt.event.ActionEvent) --> Feature.name)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void OkButtonPressed(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getMembrane().setName(getMembraneNameTextField().getText());
		getMembrane().getMembraneVoltage().setName(getVoltageNameTextField().getText());
		getMembrane().getStructureSize().setName(getSizeNameTextField().getText());
		dispose();
		// user code begin {2}
	}catch (java.beans.PropertyVetoException pve){
		PopupGenerator.showErrorDialog(this, pve.getMessage());
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the Button1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (okButton == null) {
		try {
			okButton = new javax.swing.JButton();
			okButton.setName("Button1");
			okButton.setText("OK");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return okButton;
}
/**
 * Return the Button2 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (cancelButton == null) {
		try {
			cancelButton = new javax.swing.JButton();
			cancelButton.setName("Button2");
			cancelButton.setText("Cancel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return cancelButton;
}
/**
 * Return the JLabel1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getVoltageNameLabel() {
	if (voltageNameLabel == null) {
		try {
			voltageNameLabel = new javax.swing.JLabel();
			voltageNameLabel.setName("VoltageNameLabel");
			voltageNameLabel.setText("Voltage Name");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return voltageNameLabel;
}
/**
 * Return the JTextField1 property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getVoltageNameTextField() {
	if (voltageNameTextField == null) {
		try {
			voltageNameTextField = new javax.swing.JTextField();
			voltageNameTextField.setName("VoltageNameTextField");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return voltageNameTextField;
}
/**
 * Return the Label1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMembraneNameLabel() {
	if (membraneNameLabel == null) {
		try {
			membraneNameLabel = new javax.swing.JLabel();
			membraneNameLabel.setName("Label1");
			membraneNameLabel.setText("Membrane Name");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return membraneNameLabel;
}
/**
 * Return the Membrane property value.
 * @return cbit.vcell.model.Membrane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private Membrane getMembrane() {
	// user code begin {1}
	// user code end
	return fieldMembrane;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextField getMembraneNameTextField() {
	if (membraneNameTextField == null) {
		try {
			membraneNameTextField = new javax.swing.JTextField();
			membraneNameTextField.getDocument().addDocumentListener(new DocumentListener() {
				public void changedUpdate(final DocumentEvent e) {
					updateDependentText();
				}
				public void insertUpdate(final DocumentEvent e) {
					updateDependentText();
				}
				public void removeUpdate(final DocumentEvent e) {
					updateDependentText();
				}
			});
			membraneNameTextField.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
			membraneNameTextField.setName("NameTextField");
			membraneNameTextField.setColumns(20);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return membraneNameTextField;
}
/**
 * Return the Panel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getPanel1() {
	if (ivjPanel1 == null) {
		try {
			ivjPanel1 = new javax.swing.JPanel();
			ivjPanel1.setName("Panel1");
			final java.awt.GridBagLayout gridBagLayout = new java.awt.GridBagLayout();
			gridBagLayout.columnWidths = new int[] {0,0,0,7};
			gridBagLayout.rowHeights = new int[] {0,0,7};
			ivjPanel1.setLayout(gridBagLayout);

			java.awt.GridBagConstraints constraintsNameTextField = new java.awt.GridBagConstraints();
			constraintsNameTextField.gridx = 1; constraintsNameTextField.gridy = 0;
			constraintsNameTextField.gridwidth = 2;
			constraintsNameTextField.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsNameTextField.weightx = 1.0;
			constraintsNameTextField.insets = new java.awt.Insets(0, 0, 0, 10);
			getPanel1().add(getMembraneNameTextField(), constraintsNameTextField);

			java.awt.GridBagConstraints constraintsLabel1 = new java.awt.GridBagConstraints();
			constraintsLabel1.gridx = 0; constraintsLabel1.gridy = 0;
			constraintsLabel1.anchor = java.awt.GridBagConstraints.EAST;
			constraintsLabel1.weightx = 0.3;
			constraintsLabel1.insets = new java.awt.Insets(0, 10, 0, 5);
			getPanel1().add(getMembraneNameLabel(), constraintsLabel1);

			java.awt.GridBagConstraints constraintsButton1 = new java.awt.GridBagConstraints();
			constraintsButton1.gridx = 1; constraintsButton1.gridy = 3;
			constraintsButton1.ipadx = 20;
			constraintsButton1.insets = new java.awt.Insets(20, 0, 0, 0);
			final GridBagConstraints gridBagConstraints = new GridBagConstraints();
			gridBagConstraints.insets = new Insets(4, 10, 4, 5);
			gridBagConstraints.anchor = GridBagConstraints.EAST;
			gridBagConstraints.gridy = 2;
			gridBagConstraints.gridx = 0;
			final GridBagConstraints gridBagConstraints_2 = new GridBagConstraints();
			gridBagConstraints_2.gridy = 1;
			gridBagConstraints_2.gridx = 3;
			ivjPanel1.add(getOverrideVoltageNameCheckBox(), gridBagConstraints_2);
			ivjPanel1.add(getSizeNameLabel(), gridBagConstraints);
			final GridBagConstraints gridBagConstraints_1 = new GridBagConstraints();
			gridBagConstraints_1.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints_1.insets = new Insets(10, 0, 0, 10);
			gridBagConstraints_1.weightx = 1;
			gridBagConstraints_1.gridwidth = 2;
			gridBagConstraints_1.gridy = 2;
			gridBagConstraints_1.gridx = 1;
			ivjPanel1.add(getSizeNameTextField(), gridBagConstraints_1);
			final GridBagConstraints gridBagConstraints_3 = new GridBagConstraints();
			gridBagConstraints_3.gridy = 2;
			gridBagConstraints_3.gridx = 3;
			ivjPanel1.add(getOverrideSizeNameCheckBox(), gridBagConstraints_3);
			getPanel1().add(getOkButton(), constraintsButton1);

			java.awt.GridBagConstraints constraintsButton2 = new java.awt.GridBagConstraints();
			constraintsButton2.gridx = 2; constraintsButton2.gridy = 3;
			constraintsButton2.anchor = java.awt.GridBagConstraints.WEST;
			constraintsButton2.weightx = 1.0;
			constraintsButton2.insets = new java.awt.Insets(20, 10, 0, 20);
			getPanel1().add(getCancelButton(), constraintsButton2);

			java.awt.GridBagConstraints constraintsJLabel1 = new java.awt.GridBagConstraints();
			constraintsJLabel1.gridx = 0; constraintsJLabel1.gridy = 1;
			constraintsJLabel1.anchor = java.awt.GridBagConstraints.EAST;
			constraintsJLabel1.insets = new java.awt.Insets(4, 10, 4, 5);
			getPanel1().add(getVoltageNameLabel(), constraintsJLabel1);

			java.awt.GridBagConstraints constraintsJTextField1 = new java.awt.GridBagConstraints();
			constraintsJTextField1.gridx = 1; constraintsJTextField1.gridy = 1;
			constraintsJTextField1.gridwidth = 2;
			constraintsJTextField1.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJTextField1.weightx = 1.0;
			constraintsJTextField1.insets = new java.awt.Insets(10, 0, 0, 10);
			getPanel1().add(getVoltageNameTextField(), constraintsJTextField1);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPanel1;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	 System.out.println("--------- UNCAUGHT EXCEPTION --------- in FeatureDialog ");
	 exception.printStackTrace(System.out);
}
/**
 * Insert the method's description here.
 * Creation date: (7/20/2000 3:43:54 AM)
 * @param feature cbit.vcell.model.Feature
 */
public void init(Membrane membrane) {
	setMembrane(membrane);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getCancelButton().addActionListener(this);
	getOkButton().addActionListener(this);
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MembraneDialog");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setSize(400, 200);
		setContentPane(getPanel1());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	if (evt.getSource() == getMembrane() && (evt.getPropertyName().equals("name"))) {
		getMembraneNameTextField().setText(getMembrane().getName());
	}
	if (evt.getSource() == getMembrane().getMembraneVoltage() && (evt.getPropertyName().equals("name"))) {
		getVoltageNameTextField().setText(getMembrane().getMembraneVoltage().getName());
	}
	if (evt.getSource() == getMembrane().getStructureSize() && (evt.getPropertyName().equals("name"))) {
		getSizeNameTextField().setText(getMembrane().getStructureSize().getName());
	}
}

/**
 * Set the Membrane to a new value.
 * @param newValue cbit.vcell.model.Membrane
 */
private void setMembrane(Membrane newValue) {
	if (fieldMembrane != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (fieldMembrane != null) {
				fieldMembrane.removePropertyChangeListener(this);
				fieldMembrane.getMembraneVoltage().removePropertyChangeListener(this);
				fieldMembrane.getStructureSize().removePropertyChangeListener(this);
			}
			fieldMembrane = newValue;

			/* Listen for events from the new object */
			if (fieldMembrane != null) {
				fieldMembrane.addPropertyChangeListener(this);
				fieldMembrane.getMembraneVoltage().addPropertyChangeListener(this);
				fieldMembrane.getStructureSize().addPropertyChangeListener(this);
			}
			if (fieldMembrane!=null){
				boolean bOverrideSizeName = !fieldMembrane.getStructureSize().getName().equals(Structure.getDefaultStructureSizeName(fieldMembrane.getName()));
				getOverrideSizeNameCheckBox().setSelected(bOverrideSizeName);
				boolean bOverrideVoltageName = !fieldMembrane.getMembraneVoltage().getName().equals(Membrane.getDefaultMembraneVoltageName(fieldMembrane.getName()));
				getOverrideVoltageNameCheckBox().setSelected(bOverrideVoltageName);
				getMembraneNameTextField().setText(fieldMembrane.getName());
				getVoltageNameTextField().setText(fieldMembrane.getMembraneVoltage().getName());
				getSizeNameTextField().setText(fieldMembrane.getStructureSize().getName());
				updateDependentText();
			}
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
	/**
	 * @return
	 */
	protected JLabel getSizeNameLabel() {
		if (sizeNameLabel == null) {
			sizeNameLabel = new JLabel();
			sizeNameLabel.setText("Size Name [um^2]");
		}
		return sizeNameLabel;
	}
	/**
	 * @return
	 */
	protected JTextField getSizeNameTextField() {
		if (sizeNameTextField == null) {
			sizeNameTextField = new JTextField();
		}
		return sizeNameTextField;
	}
	/**
	 * @return
	 */
	protected JCheckBox getOverrideVoltageNameCheckBox() {
		if (overrideVoltageNameCheckBox == null) {
			overrideVoltageNameCheckBox = new JCheckBox();
			overrideVoltageNameCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
			overrideVoltageNameCheckBox.setText("override");
		}
		return overrideVoltageNameCheckBox;
	}

	private void updateDependentText(){
		if (!getOverrideSizeNameCheckBox().isSelected()){
			getSizeNameTextField().setEnabled(false);
			getSizeNameTextField().setDisabledTextColor(new Color(130,130,130));
			if (getMembraneNameTextField().getText().length()>0 && !getSizeNameTextField().getText().equals(Structure.getDefaultStructureSizeName(getMembraneNameTextField().getText()))){
				getSizeNameTextField().setText(Structure.getDefaultStructureSizeName(getMembraneNameTextField().getText()));
			}
		}else{
			getSizeNameTextField().setEnabled(true);
		}
		if (!getOverrideVoltageNameCheckBox().isSelected()){
			getVoltageNameTextField().setEnabled(false);
			getVoltageNameTextField().setDisabledTextColor(new Color(130,130,130));
			if (getMembraneNameTextField().getText().length()>0 && !getVoltageNameTextField().getText().equals(Membrane.getDefaultMembraneVoltageName(getMembraneNameTextField().getText()))){
				getVoltageNameTextField().setText(Membrane.getDefaultMembraneVoltageName(getMembraneNameTextField().getText()));
			}
		}else{
			getVoltageNameTextField().setEnabled(true);
		}
	}
	/**
	 * @return
	 */
	protected JCheckBox getOverrideSizeNameCheckBox() {
		if (overrideSizeNameCheckBox == null) {
			overrideSizeNameCheckBox = new JCheckBox();
			overrideSizeNameCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateDependentText();
				}
			});
			overrideSizeNameCheckBox.setText("override");
		}
		return overrideSizeNameCheckBox;
	}
}
