package cbit.vcell.model.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.*;
import cbit.vcell.model.*;
import java.util.Vector;
import java.util.Enumeration;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class ReactionCanvas extends javax.swing.JPanel implements java.beans.PropertyChangeListener {
	private java.awt.Dimension expressionBounds = new Dimension();
	private java.awt.Image offScreenImage = null;
	private java.awt.Dimension offScreenImageSize = null;
	private cbit.vcell.model.ReactionStep fieldReactionStep = null;
	private ReactionCanvasDisplaySpec fieldReactionCanvasDisplaySpec = null;

/**
 * Constructor
 */
public ReactionCanvas() {
	super();
	initialize();
}

//used by the publish package.
	public int getReactionAsImage(Image customImage, int width, int height, int fontSize) {

	try { 
		if (getReactionStep()== null){
			System.err.println("Cannot generate image: no reaction step.");
			return fontSize;
		}
		if (fontSize <= 0) {									//default font size.
			fontSize = 12;
		}
		boolean firstTime = true;
		int totWidth = 0;
		while (totWidth > width || firstTime) {
			if (firstTime) {
				firstTime = false;
			} else {
				fontSize = fontSize - 1;
				//System.out.println("New font size: " + fontSize);
			}
			refreshGraphics0(customImage,width,height,fontSize);
		}		
	}catch (Exception e){
		offScreenImage = null;
		System.out.println("exception in ReactionCanvas.refreshGraphics()");
		e.printStackTrace(System.out);
	}
	
	return fontSize;
}


/**
 * Gets the reactionCanvasDisplaySpec property (cbit.vcell.model.gui.ReactionCanvasDisplaySpec) value.
 * @return The reactionCanvasDisplaySpec property value.
 * @see #setReactionCanvasDisplaySpec
 */
public ReactionCanvasDisplaySpec getReactionCanvasDisplaySpec() {
	return fieldReactionCanvasDisplaySpec;
}


/**
 * Gets the reactionStep property (cbit.vcell.model.ReactionStep) value.
 * @return The reactionStep property value.
 * @see #setReactionStep
 */
public cbit.vcell.model.ReactionStep getReactionStep() {
	return fieldReactionStep;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}


/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ReactionCanvas");
		setLayout(null);
		setSize(160, 120);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		ReactionCanvas aReactionCanvas;
		aReactionCanvas = new ReactionCanvas();
		frame.setContentPane(aReactionCanvas);
		frame.setSize(aReactionCanvas.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * This method was created by a SmartGuide.
 * @param g java.awt.Graphics
 */
public void paintComponent(java.awt.Graphics g) {
	super.paintComponent(g);
	if (offScreenImage == null || offScreenImageSize == null || !offScreenImageSize.equals(getSize())){
		refreshGraphics();
	}
	if (offScreenImage != null){
		g.drawImage(offScreenImage,-1,-1,this);
	}	
	return;
}


/**
 * This method was created in VisualAge.
 * @param event java.beans.PropertyChangeEvent
 */
public void propertyChange(java.beans.PropertyChangeEvent event) {
	if (event.getSource() == getReactionStep()){
		if (event.getPropertyName().equals("kinetics")){
			if (event.getOldValue()!=null){
				((Kinetics)event.getOldValue()).removePropertyChangeListener(this);
			}
			if (event.getNewValue()!=null){
				((Kinetics)event.getNewValue()).addPropertyChangeListener(this);
			}
		}
		updateDisplaySpecFromReactionStep();
	} else if (event.getSource() instanceof Kinetics){
		updateDisplaySpecFromReactionStep();
	}
}


/**
 * This method was created by a SmartGuide.
 * @param g java.awt.Graphics
 */
private synchronized void refreshGraphics () {

	try {
		if (offScreenImage==null || offScreenImageSize==null || !offScreenImageSize.equals(getSize())){
			offScreenImageSize = new java.awt.Dimension(getSize().width,getSize().height);
			offScreenImage = createImage(offScreenImageSize.width,offScreenImageSize.height);
		}
		if (offScreenImage==null){
			return;
		}
		refreshGraphics0(offScreenImage,offScreenImageSize.width,offScreenImageSize.height,12);
	}catch (Exception e){
		offScreenImage = null;
		System.out.println("exception in ReactionCanvas.refreshGraphics()");
		e.printStackTrace(System.out);
	}			
	return;
}


/**
 * This method was created by a SmartGuide.
 * @param g java.awt.Graphics
 */
private void refreshGraphics0(Image offScreenImage, int width, int height, int fontSize) {

	try {
		java.awt.Graphics g = offScreenImage.getGraphics();
		g.setClip(0,0,width,height);
		g.setFont(new Font("SansSerif", Font.BOLD, fontSize));
		g.setColor(getBackground());
	  	g.fillRect(0,0,width,height);
  	
		if (getReactionCanvasDisplaySpec()!=null){
			ReactionCanvasDisplaySpec spec = getReactionCanvasDisplaySpec();
			g.setColor(java.awt.Color.black);
			Dimension newBounds = new Dimension(0,0);
			java.awt.FontMetrics fm = g.getFontMetrics();
			int bottomWidth =  (spec.getBottomText()!=null)?fm.stringWidth(spec.getBottomText()):0;
			int topWidth =  (spec.getTopText()!=null)?fm.stringWidth(spec.getTopText()):0;
			int leftWidth = (spec.getLeftText()!=null)?fm.stringWidth(spec.getLeftText()):0;
			int productWidth =  (spec.getRightText()!=null)?fm.stringWidth(spec.getRightText()):0;
			int bottomHeight =  (spec.getBottomText()!=null)?fm.getHeight():0;
			int topHeight =  (spec.getTopText()!=null)?fm.getHeight():0;
			int leftHeight = (spec.getLeftText()!=null)?fm.getHeight():0;
			int rightHeight =  (spec.getRightText()!=null)?fm.getHeight():0;
			int rateWidth = Math.max(bottomWidth,topWidth) + 30;
			int totHeight = Math.max(leftHeight, rightHeight);
			totHeight += topHeight + bottomHeight + 20;
			int totWidth = leftWidth + rateWidth + productWidth + 40;
			newBounds.width = totWidth;
			newBounds.height = totHeight;
			java.awt.Rectangle rect = g.getClipBounds();
			int posy = rect.y + rect.height/2 + leftHeight/2;
			int posx = rect.x + rect.width/2 - totWidth / 2 + 10;
			if (spec.getLeftText()!=null){
				g.drawString(spec.getLeftText(), posx, posy); posx += leftWidth + 10;
			}	
			if (spec.getArrowType()==ReactionCanvasDisplaySpec.ARROW_RIGHT){
				g.drawLine(posx,             posy-fm.getHeight()/3,   posx+rateWidth,   posy-fm.getHeight()/3  );
				g.drawLine(posx+rateWidth,   posy-fm.getHeight()/3,   posx+rateWidth-5, posy-fm.getHeight()/3-5);
				g.drawLine(posx+rateWidth,   posy-fm.getHeight()/3,   posx+rateWidth-5, posy-fm.getHeight()/3+5);
			} else if (spec.getArrowType()==ReactionCanvasDisplaySpec.ARROW_BOTH){
				g.drawLine(posx,             posy-fm.getHeight()/3-2, posx+rateWidth,   posy-fm.getHeight()/3-2);
				g.drawLine(posx,             posy-fm.getHeight()/3+2, posx+rateWidth,   posy-fm.getHeight()/3+2);
				g.drawLine(posx+rateWidth,   posy-fm.getHeight()/3-2, posx+rateWidth-5, posy-fm.getHeight()/3-7);
				g.drawLine(posx+1,           posy-fm.getHeight()/3+2, posx+6,           posy-fm.getHeight()/3+7);
			}	 
			posx += rateWidth + 10;
			if (spec.getRightText()!=null){
				g.drawString(spec.getRightText(), posx, posy);
			}	
			posy -= leftHeight;
			posx -= rateWidth/2 + 10 + topWidth/2;
			if (spec.getTopText()!=null){
				g.drawString(spec.getTopText(), posx, posy);
			}	
			posy += leftHeight + bottomHeight;
			posx += topWidth/2 - bottomWidth/2;
			if (spec.getBottomText()!=null){
				g.drawString(spec.getBottomText(), posx, posy);
			}	
			if (! newBounds.equals(expressionBounds)) {
				expressionBounds = newBounds;
				resizeToExpression();
			}
		}		
	}catch (Exception e){
		offScreenImage = null;
		System.out.println("exception in ReactionCanvas.refreshGraphics()");
		e.printStackTrace(System.out);
	}			
	return;
}


/**
 * This method was created by a SmartGuide.
 */
private void resizeToExpression() {
	try {
		if (getReactionCanvasDisplaySpec() != null) {
			setSize(expressionBounds.width, expressionBounds.height);
			setPreferredSize(new Dimension(expressionBounds.width, expressionBounds.height));
			revalidate();
		} else {
			java.awt.Dimension parentDim = getParent().getSize();
			setSize(parentDim.width - 10, parentDim.height - 10);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
}


/**
 * Sets the reactionCanvasDisplaySpec property (cbit.vcell.model.gui.ReactionCanvasDisplaySpec) value.
 * @param reactionCanvasDisplaySpec The new value for the property.
 * @see #getReactionCanvasDisplaySpec
 */
public void setReactionCanvasDisplaySpec(ReactionCanvasDisplaySpec reactionCanvasDisplaySpec) {
	ReactionCanvasDisplaySpec oldValue = fieldReactionCanvasDisplaySpec;
	fieldReactionCanvasDisplaySpec = reactionCanvasDisplaySpec;
	firePropertyChange("reactionCanvasDisplaySpec", oldValue, reactionCanvasDisplaySpec);
	refreshGraphics();
	repaint();
}


/**
 * Sets the reactionStep property (cbit.vcell.model.ReactionStep) value.
 * @param reactionStep The new value for the property.
 * @see #getReactionStep
 */
public void setReactionStep(cbit.vcell.model.ReactionStep reactionStep) {
	ReactionStep oldReactionStep = fieldReactionStep;
	fieldReactionStep = reactionStep;
	if (oldReactionStep != null){
		oldReactionStep.removePropertyChangeListener(this);
		if (oldReactionStep.getKinetics()!=null){
			oldReactionStep.getKinetics().removePropertyChangeListener(this);
		}
	}	
	if (fieldReactionStep != null){
		fieldReactionStep.addPropertyChangeListener(this);
		if (fieldReactionStep.getKinetics()!=null){
			fieldReactionStep.getKinetics().addPropertyChangeListener(this);
		}
	}
	firePropertyChange("reactionStep", oldReactionStep, reactionStep);
	updateDisplaySpecFromReactionStep();
}


/**
 * This method was created by a SmartGuide.
 * @param observable java.util.Observable
 * @param object java.lang.Object
 */
private void updateDisplaySpecFromReactionStep() {
	try {
		if (getReactionStep()!=null){
			
			String forwardRateString = null;
			String reverseRateString = null;
			String reactantString = null;
			String productString = null;
			String fluxString = null;
			boolean bReversible = false;

			//
			// get list of reactants, products, catalysts
			//
			Vector reactantList = new Vector();
			Vector productList = new Vector();
			Vector catalystList = new Vector();
			ReactionParticipant rp_Array[] = getReactionStep().getReactionParticipants();
			for (int i = 0; i < rp_Array.length; i++) {
				if (rp_Array[i] instanceof Reactant){
					reactantList.addElement(rp_Array[i]);
				}else if (rp_Array[i] instanceof Product){
					productList.addElement(rp_Array[i]);
				}else if (rp_Array[i] instanceof Catalyst){
					catalystList.addElement(rp_Array[i]);
				}
			}
			
			//
			// default for ForwardRateString is to display catalysts, if present
			//
			//           E1
			// (e.g. a -----> b    )
			//
			//
			forwardRateString = "";
			if (catalystList.size()>0){
				for (int i = 0; i < catalystList.size(); i++){
					if (i>0){
						forwardRateString += ",";
					}
					forwardRateString += ((Catalyst)catalystList.elementAt(i)).getSpeciesContext().getName();						
				}
			}
			
			if (getReactionStep() instanceof SimpleReaction){
				SimpleReaction simpleReaction = (SimpleReaction)getReactionStep();
				//
				// get rate expression strings
				//
				if (simpleReaction.getKinetics() instanceof MassActionKinetics) {
					Kinetics.KineticsParameter forwardRateParam = ((MassActionKinetics)simpleReaction.getKinetics()).getForwardRateParameter();
					if (forwardRateParam!=null){
						forwardRateString = forwardRateParam.getName();
					}
					Kinetics.KineticsParameter reverseRateParam = ((MassActionKinetics)simpleReaction.getKinetics()).getReverseRateParameter();
					if (reverseRateParam!=null){
						reverseRateString = reverseRateParam.getName();
						bReversible = true;
					}
				} else {
					reverseRateString = null;
				}
				//
				// form reactant string
				//
				reactantString = "";
				for (int i=0;i<reactantList.size();i++){
					if (i>0){
						reactantString += " + ";
					}
					if (((Reactant)reactantList.elementAt(i)).getStoichiometry() != 1.0){
						reactantString += ((Reactant)reactantList.elementAt(i)).getStoichiometry() + " ";
					}	
					reactantString += ((Reactant)reactantList.elementAt(i)).getSpeciesContext().getName();
				}		
				//
				// form product string
				//
				productString = "";
				for (int i=0;i<productList.size();i++){
					if (i>0){
						productString += " + ";
					}	
					if (((Product)productList.elementAt(i)).getStoichiometry() != 1.0){
						productString += ((Product)productList.elementAt(i)).getStoichiometry() + " ";
					}	
					productString += ((Product)productList.elementAt(i)).getSpeciesContext().getName();
				}		
			}else if (getReactionStep() instanceof FluxReaction){
				bReversible = false;
				FluxReaction fluxReaction = (FluxReaction)getReactionStep();
				Species fluxCarrier = fluxReaction.getFluxCarrier();
				reverseRateString = null;			
				if (fluxCarrier==null){
					fluxString = "unspecified flux carrier";
					reactantString = fluxString;
					productString = fluxString;
				}else{
					Membrane membrane = (Membrane)fluxReaction.getStructure();
					Flux outFlux = fluxReaction.getFlux(membrane.getOutsideFeature());
					Flux inFlux = fluxReaction.getFlux(membrane.getInsideFeature());
					String outSCName = (outFlux!=null)?outFlux.getSpeciesContext().getName():"unknown";
					String inSCName = (inFlux!=null)?inFlux.getSpeciesContext().getName():"unknown";
					fluxString = outSCName+"   > > > > > > > > > >   "+inSCName;
					reactantString = outSCName;
					productString = inSCName;
				}
			}
			int arrowType = (bReversible)?(ReactionCanvasDisplaySpec.ARROW_BOTH):(ReactionCanvasDisplaySpec.ARROW_RIGHT);
			setReactionCanvasDisplaySpec(new ReactionCanvasDisplaySpec(reactantString,productString,forwardRateString,reverseRateString,arrowType));
		}	
	}catch (Exception e){
		System.out.println("exception in ReactionCanvas.update(Observable, Object)");
		e.printStackTrace(System.out);
	}		
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GD2FBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135D7FFECD4C59EB717FAB1A766B02202FF91C4AD17CA2A569CB93D9CBFAE0AC02274DA85C5A59149A5475D21C7F2F706BFE6F7DBE8D5305D96140081B901826DF6DBEA8B9BB4ADAD397628A701DAEB52F83C5D1D6E3E766DFB6F5E1B37ADBFB4FE3FB3EFF6DF4BAEA811CDBE19B75F19794EF73EBFBEB3CB6A774E2E74796B8971D592775761A3E4F69DA16BFFDBF2C54A0E9FAA2DA61E5FC700DA22A6AA
	206D05312D3CBFD27BAE345B8197C006ED9134B5643B5A8FDCF901AB17707989519AF04E2C5ABD2EECA34C2982D9A7E020A1BBDF98F0EB64385B9F3E3310ECDAE67937219E0FCE0992F76DAA375DC75E725DF29877DA4C6D44B5B5506F85606183A47E75E1E8CF1E9DCBFC960B2AAC140ED1CD8B250CB855C289C70DC44ED1A546D4C36FD67434E2435C4DDC5F5B41AA3E1E105FC37F36A3A87BFCA76E51895FC3G93A06C7F7450C9573E214B3FA6E52D290A7772583F620830FB53112C7D9B34177D3B382F67A5
	5127612360A3C092B08DD084D881588DE3F524B8F1845A2EA86BB6D2A9C36FB24DD3DA5C7A9C4F835F11880C3832F3B4E6D8F1C2C49C1756B6663067DA906B1E7F516B04CF8A0F4918961D1BCF56BCF60FFFEB8E1F2CA93C6CDFF7D478E273512CCF445E6F85736D3D27F1F24ECD5E7BAB625D3BF1F5F920B2475E3DCF1587422E1E1E466C5E2C91E33D0847BA8E5FBEB78F04FCB917AF7048C57E1D67F26CAF053146A6199BC35B25AD7D95F3C8CD4B3DB97DB0F371B47F74A6E1C3E1D3569611970F0EE29D1501
	FCA320AAD4DA3D8F5089988618A1199B7FCCB47F405CB82BD86C1423EAF1EA9131765164CEE869843314BE5DE60A9E23030A25AAD10DC2D108B9CFA451766824F58BF94E46E00FFFD31DDA8A1692E8D7D214D14B96F31EC956629C0B725181B5C5E10314C9245E15C920A622A9B67B520CAB0CE6E7087155C974E5DA99840D20G3E05DFDE9DC31FCF0773978296E47CB020223EB35452299609749B4618E38E60C9C8D5B3466AA02F6D95B0FF9DC068FAC9C3D9BF0C471B251E5B5520C7CF0F4AF9C231AE4A5AF8
	FAA7F265C4330C75DF06E42CFB36BDCC9A4B6F4E996BA7A16FE6B43BDC5ABCB567D7F21DE81768FF3DF3E84A7A09665C39FFA390FBD8D76D91780974EF4F442ACF47D815016D9BB186E169632754FDA2E7CFA9B615D97A058589C663D90F0B39CF0EA22F52B455D98FB5299E078F5B4D11A52355597C9DB1B239758C171B106F5D10E0F6C67E6CA86624421825C69DC64FD346D4BD119DFF016FE5BBD1B3DBAAF22FD7C611CF0CF148774C7C57C6033C8EF41DF223B3CB5C7157F92ED20D264068EE435119107FE9
	8C63BDC6AF3A35725731ADBC57B5876BCE5CE1454ABBF886CBCD01AB30F449C498737853203C03918DA0433B389F5A8BE11913637F12B9797125F9E4617FCCFFAEAE1C7940AF7D8B43A22F4A42591C94B62D55F25B3E1E570CAB37052D6A842E1DFA290A9C781901FAB6017E2A9660309619835154AECF1D39416FB6B4CD38B26363AF749A0C897D3FC3011E30204FE47CB62887270C8D3ABE94635F6868C34D4385425E3F9DC69F7277412812D6A6C276B864C1A4721F338AD8A35E828FF13E407947DB64DB603E
	9DF896937B0059AD525FAB374937400C31C2D275E2D9A05FDBE6C10B70731A162C3FCB6E998F88DF2DB0F14FBD2DF01734CABF2D563D3C56E55BC6CC65146A1E71B6439B8FA13B43F89B5A915532D99F944C047447DD865A0B1C6B0ADDAEA83A6A4E6DEC4D724DC06B555CA36E456D7C7ECB360AFB5117113F4F654CA39777656C9D723DF68B0C2DEB15BCDCEDE1BCFA0F818F832EGE6GCAGE547249FF61B4748F56E39BE9D2E9FDD514ECFAAE0F95F1881D1F3EE3F5C2C14B5872D38A3167018EF04BDAB5AA0
	DF392C3A9EE58D506FEC137CDC0F57266B3B8FBD5F8F6E184A29BFA5449E3F3B29FB885F842D7C1C3B4B4A4D39FB2D5C1CFB402A95F25061FD014871A66B5A1C7C09150B1383FC6C4560961E4F978D07419B2C8D6375C6069F63503F52A6F23738CD5C7B227E9F99C7DE9801878BECF55E24B1B27793DC3B2FDE2E2D017E47009EC09CD0G90B93C2BCE6670861C53AEF5A6769FA072BF07118A2951D448C927C2CA1405E8DCE51148FF9DCD6BF7CDA502CF86392EE15041G535AA51FCC9C14FCD274609C3239BC
	B71F2C9D7856BF37DD1CEFE9FB16CFC86AE53F603039BCF7F1DDC5C7E975498E14155657FBF4209F5FG0450F6BEDE3143BB0E31B9BCE93CFD52B85A5B65730EA7A70DD7FA560B33ADBFA04F36F9F9B1519EAF487B3F2F2043FD9B3B6D74F533FC667ACB81D187FB6BEE6C3FCD530FDEA7B8ED990F555A0E29DC7787AE5F50B1156B06B3F9728F989BBEAE396E6FB66658C2682F81EC823CFB82789E50FBC2F25DB2ABCC2E43F58306598F852AF9CACA1CEFDE7D0D7DF7DB34D5462564B73FA28BFE5E63FFA7CFDC
	06CF08F8DCF15B0657E6793095677B050367AB023125008D000AC8E9758700F0C41EAFE8B70A731D064A68E2CC09A5796DA58FB72852712C988BD41C6DB93C8A5DB82E76FCC76BEEBE6FDE3E29FB883F90161FF737325C3C3B0D65665DBAF6EDDE5D4D723FF577B36FDBD7447539B456F58F44708220GB093D01409E9B15BAFE21AA31E2763895AED70FF18AC7396F1721F75BE677A7FCB6FF7700D93B598B3D228DF4A67B998AFE618DCA8E4739D741125A612CCCCF565A58E7223C6C738D848D625735B75EA7A
	7AF67DB14D5FE320EF6022696A7CF39A6FA9E3E4442619733F192E49487A6C33062D62236EFBD0CB8788DB1F8D124C87GG4893GGD0CB818294G94G88G88GD2FBB0B6DB1F8D124C87GG4893GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG8688GGGG
**end of data**/
}
}