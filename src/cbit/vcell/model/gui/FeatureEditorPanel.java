package cbit.vcell.model.gui;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import cbit.vcell.client.PopupGenerator;
import cbit.vcell.model.Feature;
import cbit.vcell.model.Structure;
/**
 * This class was generated by a SmartGuide.
 *
 *
 * showFeaturePropertyDialog is invoked in two modes:
 *
 * 1) parent!=null and child==null
 *    upon ok, it adds a new feature to the supplied parent.
 *
 * 2) parent==null and child!=null
 *    upon ok, edits the feature name
 *
 *
 */
@SuppressWarnings("serial")
public class FeatureEditorPanel extends JPanel implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private static final String PROPERTY_NAME_FEATURE = "feature";
	private JTextField featureSizeNameJTextField;
	private JLabel featureSizeNameLabel;
	private Feature fieldFeature = null;
	private javax.swing.JLabel ivjNameJLabel = null;
	private javax.swing.JTextField ivjNameJTextField = null;
	private javax.swing.JButton ivjRevertButton = null;
	private javax.swing.JButton ivjApplyButton = null;
	private JCheckBox overrideSizeNameCheckBox;
	
	private DocumentListener documentListener = new DocumentListener(){
		public void changedUpdate(DocumentEvent e) {
			updateFeatureSizeName();
		}
		public void insertUpdate(DocumentEvent e) {
			updateFeatureSizeName();
		}
		public void removeUpdate(DocumentEvent e) {
			updateFeatureSizeName();
		}
	};
/**
 * Constructor
 */
public FeatureEditorPanel() {
	initialize();
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
public void actionPerformed(java.awt.event.ActionEvent e) {
	if (e.getSource() == getApplyButton()) 
		apply();
	if (e.getSource() == getRevertButton()) 
		revert();
	if (e.getSource() == getOverrideSizeNameCheckBox()) {
		getFeatureSizeNameJTextField().setEditable(getOverrideSizeNameCheckBox().isSelected());
		updateFeatureSizeName();
	}
}
/**
 * Comment
 */
private void apply() {
	try{
		String name = getNameJTextField().getText();
		if(getFeature() != null){
			if (name != null && name.length() > 0){
				getFeature().setName(name);
			}
			String sizeName = getFeatureSizeNameJTextField().getText();
			if (sizeName != null && sizeName.length() > 0){
				getFeature().getStructureSize().setName(sizeName);
			}
		}
	}catch(Exception e){
		e.printStackTrace();
		PopupGenerator.showErrorDialog(this, "failed to apply changes: " + e.getMessage(), e);
	}
}

private void revert() {
	updateInterface();
}
/**
 * Return the Button2 property value.
 * @return javax.swing.JButton
 */
private javax.swing.JButton getRevertButton() {
	if (ivjRevertButton == null) {
		try {
			ivjRevertButton = new javax.swing.JButton("Revert");
			ivjRevertButton.setName("CancelJButton");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjRevertButton;
}
/**
 * Gets the childFeature property (cbit.vcell.model.Feature) value.
 * @return The childFeature property value.
 * @see #setChildFeature
 */
public Feature getFeature() {
	return fieldFeature;
}

///**
// * Gets the model property (cbit.vcell.model.Model) value.
// * @return The model property value.
// * @see #setModel
// */
//public Model getModel() {
//	return fieldModel;
//}
/**
 * Return the Label1 property value.
 * @return javax.swing.JLabel
 */
private javax.swing.JLabel getNameJLabel() {
	if (ivjNameJLabel == null) {
		try {
			ivjNameJLabel = new javax.swing.JLabel("Feature Name");
			ivjNameJLabel.setName("NameJLabel");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjNameJLabel;
}
/**
 * Return the NameTextField property value.
 * @return javax.swing.JTextField
 */
private javax.swing.JTextField getNameJTextField() {
	if (ivjNameJTextField == null) {
		try {
			ivjNameJTextField = new javax.swing.JTextField(20);
			ivjNameJTextField.setName("NameJTextField");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjNameJTextField;
}
/**
 * Return the Button1 property value.
 * @return javax.swing.JButton
 */
private javax.swing.JButton getApplyButton() {
	if (ivjApplyButton == null) {
		try {
			ivjApplyButton = new javax.swing.JButton("Apply");
			ivjApplyButton.setName("ApplyButton");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjApplyButton;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	 System.out.println("--------- UNCAUGHT EXCEPTION --------- in FeatureDialog ");
	 exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
private void initConnections() throws java.lang.Exception {
	this.addPropertyChangeListener(this);
	getRevertButton().addActionListener(this);
	getApplyButton().addActionListener(this);
	getNameJTextField().getDocument().addDocumentListener(documentListener);
	getOverrideSizeNameCheckBox().addActionListener(this);
}
/**
 * Initialize class
 */
private void initialize() {
	try {
		setLayout(new java.awt.GridBagLayout());

		java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 0; gbc.gridy = 0;
		gbc.insets = new java.awt.Insets(20, 20, 4, 4);
		gbc.anchor = GridBagConstraints.EAST;
		add(getNameJLabel(), gbc);

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1; gbc.gridy = 0;
		gbc.fill = java.awt.GridBagConstraints.BOTH;
		gbc.insets = new java.awt.Insets(20, 4, 4, 20);
		gbc.weightx = 1.0;
		gbc.gridwidth = 2;
		add(getNameJTextField(), gbc);
				
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.insets = new Insets(4, 20, 4, 4);
		gbc.anchor = GridBagConstraints.EAST;
		add(getFeatureSizeNameLabel(), gbc);
		
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.insets = new Insets(4, 4, 4, 20);
		gbc.fill = java.awt.GridBagConstraints.BOTH;
		gbc.weightx = 1.0;
		gbc.gridwidth = 2;
		add(getFeatureSizeNameJTextField(), gbc);
				
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 1;
		gbc.insets = new Insets(4, 4, 4, 20);
		add(getOverrideSizeNameCheckBox(), gbc);
		
		JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 4));
		panel.add(getApplyButton());
		panel.add(getRevertButton());
		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1; gbc.gridy = 2;
		gbc.insets = new Insets(10, 4, 4, 10);
		gbc.anchor = GridBagConstraints.PAGE_START;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		add(panel, gbc);
			
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
}
/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	if (evt.getSource() == this && (evt.getPropertyName().equals(PROPERTY_NAME_FEATURE))) {
		updateInterface();
	}
}
/**
 * Sets the childFeature property (cbit.vcell.model.Feature) value.
 * @param childFeature The new value for the property.
 * @see #getChildFeature
 */
public void setFeature(Feature newValue) {
	//
	// See class documentation for usage:
	//
	Feature oldValue = fieldFeature;
	fieldFeature = newValue;
	firePropertyChange(PROPERTY_NAME_FEATURE, oldValue, newValue);
}

/**
 * Comment
 */
private void updateInterface() {
	if (getFeature() != null) {
		getNameJTextField().setText(getFeature().getName());
		getFeatureSizeNameJTextField().setText(getFeature().getStructureSize().getName());
		boolean bOverride = !getFeature().getStructureSize().getName().equals(Structure.getDefaultStructureSizeName(getFeature().getName()));
		getOverrideSizeNameCheckBox().setSelected(bOverride);
		getFeatureSizeNameJTextField().setEditable(bOverride);
	}
}

private void updateFeatureSizeName() {
	if (!getOverrideSizeNameCheckBox().isSelected()) {
		getFeatureSizeNameJTextField().setText(Structure.getDefaultStructureSizeName(getNameJTextField().getText()));
	}
}
	/**
	 * @return
	 */
private JLabel getFeatureSizeNameLabel() {
		if (featureSizeNameLabel == null) {
			featureSizeNameLabel = new JLabel();
			featureSizeNameLabel.setText("Feature Size Name [um^3]");
		}
		return featureSizeNameLabel;
	}
	
	private JCheckBox getOverrideSizeNameCheckBox() {
		if (overrideSizeNameCheckBox == null) {
			overrideSizeNameCheckBox = new JCheckBox();
			overrideSizeNameCheckBox.addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					updateFeatureSizeName();
				}
			});
			overrideSizeNameCheckBox.setText("override");
		}
		return overrideSizeNameCheckBox;
	}
	
	private JTextField getFeatureSizeNameJTextField() {
		if (featureSizeNameJTextField == null) {
			featureSizeNameJTextField = new JTextField();
			featureSizeNameJTextField.setColumns(20);
		}
		return featureSizeNameJTextField;
	}
	
	public static void main(java.lang.String[] args) {
		try {
			javax.swing.JFrame frame = new javax.swing.JFrame();
			FeatureEditorPanel aPanel = new FeatureEditorPanel();
			frame.add(aPanel);
			frame.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					System.exit(0);
				};
			});
			frame.pack();
			frame.setVisible(true);
		} catch (Throwable exception) {
			System.err.println("Exception occurred in main() of cbit.gui.JInternalFrameEnhanced");
			exception.printStackTrace(System.out);
		}
	}
}
