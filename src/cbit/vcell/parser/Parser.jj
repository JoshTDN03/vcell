/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Parser.jj */
/*@egen*//**
 *
 * VCell Expression Parser Grammer for JavaCC 
 *
 */

options {
  LOOKAHEAD = 1;
  UNICODE_INPUT = false;                 
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(ExpressionParser)

package cbit.vcell.parser;

public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTExpressionParserState jjtree = new JJTExpressionParserState();

/*@egen*/

  public static void main(String args[]) {
    ExpressionParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 0.2:  Reading from standard input . . .");
      parser = new ExpressionParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 0.2:  Reading from file " + args[0] + " . . .");
      try {
        parser = new ExpressionParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 0.2:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("VCELL Model Parser Version 0.2:  Usage is one of:");
      System.out.println("         java cbit.vcell.parser.ExpressionParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.parser.ExpressionParser inputfile");
      return;
    }
    try {
      ASTExpression n = parser.Expression();
      n.dump("");
      System.out.println("Java Parser Version 0.2:  Java program parsed successfully.");
    } catch (Exception e) {
      System.out.println("Java Parser Version 0.2:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(ExpressionParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


/*
 * Tokens to consider in BNF follow.
 */

TOKEN : /* Relational Operators */
{
  <RELATIONAL_OPERATOR: <LT>|<GT>|<LE>|<GE>|<EQ>|<NE>> |
  <#LT: "<"  > | 
  <#GT: ">"  > | 
  <#LE: "<=" > |
  <#GE: ">=" > |
  <#EQ: "==" > |
  <#NE: "!=" >
}

TOKEN : /* Logical Operators */
{
  <AND: "&&" | ["a","A"] ["n","N"] ["d","D"] > | 
  <OR:  "||" | ["o","O"] ["r","R"]           > |
  <NOT: "!"  | ["n","N"] ["o","O"] ["t","T"] >
}

TOKEN : /* Arithmetic Operators */
{
  <POWER: "^"  > | 
  <ADD: "+"  > | 
  <SUB: "-" > |
  <MULT: "*" > |
  <DIV: "/" > 
}

TOKEN : /* LITERALS */
{
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | <INTEGER_LITERAL>
      | "0"
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER:
		"#" <ID>
	  | (<ID> ".")* <ID>
  >
|
  < #ID:
      <LETTER> (<LETTER>|<DIGIT>)*
  >
|
  < #LETTER:
      ["a"-"z", "_", "A"-"Z"]
  >
|
  < #DIGIT:
      ["0"-"9"]
  >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
ASTExpression Expression() :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
   try {
/*@egen*/
   LogicalORExpression() ";"/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void LogicalORExpression()       : 
{}
{/*@bgen(jjtree) #OrNode(> 1) */
   {
     ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   (
   LogicalANDExpression() ( <OR> LogicalANDExpression() )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void LogicalANDExpression()       : 
{}
{/*@bgen(jjtree) #AndNode(> 1) */
   {
     ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   (
   RelationalExpression() ( <AND> RelationalExpression() )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void RelationalExpression()       : 
{Token t_name=null;}
{
   AdditiveExpression() 
   [ LOOKAHEAD(<RELATIONAL_OPERATOR>) t_name = <RELATIONAL_OPERATOR> AdditiveExpression()/*@bgen(jjtree) #RelationalNode( 2) */
   {
     ASTRelationalNode jjtn001 = new ASTRelationalNode(JJTRELATIONALNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*//*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn001,  2);
     jjtc001 = false;
   }
/*@egen*/ 
   { 
     if (jjtn001!=null){
        ((ASTRelationalNode)jjtn001).setOperationFromToken(t_name.image);
     }
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  2);
     }
   }
/*@egen*/ ]
}

void AdditiveExpression()       :
{}
{/*@bgen(jjtree) #AddNode(> 1) */
  {
    ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  MultiplicativeExpression() ((<ADD> MultiplicativeExpression()) | MinusTerm())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}


void MinusTerm()                :
{/*@bgen(jjtree) MinusTermNode */
  ASTMinusTermNode jjtn000 = new ASTMinusTermNode(JJTMINUSTERMNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MinusTermNode */
   try {
/*@egen*/
   <SUB> MultiplicativeExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void MultiplicativeExpression()       :
{}
{/*@bgen(jjtree) #MultNode(> 1) */
  {
    ASTMultNode jjtn001 = new ASTMultNode(JJTMULTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  PowerTerm() ( (<MULT> PowerTerm() ) | DivTerm() )* 
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void DivTerm()                 :
{/*@bgen(jjtree) InvertTermNode */
  ASTInvertTermNode jjtn000 = new ASTInvertTermNode(JJTINVERTTERMNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InvertTermNode */
   try {
/*@egen*/
   <DIV> PowerTerm()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void PowerTerm()       :
{}
{
  (
  UnaryExpression() (LOOKAHEAD(<POWER>) <POWER>/*@bgen(jjtree) #PowerNode( 2) */
                                                {
                                                  ASTPowerNode jjtn001 = new ASTPowerNode(JJTPOWERNODE);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte001;
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    throw (ParseException)jjte001;
                                                  }
                                                  throw (Error)jjte001;
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                  }
                                                }
/*@egen*/)*
  )
}

void UnaryExpression()       :
{}
{
  <ADD> UnaryExpression()
|/*@bgen(jjtree) MinusTermNode */
  {
    ASTMinusTermNode jjtn001 = new ASTMinusTermNode(JJTMINUSTERMNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  <SUB> UnaryExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
|/*@bgen(jjtree) NotNode */
  {
    ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (
  <NOT> UnaryExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/
|
  PrimaryExpression()
}


void PrimaryExpression()       :
{}
{
  LOOKAHEAD(<IDENTIFIER> "(")
  Function()
| 
  LOOKAHEAD(Name())
  Name()
|
  Float()
|
  "(" LogicalORExpression() ")"
}

void Function()           :
{/*@bgen(jjtree) FuncNode */
  ASTFuncNode jjtn000 = new ASTFuncNode(JJTFUNCNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FuncNode */
  try {
/*@egen*/
  (t = <IDENTIFIER> Arguments())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setFunctionFromParserToken(t.image); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Arguments()       :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList()      :
{}
{
  LogicalORExpression() ( "," LogicalORExpression() )*
}

void Float()           :
{/*@bgen(jjtree) FloatNode */
  ASTFloatNode jjtn000 = new ASTFloatNode(JJTFLOATNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FloatNode */
  try {
/*@egen*/
  t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.value = new Double(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Name()         :
{/*@bgen(jjtree) IdNode */
  ASTIdNode jjtn000 = new ASTIdNode(JJTIDNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t_name=null; }
{/*@bgen(jjtree) IdNode */
  try {
/*@egen*/
  t_name = <IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.name = t_name.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

