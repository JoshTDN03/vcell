package cbit.vcell.client.data;
import javax.swing.*;
import cbit.rmi.event.*;
import cbit.vcell.solvers.CartesianMesh;
import cbit.vcell.solvers.MembraneElement;
/**
 * Insert the type's description here.
 * Creation date: (6/14/2004 9:48:35 PM)
 * @author: Ion Moraru
 */
public abstract class DataViewer extends JPanel implements ExportListener,cbit.rmi.event.DataJobListener {
	public static final String PROP_SIM_MODEL_INFO = "simulationModelInfo";
	private cbit.vcell.client.DataViewerManager fieldDataViewerManager = null;
	private SimulationModelInfo fieldSimulationModelInfo = null;

	public static class VolumeDataInfo{
		public final int volumeIndex;
		public final String volumeNamePhysiology;
		public final String volumeNameGeometry;
		public final int subvolumeID;
		public final int volumeRegionID;
		public VolumeDataInfo(int volumeIndex,CartesianMesh cartesianMesh,SimulationModelInfo simulationModelInfo){
			this.volumeIndex = volumeIndex;
			volumeRegionID = cartesianMesh.getVolumeRegionIndex(volumeIndex);
			subvolumeID = cartesianMesh.getSubVolumeFromVolumeIndex(volumeIndex);
			volumeNamePhysiology = simulationModelInfo.getVolumeNamePhysiology(subvolumeID);
			volumeNameGeometry = simulationModelInfo.getVolumeNameGeometry(subvolumeID);
		}
	}
	public static class MembraneDataInfo{
		public final int membraneIndex;
		public final MembraneElement membraneElement;
		public final String membraneName;
		public final int membraneRegionID;
		public MembraneDataInfo(int membraneIndex,CartesianMesh cartesianMesh,SimulationModelInfo simulationModelInfo){
			this.membraneIndex = membraneIndex;
			membraneElement = cartesianMesh.getMembraneElements()[membraneIndex];
			membraneRegionID = cartesianMesh.getMembraneRegionIndex(membraneIndex);
			membraneName =
				simulationModelInfo.getMembraneName(
						cartesianMesh.getSubVolumeFromVolumeIndex(membraneElement.getInsideVolumeIndex()),
						cartesianMesh.getSubVolumeFromVolumeIndex(membraneElement.getOutsideVolumeIndex()));
		}
	}
	public static class DataInfoProvider{
		private CartesianMesh cartesianMesh;
		private SimulationModelInfo simulationModelInfo;
		public DataInfoProvider(CartesianMesh cartesianMesh,SimulationModelInfo simulationModelInfo){
			this.cartesianMesh = cartesianMesh;
			this.simulationModelInfo = simulationModelInfo;
		}
		public VolumeDataInfo getVolumeDataInfo(int volumeIndex){
			return new VolumeDataInfo(volumeIndex,cartesianMesh,simulationModelInfo);
		}
		public MembraneDataInfo getMembraneDataInfo(int membraneIndex){
			return new MembraneDataInfo(membraneIndex,cartesianMesh,simulationModelInfo);
		}
	}
/**
 * Insert the method's description here.
 * Creation date: (3/31/2006 8:22:43 AM)
 */
public void dataJobMessage(DataJobEvent dje) {

	//Override this method if you are interested in receiveing events generated by
	//the dataserver.  (e.g. statistics job progress, timeseries job progress etc...)

	System.out.println("DataJobEvent jobID="+dje.getVcDataJobID()+" eventType="+dje.getEventTypeID());
}


/**
 * Insert the method's description here.
 * Creation date: (6/15/2004 1:55:39 AM)
 * @param event cbit.rmi.event.ExportEvent
 */
public void exportMessage(cbit.rmi.event.ExportEvent event) {
	getExportMonitorPanel().addExportEvent(event, event.getVCDataIdentifier().getID());
}


/**
 * Gets the dataViewerManager property (cbit.vcell.client.DataViewerManager) value.
 * @return The dataViewerManager property value.
 * @see #setDataViewerManager
 */
public cbit.vcell.client.DataViewerManager getDataViewerManager() {
	return fieldDataViewerManager;
}


/**
 * Method generated to support the promotion of the exportMonitorPanel attribute.
 * @return cbit.vcell.export.ExportMonitorPanel
 */
public abstract cbit.vcell.export.ExportMonitorPanel getExportMonitorPanel();


/**
 * Gets the simulationModelInfo property (cbit.vcell.client.data.SimulationModelInfo) value.
 * @return The simulationModelInfo property value.
 * @see #setSimulationModelInfo
 */
public SimulationModelInfo getSimulationModelInfo() {
	return fieldSimulationModelInfo;
}


/**
 * Sets the dataViewerManager property (cbit.vcell.client.DataViewerManager) value.
 * @param dataViewerManager The new value for the property.
 * @exception java.beans.PropertyVetoException The exception description.
 * @see #getDataViewerManager
 */
public void setDataViewerManager(cbit.vcell.client.DataViewerManager dataViewerManager) throws java.beans.PropertyVetoException {
	cbit.vcell.client.DataViewerManager oldValue = fieldDataViewerManager;
	fieldDataViewerManager = dataViewerManager;
	firePropertyChange("dataViewerManager", oldValue, dataViewerManager);
}


/**
 * Sets the simulationModelInfo property (cbit.vcell.client.data.SimulationModelInfo) value.
 * @param simulationModelInfo The new value for the property.
 * @see #getSimulationModelInfo
 */
public void setSimulationModelInfo(SimulationModelInfo simulationModelInfo) {
	SimulationModelInfo oldValue = fieldSimulationModelInfo;
	fieldSimulationModelInfo = simulationModelInfo;
	firePropertyChange(PROP_SIM_MODEL_INFO, oldValue, simulationModelInfo);
}
}