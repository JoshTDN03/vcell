/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-15")
public class ExportRequestSpec implements org.apache.thrift.TBase<ExportRequestSpec, ExportRequestSpec._Fields>, java.io.Serializable, Cloneable, Comparable<ExportRequestSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportRequestSpec");

  private static final org.apache.thrift.protocol.TField EXPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exportType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SIM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SimID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExportRequestSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExportRequestSpecTupleSchemeFactory());
  }

  /**
   * 
   * @see ExportType
   */
  public ExportType exportType; // required
  public String SimID; // required
  public List<VariableInfo> variables; // required
  public int startTime; // required
  public int endTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ExportType
     */
    EXPORT_TYPE((short)1, "exportType"),
    SIM_ID((short)2, "SimID"),
    VARIABLES((short)3, "variables"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPORT_TYPE
          return EXPORT_TYPE;
        case 2: // SIM_ID
          return SIM_ID;
        case 3: // VARIABLES
          return VARIABLES;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exportType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExportType.class)));
    tmpMap.put(_Fields.SIM_ID, new org.apache.thrift.meta_data.FieldMetaData("SimID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VariableList")));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportRequestSpec.class, metaDataMap);
  }

  public ExportRequestSpec() {
  }

  public ExportRequestSpec(
    ExportType exportType,
    String SimID,
    List<VariableInfo> variables,
    int startTime,
    int endTime)
  {
    this();
    this.exportType = exportType;
    this.SimID = SimID;
    this.variables = variables;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExportRequestSpec(ExportRequestSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExportType()) {
      this.exportType = other.exportType;
    }
    if (other.isSetSimID()) {
      this.SimID = other.SimID;
    }
    if (other.isSetVariables()) {
      this.variables = other.variables;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
  }

  public ExportRequestSpec deepCopy() {
    return new ExportRequestSpec(this);
  }

  @Override
  public void clear() {
    this.exportType = null;
    this.SimID = null;
    this.variables = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
  }

  /**
   * 
   * @see ExportType
   */
  public ExportType getExportType() {
    return this.exportType;
  }

  /**
   * 
   * @see ExportType
   */
  public ExportRequestSpec setExportType(ExportType exportType) {
    this.exportType = exportType;
    return this;
  }

  public void unsetExportType() {
    this.exportType = null;
  }

  /** Returns true if field exportType is set (has been assigned a value) and false otherwise */
  public boolean isSetExportType() {
    return this.exportType != null;
  }

  public void setExportTypeIsSet(boolean value) {
    if (!value) {
      this.exportType = null;
    }
  }

  public String getSimID() {
    return this.SimID;
  }

  public ExportRequestSpec setSimID(String SimID) {
    this.SimID = SimID;
    return this;
  }

  public void unsetSimID() {
    this.SimID = null;
  }

  /** Returns true if field SimID is set (has been assigned a value) and false otherwise */
  public boolean isSetSimID() {
    return this.SimID != null;
  }

  public void setSimIDIsSet(boolean value) {
    if (!value) {
      this.SimID = null;
    }
  }

  public int getVariablesSize() {
    return (this.variables == null) ? 0 : this.variables.size();
  }

  public java.util.Iterator<VariableInfo> getVariablesIterator() {
    return (this.variables == null) ? null : this.variables.iterator();
  }

  public void addToVariables(VariableInfo elem) {
    if (this.variables == null) {
      this.variables = new ArrayList<VariableInfo>();
    }
    this.variables.add(elem);
  }

  public List<VariableInfo> getVariables() {
    return this.variables;
  }

  public ExportRequestSpec setVariables(List<VariableInfo> variables) {
    this.variables = variables;
    return this;
  }

  public void unsetVariables() {
    this.variables = null;
  }

  /** Returns true if field variables is set (has been assigned a value) and false otherwise */
  public boolean isSetVariables() {
    return this.variables != null;
  }

  public void setVariablesIsSet(boolean value) {
    if (!value) {
      this.variables = null;
    }
  }

  public int getStartTime() {
    return this.startTime;
  }

  public ExportRequestSpec setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getEndTime() {
    return this.endTime;
  }

  public ExportRequestSpec setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPORT_TYPE:
      if (value == null) {
        unsetExportType();
      } else {
        setExportType((ExportType)value);
      }
      break;

    case SIM_ID:
      if (value == null) {
        unsetSimID();
      } else {
        setSimID((String)value);
      }
      break;

    case VARIABLES:
      if (value == null) {
        unsetVariables();
      } else {
        setVariables((List<VariableInfo>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPORT_TYPE:
      return getExportType();

    case SIM_ID:
      return getSimID();

    case VARIABLES:
      return getVariables();

    case START_TIME:
      return Integer.valueOf(getStartTime());

    case END_TIME:
      return Integer.valueOf(getEndTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPORT_TYPE:
      return isSetExportType();
    case SIM_ID:
      return isSetSimID();
    case VARIABLES:
      return isSetVariables();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExportRequestSpec)
      return this.equals((ExportRequestSpec)that);
    return false;
  }

  public boolean equals(ExportRequestSpec that) {
    if (that == null)
      return false;

    boolean this_present_exportType = true && this.isSetExportType();
    boolean that_present_exportType = true && that.isSetExportType();
    if (this_present_exportType || that_present_exportType) {
      if (!(this_present_exportType && that_present_exportType))
        return false;
      if (!this.exportType.equals(that.exportType))
        return false;
    }

    boolean this_present_SimID = true && this.isSetSimID();
    boolean that_present_SimID = true && that.isSetSimID();
    if (this_present_SimID || that_present_SimID) {
      if (!(this_present_SimID && that_present_SimID))
        return false;
      if (!this.SimID.equals(that.SimID))
        return false;
    }

    boolean this_present_variables = true && this.isSetVariables();
    boolean that_present_variables = true && that.isSetVariables();
    if (this_present_variables || that_present_variables) {
      if (!(this_present_variables && that_present_variables))
        return false;
      if (!this.variables.equals(that.variables))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_exportType = true && (isSetExportType());
    list.add(present_exportType);
    if (present_exportType)
      list.add(exportType.getValue());

    boolean present_SimID = true && (isSetSimID());
    list.add(present_SimID);
    if (present_SimID)
      list.add(SimID);

    boolean present_variables = true && (isSetVariables());
    list.add(present_variables);
    if (present_variables)
      list.add(variables);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExportRequestSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExportType()).compareTo(other.isSetExportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportType, other.exportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimID()).compareTo(other.isSetSimID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SimID, other.SimID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExportRequestSpec(");
    boolean first = true;

    sb.append("exportType:");
    if (this.exportType == null) {
      sb.append("null");
    } else {
      sb.append(this.exportType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SimID:");
    if (this.SimID == null) {
      sb.append("null");
    } else {
      sb.append(this.SimID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("variables:");
    if (this.variables == null) {
      sb.append("null");
    } else {
      sb.append(this.variables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exportType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exportType' was not present! Struct: " + toString());
    }
    if (SimID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SimID' was not present! Struct: " + toString());
    }
    if (variables == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'variables' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExportRequestSpecStandardSchemeFactory implements SchemeFactory {
    public ExportRequestSpecStandardScheme getScheme() {
      return new ExportRequestSpecStandardScheme();
    }
  }

  private static class ExportRequestSpecStandardScheme extends StandardScheme<ExportRequestSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExportRequestSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exportType = cbit.vcell.client.pyvcellproxy.ExportType.findByValue(iprot.readI32());
              struct.setExportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SimID = iprot.readString();
              struct.setSimIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.variables = new ArrayList<VariableInfo>(_list8.size);
                VariableInfo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new VariableInfo();
                  _elem9.read(iprot);
                  struct.variables.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endTime = iprot.readI32();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExportRequestSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exportType != null) {
        oprot.writeFieldBegin(EXPORT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.exportType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.SimID != null) {
        oprot.writeFieldBegin(SIM_ID_FIELD_DESC);
        oprot.writeString(struct.SimID);
        oprot.writeFieldEnd();
      }
      if (struct.variables != null) {
        oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.variables.size()));
          for (VariableInfo _iter11 : struct.variables)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI32(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExportRequestSpecTupleSchemeFactory implements SchemeFactory {
    public ExportRequestSpecTupleScheme getScheme() {
      return new ExportRequestSpecTupleScheme();
    }
  }

  private static class ExportRequestSpecTupleScheme extends TupleScheme<ExportRequestSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExportRequestSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.exportType.getValue());
      oprot.writeString(struct.SimID);
      {
        oprot.writeI32(struct.variables.size());
        for (VariableInfo _iter12 : struct.variables)
        {
          _iter12.write(oprot);
        }
      }
      oprot.writeI32(struct.startTime);
      oprot.writeI32(struct.endTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExportRequestSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exportType = cbit.vcell.client.pyvcellproxy.ExportType.findByValue(iprot.readI32());
      struct.setExportTypeIsSet(true);
      struct.SimID = iprot.readString();
      struct.setSimIDIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.variables = new ArrayList<VariableInfo>(_list13.size);
        VariableInfo _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new VariableInfo();
          _elem14.read(iprot);
          struct.variables.add(_elem14);
        }
      }
      struct.setVariablesIsSet(true);
      struct.startTime = iprot.readI32();
      struct.setStartTimeIsSet(true);
      struct.endTime = iprot.readI32();
      struct.setEndTimeIsSet(true);
    }
  }

}

