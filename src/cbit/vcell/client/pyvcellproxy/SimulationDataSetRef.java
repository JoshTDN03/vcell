/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-6")
public class SimulationDataSetRef implements org.apache.thrift.TBase<SimulationDataSetRef, SimulationDataSetRef._Fields>, java.io.Serializable, Cloneable, Comparable<SimulationDataSetRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimulationDataSetRef");

  private static final org.apache.thrift.protocol.TField SIM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("simId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VARIABLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("variableList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimulationDataSetRefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimulationDataSetRefTupleSchemeFactory());
  }

  public String simId; // required
  public String simName; // optional
  public List<String> variableList; // optional
  public String modelId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIM_ID((short)1, "simId"),
    SIM_NAME((short)2, "simName"),
    VARIABLE_LIST((short)3, "variableList"),
    MODEL_ID((short)4, "modelId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIM_ID
          return SIM_ID;
        case 2: // SIM_NAME
          return SIM_NAME;
        case 3: // VARIABLE_LIST
          return VARIABLE_LIST;
        case 4: // MODEL_ID
          return MODEL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SIM_NAME,_Fields.VARIABLE_LIST,_Fields.MODEL_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIM_ID, new org.apache.thrift.meta_data.FieldMetaData("simId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIM_NAME, new org.apache.thrift.meta_data.FieldMetaData("simName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VARIABLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("variableList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VariableList")));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimulationDataSetRef.class, metaDataMap);
  }

  public SimulationDataSetRef() {
  }

  public SimulationDataSetRef(
    String simId)
  {
    this();
    this.simId = simId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimulationDataSetRef(SimulationDataSetRef other) {
    if (other.isSetSimId()) {
      this.simId = other.simId;
    }
    if (other.isSetSimName()) {
      this.simName = other.simName;
    }
    if (other.isSetVariableList()) {
      this.variableList = other.variableList;
    }
    if (other.isSetModelId()) {
      this.modelId = other.modelId;
    }
  }

  public SimulationDataSetRef deepCopy() {
    return new SimulationDataSetRef(this);
  }

  @Override
  public void clear() {
    this.simId = null;
    this.simName = null;
    this.variableList = null;
    this.modelId = null;
  }

  public String getSimId() {
    return this.simId;
  }

  public SimulationDataSetRef setSimId(String simId) {
    this.simId = simId;
    return this;
  }

  public void unsetSimId() {
    this.simId = null;
  }

  /** Returns true if field simId is set (has been assigned a value) and false otherwise */
  public boolean isSetSimId() {
    return this.simId != null;
  }

  public void setSimIdIsSet(boolean value) {
    if (!value) {
      this.simId = null;
    }
  }

  public String getSimName() {
    return this.simName;
  }

  public SimulationDataSetRef setSimName(String simName) {
    this.simName = simName;
    return this;
  }

  public void unsetSimName() {
    this.simName = null;
  }

  /** Returns true if field simName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimName() {
    return this.simName != null;
  }

  public void setSimNameIsSet(boolean value) {
    if (!value) {
      this.simName = null;
    }
  }

  public int getVariableListSize() {
    return (this.variableList == null) ? 0 : this.variableList.size();
  }

  public java.util.Iterator<String> getVariableListIterator() {
    return (this.variableList == null) ? null : this.variableList.iterator();
  }

  public void addToVariableList(String elem) {
    if (this.variableList == null) {
      this.variableList = new ArrayList<String>();
    }
    this.variableList.add(elem);
  }

  public List<String> getVariableList() {
    return this.variableList;
  }

  public SimulationDataSetRef setVariableList(List<String> variableList) {
    this.variableList = variableList;
    return this;
  }

  public void unsetVariableList() {
    this.variableList = null;
  }

  /** Returns true if field variableList is set (has been assigned a value) and false otherwise */
  public boolean isSetVariableList() {
    return this.variableList != null;
  }

  public void setVariableListIsSet(boolean value) {
    if (!value) {
      this.variableList = null;
    }
  }

  public String getModelId() {
    return this.modelId;
  }

  public SimulationDataSetRef setModelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  public void unsetModelId() {
    this.modelId = null;
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return this.modelId != null;
  }

  public void setModelIdIsSet(boolean value) {
    if (!value) {
      this.modelId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIM_ID:
      if (value == null) {
        unsetSimId();
      } else {
        setSimId((String)value);
      }
      break;

    case SIM_NAME:
      if (value == null) {
        unsetSimName();
      } else {
        setSimName((String)value);
      }
      break;

    case VARIABLE_LIST:
      if (value == null) {
        unsetVariableList();
      } else {
        setVariableList((List<String>)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIM_ID:
      return getSimId();

    case SIM_NAME:
      return getSimName();

    case VARIABLE_LIST:
      return getVariableList();

    case MODEL_ID:
      return getModelId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIM_ID:
      return isSetSimId();
    case SIM_NAME:
      return isSetSimName();
    case VARIABLE_LIST:
      return isSetVariableList();
    case MODEL_ID:
      return isSetModelId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimulationDataSetRef)
      return this.equals((SimulationDataSetRef)that);
    return false;
  }

  public boolean equals(SimulationDataSetRef that) {
    if (that == null)
      return false;

    boolean this_present_simId = true && this.isSetSimId();
    boolean that_present_simId = true && that.isSetSimId();
    if (this_present_simId || that_present_simId) {
      if (!(this_present_simId && that_present_simId))
        return false;
      if (!this.simId.equals(that.simId))
        return false;
    }

    boolean this_present_simName = true && this.isSetSimName();
    boolean that_present_simName = true && that.isSetSimName();
    if (this_present_simName || that_present_simName) {
      if (!(this_present_simName && that_present_simName))
        return false;
      if (!this.simName.equals(that.simName))
        return false;
    }

    boolean this_present_variableList = true && this.isSetVariableList();
    boolean that_present_variableList = true && that.isSetVariableList();
    if (this_present_variableList || that_present_variableList) {
      if (!(this_present_variableList && that_present_variableList))
        return false;
      if (!this.variableList.equals(that.variableList))
        return false;
    }

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (!this.modelId.equals(that.modelId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_simId = true && (isSetSimId());
    list.add(present_simId);
    if (present_simId)
      list.add(simId);

    boolean present_simName = true && (isSetSimName());
    list.add(present_simName);
    if (present_simName)
      list.add(simName);

    boolean present_variableList = true && (isSetVariableList());
    list.add(present_variableList);
    if (present_variableList)
      list.add(variableList);

    boolean present_modelId = true && (isSetModelId());
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    return list.hashCode();
  }

  @Override
  public int compareTo(SimulationDataSetRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSimId()).compareTo(other.isSetSimId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simId, other.simId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimName()).compareTo(other.isSetSimName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simName, other.simName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVariableList()).compareTo(other.isSetVariableList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariableList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variableList, other.variableList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimulationDataSetRef(");
    boolean first = true;

    sb.append("simId:");
    if (this.simId == null) {
      sb.append("null");
    } else {
      sb.append(this.simId);
    }
    first = false;
    if (isSetSimName()) {
      if (!first) sb.append(", ");
      sb.append("simName:");
      if (this.simName == null) {
        sb.append("null");
      } else {
        sb.append(this.simName);
      }
      first = false;
    }
    if (isSetVariableList()) {
      if (!first) sb.append(", ");
      sb.append("variableList:");
      if (this.variableList == null) {
        sb.append("null");
      } else {
        sb.append(this.variableList);
      }
      first = false;
    }
    if (isSetModelId()) {
      if (!first) sb.append(", ");
      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (simId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimulationDataSetRefStandardSchemeFactory implements SchemeFactory {
    public SimulationDataSetRefStandardScheme getScheme() {
      return new SimulationDataSetRefStandardScheme();
    }
  }

  private static class SimulationDataSetRefStandardScheme extends StandardScheme<SimulationDataSetRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simId = iprot.readString();
              struct.setSimIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simName = iprot.readString();
              struct.setSimNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VARIABLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.variableList = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.variableList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setVariableListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelId = iprot.readString();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.simId != null) {
        oprot.writeFieldBegin(SIM_ID_FIELD_DESC);
        oprot.writeString(struct.simId);
        oprot.writeFieldEnd();
      }
      if (struct.simName != null) {
        if (struct.isSetSimName()) {
          oprot.writeFieldBegin(SIM_NAME_FIELD_DESC);
          oprot.writeString(struct.simName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variableList != null) {
        if (struct.isSetVariableList()) {
          oprot.writeFieldBegin(VARIABLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variableList.size()));
            for (String _iter3 : struct.variableList)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelId != null) {
        if (struct.isSetModelId()) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimulationDataSetRefTupleSchemeFactory implements SchemeFactory {
    public SimulationDataSetRefTupleScheme getScheme() {
      return new SimulationDataSetRefTupleScheme();
    }
  }

  private static class SimulationDataSetRefTupleScheme extends TupleScheme<SimulationDataSetRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.simId);
      BitSet optionals = new BitSet();
      if (struct.isSetSimName()) {
        optionals.set(0);
      }
      if (struct.isSetVariableList()) {
        optionals.set(1);
      }
      if (struct.isSetModelId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSimName()) {
        oprot.writeString(struct.simName);
      }
      if (struct.isSetVariableList()) {
        {
          oprot.writeI32(struct.variableList.size());
          for (String _iter4 : struct.variableList)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetModelId()) {
        oprot.writeString(struct.modelId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.simId = iprot.readString();
      struct.setSimIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.simName = iprot.readString();
        struct.setSimNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.variableList = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.variableList.add(_elem6);
          }
        }
        struct.setVariableListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelId = iprot.readString();
        struct.setModelIdIsSet(true);
      }
    }
  }

}

