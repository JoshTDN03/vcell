/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-30")
public class SimulationDataSetRef implements org.apache.thrift.TBase<SimulationDataSetRef, SimulationDataSetRef._Fields>, java.io.Serializable, Cloneable, Comparable<SimulationDataSetRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimulationDataSetRef");

  private static final org.apache.thrift.protocol.TField SIM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("simId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USERKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userkey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("jobIndex", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_MATH_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isMathModel", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SIMULATION_CONTEXT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationContextName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimulationDataSetRefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimulationDataSetRefTupleSchemeFactory());
  }

  public String simId; // required
  public String simName; // required
  public String modelId; // required
  public String username; // required
  public String userkey; // required
  public int jobIndex; // required
  public boolean isMathModel; // required
  public String simulationContextName; // optional
  public String modelName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIM_ID((short)1, "simId"),
    SIM_NAME((short)2, "simName"),
    MODEL_ID((short)3, "modelId"),
    USERNAME((short)4, "username"),
    USERKEY((short)5, "userkey"),
    JOB_INDEX((short)6, "jobIndex"),
    IS_MATH_MODEL((short)7, "isMathModel"),
    SIMULATION_CONTEXT_NAME((short)8, "simulationContextName"),
    MODEL_NAME((short)9, "modelName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIM_ID
          return SIM_ID;
        case 2: // SIM_NAME
          return SIM_NAME;
        case 3: // MODEL_ID
          return MODEL_ID;
        case 4: // USERNAME
          return USERNAME;
        case 5: // USERKEY
          return USERKEY;
        case 6: // JOB_INDEX
          return JOB_INDEX;
        case 7: // IS_MATH_MODEL
          return IS_MATH_MODEL;
        case 8: // SIMULATION_CONTEXT_NAME
          return SIMULATION_CONTEXT_NAME;
        case 9: // MODEL_NAME
          return MODEL_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBINDEX_ISSET_ID = 0;
  private static final int __ISMATHMODEL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SIMULATION_CONTEXT_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIM_ID, new org.apache.thrift.meta_data.FieldMetaData("simId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIM_NAME, new org.apache.thrift.meta_data.FieldMetaData("simName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERKEY, new org.apache.thrift.meta_data.FieldMetaData("userkey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_INDEX, new org.apache.thrift.meta_data.FieldMetaData("jobIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IS_MATH_MODEL, new org.apache.thrift.meta_data.FieldMetaData("isMathModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIMULATION_CONTEXT_NAME, new org.apache.thrift.meta_data.FieldMetaData("simulationContextName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimulationDataSetRef.class, metaDataMap);
  }

  public SimulationDataSetRef() {
  }

  public SimulationDataSetRef(
    String simId,
    String simName,
    String modelId,
    String username,
    String userkey,
    int jobIndex,
    boolean isMathModel,
    String modelName)
  {
    this();
    this.simId = simId;
    this.simName = simName;
    this.modelId = modelId;
    this.username = username;
    this.userkey = userkey;
    this.jobIndex = jobIndex;
    setJobIndexIsSet(true);
    this.isMathModel = isMathModel;
    setIsMathModelIsSet(true);
    this.modelName = modelName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimulationDataSetRef(SimulationDataSetRef other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSimId()) {
      this.simId = other.simId;
    }
    if (other.isSetSimName()) {
      this.simName = other.simName;
    }
    if (other.isSetModelId()) {
      this.modelId = other.modelId;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetUserkey()) {
      this.userkey = other.userkey;
    }
    this.jobIndex = other.jobIndex;
    this.isMathModel = other.isMathModel;
    if (other.isSetSimulationContextName()) {
      this.simulationContextName = other.simulationContextName;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
  }

  public SimulationDataSetRef deepCopy() {
    return new SimulationDataSetRef(this);
  }

  @Override
  public void clear() {
    this.simId = null;
    this.simName = null;
    this.modelId = null;
    this.username = null;
    this.userkey = null;
    setJobIndexIsSet(false);
    this.jobIndex = 0;
    setIsMathModelIsSet(false);
    this.isMathModel = false;
    this.simulationContextName = null;
    this.modelName = null;
  }

  public String getSimId() {
    return this.simId;
  }

  public SimulationDataSetRef setSimId(String simId) {
    this.simId = simId;
    return this;
  }

  public void unsetSimId() {
    this.simId = null;
  }

  /** Returns true if field simId is set (has been assigned a value) and false otherwise */
  public boolean isSetSimId() {
    return this.simId != null;
  }

  public void setSimIdIsSet(boolean value) {
    if (!value) {
      this.simId = null;
    }
  }

  public String getSimName() {
    return this.simName;
  }

  public SimulationDataSetRef setSimName(String simName) {
    this.simName = simName;
    return this;
  }

  public void unsetSimName() {
    this.simName = null;
  }

  /** Returns true if field simName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimName() {
    return this.simName != null;
  }

  public void setSimNameIsSet(boolean value) {
    if (!value) {
      this.simName = null;
    }
  }

  public String getModelId() {
    return this.modelId;
  }

  public SimulationDataSetRef setModelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  public void unsetModelId() {
    this.modelId = null;
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return this.modelId != null;
  }

  public void setModelIdIsSet(boolean value) {
    if (!value) {
      this.modelId = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public SimulationDataSetRef setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getUserkey() {
    return this.userkey;
  }

  public SimulationDataSetRef setUserkey(String userkey) {
    this.userkey = userkey;
    return this;
  }

  public void unsetUserkey() {
    this.userkey = null;
  }

  /** Returns true if field userkey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserkey() {
    return this.userkey != null;
  }

  public void setUserkeyIsSet(boolean value) {
    if (!value) {
      this.userkey = null;
    }
  }

  public int getJobIndex() {
    return this.jobIndex;
  }

  public SimulationDataSetRef setJobIndex(int jobIndex) {
    this.jobIndex = jobIndex;
    setJobIndexIsSet(true);
    return this;
  }

  public void unsetJobIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBINDEX_ISSET_ID);
  }

  /** Returns true if field jobIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetJobIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBINDEX_ISSET_ID);
  }

  public void setJobIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBINDEX_ISSET_ID, value);
  }

  public boolean isIsMathModel() {
    return this.isMathModel;
  }

  public SimulationDataSetRef setIsMathModel(boolean isMathModel) {
    this.isMathModel = isMathModel;
    setIsMathModelIsSet(true);
    return this;
  }

  public void unsetIsMathModel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID);
  }

  /** Returns true if field isMathModel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMathModel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID);
  }

  public void setIsMathModelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMATHMODEL_ISSET_ID, value);
  }

  public String getSimulationContextName() {
    return this.simulationContextName;
  }

  public SimulationDataSetRef setSimulationContextName(String simulationContextName) {
    this.simulationContextName = simulationContextName;
    return this;
  }

  public void unsetSimulationContextName() {
    this.simulationContextName = null;
  }

  /** Returns true if field simulationContextName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimulationContextName() {
    return this.simulationContextName != null;
  }

  public void setSimulationContextNameIsSet(boolean value) {
    if (!value) {
      this.simulationContextName = null;
    }
  }

  public String getModelName() {
    return this.modelName;
  }

  public SimulationDataSetRef setModelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIM_ID:
      if (value == null) {
        unsetSimId();
      } else {
        setSimId((String)value);
      }
      break;

    case SIM_NAME:
      if (value == null) {
        unsetSimName();
      } else {
        setSimName((String)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case USERKEY:
      if (value == null) {
        unsetUserkey();
      } else {
        setUserkey((String)value);
      }
      break;

    case JOB_INDEX:
      if (value == null) {
        unsetJobIndex();
      } else {
        setJobIndex((Integer)value);
      }
      break;

    case IS_MATH_MODEL:
      if (value == null) {
        unsetIsMathModel();
      } else {
        setIsMathModel((Boolean)value);
      }
      break;

    case SIMULATION_CONTEXT_NAME:
      if (value == null) {
        unsetSimulationContextName();
      } else {
        setSimulationContextName((String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIM_ID:
      return getSimId();

    case SIM_NAME:
      return getSimName();

    case MODEL_ID:
      return getModelId();

    case USERNAME:
      return getUsername();

    case USERKEY:
      return getUserkey();

    case JOB_INDEX:
      return Integer.valueOf(getJobIndex());

    case IS_MATH_MODEL:
      return Boolean.valueOf(isIsMathModel());

    case SIMULATION_CONTEXT_NAME:
      return getSimulationContextName();

    case MODEL_NAME:
      return getModelName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIM_ID:
      return isSetSimId();
    case SIM_NAME:
      return isSetSimName();
    case MODEL_ID:
      return isSetModelId();
    case USERNAME:
      return isSetUsername();
    case USERKEY:
      return isSetUserkey();
    case JOB_INDEX:
      return isSetJobIndex();
    case IS_MATH_MODEL:
      return isSetIsMathModel();
    case SIMULATION_CONTEXT_NAME:
      return isSetSimulationContextName();
    case MODEL_NAME:
      return isSetModelName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimulationDataSetRef)
      return this.equals((SimulationDataSetRef)that);
    return false;
  }

  public boolean equals(SimulationDataSetRef that) {
    if (that == null)
      return false;

    boolean this_present_simId = true && this.isSetSimId();
    boolean that_present_simId = true && that.isSetSimId();
    if (this_present_simId || that_present_simId) {
      if (!(this_present_simId && that_present_simId))
        return false;
      if (!this.simId.equals(that.simId))
        return false;
    }

    boolean this_present_simName = true && this.isSetSimName();
    boolean that_present_simName = true && that.isSetSimName();
    if (this_present_simName || that_present_simName) {
      if (!(this_present_simName && that_present_simName))
        return false;
      if (!this.simName.equals(that.simName))
        return false;
    }

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (!this.modelId.equals(that.modelId))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_userkey = true && this.isSetUserkey();
    boolean that_present_userkey = true && that.isSetUserkey();
    if (this_present_userkey || that_present_userkey) {
      if (!(this_present_userkey && that_present_userkey))
        return false;
      if (!this.userkey.equals(that.userkey))
        return false;
    }

    boolean this_present_jobIndex = true;
    boolean that_present_jobIndex = true;
    if (this_present_jobIndex || that_present_jobIndex) {
      if (!(this_present_jobIndex && that_present_jobIndex))
        return false;
      if (this.jobIndex != that.jobIndex)
        return false;
    }

    boolean this_present_isMathModel = true;
    boolean that_present_isMathModel = true;
    if (this_present_isMathModel || that_present_isMathModel) {
      if (!(this_present_isMathModel && that_present_isMathModel))
        return false;
      if (this.isMathModel != that.isMathModel)
        return false;
    }

    boolean this_present_simulationContextName = true && this.isSetSimulationContextName();
    boolean that_present_simulationContextName = true && that.isSetSimulationContextName();
    if (this_present_simulationContextName || that_present_simulationContextName) {
      if (!(this_present_simulationContextName && that_present_simulationContextName))
        return false;
      if (!this.simulationContextName.equals(that.simulationContextName))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_simId = true && (isSetSimId());
    list.add(present_simId);
    if (present_simId)
      list.add(simId);

    boolean present_simName = true && (isSetSimName());
    list.add(present_simName);
    if (present_simName)
      list.add(simName);

    boolean present_modelId = true && (isSetModelId());
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_userkey = true && (isSetUserkey());
    list.add(present_userkey);
    if (present_userkey)
      list.add(userkey);

    boolean present_jobIndex = true;
    list.add(present_jobIndex);
    if (present_jobIndex)
      list.add(jobIndex);

    boolean present_isMathModel = true;
    list.add(present_isMathModel);
    if (present_isMathModel)
      list.add(isMathModel);

    boolean present_simulationContextName = true && (isSetSimulationContextName());
    list.add(present_simulationContextName);
    if (present_simulationContextName)
      list.add(simulationContextName);

    boolean present_modelName = true && (isSetModelName());
    list.add(present_modelName);
    if (present_modelName)
      list.add(modelName);

    return list.hashCode();
  }

  @Override
  public int compareTo(SimulationDataSetRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSimId()).compareTo(other.isSetSimId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simId, other.simId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimName()).compareTo(other.isSetSimName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simName, other.simName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserkey()).compareTo(other.isSetUserkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userkey, other.userkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobIndex()).compareTo(other.isSetJobIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobIndex, other.jobIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMathModel()).compareTo(other.isSetIsMathModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMathModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMathModel, other.isMathModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimulationContextName()).compareTo(other.isSetSimulationContextName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimulationContextName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationContextName, other.simulationContextName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimulationDataSetRef(");
    boolean first = true;

    sb.append("simId:");
    if (this.simId == null) {
      sb.append("null");
    } else {
      sb.append(this.simId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simName:");
    if (this.simName == null) {
      sb.append("null");
    } else {
      sb.append(this.simName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    if (this.modelId == null) {
      sb.append("null");
    } else {
      sb.append(this.modelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userkey:");
    if (this.userkey == null) {
      sb.append("null");
    } else {
      sb.append(this.userkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobIndex:");
    sb.append(this.jobIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMathModel:");
    sb.append(this.isMathModel);
    first = false;
    if (isSetSimulationContextName()) {
      if (!first) sb.append(", ");
      sb.append("simulationContextName:");
      if (this.simulationContextName == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationContextName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("modelName:");
    if (this.modelName == null) {
      sb.append("null");
    } else {
      sb.append(this.modelName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (simId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simId' was not present! Struct: " + toString());
    }
    if (simName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simName' was not present! Struct: " + toString());
    }
    if (modelId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelId' was not present! Struct: " + toString());
    }
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    if (userkey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userkey' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'jobIndex' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isMathModel' because it's a primitive and you chose the non-beans generator.
    if (modelName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimulationDataSetRefStandardSchemeFactory implements SchemeFactory {
    public SimulationDataSetRefStandardScheme getScheme() {
      return new SimulationDataSetRefStandardScheme();
    }
  }

  private static class SimulationDataSetRefStandardScheme extends StandardScheme<SimulationDataSetRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simId = iprot.readString();
              struct.setSimIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simName = iprot.readString();
              struct.setSimNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelId = iprot.readString();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userkey = iprot.readString();
              struct.setUserkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobIndex = iprot.readI32();
              struct.setJobIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_MATH_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMathModel = iprot.readBool();
              struct.setIsMathModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIMULATION_CONTEXT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simulationContextName = iprot.readString();
              struct.setSimulationContextNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetJobIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobIndex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsMathModel()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isMathModel' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.simId != null) {
        oprot.writeFieldBegin(SIM_ID_FIELD_DESC);
        oprot.writeString(struct.simId);
        oprot.writeFieldEnd();
      }
      if (struct.simName != null) {
        oprot.writeFieldBegin(SIM_NAME_FIELD_DESC);
        oprot.writeString(struct.simName);
        oprot.writeFieldEnd();
      }
      if (struct.modelId != null) {
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeString(struct.modelId);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.userkey != null) {
        oprot.writeFieldBegin(USERKEY_FIELD_DESC);
        oprot.writeString(struct.userkey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_INDEX_FIELD_DESC);
      oprot.writeI32(struct.jobIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MATH_MODEL_FIELD_DESC);
      oprot.writeBool(struct.isMathModel);
      oprot.writeFieldEnd();
      if (struct.simulationContextName != null) {
        if (struct.isSetSimulationContextName()) {
          oprot.writeFieldBegin(SIMULATION_CONTEXT_NAME_FIELD_DESC);
          oprot.writeString(struct.simulationContextName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.modelName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimulationDataSetRefTupleSchemeFactory implements SchemeFactory {
    public SimulationDataSetRefTupleScheme getScheme() {
      return new SimulationDataSetRefTupleScheme();
    }
  }

  private static class SimulationDataSetRefTupleScheme extends TupleScheme<SimulationDataSetRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.simId);
      oprot.writeString(struct.simName);
      oprot.writeString(struct.modelId);
      oprot.writeString(struct.username);
      oprot.writeString(struct.userkey);
      oprot.writeI32(struct.jobIndex);
      oprot.writeBool(struct.isMathModel);
      oprot.writeString(struct.modelName);
      BitSet optionals = new BitSet();
      if (struct.isSetSimulationContextName()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSimulationContextName()) {
        oprot.writeString(struct.simulationContextName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimulationDataSetRef struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.simId = iprot.readString();
      struct.setSimIdIsSet(true);
      struct.simName = iprot.readString();
      struct.setSimNameIsSet(true);
      struct.modelId = iprot.readString();
      struct.setModelIdIsSet(true);
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
      struct.userkey = iprot.readString();
      struct.setUserkeyIsSet(true);
      struct.jobIndex = iprot.readI32();
      struct.setJobIndexIsSet(true);
      struct.isMathModel = iprot.readBool();
      struct.setIsMathModelIsSet(true);
      struct.modelName = iprot.readString();
      struct.setModelNameIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.simulationContextName = iprot.readString();
        struct.setSimulationContextNameIsSet(true);
      }
    }
  }

}

