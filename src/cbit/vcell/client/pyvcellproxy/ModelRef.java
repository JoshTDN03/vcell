/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-15")
public class ModelRef implements org.apache.thrift.TBase<ModelRef, ModelRef._Fields>, java.io.Serializable, Cloneable, Comparable<ModelRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelRef");

  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelType", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelRefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelRefTupleSchemeFactory());
  }

  public String modelId; // required
  public String modelName; // optional
  public User user; // optional
  /**
   * 
   * @see ModelType
   */
  public ModelType modelType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_ID((short)1, "modelId"),
    MODEL_NAME((short)2, "modelName"),
    USER((short)3, "user"),
    /**
     * 
     * @see ModelType
     */
    MODEL_TYPE((short)4, "modelType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_ID
          return MODEL_ID;
        case 2: // MODEL_NAME
          return MODEL_NAME;
        case 3: // USER
          return USER;
        case 4: // MODEL_TYPE
          return MODEL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MODEL_NAME,_Fields.USER,_Fields.MODEL_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.MODEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelRef.class, metaDataMap);
  }

  public ModelRef() {
  }

  public ModelRef(
    String modelId)
  {
    this();
    this.modelId = modelId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelRef(ModelRef other) {
    if (other.isSetModelId()) {
      this.modelId = other.modelId;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetUser()) {
      this.user = new User(other.user);
    }
    if (other.isSetModelType()) {
      this.modelType = other.modelType;
    }
  }

  public ModelRef deepCopy() {
    return new ModelRef(this);
  }

  @Override
  public void clear() {
    this.modelId = null;
    this.modelName = null;
    this.user = null;
    this.modelType = null;
  }

  public String getModelId() {
    return this.modelId;
  }

  public ModelRef setModelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  public void unsetModelId() {
    this.modelId = null;
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return this.modelId != null;
  }

  public void setModelIdIsSet(boolean value) {
    if (!value) {
      this.modelId = null;
    }
  }

  public String getModelName() {
    return this.modelName;
  }

  public ModelRef setModelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  public User getUser() {
    return this.user;
  }

  public ModelRef setUser(User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  /**
   * 
   * @see ModelType
   */
  public ModelType getModelType() {
    return this.modelType;
  }

  /**
   * 
   * @see ModelType
   */
  public ModelRef setModelType(ModelType modelType) {
    this.modelType = modelType;
    return this;
  }

  public void unsetModelType() {
    this.modelType = null;
  }

  /** Returns true if field modelType is set (has been assigned a value) and false otherwise */
  public boolean isSetModelType() {
    return this.modelType != null;
  }

  public void setModelTypeIsSet(boolean value) {
    if (!value) {
      this.modelType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((User)value);
      }
      break;

    case MODEL_TYPE:
      if (value == null) {
        unsetModelType();
      } else {
        setModelType((ModelType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_ID:
      return getModelId();

    case MODEL_NAME:
      return getModelName();

    case USER:
      return getUser();

    case MODEL_TYPE:
      return getModelType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_ID:
      return isSetModelId();
    case MODEL_NAME:
      return isSetModelName();
    case USER:
      return isSetUser();
    case MODEL_TYPE:
      return isSetModelType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelRef)
      return this.equals((ModelRef)that);
    return false;
  }

  public boolean equals(ModelRef that) {
    if (that == null)
      return false;

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (!this.modelId.equals(that.modelId))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_modelType = true && this.isSetModelType();
    boolean that_present_modelType = true && that.isSetModelType();
    if (this_present_modelType || that_present_modelType) {
      if (!(this_present_modelType && that_present_modelType))
        return false;
      if (!this.modelType.equals(that.modelType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_modelId = true && (isSetModelId());
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    boolean present_modelName = true && (isSetModelName());
    list.add(present_modelName);
    if (present_modelName)
      list.add(modelName);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_modelType = true && (isSetModelType());
    list.add(present_modelType);
    if (present_modelType)
      list.add(modelType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelType()).compareTo(other.isSetModelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelType, other.modelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelRef(");
    boolean first = true;

    sb.append("modelId:");
    if (this.modelId == null) {
      sb.append("null");
    } else {
      sb.append(this.modelId);
    }
    first = false;
    if (isSetModelName()) {
      if (!first) sb.append(", ");
      sb.append("modelName:");
      if (this.modelName == null) {
        sb.append("null");
      } else {
        sb.append(this.modelName);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetModelType()) {
      if (!first) sb.append(", ");
      sb.append("modelType:");
      if (this.modelType == null) {
        sb.append("null");
      } else {
        sb.append(this.modelType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (modelId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modelId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelRefStandardSchemeFactory implements SchemeFactory {
    public ModelRefStandardScheme getScheme() {
      return new ModelRefStandardScheme();
    }
  }

  private static class ModelRefStandardScheme extends StandardScheme<ModelRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelId = iprot.readString();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modelType = cbit.vcell.client.pyvcellproxy.ModelType.findByValue(iprot.readI32());
              struct.setModelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.modelId != null) {
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeString(struct.modelId);
        oprot.writeFieldEnd();
      }
      if (struct.modelName != null) {
        if (struct.isSetModelName()) {
          oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
          oprot.writeString(struct.modelName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelType != null) {
        if (struct.isSetModelType()) {
          oprot.writeFieldBegin(MODEL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.modelType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelRefTupleSchemeFactory implements SchemeFactory {
    public ModelRefTupleScheme getScheme() {
      return new ModelRefTupleScheme();
    }
  }

  private static class ModelRefTupleScheme extends TupleScheme<ModelRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelRef struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.modelId);
      BitSet optionals = new BitSet();
      if (struct.isSetModelName()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetModelType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModelName()) {
        oprot.writeString(struct.modelName);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetModelType()) {
        oprot.writeI32(struct.modelType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelRef struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.modelId = iprot.readString();
      struct.setModelIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.modelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = new User();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelType = cbit.vcell.client.pyvcellproxy.ModelType.findByValue(iprot.readI32());
        struct.setModelTypeIsSet(true);
      }
    }
  }

}

