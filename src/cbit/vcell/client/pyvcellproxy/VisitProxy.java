/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-6")
public class VisitProxy {

  public interface Iface {

    public void openDatabase(String databaseName) throws DatabaseFileException, org.apache.thrift.TException;

    public void closeDatabase() throws DatabaseFileException, org.apache.thrift.TException;

    public void drawPlot(String variableName) throws PlotException, org.apache.thrift.TException;

    public void clearPlots() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void openDatabase(String databaseName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeDatabase(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void drawPlot(String variableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearPlots(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void openDatabase(String databaseName) throws DatabaseFileException, org.apache.thrift.TException
    {
      send_openDatabase(databaseName);
      recv_openDatabase();
    }

    public void send_openDatabase(String databaseName) throws org.apache.thrift.TException
    {
      openDatabase_args args = new openDatabase_args();
      args.setDatabaseName(databaseName);
      sendBase("openDatabase", args);
    }

    public void recv_openDatabase() throws DatabaseFileException, org.apache.thrift.TException
    {
      openDatabase_result result = new openDatabase_result();
      receiveBase(result, "openDatabase");
      if (result.databaseFileException != null) {
        throw result.databaseFileException;
      }
      return;
    }

    public void closeDatabase() throws DatabaseFileException, org.apache.thrift.TException
    {
      send_closeDatabase();
      recv_closeDatabase();
    }

    public void send_closeDatabase() throws org.apache.thrift.TException
    {
      closeDatabase_args args = new closeDatabase_args();
      sendBase("closeDatabase", args);
    }

    public void recv_closeDatabase() throws DatabaseFileException, org.apache.thrift.TException
    {
      closeDatabase_result result = new closeDatabase_result();
      receiveBase(result, "closeDatabase");
      if (result.databaseFileException != null) {
        throw result.databaseFileException;
      }
      return;
    }

    public void drawPlot(String variableName) throws PlotException, org.apache.thrift.TException
    {
      send_drawPlot(variableName);
      recv_drawPlot();
    }

    public void send_drawPlot(String variableName) throws org.apache.thrift.TException
    {
      drawPlot_args args = new drawPlot_args();
      args.setVariableName(variableName);
      sendBase("drawPlot", args);
    }

    public void recv_drawPlot() throws PlotException, org.apache.thrift.TException
    {
      drawPlot_result result = new drawPlot_result();
      receiveBase(result, "drawPlot");
      if (result.plotException != null) {
        throw result.plotException;
      }
      return;
    }

    public void clearPlots() throws org.apache.thrift.TException
    {
      send_clearPlots();
    }

    public void send_clearPlots() throws org.apache.thrift.TException
    {
      clearPlots_args args = new clearPlots_args();
      sendBase("clearPlots", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void openDatabase(String databaseName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openDatabase_call method_call = new openDatabase_call(databaseName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String databaseName;
      public openDatabase_call(String databaseName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.databaseName = databaseName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openDatabase_args args = new openDatabase_args();
        args.setDatabaseName(databaseName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DatabaseFileException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_openDatabase();
      }
    }

    public void closeDatabase(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeDatabase_call method_call = new closeDatabase_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeDatabase_call extends org.apache.thrift.async.TAsyncMethodCall {
      public closeDatabase_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeDatabase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeDatabase_args args = new closeDatabase_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DatabaseFileException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeDatabase();
      }
    }

    public void drawPlot(String variableName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drawPlot_call method_call = new drawPlot_call(variableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drawPlot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String variableName;
      public drawPlot_call(String variableName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.variableName = variableName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drawPlot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drawPlot_args args = new drawPlot_args();
        args.setVariableName(variableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws PlotException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_drawPlot();
      }
    }

    public void clearPlots(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearPlots_call method_call = new clearPlots_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearPlots_call extends org.apache.thrift.async.TAsyncMethodCall {
      public clearPlots_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearPlots", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        clearPlots_args args = new clearPlots_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("openDatabase", new openDatabase());
      processMap.put("closeDatabase", new closeDatabase());
      processMap.put("drawPlot", new drawPlot());
      processMap.put("clearPlots", new clearPlots());
      return processMap;
    }

    public static class openDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openDatabase_args> {
      public openDatabase() {
        super("openDatabase");
      }

      public openDatabase_args getEmptyArgsInstance() {
        return new openDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openDatabase_result getResult(I iface, openDatabase_args args) throws org.apache.thrift.TException {
        openDatabase_result result = new openDatabase_result();
        try {
          iface.openDatabase(args.databaseName);
        } catch (DatabaseFileException databaseFileException) {
          result.databaseFileException = databaseFileException;
        }
        return result;
      }
    }

    public static class closeDatabase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeDatabase_args> {
      public closeDatabase() {
        super("closeDatabase");
      }

      public closeDatabase_args getEmptyArgsInstance() {
        return new closeDatabase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeDatabase_result getResult(I iface, closeDatabase_args args) throws org.apache.thrift.TException {
        closeDatabase_result result = new closeDatabase_result();
        try {
          iface.closeDatabase();
        } catch (DatabaseFileException databaseFileException) {
          result.databaseFileException = databaseFileException;
        }
        return result;
      }
    }

    public static class drawPlot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drawPlot_args> {
      public drawPlot() {
        super("drawPlot");
      }

      public drawPlot_args getEmptyArgsInstance() {
        return new drawPlot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public drawPlot_result getResult(I iface, drawPlot_args args) throws org.apache.thrift.TException {
        drawPlot_result result = new drawPlot_result();
        try {
          iface.drawPlot(args.variableName);
        } catch (PlotException plotException) {
          result.plotException = plotException;
        }
        return result;
      }
    }

    public static class clearPlots<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearPlots_args> {
      public clearPlots() {
        super("clearPlots");
      }

      public clearPlots_args getEmptyArgsInstance() {
        return new clearPlots_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, clearPlots_args args) throws org.apache.thrift.TException {
        iface.clearPlots();
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("openDatabase", new openDatabase());
      processMap.put("closeDatabase", new closeDatabase());
      processMap.put("drawPlot", new drawPlot());
      processMap.put("clearPlots", new clearPlots());
      return processMap;
    }

    public static class openDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openDatabase_args, Void> {
      public openDatabase() {
        super("openDatabase");
      }

      public openDatabase_args getEmptyArgsInstance() {
        return new openDatabase_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            openDatabase_result result = new openDatabase_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openDatabase_result result = new openDatabase_result();
            if (e instanceof DatabaseFileException) {
                        result.databaseFileException = (DatabaseFileException) e;
                        result.setDatabaseFileExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.openDatabase(args.databaseName,resultHandler);
      }
    }

    public static class closeDatabase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeDatabase_args, Void> {
      public closeDatabase() {
        super("closeDatabase");
      }

      public closeDatabase_args getEmptyArgsInstance() {
        return new closeDatabase_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            closeDatabase_result result = new closeDatabase_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeDatabase_result result = new closeDatabase_result();
            if (e instanceof DatabaseFileException) {
                        result.databaseFileException = (DatabaseFileException) e;
                        result.setDatabaseFileExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeDatabase_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.closeDatabase(resultHandler);
      }
    }

    public static class drawPlot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, drawPlot_args, Void> {
      public drawPlot() {
        super("drawPlot");
      }

      public drawPlot_args getEmptyArgsInstance() {
        return new drawPlot_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            drawPlot_result result = new drawPlot_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            drawPlot_result result = new drawPlot_result();
            if (e instanceof PlotException) {
                        result.plotException = (PlotException) e;
                        result.setPlotExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, drawPlot_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.drawPlot(args.variableName,resultHandler);
      }
    }

    public static class clearPlots<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearPlots_args, Void> {
      public clearPlots() {
        super("clearPlots");
      }

      public clearPlots_args getEmptyArgsInstance() {
        return new clearPlots_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, clearPlots_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.clearPlots(resultHandler);
      }
    }

  }

  public static class openDatabase_args implements org.apache.thrift.TBase<openDatabase_args, openDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<openDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openDatabase_args");

    private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openDatabase_argsTupleSchemeFactory());
    }

    public String databaseName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATABASE_NAME((short)1, "databaseName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATABASE_NAME
            return DATABASE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("databaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openDatabase_args.class, metaDataMap);
    }

    public openDatabase_args() {
    }

    public openDatabase_args(
      String databaseName)
    {
      this();
      this.databaseName = databaseName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openDatabase_args(openDatabase_args other) {
      if (other.isSetDatabaseName()) {
        this.databaseName = other.databaseName;
      }
    }

    public openDatabase_args deepCopy() {
      return new openDatabase_args(this);
    }

    @Override
    public void clear() {
      this.databaseName = null;
    }

    public String getDatabaseName() {
      return this.databaseName;
    }

    public openDatabase_args setDatabaseName(String databaseName) {
      this.databaseName = databaseName;
      return this;
    }

    public void unsetDatabaseName() {
      this.databaseName = null;
    }

    /** Returns true if field databaseName is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseName() {
      return this.databaseName != null;
    }

    public void setDatabaseNameIsSet(boolean value) {
      if (!value) {
        this.databaseName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATABASE_NAME:
        if (value == null) {
          unsetDatabaseName();
        } else {
          setDatabaseName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATABASE_NAME:
        return getDatabaseName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATABASE_NAME:
        return isSetDatabaseName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openDatabase_args)
        return this.equals((openDatabase_args)that);
      return false;
    }

    public boolean equals(openDatabase_args that) {
      if (that == null)
        return false;

      boolean this_present_databaseName = true && this.isSetDatabaseName();
      boolean that_present_databaseName = true && that.isSetDatabaseName();
      if (this_present_databaseName || that_present_databaseName) {
        if (!(this_present_databaseName && that_present_databaseName))
          return false;
        if (!this.databaseName.equals(that.databaseName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_databaseName = true && (isSetDatabaseName());
      list.add(present_databaseName);
      if (present_databaseName)
        list.add(databaseName);

      return list.hashCode();
    }

    @Override
    public int compareTo(openDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatabaseName()).compareTo(other.isSetDatabaseName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseName, other.databaseName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openDatabase_args(");
      boolean first = true;

      sb.append("databaseName:");
      if (this.databaseName == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public openDatabase_argsStandardScheme getScheme() {
        return new openDatabase_argsStandardScheme();
      }
    }

    private static class openDatabase_argsStandardScheme extends StandardScheme<openDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATABASE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.databaseName = iprot.readString();
                struct.setDatabaseNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.databaseName != null) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.databaseName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public openDatabase_argsTupleScheme getScheme() {
        return new openDatabase_argsTupleScheme();
      }
    }

    private static class openDatabase_argsTupleScheme extends TupleScheme<openDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatabaseName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatabaseName()) {
          oprot.writeString(struct.databaseName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.databaseName = iprot.readString();
          struct.setDatabaseNameIsSet(true);
        }
      }
    }

  }

  public static class openDatabase_result implements org.apache.thrift.TBase<openDatabase_result, openDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<openDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openDatabase_result");

    private static final org.apache.thrift.protocol.TField DATABASE_FILE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseFileException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openDatabase_resultTupleSchemeFactory());
    }

    public DatabaseFileException databaseFileException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATABASE_FILE_EXCEPTION((short)1, "databaseFileException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATABASE_FILE_EXCEPTION
            return DATABASE_FILE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATABASE_FILE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("databaseFileException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openDatabase_result.class, metaDataMap);
    }

    public openDatabase_result() {
    }

    public openDatabase_result(
      DatabaseFileException databaseFileException)
    {
      this();
      this.databaseFileException = databaseFileException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openDatabase_result(openDatabase_result other) {
      if (other.isSetDatabaseFileException()) {
        this.databaseFileException = new DatabaseFileException(other.databaseFileException);
      }
    }

    public openDatabase_result deepCopy() {
      return new openDatabase_result(this);
    }

    @Override
    public void clear() {
      this.databaseFileException = null;
    }

    public DatabaseFileException getDatabaseFileException() {
      return this.databaseFileException;
    }

    public openDatabase_result setDatabaseFileException(DatabaseFileException databaseFileException) {
      this.databaseFileException = databaseFileException;
      return this;
    }

    public void unsetDatabaseFileException() {
      this.databaseFileException = null;
    }

    /** Returns true if field databaseFileException is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseFileException() {
      return this.databaseFileException != null;
    }

    public void setDatabaseFileExceptionIsSet(boolean value) {
      if (!value) {
        this.databaseFileException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        if (value == null) {
          unsetDatabaseFileException();
        } else {
          setDatabaseFileException((DatabaseFileException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        return getDatabaseFileException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        return isSetDatabaseFileException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openDatabase_result)
        return this.equals((openDatabase_result)that);
      return false;
    }

    public boolean equals(openDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_databaseFileException = true && this.isSetDatabaseFileException();
      boolean that_present_databaseFileException = true && that.isSetDatabaseFileException();
      if (this_present_databaseFileException || that_present_databaseFileException) {
        if (!(this_present_databaseFileException && that_present_databaseFileException))
          return false;
        if (!this.databaseFileException.equals(that.databaseFileException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_databaseFileException = true && (isSetDatabaseFileException());
      list.add(present_databaseFileException);
      if (present_databaseFileException)
        list.add(databaseFileException);

      return list.hashCode();
    }

    @Override
    public int compareTo(openDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatabaseFileException()).compareTo(other.isSetDatabaseFileException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseFileException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseFileException, other.databaseFileException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openDatabase_result(");
      boolean first = true;

      sb.append("databaseFileException:");
      if (this.databaseFileException == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseFileException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public openDatabase_resultStandardScheme getScheme() {
        return new openDatabase_resultStandardScheme();
      }
    }

    private static class openDatabase_resultStandardScheme extends StandardScheme<openDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATABASE_FILE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.databaseFileException = new DatabaseFileException();
                struct.databaseFileException.read(iprot);
                struct.setDatabaseFileExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.databaseFileException != null) {
          oprot.writeFieldBegin(DATABASE_FILE_EXCEPTION_FIELD_DESC);
          struct.databaseFileException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public openDatabase_resultTupleScheme getScheme() {
        return new openDatabase_resultTupleScheme();
      }
    }

    private static class openDatabase_resultTupleScheme extends TupleScheme<openDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatabaseFileException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatabaseFileException()) {
          struct.databaseFileException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.databaseFileException = new DatabaseFileException();
          struct.databaseFileException.read(iprot);
          struct.setDatabaseFileExceptionIsSet(true);
        }
      }
    }

  }

  public static class closeDatabase_args implements org.apache.thrift.TBase<closeDatabase_args, closeDatabase_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabase_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabase_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabase_args.class, metaDataMap);
    }

    public closeDatabase_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabase_args(closeDatabase_args other) {
    }

    public closeDatabase_args deepCopy() {
      return new closeDatabase_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabase_args)
        return this.equals((closeDatabase_args)that);
      return false;
    }

    public boolean equals(closeDatabase_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabase_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabase_argsStandardSchemeFactory implements SchemeFactory {
      public closeDatabase_argsStandardScheme getScheme() {
        return new closeDatabase_argsStandardScheme();
      }
    }

    private static class closeDatabase_argsStandardScheme extends StandardScheme<closeDatabase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabase_argsTupleSchemeFactory implements SchemeFactory {
      public closeDatabase_argsTupleScheme getScheme() {
        return new closeDatabase_argsTupleScheme();
      }
    }

    private static class closeDatabase_argsTupleScheme extends TupleScheme<closeDatabase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class closeDatabase_result implements org.apache.thrift.TBase<closeDatabase_result, closeDatabase_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeDatabase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeDatabase_result");

    private static final org.apache.thrift.protocol.TField DATABASE_FILE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseFileException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeDatabase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeDatabase_resultTupleSchemeFactory());
    }

    public DatabaseFileException databaseFileException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATABASE_FILE_EXCEPTION((short)1, "databaseFileException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATABASE_FILE_EXCEPTION
            return DATABASE_FILE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATABASE_FILE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("databaseFileException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeDatabase_result.class, metaDataMap);
    }

    public closeDatabase_result() {
    }

    public closeDatabase_result(
      DatabaseFileException databaseFileException)
    {
      this();
      this.databaseFileException = databaseFileException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeDatabase_result(closeDatabase_result other) {
      if (other.isSetDatabaseFileException()) {
        this.databaseFileException = new DatabaseFileException(other.databaseFileException);
      }
    }

    public closeDatabase_result deepCopy() {
      return new closeDatabase_result(this);
    }

    @Override
    public void clear() {
      this.databaseFileException = null;
    }

    public DatabaseFileException getDatabaseFileException() {
      return this.databaseFileException;
    }

    public closeDatabase_result setDatabaseFileException(DatabaseFileException databaseFileException) {
      this.databaseFileException = databaseFileException;
      return this;
    }

    public void unsetDatabaseFileException() {
      this.databaseFileException = null;
    }

    /** Returns true if field databaseFileException is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabaseFileException() {
      return this.databaseFileException != null;
    }

    public void setDatabaseFileExceptionIsSet(boolean value) {
      if (!value) {
        this.databaseFileException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        if (value == null) {
          unsetDatabaseFileException();
        } else {
          setDatabaseFileException((DatabaseFileException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        return getDatabaseFileException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATABASE_FILE_EXCEPTION:
        return isSetDatabaseFileException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeDatabase_result)
        return this.equals((closeDatabase_result)that);
      return false;
    }

    public boolean equals(closeDatabase_result that) {
      if (that == null)
        return false;

      boolean this_present_databaseFileException = true && this.isSetDatabaseFileException();
      boolean that_present_databaseFileException = true && that.isSetDatabaseFileException();
      if (this_present_databaseFileException || that_present_databaseFileException) {
        if (!(this_present_databaseFileException && that_present_databaseFileException))
          return false;
        if (!this.databaseFileException.equals(that.databaseFileException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_databaseFileException = true && (isSetDatabaseFileException());
      list.add(present_databaseFileException);
      if (present_databaseFileException)
        list.add(databaseFileException);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeDatabase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDatabaseFileException()).compareTo(other.isSetDatabaseFileException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabaseFileException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseFileException, other.databaseFileException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeDatabase_result(");
      boolean first = true;

      sb.append("databaseFileException:");
      if (this.databaseFileException == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseFileException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeDatabase_resultStandardSchemeFactory implements SchemeFactory {
      public closeDatabase_resultStandardScheme getScheme() {
        return new closeDatabase_resultStandardScheme();
      }
    }

    private static class closeDatabase_resultStandardScheme extends StandardScheme<closeDatabase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeDatabase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATABASE_FILE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.databaseFileException = new DatabaseFileException();
                struct.databaseFileException.read(iprot);
                struct.setDatabaseFileExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeDatabase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.databaseFileException != null) {
          oprot.writeFieldBegin(DATABASE_FILE_EXCEPTION_FIELD_DESC);
          struct.databaseFileException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeDatabase_resultTupleSchemeFactory implements SchemeFactory {
      public closeDatabase_resultTupleScheme getScheme() {
        return new closeDatabase_resultTupleScheme();
      }
    }

    private static class closeDatabase_resultTupleScheme extends TupleScheme<closeDatabase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatabaseFileException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatabaseFileException()) {
          struct.databaseFileException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeDatabase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.databaseFileException = new DatabaseFileException();
          struct.databaseFileException.read(iprot);
          struct.setDatabaseFileExceptionIsSet(true);
        }
      }
    }

  }

  public static class drawPlot_args implements org.apache.thrift.TBase<drawPlot_args, drawPlot_args._Fields>, java.io.Serializable, Cloneable, Comparable<drawPlot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drawPlot_args");

    private static final org.apache.thrift.protocol.TField VARIABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("variableName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drawPlot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drawPlot_argsTupleSchemeFactory());
    }

    public String variableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VARIABLE_NAME((short)1, "variableName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VARIABLE_NAME
            return VARIABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VARIABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("variableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drawPlot_args.class, metaDataMap);
    }

    public drawPlot_args() {
    }

    public drawPlot_args(
      String variableName)
    {
      this();
      this.variableName = variableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drawPlot_args(drawPlot_args other) {
      if (other.isSetVariableName()) {
        this.variableName = other.variableName;
      }
    }

    public drawPlot_args deepCopy() {
      return new drawPlot_args(this);
    }

    @Override
    public void clear() {
      this.variableName = null;
    }

    public String getVariableName() {
      return this.variableName;
    }

    public drawPlot_args setVariableName(String variableName) {
      this.variableName = variableName;
      return this;
    }

    public void unsetVariableName() {
      this.variableName = null;
    }

    /** Returns true if field variableName is set (has been assigned a value) and false otherwise */
    public boolean isSetVariableName() {
      return this.variableName != null;
    }

    public void setVariableNameIsSet(boolean value) {
      if (!value) {
        this.variableName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VARIABLE_NAME:
        if (value == null) {
          unsetVariableName();
        } else {
          setVariableName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VARIABLE_NAME:
        return getVariableName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VARIABLE_NAME:
        return isSetVariableName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drawPlot_args)
        return this.equals((drawPlot_args)that);
      return false;
    }

    public boolean equals(drawPlot_args that) {
      if (that == null)
        return false;

      boolean this_present_variableName = true && this.isSetVariableName();
      boolean that_present_variableName = true && that.isSetVariableName();
      if (this_present_variableName || that_present_variableName) {
        if (!(this_present_variableName && that_present_variableName))
          return false;
        if (!this.variableName.equals(that.variableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_variableName = true && (isSetVariableName());
      list.add(present_variableName);
      if (present_variableName)
        list.add(variableName);

      return list.hashCode();
    }

    @Override
    public int compareTo(drawPlot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVariableName()).compareTo(other.isSetVariableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variableName, other.variableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drawPlot_args(");
      boolean first = true;

      sb.append("variableName:");
      if (this.variableName == null) {
        sb.append("null");
      } else {
        sb.append(this.variableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drawPlot_argsStandardSchemeFactory implements SchemeFactory {
      public drawPlot_argsStandardScheme getScheme() {
        return new drawPlot_argsStandardScheme();
      }
    }

    private static class drawPlot_argsStandardScheme extends StandardScheme<drawPlot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drawPlot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VARIABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.variableName = iprot.readString();
                struct.setVariableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drawPlot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.variableName != null) {
          oprot.writeFieldBegin(VARIABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.variableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class drawPlot_argsTupleSchemeFactory implements SchemeFactory {
      public drawPlot_argsTupleScheme getScheme() {
        return new drawPlot_argsTupleScheme();
      }
    }

    private static class drawPlot_argsTupleScheme extends TupleScheme<drawPlot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drawPlot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVariableName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVariableName()) {
          oprot.writeString(struct.variableName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drawPlot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.variableName = iprot.readString();
          struct.setVariableNameIsSet(true);
        }
      }
    }

  }

  public static class drawPlot_result implements org.apache.thrift.TBase<drawPlot_result, drawPlot_result._Fields>, java.io.Serializable, Cloneable, Comparable<drawPlot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drawPlot_result");

    private static final org.apache.thrift.protocol.TField PLOT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("plotException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drawPlot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drawPlot_resultTupleSchemeFactory());
    }

    public PlotException plotException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLOT_EXCEPTION((short)1, "plotException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLOT_EXCEPTION
            return PLOT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLOT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("plotException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drawPlot_result.class, metaDataMap);
    }

    public drawPlot_result() {
    }

    public drawPlot_result(
      PlotException plotException)
    {
      this();
      this.plotException = plotException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drawPlot_result(drawPlot_result other) {
      if (other.isSetPlotException()) {
        this.plotException = new PlotException(other.plotException);
      }
    }

    public drawPlot_result deepCopy() {
      return new drawPlot_result(this);
    }

    @Override
    public void clear() {
      this.plotException = null;
    }

    public PlotException getPlotException() {
      return this.plotException;
    }

    public drawPlot_result setPlotException(PlotException plotException) {
      this.plotException = plotException;
      return this;
    }

    public void unsetPlotException() {
      this.plotException = null;
    }

    /** Returns true if field plotException is set (has been assigned a value) and false otherwise */
    public boolean isSetPlotException() {
      return this.plotException != null;
    }

    public void setPlotExceptionIsSet(boolean value) {
      if (!value) {
        this.plotException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLOT_EXCEPTION:
        if (value == null) {
          unsetPlotException();
        } else {
          setPlotException((PlotException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLOT_EXCEPTION:
        return getPlotException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLOT_EXCEPTION:
        return isSetPlotException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drawPlot_result)
        return this.equals((drawPlot_result)that);
      return false;
    }

    public boolean equals(drawPlot_result that) {
      if (that == null)
        return false;

      boolean this_present_plotException = true && this.isSetPlotException();
      boolean that_present_plotException = true && that.isSetPlotException();
      if (this_present_plotException || that_present_plotException) {
        if (!(this_present_plotException && that_present_plotException))
          return false;
        if (!this.plotException.equals(that.plotException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_plotException = true && (isSetPlotException());
      list.add(present_plotException);
      if (present_plotException)
        list.add(plotException);

      return list.hashCode();
    }

    @Override
    public int compareTo(drawPlot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlotException()).compareTo(other.isSetPlotException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlotException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plotException, other.plotException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drawPlot_result(");
      boolean first = true;

      sb.append("plotException:");
      if (this.plotException == null) {
        sb.append("null");
      } else {
        sb.append(this.plotException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drawPlot_resultStandardSchemeFactory implements SchemeFactory {
      public drawPlot_resultStandardScheme getScheme() {
        return new drawPlot_resultStandardScheme();
      }
    }

    private static class drawPlot_resultStandardScheme extends StandardScheme<drawPlot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drawPlot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLOT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.plotException = new PlotException();
                struct.plotException.read(iprot);
                struct.setPlotExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drawPlot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.plotException != null) {
          oprot.writeFieldBegin(PLOT_EXCEPTION_FIELD_DESC);
          struct.plotException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class drawPlot_resultTupleSchemeFactory implements SchemeFactory {
      public drawPlot_resultTupleScheme getScheme() {
        return new drawPlot_resultTupleScheme();
      }
    }

    private static class drawPlot_resultTupleScheme extends TupleScheme<drawPlot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drawPlot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlotException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlotException()) {
          struct.plotException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drawPlot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.plotException = new PlotException();
          struct.plotException.read(iprot);
          struct.setPlotExceptionIsSet(true);
        }
      }
    }

  }

  public static class clearPlots_args implements org.apache.thrift.TBase<clearPlots_args, clearPlots_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearPlots_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearPlots_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearPlots_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearPlots_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearPlots_args.class, metaDataMap);
    }

    public clearPlots_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearPlots_args(clearPlots_args other) {
    }

    public clearPlots_args deepCopy() {
      return new clearPlots_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearPlots_args)
        return this.equals((clearPlots_args)that);
      return false;
    }

    public boolean equals(clearPlots_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(clearPlots_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearPlots_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearPlots_argsStandardSchemeFactory implements SchemeFactory {
      public clearPlots_argsStandardScheme getScheme() {
        return new clearPlots_argsStandardScheme();
      }
    }

    private static class clearPlots_argsStandardScheme extends StandardScheme<clearPlots_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearPlots_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearPlots_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearPlots_argsTupleSchemeFactory implements SchemeFactory {
      public clearPlots_argsTupleScheme getScheme() {
        return new clearPlots_argsTupleScheme();
      }
    }

    private static class clearPlots_argsTupleScheme extends TupleScheme<clearPlots_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearPlots_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearPlots_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
