/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-20")
public class VCellProxy {

  public interface Iface {

    public String exportRequest(ExportRequestSpec exportRequestSpec) throws ExportException, org.apache.thrift.TException;

    public String exportAllRequest(SimulationDataSetRef simulationDataSetRef) throws ExportException, org.apache.thrift.TException;

    public String getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws DataAccessException, org.apache.thrift.TException;

    public String getDataSetFileOfDomainAtTimePoint(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint) throws DataAccessException, org.apache.thrift.TException;

    public List<SimulationDataSetRef> getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException;

    public List<SimulationDataSetRef> getSimsFromModel(ModelRef modelRef) throws DataAccessException, org.apache.thrift.TException;

    public int getEndTimeIndex(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException;

    public List<Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException;

    public List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException;

    public List<ModelRef> getBioModels() throws DataAccessException, org.apache.thrift.TException;

    public List<ModelRef> getMathModels() throws DataAccessException, org.apache.thrift.TException;

    public User getUser() throws DataAccessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void exportRequest(ExportRequestSpec exportRequestSpec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportAllRequest(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataSetFileOfDomainAtTimePoint(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSimsFromModel(ModelRef modelRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEndTimeIndex(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBioModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMathModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUser(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String exportRequest(ExportRequestSpec exportRequestSpec) throws ExportException, org.apache.thrift.TException
    {
      send_exportRequest(exportRequestSpec);
      return recv_exportRequest();
    }

    public void send_exportRequest(ExportRequestSpec exportRequestSpec) throws org.apache.thrift.TException
    {
      exportRequest_args args = new exportRequest_args();
      args.setExportRequestSpec(exportRequestSpec);
      sendBase("exportRequest", args);
    }

    public String recv_exportRequest() throws ExportException, org.apache.thrift.TException
    {
      exportRequest_result result = new exportRequest_result();
      receiveBase(result, "exportRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exportException != null) {
        throw result.exportException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportRequest failed: unknown result");
    }

    public String exportAllRequest(SimulationDataSetRef simulationDataSetRef) throws ExportException, org.apache.thrift.TException
    {
      send_exportAllRequest(simulationDataSetRef);
      return recv_exportAllRequest();
    }

    public void send_exportAllRequest(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      exportAllRequest_args args = new exportAllRequest_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("exportAllRequest", args);
    }

    public String recv_exportAllRequest() throws ExportException, org.apache.thrift.TException
    {
      exportAllRequest_result result = new exportAllRequest_result();
      receiveBase(result, "exportAllRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exportException != null) {
        throw result.exportException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportAllRequest failed: unknown result");
    }

    public String getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws DataAccessException, org.apache.thrift.TException
    {
      send_getDataSetFileOfDomainAtTimeIndex(simulationDataSetRef, domainName, timeIndex);
      return recv_getDataSetFileOfDomainAtTimeIndex();
    }

    public void send_getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimeIndex_args args = new getDataSetFileOfDomainAtTimeIndex_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      args.setDomainName(domainName);
      args.setTimeIndex(timeIndex);
      sendBase("getDataSetFileOfDomainAtTimeIndex", args);
    }

    public String recv_getDataSetFileOfDomainAtTimeIndex() throws DataAccessException, org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
      receiveBase(result, "getDataSetFileOfDomainAtTimeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSetFileOfDomainAtTimeIndex failed: unknown result");
    }

    public String getDataSetFileOfDomainAtTimePoint(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint) throws DataAccessException, org.apache.thrift.TException
    {
      send_getDataSetFileOfDomainAtTimePoint(simulationDataSetRef, domainName, timePoint);
      return recv_getDataSetFileOfDomainAtTimePoint();
    }

    public void send_getDataSetFileOfDomainAtTimePoint(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint) throws org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimePoint_args args = new getDataSetFileOfDomainAtTimePoint_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      args.setDomainName(domainName);
      args.setTimePoint(timePoint);
      sendBase("getDataSetFileOfDomainAtTimePoint", args);
    }

    public String recv_getDataSetFileOfDomainAtTimePoint() throws DataAccessException, org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimePoint_result result = new getDataSetFileOfDomainAtTimePoint_result();
      receiveBase(result, "getDataSetFileOfDomainAtTimePoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSetFileOfDomainAtTimePoint failed: unknown result");
    }

    public List<SimulationDataSetRef> getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException
    {
      send_getSimsFromOpenModels();
      return recv_getSimsFromOpenModels();
    }

    public void send_getSimsFromOpenModels() throws org.apache.thrift.TException
    {
      getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
      sendBase("getSimsFromOpenModels", args);
    }

    public List<SimulationDataSetRef> recv_getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException
    {
      getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
      receiveBase(result, "getSimsFromOpenModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimsFromOpenModels failed: unknown result");
    }

    public List<SimulationDataSetRef> getSimsFromModel(ModelRef modelRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getSimsFromModel(modelRef);
      return recv_getSimsFromModel();
    }

    public void send_getSimsFromModel(ModelRef modelRef) throws org.apache.thrift.TException
    {
      getSimsFromModel_args args = new getSimsFromModel_args();
      args.setModelRef(modelRef);
      sendBase("getSimsFromModel", args);
    }

    public List<SimulationDataSetRef> recv_getSimsFromModel() throws DataAccessException, org.apache.thrift.TException
    {
      getSimsFromModel_result result = new getSimsFromModel_result();
      receiveBase(result, "getSimsFromModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimsFromModel failed: unknown result");
    }

    public int getEndTimeIndex(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getEndTimeIndex(simulationDataSetRef);
      return recv_getEndTimeIndex();
    }

    public void send_getEndTimeIndex(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getEndTimeIndex_args args = new getEndTimeIndex_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getEndTimeIndex", args);
    }

    public int recv_getEndTimeIndex() throws DataAccessException, org.apache.thrift.TException
    {
      getEndTimeIndex_result result = new getEndTimeIndex_result();
      receiveBase(result, "getEndTimeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEndTimeIndex failed: unknown result");
    }

    public List<Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getTimePoints(simulationDataSetRef);
      return recv_getTimePoints();
    }

    public void send_getTimePoints(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getTimePoints_args args = new getTimePoints_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getTimePoints", args);
    }

    public List<Double> recv_getTimePoints() throws DataAccessException, org.apache.thrift.TException
    {
      getTimePoints_result result = new getTimePoints_result();
      receiveBase(result, "getTimePoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimePoints failed: unknown result");
    }

    public List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getVariableList(simulationDataSetRef);
      return recv_getVariableList();
    }

    public void send_getVariableList(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getVariableList_args args = new getVariableList_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getVariableList", args);
    }

    public List<VariableInfo> recv_getVariableList() throws DataAccessException, org.apache.thrift.TException
    {
      getVariableList_result result = new getVariableList_result();
      receiveBase(result, "getVariableList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVariableList failed: unknown result");
    }

    public List<ModelRef> getBioModels() throws DataAccessException, org.apache.thrift.TException
    {
      send_getBioModels();
      return recv_getBioModels();
    }

    public void send_getBioModels() throws org.apache.thrift.TException
    {
      getBioModels_args args = new getBioModels_args();
      sendBase("getBioModels", args);
    }

    public List<ModelRef> recv_getBioModels() throws DataAccessException, org.apache.thrift.TException
    {
      getBioModels_result result = new getBioModels_result();
      receiveBase(result, "getBioModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBioModels failed: unknown result");
    }

    public List<ModelRef> getMathModels() throws DataAccessException, org.apache.thrift.TException
    {
      send_getMathModels();
      return recv_getMathModels();
    }

    public void send_getMathModels() throws org.apache.thrift.TException
    {
      getMathModels_args args = new getMathModels_args();
      sendBase("getMathModels", args);
    }

    public List<ModelRef> recv_getMathModels() throws DataAccessException, org.apache.thrift.TException
    {
      getMathModels_result result = new getMathModels_result();
      receiveBase(result, "getMathModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMathModels failed: unknown result");
    }

    public User getUser() throws DataAccessException, org.apache.thrift.TException
    {
      send_getUser();
      return recv_getUser();
    }

    public void send_getUser() throws org.apache.thrift.TException
    {
      getUser_args args = new getUser_args();
      sendBase("getUser", args);
    }

    public User recv_getUser() throws DataAccessException, org.apache.thrift.TException
    {
      getUser_result result = new getUser_result();
      receiveBase(result, "getUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void exportRequest(ExportRequestSpec exportRequestSpec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportRequest_call method_call = new exportRequest_call(exportRequestSpec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ExportRequestSpec exportRequestSpec;
      public exportRequest_call(ExportRequestSpec exportRequestSpec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exportRequestSpec = exportRequestSpec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportRequest_args args = new exportRequest_args();
        args.setExportRequestSpec(exportRequestSpec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ExportException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportRequest();
      }
    }

    public void exportAllRequest(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportAllRequest_call method_call = new exportAllRequest_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportAllRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public exportAllRequest_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportAllRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportAllRequest_args args = new exportAllRequest_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ExportException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportAllRequest();
      }
    }

    public void getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSetFileOfDomainAtTimeIndex_call method_call = new getDataSetFileOfDomainAtTimeIndex_call(simulationDataSetRef, domainName, timeIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSetFileOfDomainAtTimeIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      private String domainName;
      private int timeIndex;
      public getDataSetFileOfDomainAtTimeIndex_call(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
        this.domainName = domainName;
        this.timeIndex = timeIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSetFileOfDomainAtTimeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSetFileOfDomainAtTimeIndex_args args = new getDataSetFileOfDomainAtTimeIndex_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.setDomainName(domainName);
        args.setTimeIndex(timeIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSetFileOfDomainAtTimeIndex();
      }
    }

    public void getDataSetFileOfDomainAtTimePoint(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSetFileOfDomainAtTimePoint_call method_call = new getDataSetFileOfDomainAtTimePoint_call(simulationDataSetRef, domainName, timePoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSetFileOfDomainAtTimePoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      private String domainName;
      private double timePoint;
      public getDataSetFileOfDomainAtTimePoint_call(SimulationDataSetRef simulationDataSetRef, String domainName, double timePoint, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
        this.domainName = domainName;
        this.timePoint = timePoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSetFileOfDomainAtTimePoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSetFileOfDomainAtTimePoint_args args = new getDataSetFileOfDomainAtTimePoint_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.setDomainName(domainName);
        args.setTimePoint(timePoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSetFileOfDomainAtTimePoint();
      }
    }

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimsFromOpenModels_call method_call = new getSimsFromOpenModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimsFromOpenModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSimsFromOpenModels_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimsFromOpenModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SimulationDataSetRef> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimsFromOpenModels();
      }
    }

    public void getSimsFromModel(ModelRef modelRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimsFromModel_call method_call = new getSimsFromModel_call(modelRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimsFromModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ModelRef modelRef;
      public getSimsFromModel_call(ModelRef modelRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelRef = modelRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimsFromModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimsFromModel_args args = new getSimsFromModel_args();
        args.setModelRef(modelRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SimulationDataSetRef> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimsFromModel();
      }
    }

    public void getEndTimeIndex(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEndTimeIndex_call method_call = new getEndTimeIndex_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEndTimeIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public getEndTimeIndex_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEndTimeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEndTimeIndex_args args = new getEndTimeIndex_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEndTimeIndex();
      }
    }

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimePoints_call method_call = new getTimePoints_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimePoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public getTimePoints_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimePoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimePoints_args args = new getTimePoints_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Double> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimePoints();
      }
    }

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVariableList_call method_call = new getVariableList_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVariableList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public getVariableList_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVariableList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVariableList_args args = new getVariableList_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VariableInfo> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVariableList();
      }
    }

    public void getBioModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBioModels_call method_call = new getBioModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBioModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBioModels_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBioModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBioModels_args args = new getBioModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ModelRef> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBioModels();
      }
    }

    public void getMathModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMathModels_call method_call = new getMathModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMathModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMathModels_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMathModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMathModels_args args = new getMathModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ModelRef> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMathModels();
      }
    }

    public void getUser(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUser_call method_call = new getUser_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUser_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUser_args args = new getUser_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public User getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("exportRequest", new exportRequest());
      processMap.put("exportAllRequest", new exportAllRequest());
      processMap.put("getDataSetFileOfDomainAtTimeIndex", new getDataSetFileOfDomainAtTimeIndex());
      processMap.put("getDataSetFileOfDomainAtTimePoint", new getDataSetFileOfDomainAtTimePoint());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getSimsFromModel", new getSimsFromModel());
      processMap.put("getEndTimeIndex", new getEndTimeIndex());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getBioModels", new getBioModels());
      processMap.put("getMathModels", new getMathModels());
      processMap.put("getUser", new getUser());
      return processMap;
    }

    public static class exportRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportRequest_args> {
      public exportRequest() {
        super("exportRequest");
      }

      public exportRequest_args getEmptyArgsInstance() {
        return new exportRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportRequest_result getResult(I iface, exportRequest_args args) throws org.apache.thrift.TException {
        exportRequest_result result = new exportRequest_result();
        try {
          result.success = iface.exportRequest(args.exportRequestSpec);
        } catch (ExportException exportException) {
          result.exportException = exportException;
        }
        return result;
      }
    }

    public static class exportAllRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportAllRequest_args> {
      public exportAllRequest() {
        super("exportAllRequest");
      }

      public exportAllRequest_args getEmptyArgsInstance() {
        return new exportAllRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportAllRequest_result getResult(I iface, exportAllRequest_args args) throws org.apache.thrift.TException {
        exportAllRequest_result result = new exportAllRequest_result();
        try {
          result.success = iface.exportAllRequest(args.simulationDataSetRef);
        } catch (ExportException exportException) {
          result.exportException = exportException;
        }
        return result;
      }
    }

    public static class getDataSetFileOfDomainAtTimeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSetFileOfDomainAtTimeIndex_args> {
      public getDataSetFileOfDomainAtTimeIndex() {
        super("getDataSetFileOfDomainAtTimeIndex");
      }

      public getDataSetFileOfDomainAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSetFileOfDomainAtTimeIndex_result getResult(I iface, getDataSetFileOfDomainAtTimeIndex_args args) throws org.apache.thrift.TException {
        getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
        try {
          result.success = iface.getDataSetFileOfDomainAtTimeIndex(args.simulationDataSetRef, args.domainName, args.timeIndex);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getDataSetFileOfDomainAtTimePoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSetFileOfDomainAtTimePoint_args> {
      public getDataSetFileOfDomainAtTimePoint() {
        super("getDataSetFileOfDomainAtTimePoint");
      }

      public getDataSetFileOfDomainAtTimePoint_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimePoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSetFileOfDomainAtTimePoint_result getResult(I iface, getDataSetFileOfDomainAtTimePoint_args args) throws org.apache.thrift.TException {
        getDataSetFileOfDomainAtTimePoint_result result = new getDataSetFileOfDomainAtTimePoint_result();
        try {
          result.success = iface.getDataSetFileOfDomainAtTimePoint(args.simulationDataSetRef, args.domainName, args.timePoint);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getSimsFromOpenModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimsFromOpenModels_args> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSimsFromOpenModels_result getResult(I iface, getSimsFromOpenModels_args args) throws org.apache.thrift.TException {
        getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
        try {
          result.success = iface.getSimsFromOpenModels();
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getSimsFromModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimsFromModel_args> {
      public getSimsFromModel() {
        super("getSimsFromModel");
      }

      public getSimsFromModel_args getEmptyArgsInstance() {
        return new getSimsFromModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSimsFromModel_result getResult(I iface, getSimsFromModel_args args) throws org.apache.thrift.TException {
        getSimsFromModel_result result = new getSimsFromModel_result();
        try {
          result.success = iface.getSimsFromModel(args.modelRef);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getEndTimeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEndTimeIndex_args> {
      public getEndTimeIndex() {
        super("getEndTimeIndex");
      }

      public getEndTimeIndex_args getEmptyArgsInstance() {
        return new getEndTimeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEndTimeIndex_result getResult(I iface, getEndTimeIndex_args args) throws org.apache.thrift.TException {
        getEndTimeIndex_result result = new getEndTimeIndex_result();
        try {
          result.success = iface.getEndTimeIndex(args.simulationDataSetRef);
          result.setSuccessIsSet(true);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getTimePoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimePoints_args> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimePoints_result getResult(I iface, getTimePoints_args args) throws org.apache.thrift.TException {
        getTimePoints_result result = new getTimePoints_result();
        try {
          result.success = iface.getTimePoints(args.simulationDataSetRef);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getVariableList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVariableList_args> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVariableList_result getResult(I iface, getVariableList_args args) throws org.apache.thrift.TException {
        getVariableList_result result = new getVariableList_result();
        try {
          result.success = iface.getVariableList(args.simulationDataSetRef);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getBioModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBioModels_args> {
      public getBioModels() {
        super("getBioModels");
      }

      public getBioModels_args getEmptyArgsInstance() {
        return new getBioModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBioModels_result getResult(I iface, getBioModels_args args) throws org.apache.thrift.TException {
        getBioModels_result result = new getBioModels_result();
        try {
          result.success = iface.getBioModels();
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getMathModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMathModels_args> {
      public getMathModels() {
        super("getMathModels");
      }

      public getMathModels_args getEmptyArgsInstance() {
        return new getMathModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMathModels_result getResult(I iface, getMathModels_args args) throws org.apache.thrift.TException {
        getMathModels_result result = new getMathModels_result();
        try {
          result.success = iface.getMathModels();
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {
      public getUser() {
        super("getUser");
      }

      public getUser_args getEmptyArgsInstance() {
        return new getUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
        getUser_result result = new getUser_result();
        try {
          result.success = iface.getUser();
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("exportRequest", new exportRequest());
      processMap.put("exportAllRequest", new exportAllRequest());
      processMap.put("getDataSetFileOfDomainAtTimeIndex", new getDataSetFileOfDomainAtTimeIndex());
      processMap.put("getDataSetFileOfDomainAtTimePoint", new getDataSetFileOfDomainAtTimePoint());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getSimsFromModel", new getSimsFromModel());
      processMap.put("getEndTimeIndex", new getEndTimeIndex());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getBioModels", new getBioModels());
      processMap.put("getMathModels", new getMathModels());
      processMap.put("getUser", new getUser());
      return processMap;
    }

    public static class exportRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportRequest_args, String> {
      public exportRequest() {
        super("exportRequest");
      }

      public exportRequest_args getEmptyArgsInstance() {
        return new exportRequest_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            exportRequest_result result = new exportRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportRequest_result result = new exportRequest_result();
            if (e instanceof ExportException) {
                        result.exportException = (ExportException) e;
                        result.setExportExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportRequest_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.exportRequest(args.exportRequestSpec,resultHandler);
      }
    }

    public static class exportAllRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportAllRequest_args, String> {
      public exportAllRequest() {
        super("exportAllRequest");
      }

      public exportAllRequest_args getEmptyArgsInstance() {
        return new exportAllRequest_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            exportAllRequest_result result = new exportAllRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportAllRequest_result result = new exportAllRequest_result();
            if (e instanceof ExportException) {
                        result.exportException = (ExportException) e;
                        result.setExportExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportAllRequest_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.exportAllRequest(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getDataSetFileOfDomainAtTimeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataSetFileOfDomainAtTimeIndex_args, String> {
      public getDataSetFileOfDomainAtTimeIndex() {
        super("getDataSetFileOfDomainAtTimeIndex");
      }

      public getDataSetFileOfDomainAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimeIndex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataSetFileOfDomainAtTimeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getDataSetFileOfDomainAtTimeIndex(args.simulationDataSetRef, args.domainName, args.timeIndex,resultHandler);
      }
    }

    public static class getDataSetFileOfDomainAtTimePoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataSetFileOfDomainAtTimePoint_args, String> {
      public getDataSetFileOfDomainAtTimePoint() {
        super("getDataSetFileOfDomainAtTimePoint");
      }

      public getDataSetFileOfDomainAtTimePoint_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimePoint_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getDataSetFileOfDomainAtTimePoint_result result = new getDataSetFileOfDomainAtTimePoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataSetFileOfDomainAtTimePoint_result result = new getDataSetFileOfDomainAtTimePoint_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataSetFileOfDomainAtTimePoint_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getDataSetFileOfDomainAtTimePoint(args.simulationDataSetRef, args.domainName, args.timePoint,resultHandler);
      }
    }

    public static class getSimsFromOpenModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimsFromOpenModels_args, List<SimulationDataSetRef>> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      public AsyncMethodCallback<List<SimulationDataSetRef>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SimulationDataSetRef>>() { 
          public void onComplete(List<SimulationDataSetRef> o) {
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSimsFromOpenModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<SimulationDataSetRef>> resultHandler) throws TException {
        iface.getSimsFromOpenModels(resultHandler);
      }
    }

    public static class getSimsFromModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimsFromModel_args, List<SimulationDataSetRef>> {
      public getSimsFromModel() {
        super("getSimsFromModel");
      }

      public getSimsFromModel_args getEmptyArgsInstance() {
        return new getSimsFromModel_args();
      }

      public AsyncMethodCallback<List<SimulationDataSetRef>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SimulationDataSetRef>>() { 
          public void onComplete(List<SimulationDataSetRef> o) {
            getSimsFromModel_result result = new getSimsFromModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSimsFromModel_result result = new getSimsFromModel_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSimsFromModel_args args, org.apache.thrift.async.AsyncMethodCallback<List<SimulationDataSetRef>> resultHandler) throws TException {
        iface.getSimsFromModel(args.modelRef,resultHandler);
      }
    }

    public static class getEndTimeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEndTimeIndex_args, Integer> {
      public getEndTimeIndex() {
        super("getEndTimeIndex");
      }

      public getEndTimeIndex_args getEmptyArgsInstance() {
        return new getEndTimeIndex_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getEndTimeIndex_result result = new getEndTimeIndex_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEndTimeIndex_result result = new getEndTimeIndex_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEndTimeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getEndTimeIndex(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getTimePoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimePoints_args, List<Double>> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      public AsyncMethodCallback<List<Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Double>>() { 
          public void onComplete(List<Double> o) {
            getTimePoints_result result = new getTimePoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimePoints_result result = new getTimePoints_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimePoints_args args, org.apache.thrift.async.AsyncMethodCallback<List<Double>> resultHandler) throws TException {
        iface.getTimePoints(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getVariableList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVariableList_args, List<VariableInfo>> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      public AsyncMethodCallback<List<VariableInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<VariableInfo>>() { 
          public void onComplete(List<VariableInfo> o) {
            getVariableList_result result = new getVariableList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVariableList_result result = new getVariableList_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVariableList_args args, org.apache.thrift.async.AsyncMethodCallback<List<VariableInfo>> resultHandler) throws TException {
        iface.getVariableList(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getBioModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBioModels_args, List<ModelRef>> {
      public getBioModels() {
        super("getBioModels");
      }

      public getBioModels_args getEmptyArgsInstance() {
        return new getBioModels_args();
      }

      public AsyncMethodCallback<List<ModelRef>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ModelRef>>() { 
          public void onComplete(List<ModelRef> o) {
            getBioModels_result result = new getBioModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBioModels_result result = new getBioModels_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBioModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<ModelRef>> resultHandler) throws TException {
        iface.getBioModels(resultHandler);
      }
    }

    public static class getMathModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMathModels_args, List<ModelRef>> {
      public getMathModels() {
        super("getMathModels");
      }

      public getMathModels_args getEmptyArgsInstance() {
        return new getMathModels_args();
      }

      public AsyncMethodCallback<List<ModelRef>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ModelRef>>() { 
          public void onComplete(List<ModelRef> o) {
            getMathModels_result result = new getMathModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMathModels_result result = new getMathModels_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMathModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<ModelRef>> resultHandler) throws TException {
        iface.getMathModels(resultHandler);
      }
    }

    public static class getUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, User> {
      public getUser() {
        super("getUser");
      }

      public getUser_args getEmptyArgsInstance() {
        return new getUser_args();
      }

      public AsyncMethodCallback<User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<User>() { 
          public void onComplete(User o) {
            getUser_result result = new getUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUser_result result = new getUser_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUser_args args, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws TException {
        iface.getUser(resultHandler);
      }
    }

  }

  public static class exportRequest_args implements org.apache.thrift.TBase<exportRequest_args, exportRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportRequest_args");

    private static final org.apache.thrift.protocol.TField EXPORT_REQUEST_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("exportRequestSpec", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportRequest_argsTupleSchemeFactory());
    }

    public ExportRequestSpec exportRequestSpec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPORT_REQUEST_SPEC((short)1, "exportRequestSpec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPORT_REQUEST_SPEC
            return EXPORT_REQUEST_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPORT_REQUEST_SPEC, new org.apache.thrift.meta_data.FieldMetaData("exportRequestSpec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExportRequestSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportRequest_args.class, metaDataMap);
    }

    public exportRequest_args() {
    }

    public exportRequest_args(
      ExportRequestSpec exportRequestSpec)
    {
      this();
      this.exportRequestSpec = exportRequestSpec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportRequest_args(exportRequest_args other) {
      if (other.isSetExportRequestSpec()) {
        this.exportRequestSpec = new ExportRequestSpec(other.exportRequestSpec);
      }
    }

    public exportRequest_args deepCopy() {
      return new exportRequest_args(this);
    }

    @Override
    public void clear() {
      this.exportRequestSpec = null;
    }

    public ExportRequestSpec getExportRequestSpec() {
      return this.exportRequestSpec;
    }

    public exportRequest_args setExportRequestSpec(ExportRequestSpec exportRequestSpec) {
      this.exportRequestSpec = exportRequestSpec;
      return this;
    }

    public void unsetExportRequestSpec() {
      this.exportRequestSpec = null;
    }

    /** Returns true if field exportRequestSpec is set (has been assigned a value) and false otherwise */
    public boolean isSetExportRequestSpec() {
      return this.exportRequestSpec != null;
    }

    public void setExportRequestSpecIsSet(boolean value) {
      if (!value) {
        this.exportRequestSpec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPORT_REQUEST_SPEC:
        if (value == null) {
          unsetExportRequestSpec();
        } else {
          setExportRequestSpec((ExportRequestSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPORT_REQUEST_SPEC:
        return getExportRequestSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPORT_REQUEST_SPEC:
        return isSetExportRequestSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportRequest_args)
        return this.equals((exportRequest_args)that);
      return false;
    }

    public boolean equals(exportRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_exportRequestSpec = true && this.isSetExportRequestSpec();
      boolean that_present_exportRequestSpec = true && that.isSetExportRequestSpec();
      if (this_present_exportRequestSpec || that_present_exportRequestSpec) {
        if (!(this_present_exportRequestSpec && that_present_exportRequestSpec))
          return false;
        if (!this.exportRequestSpec.equals(that.exportRequestSpec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_exportRequestSpec = true && (isSetExportRequestSpec());
      list.add(present_exportRequestSpec);
      if (present_exportRequestSpec)
        list.add(exportRequestSpec);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExportRequestSpec()).compareTo(other.isSetExportRequestSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExportRequestSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportRequestSpec, other.exportRequestSpec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportRequest_args(");
      boolean first = true;

      sb.append("exportRequestSpec:");
      if (this.exportRequestSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.exportRequestSpec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (exportRequestSpec != null) {
        exportRequestSpec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportRequest_argsStandardSchemeFactory implements SchemeFactory {
      public exportRequest_argsStandardScheme getScheme() {
        return new exportRequest_argsStandardScheme();
      }
    }

    private static class exportRequest_argsStandardScheme extends StandardScheme<exportRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPORT_REQUEST_SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exportRequestSpec = new ExportRequestSpec();
                struct.exportRequestSpec.read(iprot);
                struct.setExportRequestSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exportRequestSpec != null) {
          oprot.writeFieldBegin(EXPORT_REQUEST_SPEC_FIELD_DESC);
          struct.exportRequestSpec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportRequest_argsTupleSchemeFactory implements SchemeFactory {
      public exportRequest_argsTupleScheme getScheme() {
        return new exportRequest_argsTupleScheme();
      }
    }

    private static class exportRequest_argsTupleScheme extends TupleScheme<exportRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExportRequestSpec()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExportRequestSpec()) {
          struct.exportRequestSpec.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exportRequestSpec = new ExportRequestSpec();
          struct.exportRequestSpec.read(iprot);
          struct.setExportRequestSpecIsSet(true);
        }
      }
    }

  }

  public static class exportRequest_result implements org.apache.thrift.TBase<exportRequest_result, exportRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXPORT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("exportException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportRequest_resultTupleSchemeFactory());
    }

    public String success; // required
    public ExportException exportException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXPORT_EXCEPTION((short)1, "exportException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXPORT_EXCEPTION
            return EXPORT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.EXPORT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("exportException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportRequest_result.class, metaDataMap);
    }

    public exportRequest_result() {
    }

    public exportRequest_result(
      String success,
      ExportException exportException)
    {
      this();
      this.success = success;
      this.exportException = exportException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportRequest_result(exportRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExportException()) {
        this.exportException = new ExportException(other.exportException);
      }
    }

    public exportRequest_result deepCopy() {
      return new exportRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exportException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exportRequest_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExportException getExportException() {
      return this.exportException;
    }

    public exportRequest_result setExportException(ExportException exportException) {
      this.exportException = exportException;
      return this;
    }

    public void unsetExportException() {
      this.exportException = null;
    }

    /** Returns true if field exportException is set (has been assigned a value) and false otherwise */
    public boolean isSetExportException() {
      return this.exportException != null;
    }

    public void setExportExceptionIsSet(boolean value) {
      if (!value) {
        this.exportException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXPORT_EXCEPTION:
        if (value == null) {
          unsetExportException();
        } else {
          setExportException((ExportException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXPORT_EXCEPTION:
        return getExportException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXPORT_EXCEPTION:
        return isSetExportException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportRequest_result)
        return this.equals((exportRequest_result)that);
      return false;
    }

    public boolean equals(exportRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exportException = true && this.isSetExportException();
      boolean that_present_exportException = true && that.isSetExportException();
      if (this_present_exportException || that_present_exportException) {
        if (!(this_present_exportException && that_present_exportException))
          return false;
        if (!this.exportException.equals(that.exportException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_exportException = true && (isSetExportException());
      list.add(present_exportException);
      if (present_exportException)
        list.add(exportException);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExportException()).compareTo(other.isSetExportException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExportException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportException, other.exportException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exportException:");
      if (this.exportException == null) {
        sb.append("null");
      } else {
        sb.append(this.exportException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportRequest_resultStandardSchemeFactory implements SchemeFactory {
      public exportRequest_resultStandardScheme getScheme() {
        return new exportRequest_resultStandardScheme();
      }
    }

    private static class exportRequest_resultStandardScheme extends StandardScheme<exportRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXPORT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exportException = new ExportException();
                struct.exportException.read(iprot);
                struct.setExportExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exportException != null) {
          oprot.writeFieldBegin(EXPORT_EXCEPTION_FIELD_DESC);
          struct.exportException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportRequest_resultTupleSchemeFactory implements SchemeFactory {
      public exportRequest_resultTupleScheme getScheme() {
        return new exportRequest_resultTupleScheme();
      }
    }

    private static class exportRequest_resultTupleScheme extends TupleScheme<exportRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExportException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExportException()) {
          struct.exportException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exportException = new ExportException();
          struct.exportException.read(iprot);
          struct.setExportExceptionIsSet(true);
        }
      }
    }

  }

  public static class exportAllRequest_args implements org.apache.thrift.TBase<exportAllRequest_args, exportAllRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportAllRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportAllRequest_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportAllRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportAllRequest_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportAllRequest_args.class, metaDataMap);
    }

    public exportAllRequest_args() {
    }

    public exportAllRequest_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportAllRequest_args(exportAllRequest_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public exportAllRequest_args deepCopy() {
      return new exportAllRequest_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public exportAllRequest_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportAllRequest_args)
        return this.equals((exportAllRequest_args)that);
      return false;
    }

    public boolean equals(exportAllRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportAllRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportAllRequest_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportAllRequest_argsStandardSchemeFactory implements SchemeFactory {
      public exportAllRequest_argsStandardScheme getScheme() {
        return new exportAllRequest_argsStandardScheme();
      }
    }

    private static class exportAllRequest_argsStandardScheme extends StandardScheme<exportAllRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportAllRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportAllRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportAllRequest_argsTupleSchemeFactory implements SchemeFactory {
      public exportAllRequest_argsTupleScheme getScheme() {
        return new exportAllRequest_argsTupleScheme();
      }
    }

    private static class exportAllRequest_argsTupleScheme extends TupleScheme<exportAllRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportAllRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportAllRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class exportAllRequest_result implements org.apache.thrift.TBase<exportAllRequest_result, exportAllRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportAllRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportAllRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXPORT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("exportException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportAllRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportAllRequest_resultTupleSchemeFactory());
    }

    public String success; // required
    public ExportException exportException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXPORT_EXCEPTION((short)1, "exportException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXPORT_EXCEPTION
            return EXPORT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.EXPORT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("exportException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportAllRequest_result.class, metaDataMap);
    }

    public exportAllRequest_result() {
    }

    public exportAllRequest_result(
      String success,
      ExportException exportException)
    {
      this();
      this.success = success;
      this.exportException = exportException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportAllRequest_result(exportAllRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExportException()) {
        this.exportException = new ExportException(other.exportException);
      }
    }

    public exportAllRequest_result deepCopy() {
      return new exportAllRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exportException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exportAllRequest_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExportException getExportException() {
      return this.exportException;
    }

    public exportAllRequest_result setExportException(ExportException exportException) {
      this.exportException = exportException;
      return this;
    }

    public void unsetExportException() {
      this.exportException = null;
    }

    /** Returns true if field exportException is set (has been assigned a value) and false otherwise */
    public boolean isSetExportException() {
      return this.exportException != null;
    }

    public void setExportExceptionIsSet(boolean value) {
      if (!value) {
        this.exportException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXPORT_EXCEPTION:
        if (value == null) {
          unsetExportException();
        } else {
          setExportException((ExportException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXPORT_EXCEPTION:
        return getExportException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXPORT_EXCEPTION:
        return isSetExportException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportAllRequest_result)
        return this.equals((exportAllRequest_result)that);
      return false;
    }

    public boolean equals(exportAllRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exportException = true && this.isSetExportException();
      boolean that_present_exportException = true && that.isSetExportException();
      if (this_present_exportException || that_present_exportException) {
        if (!(this_present_exportException && that_present_exportException))
          return false;
        if (!this.exportException.equals(that.exportException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_exportException = true && (isSetExportException());
      list.add(present_exportException);
      if (present_exportException)
        list.add(exportException);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportAllRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExportException()).compareTo(other.isSetExportException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExportException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportException, other.exportException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportAllRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exportException:");
      if (this.exportException == null) {
        sb.append("null");
      } else {
        sb.append(this.exportException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportAllRequest_resultStandardSchemeFactory implements SchemeFactory {
      public exportAllRequest_resultStandardScheme getScheme() {
        return new exportAllRequest_resultStandardScheme();
      }
    }

    private static class exportAllRequest_resultStandardScheme extends StandardScheme<exportAllRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportAllRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXPORT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exportException = new ExportException();
                struct.exportException.read(iprot);
                struct.setExportExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportAllRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exportException != null) {
          oprot.writeFieldBegin(EXPORT_EXCEPTION_FIELD_DESC);
          struct.exportException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportAllRequest_resultTupleSchemeFactory implements SchemeFactory {
      public exportAllRequest_resultTupleScheme getScheme() {
        return new exportAllRequest_resultTupleScheme();
      }
    }

    private static class exportAllRequest_resultTupleScheme extends TupleScheme<exportAllRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportAllRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExportException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExportException()) {
          struct.exportException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportAllRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exportException = new ExportException();
          struct.exportException.read(iprot);
          struct.setExportExceptionIsSet(true);
        }
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimeIndex_args implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimeIndex_args, getDataSetFileOfDomainAtTimeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimeIndex_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimeIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimeIndex_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required
    public String domainName; // required
    public int timeIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef"),
      DOMAIN_NAME((short)2, "domainName"),
      TIME_INDEX((short)3, "timeIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          case 2: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 3: // TIME_INDEX
            return TIME_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DomainName")));
      tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TimeIndex")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimeIndex_args.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimeIndex_args() {
    }

    public getDataSetFileOfDomainAtTimeIndex_args(
      SimulationDataSetRef simulationDataSetRef,
      String domainName,
      int timeIndex)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
      this.domainName = domainName;
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimeIndex_args(getDataSetFileOfDomainAtTimeIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      this.timeIndex = other.timeIndex;
    }

    public getDataSetFileOfDomainAtTimeIndex_args deepCopy() {
      return new getDataSetFileOfDomainAtTimeIndex_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
      this.domainName = null;
      setTimeIndexIsSet(false);
      this.timeIndex = 0;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public int getTimeIndex() {
      return this.timeIndex;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setTimeIndex(int timeIndex) {
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      return this;
    }

    public void unsetTimeIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    public void setTimeIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      case TIME_INDEX:
        if (value == null) {
          unsetTimeIndex();
        } else {
          setTimeIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      case DOMAIN_NAME:
        return getDomainName();

      case TIME_INDEX:
        return Integer.valueOf(getTimeIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      case DOMAIN_NAME:
        return isSetDomainName();
      case TIME_INDEX:
        return isSetTimeIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimeIndex_args)
        return this.equals((getDataSetFileOfDomainAtTimeIndex_args)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimeIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_timeIndex = true;
      boolean that_present_timeIndex = true;
      if (this_present_timeIndex || that_present_timeIndex) {
        if (!(this_present_timeIndex && that_present_timeIndex))
          return false;
        if (this.timeIndex != that.timeIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      boolean present_domainName = true && (isSetDomainName());
      list.add(present_domainName);
      if (present_domainName)
        list.add(domainName);

      boolean present_timeIndex = true;
      list.add(present_timeIndex);
      if (present_timeIndex)
        list.add(timeIndex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeIndex()).compareTo(other.isSetTimeIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, other.timeIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimeIndex_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_argsStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_argsStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeIndex = iprot.readI32();
                struct.setTimeIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_argsTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_argsTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        if (struct.isSetDomainName()) {
          optionals.set(1);
        }
        if (struct.isSetTimeIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetTimeIndex()) {
          oprot.writeI32(struct.timeIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
        if (incoming.get(1)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeIndex = iprot.readI32();
          struct.setTimeIndexIsSet(true);
        }
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimeIndex_result implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimeIndex_result, getDataSetFileOfDomainAtTimeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimeIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimeIndex_resultTupleSchemeFactory());
    }

    public String success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimeIndex_result.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimeIndex_result() {
    }

    public getDataSetFileOfDomainAtTimeIndex_result(
      String success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimeIndex_result(getDataSetFileOfDomainAtTimeIndex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getDataSetFileOfDomainAtTimeIndex_result deepCopy() {
      return new getDataSetFileOfDomainAtTimeIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDataSetFileOfDomainAtTimeIndex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getDataSetFileOfDomainAtTimeIndex_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimeIndex_result)
        return this.equals((getDataSetFileOfDomainAtTimeIndex_result)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimeIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimeIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_resultStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_resultStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_resultTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_resultTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimePoint_args implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimePoint_args, getDataSetFileOfDomainAtTimePoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimePoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimePoint_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("timePoint", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimePoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimePoint_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required
    public String domainName; // required
    public double timePoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef"),
      DOMAIN_NAME((short)2, "domainName"),
      TIME_POINT((short)3, "timePoint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          case 2: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 3: // TIME_POINT
            return TIME_POINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEPOINT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DomainName")));
      tmpMap.put(_Fields.TIME_POINT, new org.apache.thrift.meta_data.FieldMetaData("timePoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE          , "TimePoint")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimePoint_args.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimePoint_args() {
    }

    public getDataSetFileOfDomainAtTimePoint_args(
      SimulationDataSetRef simulationDataSetRef,
      String domainName,
      double timePoint)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
      this.domainName = domainName;
      this.timePoint = timePoint;
      setTimePointIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimePoint_args(getDataSetFileOfDomainAtTimePoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      this.timePoint = other.timePoint;
    }

    public getDataSetFileOfDomainAtTimePoint_args deepCopy() {
      return new getDataSetFileOfDomainAtTimePoint_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
      this.domainName = null;
      setTimePointIsSet(false);
      this.timePoint = 0.0;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getDataSetFileOfDomainAtTimePoint_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getDataSetFileOfDomainAtTimePoint_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public double getTimePoint() {
      return this.timePoint;
    }

    public getDataSetFileOfDomainAtTimePoint_args setTimePoint(double timePoint) {
      this.timePoint = timePoint;
      setTimePointIsSet(true);
      return this;
    }

    public void unsetTimePoint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEPOINT_ISSET_ID);
    }

    /** Returns true if field timePoint is set (has been assigned a value) and false otherwise */
    public boolean isSetTimePoint() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEPOINT_ISSET_ID);
    }

    public void setTimePointIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEPOINT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      case TIME_POINT:
        if (value == null) {
          unsetTimePoint();
        } else {
          setTimePoint((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      case DOMAIN_NAME:
        return getDomainName();

      case TIME_POINT:
        return Double.valueOf(getTimePoint());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      case DOMAIN_NAME:
        return isSetDomainName();
      case TIME_POINT:
        return isSetTimePoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimePoint_args)
        return this.equals((getDataSetFileOfDomainAtTimePoint_args)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimePoint_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_timePoint = true;
      boolean that_present_timePoint = true;
      if (this_present_timePoint || that_present_timePoint) {
        if (!(this_present_timePoint && that_present_timePoint))
          return false;
        if (this.timePoint != that.timePoint)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      boolean present_domainName = true && (isSetDomainName());
      list.add(present_domainName);
      if (present_domainName)
        list.add(domainName);

      boolean present_timePoint = true;
      list.add(present_timePoint);
      if (present_timePoint)
        list.add(timePoint);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimePoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimePoint()).compareTo(other.isSetTimePoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimePoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timePoint, other.timePoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimePoint_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timePoint:");
      sb.append(this.timePoint);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_argsStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimePoint_argsStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimePoint_argsStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_argsStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimePoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimePoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.timePoint = iprot.readDouble();
                struct.setTimePointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimePoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_POINT_FIELD_DESC);
        oprot.writeDouble(struct.timePoint);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimePoint_argsTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimePoint_argsTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimePoint_argsTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_argsTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimePoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimePoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        if (struct.isSetDomainName()) {
          optionals.set(1);
        }
        if (struct.isSetTimePoint()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetTimePoint()) {
          oprot.writeDouble(struct.timePoint);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimePoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
        if (incoming.get(1)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timePoint = iprot.readDouble();
          struct.setTimePointIsSet(true);
        }
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimePoint_result implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimePoint_result, getDataSetFileOfDomainAtTimePoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimePoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimePoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimePoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimePoint_resultTupleSchemeFactory());
    }

    public String success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimePoint_result.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimePoint_result() {
    }

    public getDataSetFileOfDomainAtTimePoint_result(
      String success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimePoint_result(getDataSetFileOfDomainAtTimePoint_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getDataSetFileOfDomainAtTimePoint_result deepCopy() {
      return new getDataSetFileOfDomainAtTimePoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDataSetFileOfDomainAtTimePoint_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getDataSetFileOfDomainAtTimePoint_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimePoint_result)
        return this.equals((getDataSetFileOfDomainAtTimePoint_result)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimePoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimePoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimePoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_resultStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimePoint_resultStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimePoint_resultStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_resultStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimePoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimePoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimePoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimePoint_resultTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimePoint_resultTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimePoint_resultTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimePoint_resultTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimePoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimePoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimePoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getSimsFromOpenModels_args implements org.apache.thrift.TBase<getSimsFromOpenModels_args, getSimsFromOpenModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromOpenModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromOpenModels_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_args.class, metaDataMap);
    }

    public getSimsFromOpenModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_args(getSimsFromOpenModels_args other) {
    }

    public getSimsFromOpenModels_args deepCopy() {
      return new getSimsFromOpenModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_args)
        return this.equals((getSimsFromOpenModels_args)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromOpenModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromOpenModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_argsStandardSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_argsStandardScheme getScheme() {
        return new getSimsFromOpenModels_argsStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_argsStandardScheme extends StandardScheme<getSimsFromOpenModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_argsTupleSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_argsTupleScheme getScheme() {
        return new getSimsFromOpenModels_argsTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_argsTupleScheme extends TupleScheme<getSimsFromOpenModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSimsFromOpenModels_result implements org.apache.thrift.TBase<getSimsFromOpenModels_result, getSimsFromOpenModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromOpenModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromOpenModels_resultTupleSchemeFactory());
    }

    public List<SimulationDataSetRef> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "SimulationDataSetRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_result.class, metaDataMap);
    }

    public getSimsFromOpenModels_result() {
    }

    public getSimsFromOpenModels_result(
      List<SimulationDataSetRef> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_result(getSimsFromOpenModels_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getSimsFromOpenModels_result deepCopy() {
      return new getSimsFromOpenModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SimulationDataSetRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SimulationDataSetRef elem) {
      if (this.success == null) {
        this.success = new ArrayList<SimulationDataSetRef>();
      }
      this.success.add(elem);
    }

    public List<SimulationDataSetRef> getSuccess() {
      return this.success;
    }

    public getSimsFromOpenModels_result setSuccess(List<SimulationDataSetRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getSimsFromOpenModels_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SimulationDataSetRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_result)
        return this.equals((getSimsFromOpenModels_result)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromOpenModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromOpenModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_resultStandardSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_resultStandardScheme getScheme() {
        return new getSimsFromOpenModels_resultStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_resultStandardScheme extends StandardScheme<getSimsFromOpenModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<SimulationDataSetRef>(_list16.size);
                  SimulationDataSetRef _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new SimulationDataSetRef();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SimulationDataSetRef _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_resultTupleSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_resultTupleScheme getScheme() {
        return new getSimsFromOpenModels_resultTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_resultTupleScheme extends TupleScheme<getSimsFromOpenModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SimulationDataSetRef _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SimulationDataSetRef>(_list21.size);
            SimulationDataSetRef _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new SimulationDataSetRef();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getSimsFromModel_args implements org.apache.thrift.TBase<getSimsFromModel_args, getSimsFromModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("modelRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromModel_argsTupleSchemeFactory());
    }

    public ModelRef modelRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_REF((short)1, "modelRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_REF
            return MODEL_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_REF, new org.apache.thrift.meta_data.FieldMetaData("modelRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromModel_args.class, metaDataMap);
    }

    public getSimsFromModel_args() {
    }

    public getSimsFromModel_args(
      ModelRef modelRef)
    {
      this();
      this.modelRef = modelRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromModel_args(getSimsFromModel_args other) {
      if (other.isSetModelRef()) {
        this.modelRef = new ModelRef(other.modelRef);
      }
    }

    public getSimsFromModel_args deepCopy() {
      return new getSimsFromModel_args(this);
    }

    @Override
    public void clear() {
      this.modelRef = null;
    }

    public ModelRef getModelRef() {
      return this.modelRef;
    }

    public getSimsFromModel_args setModelRef(ModelRef modelRef) {
      this.modelRef = modelRef;
      return this;
    }

    public void unsetModelRef() {
      this.modelRef = null;
    }

    /** Returns true if field modelRef is set (has been assigned a value) and false otherwise */
    public boolean isSetModelRef() {
      return this.modelRef != null;
    }

    public void setModelRefIsSet(boolean value) {
      if (!value) {
        this.modelRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_REF:
        if (value == null) {
          unsetModelRef();
        } else {
          setModelRef((ModelRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_REF:
        return getModelRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_REF:
        return isSetModelRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromModel_args)
        return this.equals((getSimsFromModel_args)that);
      return false;
    }

    public boolean equals(getSimsFromModel_args that) {
      if (that == null)
        return false;

      boolean this_present_modelRef = true && this.isSetModelRef();
      boolean that_present_modelRef = true && that.isSetModelRef();
      if (this_present_modelRef || that_present_modelRef) {
        if (!(this_present_modelRef && that_present_modelRef))
          return false;
        if (!this.modelRef.equals(that.modelRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelRef = true && (isSetModelRef());
      list.add(present_modelRef);
      if (present_modelRef)
        list.add(modelRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelRef()).compareTo(other.isSetModelRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelRef, other.modelRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromModel_args(");
      boolean first = true;

      sb.append("modelRef:");
      if (this.modelRef == null) {
        sb.append("null");
      } else {
        sb.append(this.modelRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (modelRef != null) {
        modelRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromModel_argsStandardSchemeFactory implements SchemeFactory {
      public getSimsFromModel_argsStandardScheme getScheme() {
        return new getSimsFromModel_argsStandardScheme();
      }
    }

    private static class getSimsFromModel_argsStandardScheme extends StandardScheme<getSimsFromModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.modelRef = new ModelRef();
                struct.modelRef.read(iprot);
                struct.setModelRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelRef != null) {
          oprot.writeFieldBegin(MODEL_REF_FIELD_DESC);
          struct.modelRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromModel_argsTupleSchemeFactory implements SchemeFactory {
      public getSimsFromModel_argsTupleScheme getScheme() {
        return new getSimsFromModel_argsTupleScheme();
      }
    }

    private static class getSimsFromModel_argsTupleScheme extends TupleScheme<getSimsFromModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelRef()) {
          struct.modelRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelRef = new ModelRef();
          struct.modelRef.read(iprot);
          struct.setModelRefIsSet(true);
        }
      }
    }

  }

  public static class getSimsFromModel_result implements org.apache.thrift.TBase<getSimsFromModel_result, getSimsFromModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromModel_resultTupleSchemeFactory());
    }

    public List<SimulationDataSetRef> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "SimulationDataSetRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromModel_result.class, metaDataMap);
    }

    public getSimsFromModel_result() {
    }

    public getSimsFromModel_result(
      List<SimulationDataSetRef> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromModel_result(getSimsFromModel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getSimsFromModel_result deepCopy() {
      return new getSimsFromModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SimulationDataSetRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SimulationDataSetRef elem) {
      if (this.success == null) {
        this.success = new ArrayList<SimulationDataSetRef>();
      }
      this.success.add(elem);
    }

    public List<SimulationDataSetRef> getSuccess() {
      return this.success;
    }

    public getSimsFromModel_result setSuccess(List<SimulationDataSetRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getSimsFromModel_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SimulationDataSetRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromModel_result)
        return this.equals((getSimsFromModel_result)that);
      return false;
    }

    public boolean equals(getSimsFromModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromModel_resultStandardSchemeFactory implements SchemeFactory {
      public getSimsFromModel_resultStandardScheme getScheme() {
        return new getSimsFromModel_resultStandardScheme();
      }
    }

    private static class getSimsFromModel_resultStandardScheme extends StandardScheme<getSimsFromModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<SimulationDataSetRef>(_list24.size);
                  SimulationDataSetRef _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new SimulationDataSetRef();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SimulationDataSetRef _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromModel_resultTupleSchemeFactory implements SchemeFactory {
      public getSimsFromModel_resultTupleScheme getScheme() {
        return new getSimsFromModel_resultTupleScheme();
      }
    }

    private static class getSimsFromModel_resultTupleScheme extends TupleScheme<getSimsFromModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SimulationDataSetRef _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SimulationDataSetRef>(_list29.size);
            SimulationDataSetRef _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new SimulationDataSetRef();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getEndTimeIndex_args implements org.apache.thrift.TBase<getEndTimeIndex_args, getEndTimeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEndTimeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndTimeIndex_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndTimeIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndTimeIndex_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndTimeIndex_args.class, metaDataMap);
    }

    public getEndTimeIndex_args() {
    }

    public getEndTimeIndex_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndTimeIndex_args(getEndTimeIndex_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getEndTimeIndex_args deepCopy() {
      return new getEndTimeIndex_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getEndTimeIndex_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndTimeIndex_args)
        return this.equals((getEndTimeIndex_args)that);
      return false;
    }

    public boolean equals(getEndTimeIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEndTimeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndTimeIndex_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndTimeIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getEndTimeIndex_argsStandardScheme getScheme() {
        return new getEndTimeIndex_argsStandardScheme();
      }
    }

    private static class getEndTimeIndex_argsStandardScheme extends StandardScheme<getEndTimeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndTimeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndTimeIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getEndTimeIndex_argsTupleScheme getScheme() {
        return new getEndTimeIndex_argsTupleScheme();
      }
    }

    private static class getEndTimeIndex_argsTupleScheme extends TupleScheme<getEndTimeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class getEndTimeIndex_result implements org.apache.thrift.TBase<getEndTimeIndex_result, getEndTimeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEndTimeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEndTimeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEndTimeIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEndTimeIndex_resultTupleSchemeFactory());
    }

    public int success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TimeIndex")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEndTimeIndex_result.class, metaDataMap);
    }

    public getEndTimeIndex_result() {
    }

    public getEndTimeIndex_result(
      int success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEndTimeIndex_result(getEndTimeIndex_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getEndTimeIndex_result deepCopy() {
      return new getEndTimeIndex_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.dataAccessException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getEndTimeIndex_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getEndTimeIndex_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEndTimeIndex_result)
        return this.equals((getEndTimeIndex_result)that);
      return false;
    }

    public boolean equals(getEndTimeIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEndTimeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEndTimeIndex_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEndTimeIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getEndTimeIndex_resultStandardScheme getScheme() {
        return new getEndTimeIndex_resultStandardScheme();
      }
    }

    private static class getEndTimeIndex_resultStandardScheme extends StandardScheme<getEndTimeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEndTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEndTimeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEndTimeIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getEndTimeIndex_resultTupleScheme getScheme() {
        return new getEndTimeIndex_resultTupleScheme();
      }
    }

    private static class getEndTimeIndex_resultTupleScheme extends TupleScheme<getEndTimeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEndTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEndTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTimePoints_args implements org.apache.thrift.TBase<getTimePoints_args, getTimePoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimePoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimePoints_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_args.class, metaDataMap);
    }

    public getTimePoints_args() {
    }

    public getTimePoints_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_args(getTimePoints_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getTimePoints_args deepCopy() {
      return new getTimePoints_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getTimePoints_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_args)
        return this.equals((getTimePoints_args)that);
      return false;
    }

    public boolean equals(getTimePoints_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimePoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimePoints_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_argsStandardSchemeFactory implements SchemeFactory {
      public getTimePoints_argsStandardScheme getScheme() {
        return new getTimePoints_argsStandardScheme();
      }
    }

    private static class getTimePoints_argsStandardScheme extends StandardScheme<getTimePoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_argsTupleSchemeFactory implements SchemeFactory {
      public getTimePoints_argsTupleScheme getScheme() {
        return new getTimePoints_argsTupleScheme();
      }
    }

    private static class getTimePoints_argsTupleScheme extends TupleScheme<getTimePoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class getTimePoints_result implements org.apache.thrift.TBase<getTimePoints_result, getTimePoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimePoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimePoints_resultTupleSchemeFactory());
    }

    public List<Double> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TimePoints")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_result.class, metaDataMap);
    }

    public getTimePoints_result() {
    }

    public getTimePoints_result(
      List<Double> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_result(getTimePoints_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getTimePoints_result deepCopy() {
      return new getTimePoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new ArrayList<Double>();
      }
      this.success.add(elem);
    }

    public List<Double> getSuccess() {
      return this.success;
    }

    public getTimePoints_result setSuccess(List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getTimePoints_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Double>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_result)
        return this.equals((getTimePoints_result)that);
      return false;
    }

    public boolean equals(getTimePoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimePoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimePoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_resultStandardSchemeFactory implements SchemeFactory {
      public getTimePoints_resultStandardScheme getScheme() {
        return new getTimePoints_resultStandardScheme();
      }
    }

    private static class getTimePoints_resultStandardScheme extends StandardScheme<getTimePoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Double>(_list32.size);
                  double _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readDouble();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter35 : struct.success)
            {
              oprot.writeDouble(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_resultTupleSchemeFactory implements SchemeFactory {
      public getTimePoints_resultTupleScheme getScheme() {
        return new getTimePoints_resultTupleScheme();
      }
    }

    private static class getTimePoints_resultTupleScheme extends TupleScheme<getTimePoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter36 : struct.success)
            {
              oprot.writeDouble(_iter36);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new ArrayList<Double>(_list37.size);
            double _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readDouble();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVariableList_args implements org.apache.thrift.TBase<getVariableList_args, getVariableList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVariableList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVariableList_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_args.class, metaDataMap);
    }

    public getVariableList_args() {
    }

    public getVariableList_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_args(getVariableList_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getVariableList_args deepCopy() {
      return new getVariableList_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getVariableList_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_args)
        return this.equals((getVariableList_args)that);
      return false;
    }

    public boolean equals(getVariableList_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVariableList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVariableList_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_argsStandardSchemeFactory implements SchemeFactory {
      public getVariableList_argsStandardScheme getScheme() {
        return new getVariableList_argsStandardScheme();
      }
    }

    private static class getVariableList_argsStandardScheme extends StandardScheme<getVariableList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_argsTupleSchemeFactory implements SchemeFactory {
      public getVariableList_argsTupleScheme getScheme() {
        return new getVariableList_argsTupleScheme();
      }
    }

    private static class getVariableList_argsTupleScheme extends TupleScheme<getVariableList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class getVariableList_result implements org.apache.thrift.TBase<getVariableList_result, getVariableList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVariableList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVariableList_resultTupleSchemeFactory());
    }

    public List<VariableInfo> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "VariableList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_result.class, metaDataMap);
    }

    public getVariableList_result() {
    }

    public getVariableList_result(
      List<VariableInfo> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_result(getVariableList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getVariableList_result deepCopy() {
      return new getVariableList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VariableInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VariableInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<VariableInfo>();
      }
      this.success.add(elem);
    }

    public List<VariableInfo> getSuccess() {
      return this.success;
    }

    public getVariableList_result setSuccess(List<VariableInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getVariableList_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VariableInfo>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_result)
        return this.equals((getVariableList_result)that);
      return false;
    }

    public boolean equals(getVariableList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVariableList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVariableList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_resultStandardSchemeFactory implements SchemeFactory {
      public getVariableList_resultStandardScheme getScheme() {
        return new getVariableList_resultStandardScheme();
      }
    }

    private static class getVariableList_resultStandardScheme extends StandardScheme<getVariableList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<VariableInfo>(_list40.size);
                  VariableInfo _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new VariableInfo();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VariableInfo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_resultTupleSchemeFactory implements SchemeFactory {
      public getVariableList_resultTupleScheme getScheme() {
        return new getVariableList_resultTupleScheme();
      }
    }

    private static class getVariableList_resultTupleScheme extends TupleScheme<getVariableList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VariableInfo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VariableInfo>(_list45.size);
            VariableInfo _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new VariableInfo();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getBioModels_args implements org.apache.thrift.TBase<getBioModels_args, getBioModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBioModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBioModels_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBioModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBioModels_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBioModels_args.class, metaDataMap);
    }

    public getBioModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBioModels_args(getBioModels_args other) {
    }

    public getBioModels_args deepCopy() {
      return new getBioModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBioModels_args)
        return this.equals((getBioModels_args)that);
      return false;
    }

    public boolean equals(getBioModels_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getBioModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBioModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBioModels_argsStandardSchemeFactory implements SchemeFactory {
      public getBioModels_argsStandardScheme getScheme() {
        return new getBioModels_argsStandardScheme();
      }
    }

    private static class getBioModels_argsStandardScheme extends StandardScheme<getBioModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBioModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBioModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBioModels_argsTupleSchemeFactory implements SchemeFactory {
      public getBioModels_argsTupleScheme getScheme() {
        return new getBioModels_argsTupleScheme();
      }
    }

    private static class getBioModels_argsTupleScheme extends TupleScheme<getBioModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBioModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBioModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBioModels_result implements org.apache.thrift.TBase<getBioModels_result, getBioModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBioModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBioModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBioModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBioModels_resultTupleSchemeFactory());
    }

    public List<ModelRef> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ModelRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBioModels_result.class, metaDataMap);
    }

    public getBioModels_result() {
    }

    public getBioModels_result(
      List<ModelRef> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBioModels_result(getBioModels_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getBioModels_result deepCopy() {
      return new getBioModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ModelRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ModelRef elem) {
      if (this.success == null) {
        this.success = new ArrayList<ModelRef>();
      }
      this.success.add(elem);
    }

    public List<ModelRef> getSuccess() {
      return this.success;
    }

    public getBioModels_result setSuccess(List<ModelRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getBioModels_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ModelRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBioModels_result)
        return this.equals((getBioModels_result)that);
      return false;
    }

    public boolean equals(getBioModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBioModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBioModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBioModels_resultStandardSchemeFactory implements SchemeFactory {
      public getBioModels_resultStandardScheme getScheme() {
        return new getBioModels_resultStandardScheme();
      }
    }

    private static class getBioModels_resultStandardScheme extends StandardScheme<getBioModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBioModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<ModelRef>(_list48.size);
                  ModelRef _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new ModelRef();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBioModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ModelRef _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBioModels_resultTupleSchemeFactory implements SchemeFactory {
      public getBioModels_resultTupleScheme getScheme() {
        return new getBioModels_resultTupleScheme();
      }
    }

    private static class getBioModels_resultTupleScheme extends TupleScheme<getBioModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBioModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ModelRef _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBioModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ModelRef>(_list53.size);
            ModelRef _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new ModelRef();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getMathModels_args implements org.apache.thrift.TBase<getMathModels_args, getMathModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMathModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMathModels_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMathModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMathModels_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMathModels_args.class, metaDataMap);
    }

    public getMathModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMathModels_args(getMathModels_args other) {
    }

    public getMathModels_args deepCopy() {
      return new getMathModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMathModels_args)
        return this.equals((getMathModels_args)that);
      return false;
    }

    public boolean equals(getMathModels_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getMathModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMathModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMathModels_argsStandardSchemeFactory implements SchemeFactory {
      public getMathModels_argsStandardScheme getScheme() {
        return new getMathModels_argsStandardScheme();
      }
    }

    private static class getMathModels_argsStandardScheme extends StandardScheme<getMathModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMathModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMathModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMathModels_argsTupleSchemeFactory implements SchemeFactory {
      public getMathModels_argsTupleScheme getScheme() {
        return new getMathModels_argsTupleScheme();
      }
    }

    private static class getMathModels_argsTupleScheme extends TupleScheme<getMathModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMathModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMathModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMathModels_result implements org.apache.thrift.TBase<getMathModels_result, getMathModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMathModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMathModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMathModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMathModels_resultTupleSchemeFactory());
    }

    public List<ModelRef> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ModelRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMathModels_result.class, metaDataMap);
    }

    public getMathModels_result() {
    }

    public getMathModels_result(
      List<ModelRef> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMathModels_result(getMathModels_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getMathModels_result deepCopy() {
      return new getMathModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ModelRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ModelRef elem) {
      if (this.success == null) {
        this.success = new ArrayList<ModelRef>();
      }
      this.success.add(elem);
    }

    public List<ModelRef> getSuccess() {
      return this.success;
    }

    public getMathModels_result setSuccess(List<ModelRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getMathModels_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ModelRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMathModels_result)
        return this.equals((getMathModels_result)that);
      return false;
    }

    public boolean equals(getMathModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMathModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMathModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMathModels_resultStandardSchemeFactory implements SchemeFactory {
      public getMathModels_resultStandardScheme getScheme() {
        return new getMathModels_resultStandardScheme();
      }
    }

    private static class getMathModels_resultStandardScheme extends StandardScheme<getMathModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMathModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ModelRef>(_list56.size);
                  ModelRef _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new ModelRef();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMathModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ModelRef _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMathModels_resultTupleSchemeFactory implements SchemeFactory {
      public getMathModels_resultTupleScheme getScheme() {
        return new getMathModels_resultTupleScheme();
      }
    }

    private static class getMathModels_resultTupleScheme extends TupleScheme<getMathModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMathModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ModelRef _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMathModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ModelRef>(_list61.size);
            ModelRef _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new ModelRef();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUser_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
    }

    public getUser_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_args(getUser_args other) {
    }

    public getUser_args deepCopy() {
      return new getUser_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_args)
        return this.equals((getUser_args)that);
      return false;
    }

    public boolean equals(getUser_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUser_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUser_argsStandardSchemeFactory implements SchemeFactory {
      public getUser_argsStandardScheme getScheme() {
        return new getUser_argsStandardScheme();
      }
    }

    private static class getUser_argsStandardScheme extends StandardScheme<getUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUser_argsTupleSchemeFactory implements SchemeFactory {
      public getUser_argsTupleScheme getScheme() {
        return new getUser_argsTupleScheme();
      }
    }

    private static class getUser_argsTupleScheme extends TupleScheme<getUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUser_resultTupleSchemeFactory());
    }

    public User success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
    }

    public getUser_result() {
    }

    public getUser_result(
      User success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_result(getUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getUser_result deepCopy() {
      return new getUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public User getSuccess() {
      return this.success;
    }

    public getUser_result setSuccess(User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getUser_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_result)
        return this.equals((getUser_result)that);
      return false;
    }

    public boolean equals(getUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUser_resultStandardSchemeFactory implements SchemeFactory {
      public getUser_resultStandardScheme getScheme() {
        return new getUser_resultStandardScheme();
      }
    }

    private static class getUser_resultStandardScheme extends StandardScheme<getUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUser_resultTupleSchemeFactory implements SchemeFactory {
      public getUser_resultTupleScheme getScheme() {
        return new getUser_resultTupleScheme();
      }
    }

    private static class getUser_resultTupleScheme extends TupleScheme<getUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

}
