/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-31")
public class VCellProxy {

  public interface Iface {

    public String getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws DataAccessException, org.apache.thrift.TException;

    public List<SimulationDataSetRef> getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException;

    public List<Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException;

    public List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws DataAccessException, org.apache.thrift.TException
    {
      send_getDataSetFileOfDomainAtTimeIndex(simulationDataSetRef, domainName, timeIndex);
      return recv_getDataSetFileOfDomainAtTimeIndex();
    }

    public void send_getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex) throws org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimeIndex_args args = new getDataSetFileOfDomainAtTimeIndex_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      args.setDomainName(domainName);
      args.setTimeIndex(timeIndex);
      sendBase("getDataSetFileOfDomainAtTimeIndex", args);
    }

    public String recv_getDataSetFileOfDomainAtTimeIndex() throws DataAccessException, org.apache.thrift.TException
    {
      getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
      receiveBase(result, "getDataSetFileOfDomainAtTimeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSetFileOfDomainAtTimeIndex failed: unknown result");
    }

    public List<SimulationDataSetRef> getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException
    {
      send_getSimsFromOpenModels();
      return recv_getSimsFromOpenModels();
    }

    public void send_getSimsFromOpenModels() throws org.apache.thrift.TException
    {
      getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
      sendBase("getSimsFromOpenModels", args);
    }

    public List<SimulationDataSetRef> recv_getSimsFromOpenModels() throws DataAccessException, org.apache.thrift.TException
    {
      getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
      receiveBase(result, "getSimsFromOpenModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimsFromOpenModels failed: unknown result");
    }

    public List<Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getTimePoints(simulationDataSetRef);
      return recv_getTimePoints();
    }

    public void send_getTimePoints(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getTimePoints_args args = new getTimePoints_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getTimePoints", args);
    }

    public List<Double> recv_getTimePoints() throws DataAccessException, org.apache.thrift.TException
    {
      getTimePoints_result result = new getTimePoints_result();
      receiveBase(result, "getTimePoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimePoints failed: unknown result");
    }

    public List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws DataAccessException, org.apache.thrift.TException
    {
      send_getVariableList(simulationDataSetRef);
      return recv_getVariableList();
    }

    public void send_getVariableList(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getVariableList_args args = new getVariableList_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getVariableList", args);
    }

    public List<VariableInfo> recv_getVariableList() throws DataAccessException, org.apache.thrift.TException
    {
      getVariableList_result result = new getVariableList_result();
      receiveBase(result, "getVariableList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVariableList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDataSetFileOfDomainAtTimeIndex(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSetFileOfDomainAtTimeIndex_call method_call = new getDataSetFileOfDomainAtTimeIndex_call(simulationDataSetRef, domainName, timeIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSetFileOfDomainAtTimeIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      private String domainName;
      private int timeIndex;
      public getDataSetFileOfDomainAtTimeIndex_call(SimulationDataSetRef simulationDataSetRef, String domainName, int timeIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
        this.domainName = domainName;
        this.timeIndex = timeIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSetFileOfDomainAtTimeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSetFileOfDomainAtTimeIndex_args args = new getDataSetFileOfDomainAtTimeIndex_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.setDomainName(domainName);
        args.setTimeIndex(timeIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSetFileOfDomainAtTimeIndex();
      }
    }

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimsFromOpenModels_call method_call = new getSimsFromOpenModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimsFromOpenModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSimsFromOpenModels_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimsFromOpenModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SimulationDataSetRef> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimsFromOpenModels();
      }
    }

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimePoints_call method_call = new getTimePoints_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimePoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public getTimePoints_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimePoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimePoints_args args = new getTimePoints_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Double> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimePoints();
      }
    }

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVariableList_call method_call = new getVariableList_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVariableList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimulationDataSetRef simulationDataSetRef;
      public getVariableList_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVariableList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVariableList_args args = new getVariableList_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VariableInfo> getResult() throws DataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVariableList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDataSetFileOfDomainAtTimeIndex", new getDataSetFileOfDomainAtTimeIndex());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      return processMap;
    }

    public static class getDataSetFileOfDomainAtTimeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSetFileOfDomainAtTimeIndex_args> {
      public getDataSetFileOfDomainAtTimeIndex() {
        super("getDataSetFileOfDomainAtTimeIndex");
      }

      public getDataSetFileOfDomainAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSetFileOfDomainAtTimeIndex_result getResult(I iface, getDataSetFileOfDomainAtTimeIndex_args args) throws org.apache.thrift.TException {
        getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
        try {
          result.success = iface.getDataSetFileOfDomainAtTimeIndex(args.simulationDataSetRef, args.domainName, args.timeIndex);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getSimsFromOpenModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimsFromOpenModels_args> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSimsFromOpenModels_result getResult(I iface, getSimsFromOpenModels_args args) throws org.apache.thrift.TException {
        getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
        try {
          result.success = iface.getSimsFromOpenModels();
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getTimePoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimePoints_args> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimePoints_result getResult(I iface, getTimePoints_args args) throws org.apache.thrift.TException {
        getTimePoints_result result = new getTimePoints_result();
        try {
          result.success = iface.getTimePoints(args.simulationDataSetRef);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getVariableList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVariableList_args> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVariableList_result getResult(I iface, getVariableList_args args) throws org.apache.thrift.TException {
        getVariableList_result result = new getVariableList_result();
        try {
          result.success = iface.getVariableList(args.simulationDataSetRef);
        } catch (DataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDataSetFileOfDomainAtTimeIndex", new getDataSetFileOfDomainAtTimeIndex());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      return processMap;
    }

    public static class getDataSetFileOfDomainAtTimeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataSetFileOfDomainAtTimeIndex_args, String> {
      public getDataSetFileOfDomainAtTimeIndex() {
        super("getDataSetFileOfDomainAtTimeIndex");
      }

      public getDataSetFileOfDomainAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfDomainAtTimeIndex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataSetFileOfDomainAtTimeIndex_result result = new getDataSetFileOfDomainAtTimeIndex_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataSetFileOfDomainAtTimeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getDataSetFileOfDomainAtTimeIndex(args.simulationDataSetRef, args.domainName, args.timeIndex,resultHandler);
      }
    }

    public static class getSimsFromOpenModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimsFromOpenModels_args, List<SimulationDataSetRef>> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      public AsyncMethodCallback<List<SimulationDataSetRef>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SimulationDataSetRef>>() { 
          public void onComplete(List<SimulationDataSetRef> o) {
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSimsFromOpenModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<SimulationDataSetRef>> resultHandler) throws TException {
        iface.getSimsFromOpenModels(resultHandler);
      }
    }

    public static class getTimePoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimePoints_args, List<Double>> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      public AsyncMethodCallback<List<Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Double>>() { 
          public void onComplete(List<Double> o) {
            getTimePoints_result result = new getTimePoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimePoints_result result = new getTimePoints_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimePoints_args args, org.apache.thrift.async.AsyncMethodCallback<List<Double>> resultHandler) throws TException {
        iface.getTimePoints(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getVariableList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVariableList_args, List<VariableInfo>> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      public AsyncMethodCallback<List<VariableInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<VariableInfo>>() { 
          public void onComplete(List<VariableInfo> o) {
            getVariableList_result result = new getVariableList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVariableList_result result = new getVariableList_result();
            if (e instanceof DataAccessException) {
                        result.dataAccessException = (DataAccessException) e;
                        result.setDataAccessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVariableList_args args, org.apache.thrift.async.AsyncMethodCallback<List<VariableInfo>> resultHandler) throws TException {
        iface.getVariableList(args.simulationDataSetRef,resultHandler);
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimeIndex_args implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimeIndex_args, getDataSetFileOfDomainAtTimeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimeIndex_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimeIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimeIndex_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required
    public String domainName; // required
    public int timeIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef"),
      DOMAIN_NAME((short)2, "domainName"),
      TIME_INDEX((short)3, "timeIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          case 2: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 3: // TIME_INDEX
            return TIME_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DomainName")));
      tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TimeIndex")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimeIndex_args.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimeIndex_args() {
    }

    public getDataSetFileOfDomainAtTimeIndex_args(
      SimulationDataSetRef simulationDataSetRef,
      String domainName,
      int timeIndex)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
      this.domainName = domainName;
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimeIndex_args(getDataSetFileOfDomainAtTimeIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      this.timeIndex = other.timeIndex;
    }

    public getDataSetFileOfDomainAtTimeIndex_args deepCopy() {
      return new getDataSetFileOfDomainAtTimeIndex_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
      this.domainName = null;
      setTimeIndexIsSet(false);
      this.timeIndex = 0;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public int getTimeIndex() {
      return this.timeIndex;
    }

    public getDataSetFileOfDomainAtTimeIndex_args setTimeIndex(int timeIndex) {
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      return this;
    }

    public void unsetTimeIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    public void setTimeIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      case TIME_INDEX:
        if (value == null) {
          unsetTimeIndex();
        } else {
          setTimeIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      case DOMAIN_NAME:
        return getDomainName();

      case TIME_INDEX:
        return Integer.valueOf(getTimeIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      case DOMAIN_NAME:
        return isSetDomainName();
      case TIME_INDEX:
        return isSetTimeIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimeIndex_args)
        return this.equals((getDataSetFileOfDomainAtTimeIndex_args)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimeIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_timeIndex = true;
      boolean that_present_timeIndex = true;
      if (this_present_timeIndex || that_present_timeIndex) {
        if (!(this_present_timeIndex && that_present_timeIndex))
          return false;
        if (this.timeIndex != that.timeIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      boolean present_domainName = true && (isSetDomainName());
      list.add(present_domainName);
      if (present_domainName)
        list.add(domainName);

      boolean present_timeIndex = true;
      list.add(present_timeIndex);
      if (present_timeIndex)
        list.add(timeIndex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeIndex()).compareTo(other.isSetTimeIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, other.timeIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimeIndex_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_argsStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_argsStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeIndex = iprot.readI32();
                struct.setTimeIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_argsTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_argsTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_argsTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        if (struct.isSetDomainName()) {
          optionals.set(1);
        }
        if (struct.isSetTimeIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetTimeIndex()) {
          oprot.writeI32(struct.timeIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
        if (incoming.get(1)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeIndex = iprot.readI32();
          struct.setTimeIndexIsSet(true);
        }
      }
    }

  }

  public static class getDataSetFileOfDomainAtTimeIndex_result implements org.apache.thrift.TBase<getDataSetFileOfDomainAtTimeIndex_result, getDataSetFileOfDomainAtTimeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfDomainAtTimeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfDomainAtTimeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataSetFileOfDomainAtTimeIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataSetFileOfDomainAtTimeIndex_resultTupleSchemeFactory());
    }

    public String success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfDomainAtTimeIndex_result.class, metaDataMap);
    }

    public getDataSetFileOfDomainAtTimeIndex_result() {
    }

    public getDataSetFileOfDomainAtTimeIndex_result(
      String success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfDomainAtTimeIndex_result(getDataSetFileOfDomainAtTimeIndex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getDataSetFileOfDomainAtTimeIndex_result deepCopy() {
      return new getDataSetFileOfDomainAtTimeIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDataSetFileOfDomainAtTimeIndex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getDataSetFileOfDomainAtTimeIndex_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfDomainAtTimeIndex_result)
        return this.equals((getDataSetFileOfDomainAtTimeIndex_result)that);
      return false;
    }

    public boolean equals(getDataSetFileOfDomainAtTimeIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataSetFileOfDomainAtTimeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataSetFileOfDomainAtTimeIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_resultStandardScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_resultStandardScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultStandardScheme extends StandardScheme<getDataSetFileOfDomainAtTimeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getDataSetFileOfDomainAtTimeIndex_resultTupleScheme getScheme() {
        return new getDataSetFileOfDomainAtTimeIndex_resultTupleScheme();
      }
    }

    private static class getDataSetFileOfDomainAtTimeIndex_resultTupleScheme extends TupleScheme<getDataSetFileOfDomainAtTimeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfDomainAtTimeIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getSimsFromOpenModels_args implements org.apache.thrift.TBase<getSimsFromOpenModels_args, getSimsFromOpenModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromOpenModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromOpenModels_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_args.class, metaDataMap);
    }

    public getSimsFromOpenModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_args(getSimsFromOpenModels_args other) {
    }

    public getSimsFromOpenModels_args deepCopy() {
      return new getSimsFromOpenModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_args)
        return this.equals((getSimsFromOpenModels_args)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromOpenModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromOpenModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_argsStandardSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_argsStandardScheme getScheme() {
        return new getSimsFromOpenModels_argsStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_argsStandardScheme extends StandardScheme<getSimsFromOpenModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_argsTupleSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_argsTupleScheme getScheme() {
        return new getSimsFromOpenModels_argsTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_argsTupleScheme extends TupleScheme<getSimsFromOpenModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSimsFromOpenModels_result implements org.apache.thrift.TBase<getSimsFromOpenModels_result, getSimsFromOpenModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimsFromOpenModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimsFromOpenModels_resultTupleSchemeFactory());
    }

    public List<SimulationDataSetRef> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "SimulationDataSetRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_result.class, metaDataMap);
    }

    public getSimsFromOpenModels_result() {
    }

    public getSimsFromOpenModels_result(
      List<SimulationDataSetRef> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_result(getSimsFromOpenModels_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getSimsFromOpenModels_result deepCopy() {
      return new getSimsFromOpenModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SimulationDataSetRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SimulationDataSetRef elem) {
      if (this.success == null) {
        this.success = new ArrayList<SimulationDataSetRef>();
      }
      this.success.add(elem);
    }

    public List<SimulationDataSetRef> getSuccess() {
      return this.success;
    }

    public getSimsFromOpenModels_result setSuccess(List<SimulationDataSetRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getSimsFromOpenModels_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SimulationDataSetRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_result)
        return this.equals((getSimsFromOpenModels_result)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimsFromOpenModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimsFromOpenModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_resultStandardSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_resultStandardScheme getScheme() {
        return new getSimsFromOpenModels_resultStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_resultStandardScheme extends StandardScheme<getSimsFromOpenModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<SimulationDataSetRef>(_list0.size);
                  SimulationDataSetRef _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new SimulationDataSetRef();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SimulationDataSetRef _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_resultTupleSchemeFactory implements SchemeFactory {
      public getSimsFromOpenModels_resultTupleScheme getScheme() {
        return new getSimsFromOpenModels_resultTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_resultTupleScheme extends TupleScheme<getSimsFromOpenModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SimulationDataSetRef _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SimulationDataSetRef>(_list5.size);
            SimulationDataSetRef _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new SimulationDataSetRef();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getTimePoints_args implements org.apache.thrift.TBase<getTimePoints_args, getTimePoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimePoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimePoints_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_args.class, metaDataMap);
    }

    public getTimePoints_args() {
    }

    public getTimePoints_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_args(getTimePoints_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getTimePoints_args deepCopy() {
      return new getTimePoints_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getTimePoints_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_args)
        return this.equals((getTimePoints_args)that);
      return false;
    }

    public boolean equals(getTimePoints_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimePoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimePoints_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_argsStandardSchemeFactory implements SchemeFactory {
      public getTimePoints_argsStandardScheme getScheme() {
        return new getTimePoints_argsStandardScheme();
      }
    }

    private static class getTimePoints_argsStandardScheme extends StandardScheme<getTimePoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_argsTupleSchemeFactory implements SchemeFactory {
      public getTimePoints_argsTupleScheme getScheme() {
        return new getTimePoints_argsTupleScheme();
      }
    }

    private static class getTimePoints_argsTupleScheme extends TupleScheme<getTimePoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class getTimePoints_result implements org.apache.thrift.TBase<getTimePoints_result, getTimePoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimePoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimePoints_resultTupleSchemeFactory());
    }

    public List<Double> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TimePoints")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_result.class, metaDataMap);
    }

    public getTimePoints_result() {
    }

    public getTimePoints_result(
      List<Double> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_result(getTimePoints_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getTimePoints_result deepCopy() {
      return new getTimePoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new ArrayList<Double>();
      }
      this.success.add(elem);
    }

    public List<Double> getSuccess() {
      return this.success;
    }

    public getTimePoints_result setSuccess(List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getTimePoints_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Double>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_result)
        return this.equals((getTimePoints_result)that);
      return false;
    }

    public boolean equals(getTimePoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimePoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimePoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_resultStandardSchemeFactory implements SchemeFactory {
      public getTimePoints_resultStandardScheme getScheme() {
        return new getTimePoints_resultStandardScheme();
      }
    }

    private static class getTimePoints_resultStandardScheme extends StandardScheme<getTimePoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Double>(_list8.size);
                  double _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readDouble();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter11 : struct.success)
            {
              oprot.writeDouble(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_resultTupleSchemeFactory implements SchemeFactory {
      public getTimePoints_resultTupleScheme getScheme() {
        return new getTimePoints_resultTupleScheme();
      }
    }

    private static class getTimePoints_resultTupleScheme extends TupleScheme<getTimePoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter12 : struct.success)
            {
              oprot.writeDouble(_iter12);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new ArrayList<Double>(_list13.size);
            double _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readDouble();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getVariableList_args implements org.apache.thrift.TBase<getVariableList_args, getVariableList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVariableList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVariableList_argsTupleSchemeFactory());
    }

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_args.class, metaDataMap);
    }

    public getVariableList_args() {
    }

    public getVariableList_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_args(getVariableList_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getVariableList_args deepCopy() {
      return new getVariableList_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getVariableList_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_args)
        return this.equals((getVariableList_args)that);
      return false;
    }

    public boolean equals(getVariableList_args that) {
      if (that == null)
        return false;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simulationDataSetRef = true && (isSetSimulationDataSetRef());
      list.add(present_simulationDataSetRef);
      if (present_simulationDataSetRef)
        list.add(simulationDataSetRef);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVariableList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVariableList_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_argsStandardSchemeFactory implements SchemeFactory {
      public getVariableList_argsStandardScheme getScheme() {
        return new getVariableList_argsStandardScheme();
      }
    }

    private static class getVariableList_argsStandardScheme extends StandardScheme<getVariableList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_argsTupleSchemeFactory implements SchemeFactory {
      public getVariableList_argsTupleScheme getScheme() {
        return new getVariableList_argsTupleScheme();
      }
    }

    private static class getVariableList_argsTupleScheme extends TupleScheme<getVariableList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

  }

  public static class getVariableList_result implements org.apache.thrift.TBase<getVariableList_result, getVariableList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVariableList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVariableList_resultTupleSchemeFactory());
    }

    public List<VariableInfo> success; // required
    public DataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "VariableList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_result.class, metaDataMap);
    }

    public getVariableList_result() {
    }

    public getVariableList_result(
      List<VariableInfo> success,
      DataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_result(getVariableList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new DataAccessException(other.dataAccessException);
      }
    }

    public getVariableList_result deepCopy() {
      return new getVariableList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VariableInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VariableInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<VariableInfo>();
      }
      this.success.add(elem);
    }

    public List<VariableInfo> getSuccess() {
      return this.success;
    }

    public getVariableList_result setSuccess(List<VariableInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getVariableList_result setDataAccessException(DataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VariableInfo>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((DataAccessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_result)
        return this.equals((getVariableList_result)that);
      return false;
    }

    public boolean equals(getVariableList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataAccessException = true && (isSetDataAccessException());
      list.add(present_dataAccessException);
      if (present_dataAccessException)
        list.add(dataAccessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVariableList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVariableList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_resultStandardSchemeFactory implements SchemeFactory {
      public getVariableList_resultStandardScheme getScheme() {
        return new getVariableList_resultStandardScheme();
      }
    }

    private static class getVariableList_resultStandardScheme extends StandardScheme<getVariableList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<VariableInfo>(_list16.size);
                  VariableInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new VariableInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new DataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VariableInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_resultTupleSchemeFactory implements SchemeFactory {
      public getVariableList_resultTupleScheme getScheme() {
        return new getVariableList_resultTupleScheme();
      }
    }

    private static class getVariableList_resultTupleScheme extends TupleScheme<getVariableList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VariableInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VariableInfo>(_list21.size);
            VariableInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new VariableInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new DataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

  }

}
