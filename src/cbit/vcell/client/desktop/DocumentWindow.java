/*
 * Copyright (C) 1999-2011 University of Connecticut Health Center
 *
 * Licensed under the MIT License (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *  http://www.opensource.org/licenses/mit-license.php
 */

package cbit.vcell.client.desktop;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Hashtable;

import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.UIManager;

import org.vcell.documentation.VcellHelpViewer;
import org.vcell.util.PropertyLoader;
import org.vcell.util.document.User;
import org.vcell.util.document.UserLoginInfo;
import org.vcell.util.document.VCDocument;
import org.vcell.util.document.VersionFlag;
import org.vcell.util.gui.DialogUtils;
import org.vcell.util.gui.UtilCancelException;
import org.vcell.util.gui.VCellIcons;
import org.vcell.util.importer.PathwayImportPanel.PathwayImportOption;

import cbit.vcell.biomodel.BioModel;
import cbit.vcell.biomodel.meta.VCMetaData;
import cbit.vcell.client.BioModelWindowManager;
import cbit.vcell.client.ChildWindowManager;
import cbit.vcell.client.ChildWindowManager.ChildWindow;
import cbit.vcell.client.ClientRequestManager;
import cbit.vcell.client.DocumentWindowManager;
import cbit.vcell.client.GuiConstants;
import cbit.vcell.client.PopupGenerator;
import cbit.vcell.client.TopLevelWindowManager;
import cbit.vcell.client.UserMessage;
import cbit.vcell.client.server.ConnectionStatus;
import cbit.vcell.client.task.AsynchClientTask;
import cbit.vcell.client.task.ClientTaskDispatcher;
import cbit.vcell.desktop.LoginDelegate;
import cbit.vcell.desktop.LoginManager;
import cbit.vcell.microscopy.gui.VirtualFrapLoader;
import cbit.vcell.model.gui.TransformMassActionPanel;
import cbit.vcell.resource.ResourceUtil;
/**
 * This type was generated by a SmartGuide.
 */
@SuppressWarnings("serial")
public class DocumentWindow extends JFrame implements TopLevelWindow {	

	private final static String HelpViewerContextObject = "HelpViewerWindow";  // this object instance is the context for the help ChildWindow

	private final ChildWindowManager childWindowManager;
	
	private JMenuItem ivjAbout_BoxMenuItem = null;
	private JMenuItem ivjCascadeMenuItem = null;
	private JMenuItem ivjChange_UserMenuItem = null;
	private JMenuItem ivjUpdate_UserMenuItem = null;
	private JMenuItem ivjCloseMenuItem = null;
	private JMenuBar ivjDocumentWindowJMenuBar = null;
	private IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JMenuItem ivjExitMenuItem = null;
	private JMenu ivjFileMenu = null;
	private JMenu ivjHelpMenu = null;
	private JMenuItem ivjLocalMenuItem = null;
	private JMenuItem ivjManage_DatabaseMenuItem = null;
	private JMenuItem ivjMinimize_AllMenuItem = null;
	private JMenu ivjNewMenuItem = null;
	private JMenu ivjOpenMenuItem = null;
	private JMenuItem ivjReconnectMenuItem = null;
	private JMenuItem ivjSave_AsMenuItem = null;
	private JMenuItem ivjSave_VersionMenuItem = null;
	private JMenuItem ivjSaveMenuItem = null;
	private JMenu ivjServerMenu = null;
	private JCheckBoxMenuItem ivjStatusbarMenuItem = null;
	private JPanel ivjStatusBarPane = null;
	private JMenuItem ivjTile_HorizontallyMenuItem = null;
	private JMenuItem ivjTile_VerticallyMenuItem = null;
	//--------------------------------------
	private JMenu ivjViewMenu = null;
	private JMenu ivjWindowMenu = null;
	private JSeparator ivjJSeparator6 = null;
	private JMenuItem ivjJMenuItemNewBioModel = null;
	private JMenuItem ivjJMenuItemOpenBioModel = null;
	private JMenuItem ivjJMenuItemOpenGeometry = null;
	private JMenuItem ivjJMenuItemOpenMathModel = null;
	private JProgressBar ivjJProgressBarMemory = null;
	private DocumentWindowManager fieldWindowManager = null;
	private JMenuItem ivjJMenuItemExport = null;
	private JMenuItem menuItemImport = null;
	private JMenuItem ivjJMenuItemServer = null;
	private JProgressBar ivjJProgressBarConnection = null;
	private JMenuItem ivjJMenuItemCompare = null;
	private JMenuItem ivjJMenuItemRevert = null;
	private JMenuItem ivjJMenuItemOptions = null;
	private JMenuItem ivjGeometryMenu = null;
	private JMenuItem ivjMathFromBioMenuItem = null;
	private JMenu ivjMathMenu = null;
	private JMenuItem ivjNonSpatialMenuItem = null;
	private JMenuItem ivjSpatialExistingMenuItem = null;
	private JMenuItem ivjSpatialCreateNewMenuItem = null;
	private JMenuItem ivjEdit_Annotation_JMenuItem = null;
	private JMenuItem ivjTestingFrameworkMenuItem = null;
	private JMenuItem ivjJMenuItemOnlineHelp = null;
	private JMenuItem newHelpMenuItem = null;
	private JMenuItem ivjRunBNGMenuItem = null;
	private JMenuItem ivjRunVFrapMenuItem = null;
	//Added Oct. 17th, 2007. To put a tool menu in 
	private JMenu toolMenu = null;
	private JMenuItem transMAMenuItem = null;
	private JMenuItem jMenuItemPermissions  = null;
	
	private JMenu menuImportPathway = null;
	private JMenuItem menuItemImportPathwayWebLocation = null;
	private JMenuItem menuItemImportPathwayFile = null;
	private JMenuItem menuItemImportPathwayExample = null;

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DocumentWindow.this.getAbout_BoxMenuItem()) 
				connEtoC3(e);
			if (e.getSource() == DocumentWindow.this.getCloseMenuItem()) 
				connEtoC5(e);
			if (e.getSource() == DocumentWindow.this.getExitMenuItem()) 
				connEtoC6(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemNewBioModel()) 
				connEtoC7(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenBioModel()) 
				connEtoC10(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenMathModel()) 
				connEtoC11(e);
			if (e.getSource() == DocumentWindow.this.getSaveMenuItem()) 
				connEtoC13(e);
			if (e.getSource() == DocumentWindow.this.getSave_AsMenuItem()) 
				connEtoC14(e);
			try {
				if (e.getSource() == DocumentWindow.this.getJMenuItemImport())
					DocumentWindow.this.importXMLDocument();
				if (e.getSource() == DocumentWindow.this.menuItemImportPathwayWebLocation)
					DocumentWindow.this.importPathway(PathwayImportOption.Web_Location);
				else if (e.getSource() == DocumentWindow.this.menuItemImportPathwayFile)
					DocumentWindow.this.importPathway(PathwayImportOption.File);
				else if (e.getSource() == DocumentWindow.this.menuItemImportPathwayExample)
					DocumentWindow.this.importPathway(PathwayImportOption.Example);
			} catch (Throwable throwable) {
				DocumentWindow.this.handleException(throwable);
			}
			if (e.getSource() == DocumentWindow.this.getSave_VersionMenuItem()) 
				connEtoC16(e);
			if (e.getSource() == DocumentWindow.this.getChange_UserMenuItem()) 
				connEtoC18(e);
			if (e.getSource() == DocumentWindow.this.getReconnectMenuItem()) 
				connEtoC19(e);
			if (e.getSource() == DocumentWindow.this.getLocalMenuItem()) 
				connEtoC20(e);
			if (e.getSource() == DocumentWindow.this.getTile_HorizontallyMenuItem()) 
				connEtoC21(e);
			if (e.getSource() == DocumentWindow.this.getTile_VerticallyMenuItem()) 
				connEtoC22(e);
			if (e.getSource() == DocumentWindow.this.getCascadeMenuItem()) 
				connEtoC23(e);
			if (e.getSource() == DocumentWindow.this.getMinimize_AllMenuItem()) 
				connEtoC24(e);
			if (e.getSource() == DocumentWindow.this.getManage_DatabaseMenuItem()) 
				connEtoC27(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemServer()) 
				connEtoC4(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOptions()) 
				connEtoC1(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemRevert()) 
				connEtoC28(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemCompare()) 
				connEtoC29(e);
			if (e.getSource() == DocumentWindow.this.getNonSpatialMenuItem()) 
				connEtoC8(e);
			if (e.getSource() == DocumentWindow.this.getMathFromBioMenuItem()) 
				connEtoC31(e);
			if (e.getSource() == DocumentWindow.this.getSpatialExistingMenuItem()) 
				newDocument(e);
			if (e.getSource() == DocumentWindow.this.getSpatialCreateNewMenuItem()) 
				newDocument(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemExport()) 
				connEtoC17(e);
			if (e.getSource() == DocumentWindow.this.getEdit_Annotation_JMenuItem()) 
				connEtoC36(e);
			if (e.getSource() == DocumentWindow.this.getTestingFrameworkMenuItem()) 
				connEtoC37(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOnlineHelp()) 
				connEtoC25(e);
			if (e.getSource() == DocumentWindow.this.getNewHelpMenuItem()) 
				showVCellHelpWindow();
			if (e.getSource() == DocumentWindow.this.getRunBNGMenuItem()) 
				connEtoC26(e);
			if (e.getSource() == DocumentWindow.this.getRunVFrapItem()) 
				startVirtualFRAP();
			if (e.getSource() == DocumentWindow.this.getTransMAMenuItem()) 
				showTransMADialog();
			if (e.getSource() == DocumentWindow.this.getJMenuItemFieldData()) 
				connEtoC38(e);
			if (e.getSource() == DocumentWindow.this.getUpdate_UserMenuItem()){
				getWindowManager().getRequestManager().updateUserRegistration(getWindowManager(), false);
			}
			if (e.getSource() == DocumentWindow.this.getPermissionsMenuItem()) {				
				getWindowManager().getRequestManager().accessPermissions(DocumentWindow.this, getWindowManager().getVCDocument());
			}
			
		};
		
		public void itemStateChanged(java.awt.event.ItemEvent e) {
			if (e.getSource() == DocumentWindow.this.getStatusbarMenuItem()) 
				connEtoC2(e);
		};
	};
	private JMenuItem ivjJMenuItemFieldData = null;
	private JMenuItem jMenuItemMIRIAM = null;
	
/**
 * DocumentWindow constructor comment.
 */
public DocumentWindow() {
	super();
	initialize();
	childWindowManager = new ChildWindowManager(this);
}

/**
 * Comment
 */
private void cascadeWindows() {
	getWindowManager().cascadeWindows();
}


/**
 * Comment
 */
private void closeWindow() {
	getWindowManager().closeWindow();
}


/**
 * Comment
 */
private void compareWithSaved() {
	getWindowManager().compareWithSaved();
}


/**
 * connEtoC1:  (JMenuItemOptions.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JMenuItemOpenBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC11:  (JMenuItemOpenMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC13:  (SaveMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC14:  (Save_AsMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocumentAsNew();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC16:  (Save_VersionMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC17:  (JMenuItemExport.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exportDocument();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC18:  (Change_UserMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showLoginDialog();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC19:  (ReconnectMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.reconnect();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


private void showVCellHelpWindow() {

	ChildWindow helpWindow = childWindowManager.getChildWindowFromContext(HelpViewerContextObject);
	if (helpWindow!=null){
		helpWindow.show();
	}else{
		VcellHelpViewer vcellHelpViewer = new VcellHelpViewer(VcellHelpViewer.VCELL_DOC_URL);
		String title = "Virtual Cell Help" + " -- VCell " + DocumentWindowAboutBox.getVERSION_NO() + " (build " + DocumentWindowAboutBox.getBUILD_NO() + ")";
		helpWindow = childWindowManager.addChildWindow(vcellHelpViewer, HelpViewerContextObject, title);
		helpWindow.setPreferredSize(new Dimension(VcellHelpViewer.DEFAULT_HELP_DIALOG_WIDTH,VcellHelpViewer.DEFAULT_HELP_DIALOG_HEIGHT));
		helpWindow.pack();
		helpWindow.setIsCenteredOnParent();
		helpWindow.show();
	}
}
/**
 * connEtoC2:  (StatusbarMenuItem.item.itemStateChanged(java.awt.event.ItemEvent) --> DocumentWindow.viewStatusBar()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.viewStatusBar();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (LocalMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (Tile_HorizontallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		boolean bHorizontal = true;
		getChildWindowManager().tileWindows(bHorizontal);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC22:  (Tile_VerticallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		boolean bHorizontal = false;
		getChildWindowManager().tileWindows(bHorizontal);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC23:  (CascadeMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.cascadeWindows();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC24:  (Minimize_AllMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JMenuItemOnlineHelp.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.invokeOnlineHelp()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		
		this.invokeOnlineHelp();
		
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (RunBNGMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.launchBNG()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showBNGWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC27:  (Manage_DatabaseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showDatabaseWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC28:  (JMenuItemRevert.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.revertToSaved()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC28(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.revertToSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC29:  (JMenuItemCompare.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC29(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.compareWithSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC3:  (About_BoxMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showAboutBox()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showAboutBox();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC31:  (MathFromBioMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.mathFromBioModel(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC31(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC36:  (Edit_Annotation_JMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showEditAnnotationWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC36(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showEditAnnotationWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC37:  (TestingFrameworkMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showTestingFrameworkWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC37(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showTestingFrameworkWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC38:  (JMenuItemFieldData.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.jMenuItemFieldData_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC38(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.jMenuItemFieldData_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JMenuItemServer.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (CloseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.closeWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.closeWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (ExitMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.exitApplication()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exitApplication();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JMenuItemNewBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newBioModel()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC8:  (JMenuItemNewMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * Comment
 */
private void exitApplication() {
	getWindowManager().exitApplication();
}


/**
 * Comment
 */
private void exportDocument() {
	getWindowManager().exportDocument();
}


/**
 * Return the About_BoxMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getAbout_BoxMenuItem() {
	if (ivjAbout_BoxMenuItem == null) {
		try {
			ivjAbout_BoxMenuItem = new javax.swing.JMenuItem();
			ivjAbout_BoxMenuItem.setName("About_BoxMenuItem");
			ivjAbout_BoxMenuItem.setText("About the Virtual Cell");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAbout_BoxMenuItem;
}


private void startVirtualFRAP(){
	VirtualFrapLoader.loadVFRAP(null, false);
}
/**
 * Return the tool menu.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private JMenu getToolMenu() {
	if (toolMenu == null) {
		try {
			toolMenu = new javax.swing.JMenu();
			toolMenu.setName("ToolMenu");
			toolMenu.setText("Tools");
			toolMenu.add(getRunBNGMenuItem());
			toolMenu.add(new JSeparator());
			toolMenu.add(getRunVFrapItem());
			toolMenu.add(new JSeparator());
			toolMenu.add(getTransMAMenuItem());
		} catch (Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return toolMenu;
}

/**
 * Return the getTransMAMenuItem.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTransMAMenuItem() {
	if (transMAMenuItem == null) {
		try {
			transMAMenuItem = new javax.swing.JMenuItem();
			transMAMenuItem.setName("TransMA");
			transMAMenuItem.setText("Transform to Stochastic Capable");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return transMAMenuItem;
}

/**
 * Return the CascadeMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCascadeMenuItem() {
	if (ivjCascadeMenuItem == null) {
		try {
			ivjCascadeMenuItem = new javax.swing.JMenuItem();
			ivjCascadeMenuItem.setName("CascadeMenuItem");
			ivjCascadeMenuItem.setText("Cascade");
			//ivjCascadeMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCascadeMenuItem;
}


/**
 * Return the Change_UserMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getChange_UserMenuItem() {
	if (ivjChange_UserMenuItem == null) {
		try {
			ivjChange_UserMenuItem = new javax.swing.JMenuItem();
			ivjChange_UserMenuItem.setName("Change_UserMenuItem");
			ivjChange_UserMenuItem.setText("Change User...");
			ivjChange_UserMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChange_UserMenuItem;
}

private javax.swing.JMenuItem getUpdate_UserMenuItem() {
	if (ivjUpdate_UserMenuItem == null) {
		try {
			ivjUpdate_UserMenuItem = new javax.swing.JMenuItem();
			ivjUpdate_UserMenuItem.setName("Update_UserMenuItem");
			ivjUpdate_UserMenuItem.setText("Update Registration Info...");
			ivjUpdate_UserMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUpdate_UserMenuItem;
}

/**
 * Return the CloseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCloseMenuItem() {
	if (ivjCloseMenuItem == null) {
		try {
			ivjCloseMenuItem = new javax.swing.JMenuItem();
			ivjCloseMenuItem.setName("CloseMenuItem");
			ivjCloseMenuItem.setText("Close");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseMenuItem;
}

/**
 * Return the DocumentWindowJMenuBar property value.
 * @return javax.swing.JMenuBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuBar getDocumentWindowJMenuBar() {
	if (ivjDocumentWindowJMenuBar == null) {
		try {
			ivjDocumentWindowJMenuBar = new javax.swing.JMenuBar();
			ivjDocumentWindowJMenuBar.setName("DocumentWindowJMenuBar");
			ivjDocumentWindowJMenuBar.add(getFileMenu());
			ivjDocumentWindowJMenuBar.add(getViewMenu());
			ivjDocumentWindowJMenuBar.add(getServerMenu());
			ivjDocumentWindowJMenuBar.add(getWindowMenu());
			ivjDocumentWindowJMenuBar.add(getToolMenu());
			ivjDocumentWindowJMenuBar.add(getHelpMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDocumentWindowJMenuBar;
}

/**
 * Return the Edit_Annotation_JMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getEdit_Annotation_JMenuItem() {
	if (ivjEdit_Annotation_JMenuItem == null) {
		try {
			ivjEdit_Annotation_JMenuItem = new javax.swing.JMenuItem();
			ivjEdit_Annotation_JMenuItem.setName("Edit_Annotation_JMenuItem");
			ivjEdit_Annotation_JMenuItem.setText("Edit Annotation...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjEdit_Annotation_JMenuItem;
}

/**
 * Return the ExitMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExitMenuItem() {
	if (ivjExitMenuItem == null) {
		try {
			ivjExitMenuItem = new javax.swing.JMenuItem();
			ivjExitMenuItem.setName("ExitMenuItem");
			ivjExitMenuItem.setText("Exit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExitMenuItem;
}

/**
 * Return the FileMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getFileMenu() {
	if (ivjFileMenu == null) {
		try {
			ivjFileMenu = new javax.swing.JMenu();
			ivjFileMenu.setName("FileMenu");
			ivjFileMenu.setText("File");
			ivjFileMenu.add(getNewMenuItem());
			ivjFileMenu.add(getOpenMenuItem());
			ivjFileMenu.add(getCloseMenuItem());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getSaveMenuItem());
			ivjFileMenu.add(getSave_VersionMenuItem());
			ivjFileMenu.add(getSave_AsMenuItem());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getJMenuItemRevert());
			ivjFileMenu.add(getJMenuItemCompare());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getPermissionsMenuItem());
			ivjFileMenu.add(getJMenuItemMIRIAM());
			ivjFileMenu.add(getEdit_Annotation_JMenuItem());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getManage_DatabaseMenuItem());
			ivjFileMenu.add(getJMenuItemFieldData());
			ivjFileMenu.add(getTestingFrameworkMenuItem());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getJMenuItemImport());
			ivjFileMenu.add(getJMenuItemExport());
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getJMenuImportPathway());			
			ivjFileMenu.add(new JSeparator());
			ivjFileMenu.add(getExitMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFileMenu;
}

/**
 * Return the GeometryMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getGeometryMenuItem() {
	if (ivjGeometryMenu == null) {
		try {
			ivjGeometryMenu = new javax.swing.JMenuItem();
			ivjGeometryMenu.setName("GeometryMenu");
			ivjGeometryMenu.setText("Geometry");
			ivjGeometryMenu.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DocumentWindow.showGeometryCreationWarning(DocumentWindow.this);
				}
			});
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGeometryMenu;
}

public static void showGeometryCreationWarning(Component parentComponent){
	DialogUtils.showWarningDialog(parentComponent,
			"Geometries are now viewed/edited/created within BioModels or MathModels.\n"+
			"\nBioModel geometries are viewed/edited from a BioModel document within an Application in the 'Geometry' section.\n"+
			" \nMathModel geometries are viewed/edited from a MathModel document by pressing the 'Geometry Viewer' button.");

}
/**
 * Return the HelpMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getHelpMenu() {
	if (ivjHelpMenu == null) {
		try {
			ivjHelpMenu = new javax.swing.JMenu();
			ivjHelpMenu.setName("HelpMenu");
			ivjHelpMenu.setText("Help");
			ivjHelpMenu.add(getNewHelpMenuItem());
			ivjHelpMenu.add(getJMenuItemOnlineHelp());
			ivjHelpMenu.add(getJSeparator6());
			ivjHelpMenu.add(getAbout_BoxMenuItem());
			ivjHelpMenu.add(getSeparator());
			ivjHelpMenu.add(getMntmLicenseInformation());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHelpMenu;
}

/**
 * Return the JMenuItemCompare property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemCompare() {
	if (ivjJMenuItemCompare == null) {
		try {
			ivjJMenuItemCompare = new javax.swing.JMenuItem();
			ivjJMenuItemCompare.setName("JMenuItemCompare");
			ivjJMenuItemCompare.setText("Compare with Saved");
			ivjJMenuItemCompare.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemCompare;
}

/**
 * Return the JMenuItemExport property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemExport() {
	if (ivjJMenuItemExport == null) {
		try {
			ivjJMenuItemExport = new javax.swing.JMenuItem();
			ivjJMenuItemExport.setName("JMenuItemExport");
			ivjJMenuItemExport.setText("Export...");
			ivjJMenuItemExport.setActionCommand(GuiConstants.ACTIONCMD_EXPORT);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemExport;
}

/**
 * Return the JMenuItemFieldData property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemFieldData() {
	if (ivjJMenuItemFieldData == null) {
		try {
			ivjJMenuItemFieldData = new javax.swing.JMenuItem();
			ivjJMenuItemFieldData.setName("JMenuItemFieldData");
			ivjJMenuItemFieldData.setText("Field Data...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemFieldData;
}


private JMenuItem getJMenuItemImport() {
	if (menuItemImport == null) {
		try {
			menuItemImport = new JMenuItem();
			menuItemImport.setName("JMenuItemImport");
			menuItemImport.setText("Import...");
		} catch (Throwable throwable) {
			handleException(throwable);
		}
	}
	return menuItemImport;
}

private JMenu getJMenuImportPathway() {
	if (menuImportPathway == null) {
		try {
			menuImportPathway = new JMenu();
			menuImportPathway.setName("JMenuItemImportPathway");
			menuImportPathway.setText("Import Pathway");
			menuItemImportPathwayWebLocation = new JMenuItem("Web Location");
			menuItemImportPathwayFile = new JMenuItem("File");
			menuItemImportPathwayExample = new JMenuItem("Example");
			menuItemImportPathwayWebLocation.addActionListener(ivjEventHandler);
			menuItemImportPathwayFile.addActionListener(ivjEventHandler);
			menuItemImportPathwayExample.addActionListener(ivjEventHandler);
			menuImportPathway.add(menuItemImportPathwayWebLocation);
			menuImportPathway.add(menuItemImportPathwayFile);
			menuImportPathway.add(menuItemImportPathwayExample);
		} catch (Throwable throwable) {
			handleException(throwable);
		}
	}
	return menuImportPathway;
}

/**
 * Return the JMenuItemNewBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemNewBioModel() {
	if (ivjJMenuItemNewBioModel == null) {
		try {
			ivjJMenuItemNewBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemNewBioModel.setName("JMenuItemNewBioModel");
			ivjJMenuItemNewBioModel.setText("BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemNewBioModel;
}


/**
 * Return the Help_TopicsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOnlineHelp() {
	if (ivjJMenuItemOnlineHelp == null) {
		try {
			ivjJMenuItemOnlineHelp = new javax.swing.JMenuItem();
			ivjJMenuItemOnlineHelp.setName("JMenuItemOnlineHelp");
			ivjJMenuItemOnlineHelp.setText("Online Resources");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOnlineHelp;
}

private javax.swing.JMenuItem getNewHelpMenuItem() {
	if (newHelpMenuItem == null) {
		try {
			newHelpMenuItem = new javax.swing.JMenuItem();
			newHelpMenuItem.setName("newHelpMenuItem");
			newHelpMenuItem.setText("Help");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return newHelpMenuItem;
}

/**
 * Return the JMenuItemOpenBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenBioModel() {
	if (ivjJMenuItemOpenBioModel == null) {
		try {
			ivjJMenuItemOpenBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenBioModel.setName("JMenuItemOpenBioModel");
			ivjJMenuItemOpenBioModel.setText("BioModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenBioModel;
}

/**
 * Return the JMenuItemOpenGeometry property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenGeometry() {
	if (ivjJMenuItemOpenGeometry == null) {
		try {
			ivjJMenuItemOpenGeometry = new javax.swing.JMenuItem();
			ivjJMenuItemOpenGeometry.setName("JMenuItemOpenGeometry");
			ivjJMenuItemOpenGeometry.setText("Geometry...");
			ivjJMenuItemOpenGeometry.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DocumentWindow.showGeometryCreationWarning(DocumentWindow.this);
				}
			});
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenGeometry;
}

/**
 * Return the JMenuItemOpenMathModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenMathModel() {
	if (ivjJMenuItemOpenMathModel == null) {
		try {
			ivjJMenuItemOpenMathModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenMathModel.setName("JMenuItemOpenMathModel");
			ivjJMenuItemOpenMathModel.setText("MathModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenMathModel;
}

/**
 * Return the JMenuItemOptions property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOptions() {
	if (ivjJMenuItemOptions == null) {
		try {
			ivjJMenuItemOptions = new javax.swing.JMenuItem();
			ivjJMenuItemOptions.setName("JMenuItemOptions");
			ivjJMenuItemOptions.setText("Options...");
			ivjJMenuItemOptions.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOptions;
}


/**
 * Return the JMenuItemRevert property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemRevert() {
	if (ivjJMenuItemRevert == null) {
		try {
			ivjJMenuItemRevert = new javax.swing.JMenuItem();
			ivjJMenuItemRevert.setName("JMenuItemRevert");
			ivjJMenuItemRevert.setText("Revert to Saved");
			ivjJMenuItemRevert.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemRevert;
}

/**
 * Return the JMenuItemServer property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemServer() {
	if (ivjJMenuItemServer == null) {
		try {
			ivjJMenuItemServer = new javax.swing.JMenuItem();
			ivjJMenuItemServer.setName("JMenuItemServer");
			ivjJMenuItemServer.setText("Change Server");
			ivjJMenuItemServer.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemServer;
}

/**
 * Return the JProgressBarConnection property value.
 * @return javax.swing.JProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JProgressBar getJProgressBarConnection() {
	if (ivjJProgressBarConnection == null) {
		try {
			ivjJProgressBarConnection = new javax.swing.JProgressBar();
			ivjJProgressBarConnection.setName("JProgressBarConnection");
			ivjJProgressBarConnection.setString("NOT CONNECTED");
			ivjJProgressBarConnection.setStringPainted(true);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarConnection;
}

/**
 * Return the JProgressBarMemory property value.
 * @return javax.swing.JProgressBar
 */
private javax.swing.JProgressBar getJProgressBarMemory() {
	if (ivjJProgressBarMemory == null) {
		try {
			ivjJProgressBarMemory = new javax.swing.JProgressBar();
			ivjJProgressBarMemory.setName("JProgressBarMemory");
			ivjJProgressBarMemory.setMinimum(0);
			ivjJProgressBarMemory.setStringPainted(true);
			ivjJProgressBarMemory.setToolTipText("Java Memory Usage");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarMemory;
}

/**
 * Return the JSeparator6 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator6() {
	if (ivjJSeparator6 == null) {
		try {
			ivjJSeparator6 = new javax.swing.JSeparator();
			ivjJSeparator6.setName("JSeparator6");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator6;
}

/**
 * Return the LocalMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getLocalMenuItem() {
	if (ivjLocalMenuItem == null) {
		try {
			ivjLocalMenuItem = new javax.swing.JMenuItem();
			ivjLocalMenuItem.setName("LocalMenuItem");
			ivjLocalMenuItem.setText("Local");
			ivjLocalMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLocalMenuItem;
}

/**
 * Comment
 */


/**
 * Return the Manage_DatabaseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getManage_DatabaseMenuItem() {
	if (ivjManage_DatabaseMenuItem == null) {
		try {
			ivjManage_DatabaseMenuItem = new javax.swing.JMenuItem();
			ivjManage_DatabaseMenuItem.setName("Manage_DatabaseMenuItem");
			ivjManage_DatabaseMenuItem.setText("Manage Database...");
			ivjManage_DatabaseMenuItem.setVisible(true);
			ivjManage_DatabaseMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjManage_DatabaseMenuItem;
}

/**
 * Return the MathFromBioMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMathFromBioMenuItem() {
	if (ivjMathFromBioMenuItem == null) {
		try {
			ivjMathFromBioMenuItem = new javax.swing.JMenuItem();
			ivjMathFromBioMenuItem.setName("MathFromBioMenuItem");
			ivjMathFromBioMenuItem.setText("From BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathFromBioMenuItem;
}


/**
 * Return the MathMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getMathMenu() {
	if (ivjMathMenu == null) {
		try {
			ivjMathMenu = new javax.swing.JMenu();
			ivjMathMenu.setName("MathMenu");
			ivjMathMenu.setText("MathModel");
			ivjMathMenu.add(getNonSpatialMenuItem());
			ivjMathMenu.add(getSpatialExistingMenuItem());
			ivjMathMenu.add(getSpatialCreateNewMenuItem());
			ivjMathMenu.add(getMathFromBioMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathMenu;
}

/**
 * Return the Minimize_AllMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMinimize_AllMenuItem() {
	if (ivjMinimize_AllMenuItem == null) {
		try {
			ivjMinimize_AllMenuItem = new javax.swing.JMenuItem();
			ivjMinimize_AllMenuItem.setName("Minimize_AllMenuItem");
			ivjMinimize_AllMenuItem.setText("Minimize All");
			ivjMinimize_AllMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinimize_AllMenuItem;
}

/**
 * Return the NewMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getNewMenuItem() {
	if (ivjNewMenuItem == null) {
		try {
			ivjNewMenuItem = new javax.swing.JMenu();
			ivjNewMenuItem.setName("NewMenuItem");
			ivjNewMenuItem.setText("New");
			ivjNewMenuItem.add(getJMenuItemNewBioModel());
			ivjNewMenuItem.add(getMathMenu());
			ivjNewMenuItem.add(getGeometryMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNewMenuItem;
}

/**
 * Return the BlankMathMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getNonSpatialMenuItem() {
	if (ivjNonSpatialMenuItem == null) {
		try {
			ivjNonSpatialMenuItem = new javax.swing.JMenuItem();
			ivjNonSpatialMenuItem.setName("NonSpatialMenuItem");
			ivjNonSpatialMenuItem.setText("Non-Spatial");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNonSpatialMenuItem;
}

/**
 * Return the OpenMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getOpenMenuItem() {
	if (ivjOpenMenuItem == null) {
		try {
			ivjOpenMenuItem = new javax.swing.JMenu();
			ivjOpenMenuItem.setName("OpenMenuItem");
			ivjOpenMenuItem.setText("Open");
			ivjOpenMenuItem.setEnabled(false);
			ivjOpenMenuItem.add(getJMenuItemOpenBioModel());
			ivjOpenMenuItem.add(getJMenuItemOpenMathModel());
			ivjOpenMenuItem.add(getJMenuItemOpenGeometry());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOpenMenuItem;
}

/**
 * Return the ReconnectMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getReconnectMenuItem() {
	if (ivjReconnectMenuItem == null) {
		try {
			ivjReconnectMenuItem = new javax.swing.JMenuItem();
			ivjReconnectMenuItem.setName("ReconnectMenuItem");
			ivjReconnectMenuItem.setText("Reconnect");
			ivjReconnectMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjReconnectMenuItem;
}

/**
 * Return the RunBNGMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getRunBNGMenuItem() {
	if (ivjRunBNGMenuItem == null) {
		try {
			ivjRunBNGMenuItem = new javax.swing.JMenuItem();
			ivjRunBNGMenuItem.setName("RunBNGMenuItem");
			ivjRunBNGMenuItem.setText("Launch BioNetGen");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunBNGMenuItem;
}

private JMenuItem getRunVFrapItem() {
	if (ivjRunVFrapMenuItem == null) {
		try {
			ivjRunVFrapMenuItem = new JMenuItem();
			ivjRunVFrapMenuItem.setName("RunVFrapMenuItem");
			ivjRunVFrapMenuItem.setText("Launch Virtual FRAP");
		} catch (Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjRunVFrapMenuItem;
}

/**
 * Return the Save_AsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_AsMenuItem() {
	if (ivjSave_AsMenuItem == null) {
		try {
			ivjSave_AsMenuItem = new javax.swing.JMenuItem();
			ivjSave_AsMenuItem.setName("Save_AsMenuItem");
			ivjSave_AsMenuItem.setText("Save As...");
			ivjSave_AsMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_AsMenuItem;
}

/**
 * Return the Save_VersionMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_VersionMenuItem() {
	if (ivjSave_VersionMenuItem == null) {
		try {
			ivjSave_VersionMenuItem = new javax.swing.JMenuItem();
			ivjSave_VersionMenuItem.setName("Save_VersionMenuItem");
			ivjSave_VersionMenuItem.setText("Save New Version");
			ivjSave_VersionMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_VersionMenuItem;
}

/**
 * Return the SaveMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSaveMenuItem() {
	if (ivjSaveMenuItem == null) {
		try {
			ivjSaveMenuItem = new javax.swing.JMenuItem();
			ivjSaveMenuItem.setName("SaveMenuItem");
			ivjSaveMenuItem.setText("Save");
			ivjSaveMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSaveMenuItem;
}

private javax.swing.JMenuItem getPermissionsMenuItem() {
	if (jMenuItemPermissions == null) {
		try {
			jMenuItemPermissions = new javax.swing.JMenuItem();
			jMenuItemPermissions.setText("Permissions...");
			jMenuItemPermissions.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return jMenuItemPermissions;
}

/**
 * Return the ServerMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getServerMenu() {
	if (ivjServerMenu == null) {
		try {
			ivjServerMenu = new javax.swing.JMenu();
			ivjServerMenu.setName("ServerMenu");
			ivjServerMenu.setText("Server");
			ivjServerMenu.add(getChange_UserMenuItem());
			ivjServerMenu.add(getUpdate_UserMenuItem());
			ivjServerMenu.add(getReconnectMenuItem());
			ivjServerMenu.add(new JSeparator());
			ivjServerMenu.add(getJMenuItemServer());
			ivjServerMenu.add(getLocalMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjServerMenu;
}

/**
 * Return the SpatialMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static final String MATHMODEL_SPATIAL_EXISTING = "Spatial from database geometry";
private javax.swing.JMenuItem getSpatialExistingMenuItem() {
	if (ivjSpatialExistingMenuItem == null) {
		try {
			ivjSpatialExistingMenuItem = new javax.swing.JMenuItem();
			ivjSpatialExistingMenuItem.setName("SpatialMenuItem");
			ivjSpatialExistingMenuItem.setText(MATHMODEL_SPATIAL_EXISTING);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSpatialExistingMenuItem;
}

private static final String MATHMODEL_SPATIAL_CREATENEW = "Spatial from new geometry";
private JMenuItem mntmLicenseInformation;
private JSeparator separator;
private javax.swing.JMenuItem getSpatialCreateNewMenuItem() {
	if (ivjSpatialCreateNewMenuItem == null) {
		try {
			ivjSpatialCreateNewMenuItem = new javax.swing.JMenuItem();
			ivjSpatialCreateNewMenuItem.setName("SpatialMenuItem");
			ivjSpatialCreateNewMenuItem.setText(MATHMODEL_SPATIAL_CREATENEW);
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjSpatialCreateNewMenuItem;
}

/**
 * Return the StatusbarMenuItem property value.
 * @return javax.swing.JCheckBoxMenuItem
 */
private javax.swing.JCheckBoxMenuItem getStatusbarMenuItem() {
	if (ivjStatusbarMenuItem == null) {
		try {
			ivjStatusbarMenuItem = new javax.swing.JCheckBoxMenuItem();
			ivjStatusbarMenuItem.setName("StatusbarMenuItem");
			ivjStatusbarMenuItem.setSelected(true);
			ivjStatusbarMenuItem.setText("Status Bar");
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjStatusbarMenuItem;
}

/**
 * Return the StatusBarPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getStatusBarPane() {
	if (ivjStatusBarPane == null) {
		try {
			ivjStatusBarPane = new javax.swing.JPanel();
			ivjStatusBarPane.setName("StatusBarPane");
			ivjStatusBarPane.setLayout(new BorderLayout());
			
			JPanel panel = new JPanel(new GridBagLayout());
			GridBagConstraints gbc = new GridBagConstraints();
			gbc.gridx = 0;
			gbc.gridy = 0;
			gbc.weighty = 1;
			gbc.fill = GridBagConstraints.VERTICAL;
			gbc.insets = new Insets(4, 4, 4, 4);
			panel.add(getJProgressBarConnection(), gbc);
			ivjStatusBarPane.add(panel, BorderLayout.WEST);
			
			panel = new JPanel(new GridBagLayout());
			gbc = new GridBagConstraints();
			gbc.gridx = 0;
			gbc.gridy = 0;
			gbc.weighty = 1;
			gbc.fill = GridBagConstraints.VERTICAL;
			gbc.insets = new Insets(4, 4, 4, 4);
			panel.add(getJProgressBarMemory(), gbc);
			ivjStatusBarPane.add(panel, BorderLayout.EAST);

		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
	}
	return ivjStatusBarPane;
}

/**
 * Return the TestingFrameworkMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTestingFrameworkMenuItem() {
	if (ivjTestingFrameworkMenuItem == null) {
		try {
			ivjTestingFrameworkMenuItem = new javax.swing.JMenuItem();
			ivjTestingFrameworkMenuItem.setName("TestingFrameworkMenuItem");
			ivjTestingFrameworkMenuItem.setText("Testing Framework ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTestingFrameworkMenuItem;
}


/**
 * Return the Tile_HorizontallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_HorizontallyMenuItem() {
	if (ivjTile_HorizontallyMenuItem == null) {
		try {
			ivjTile_HorizontallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_HorizontallyMenuItem.setName("Tile_HorizontallyMenuItem");
			ivjTile_HorizontallyMenuItem.setText("Tile Horizontally");
			//ivjTile_HorizontallyMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_HorizontallyMenuItem;
}

/**
 * Return the Tile_VerticallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_VerticallyMenuItem() {
	if (ivjTile_VerticallyMenuItem == null) {
		try {
			ivjTile_VerticallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_VerticallyMenuItem.setName("Tile_VerticallyMenuItem");
			ivjTile_VerticallyMenuItem.setText("Tile Vertically");
			//ivjTile_VerticallyMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_VerticallyMenuItem;
}

/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 3:38:47 PM)
 * @return cbit.vcell.client.desktop.TopLevelWindowManager
 */
public TopLevelWindowManager getTopLevelWindowManager() {
	return getWindowManager();
}

/**
 * Return the ViewMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getViewMenu() {
	if (ivjViewMenu == null) {
		try {
			ivjViewMenu = new javax.swing.JMenu();
			ivjViewMenu.setName("ViewMenu");
			ivjViewMenu.setText("View");
			ivjViewMenu.add(getStatusbarMenuItem());
			ivjViewMenu.add(getJMenuItemOptions());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjViewMenu;
}

/**
 * Gets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @return The windowManager property value.
 * @see #setWindowManager
 */
private DocumentWindowManager getWindowManager() {
	return fieldWindowManager;
}


/**
 * Return the WindowMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getWindowMenu() {
	if (ivjWindowMenu == null) {
		try {
			ivjWindowMenu = new javax.swing.JMenu();
			ivjWindowMenu.setName("WindowMenu");
			ivjWindowMenu.setText("Window");
			ivjWindowMenu.setEnabled(true);
			ivjWindowMenu.add(getTile_HorizontallyMenuItem());
			ivjWindowMenu.add(getTile_VerticallyMenuItem());
			ivjWindowMenu.add(getCascadeMenuItem());
			ivjWindowMenu.add(new JSeparator());
			ivjWindowMenu.add(getMinimize_AllMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWindowMenu;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}

private void importXMLDocument() {
	getWindowManager().openDocument(VCDocument.XML_DOC);
}

private void importPathway(PathwayImportOption pathwayImportOption) {
	getWindowManager().importPathway(pathwayImportOption);
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getAbout_BoxMenuItem().addActionListener(ivjEventHandler);
	getStatusbarMenuItem().addItemListener(ivjEventHandler);
	getCloseMenuItem().addActionListener(ivjEventHandler);
	getExitMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemNewBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenMathModel().addActionListener(ivjEventHandler);
	getSaveMenuItem().addActionListener(ivjEventHandler);
	getSave_AsMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemImport().addActionListener(ivjEventHandler);
	getSave_VersionMenuItem().addActionListener(ivjEventHandler);
	getChange_UserMenuItem().addActionListener(ivjEventHandler);
	getUpdate_UserMenuItem().addActionListener(ivjEventHandler);
	getReconnectMenuItem().addActionListener(ivjEventHandler);
	getLocalMenuItem().addActionListener(ivjEventHandler);
	getTile_HorizontallyMenuItem().addActionListener(ivjEventHandler);
	getTile_VerticallyMenuItem().addActionListener(ivjEventHandler);
	getCascadeMenuItem().addActionListener(ivjEventHandler);
	getMinimize_AllMenuItem().addActionListener(ivjEventHandler);
	getManage_DatabaseMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemServer().addActionListener(ivjEventHandler);
	getJMenuItemOptions().addActionListener(ivjEventHandler);
	getJMenuItemRevert().addActionListener(ivjEventHandler);
	getJMenuItemCompare().addActionListener(ivjEventHandler);
	getNonSpatialMenuItem().addActionListener(ivjEventHandler);
	getMathFromBioMenuItem().addActionListener(ivjEventHandler);
	getSpatialExistingMenuItem().addActionListener(ivjEventHandler);
	getSpatialCreateNewMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemExport().addActionListener(ivjEventHandler);
	getEdit_Annotation_JMenuItem().addActionListener(ivjEventHandler);
	getTestingFrameworkMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemOnlineHelp().addActionListener(ivjEventHandler);
	getNewHelpMenuItem().addActionListener(ivjEventHandler);
	getRunBNGMenuItem().addActionListener(ivjEventHandler);
	getRunVFrapItem().addActionListener(ivjEventHandler);
	getTransMAMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemFieldData().addActionListener(ivjEventHandler);
	getPermissionsMenuItem().addActionListener(ivjEventHandler);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		setName("DocumentWindow");
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setIconImage(VCellIcons.getJFrameImageIcon());
		setJMenuBar(getDocumentWindowJMenuBar());
		setSize(460, 536);
		setTitle("DocumentWindow");
		getContentPane().add(getStatusBarPane(), BorderLayout.SOUTH);
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Comment
 */
private void invokeOnlineHelp() {
	
	PopupGenerator.browserLauncher(this, "http://vcell.org",
		"Please visit "+"http://vcell.org"+" for Online Help",
		getTopLevelWindowManager().isApplet());
}


/**
 * Comment
 */
private void jMenuItemFieldData_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	
	getWindowManager().showFieldDataWindow();
}


/**
 * Starts the application.
 * @param args an array of command-line arguments
 */
public static void main(java.lang.String[] args) {
	try {
		/* Set native look and feel */
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		/* Create the frame */
		DocumentWindow aDocumentWindow = new DocumentWindow();
		/* Add a windowListener for the windowClosedEvent */
		aDocumentWindow.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aDocumentWindow.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of DocumentWindow");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
private void newDocument(java.awt.event.ActionEvent actionEvent) {
	AsynchClientTask[] taskArray = null;
	if (actionEvent.getActionCommand().equals("BioModel")) {
		taskArray = getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocument.BIOMODEL_DOC, VCDocument.BIO_OPTION_DEFAULT));
	} else if (actionEvent.getActionCommand().equals("Non-Spatial")) {
		taskArray = getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocument.MATHMODEL_DOC, VCDocument.MATH_OPTION_NONSPATIAL));
	} else if (actionEvent.getActionCommand().equals(MATHMODEL_SPATIAL_EXISTING)) {
		taskArray = getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocument.MATHMODEL_DOC, VCDocument.MATH_OPTION_SPATIAL_EXISTS));
	} else if (actionEvent.getActionCommand().equals(MATHMODEL_SPATIAL_CREATENEW)) {
		getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocument.MATHMODEL_DOC, VCDocument.MATH_OPTION_SPATIAL_NEW));
		return;
	} else if (actionEvent.getActionCommand().equals("From BioModel")) {
		taskArray = getWindowManager().newDocument(new VCDocument.DocumentCreationInfo(VCDocument.MATHMODEL_DOC, VCDocument.MATH_OPTION_FROMBIOMODELAPP));
	}else {
		return;
	}
	Hashtable<String, Object> hash = new Hashtable<String, Object>();
	hash.put(ClientRequestManager.GUI_PARENT, (Component)this);
	hash.put("requestManager", getWindowManager().getRequestManager());
	ClientTaskDispatcher.dispatch(this, hash, taskArray, false);
}


/**
 * Comment
 */
private void notYet() {
	PopupGenerator.showErrorDialog(this, "Feature not yet implemented...");
}


/**
 * Comment
 */
private void openDocument(java.awt.event.ActionEvent actionEvent) {
	if (actionEvent.getActionCommand().equals("BioModel...")) {
		getWindowManager().openDocument(VCDocument.BIOMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("MathModel...")) {
		getWindowManager().openDocument(VCDocument.MATHMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("Geometry...")) {
		getWindowManager().openDocument(VCDocument.GEOMETRY_DOC);
	}
}


/**
 * Comment
 */
private void reconnect() {
	getWindowManager().reconnect();
}


/**
 * Comment
 */
private void revertToSaved() {
	getWindowManager().revertToSaved();
}


/**
 * Comment
 */
private void saveDocument(boolean replace) {
	getWindowManager().saveDocument(replace);
}


/**
 * Comment
 */
private void saveDocumentAsNew() {
	getWindowManager().saveDocumentAsNew();
}


/**
 * Sets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @param windowManager The new value for the property.
 * @see #getWindowManager
 */
public void setWindowManager(DocumentWindowManager windowManager) {
	if (fieldWindowManager == windowManager) {
		return;
	}
	DocumentWindowManager oldValue = fieldWindowManager;
	fieldWindowManager = windowManager;
	firePropertyChange("windowManager", oldValue, windowManager);//May 2009,found it doesn't fire to any where.
	
//	if (windowManager.getTaskBar() != null) {
//		windowManager.getTaskBar().setBackground(getStatusBarPane().getBackground());
//		getStatusBarPane().add(windowManager.getTaskBar(), BorderLayout.CENTER);
//	}
}


/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 11:39:07 AM)
 * @param c java.awt.Component
 */
public void setWorkArea(Component c) {
	getContentPane().add(c, BorderLayout.CENTER);
}


public static void showAboutBox(Component parent) {
	/* Create the AboutBox dialog */
	DocumentWindowAboutBox aDocumentWindowAboutBox = new DocumentWindowAboutBox();
	String version = "";
	String build = "";
	try {
		version = "Version " + DocumentWindowAboutBox.getVERSION_NO();
		build = DocumentWindowAboutBox.getEDITION() + " edition, build no. " + DocumentWindowAboutBox.getBUILD_NO();
	} catch (Exception exc) {
		System.out.println("Failed to parse vcell.softwareVersion: " + exc.getMessage());
		exc.printStackTrace(System.out);
	}
	aDocumentWindowAboutBox.getVersion().setText(version);
	aDocumentWindowAboutBox.getBuildNumber().setText(build);
	aDocumentWindowAboutBox.setPreferredSize(new Dimension(390,120));
	DialogUtils.showComponentCloseDialog(parent, aDocumentWindowAboutBox, "About the Virtual Cell");
}

private void showAboutBox() {
	showAboutBox(this);
}


/**
 * Comment
 */
private void  showBNGWindow() {
	getWindowManager().showBNGWindow();	
}


/**
 * Comment
 */
private void showDatabaseWindow() {
	getWindowManager().showDatabaseWindow();
}


/**
 * Comment
 */
private void showEditAnnotationWindow() {

	try {
		if (getWindowManager() != null) {
			VCDocument vcDoc = getWindowManager().getVCDocument();
			if (vcDoc != null) {
				try{
					// initialize fields - different for biomodel and mathmodel, geometry
					String oldAnnotation = null;
					if (vcDoc instanceof BioModel) {
						oldAnnotation = ((BioModel)vcDoc).getVCMetaData().getFreeTextAnnotation((BioModel)vcDoc);
					} else {
						oldAnnotation = vcDoc.getDescription();	
					}
					// show the editor
					String newAnnotation = DialogUtils.showAnnotationDialog(this, oldAnnotation);
					if (org.vcell.util.BeanUtils.triggersPropertyChangeEvent(oldAnnotation, newAnnotation)) {
						// if VCDocument is a Biomodel, set the vcMetadata, else edit VCDoc.description for now
						if (vcDoc instanceof BioModel) {
							// update free text annotation in VCMetaData
							VCMetaData vcMetaData = ((BioModel)vcDoc).getVCMetaData();
							vcMetaData.setFreeTextAnnotation((BioModel)vcDoc, newAnnotation);
						} else {
							// Update VCDocument annotation
							vcDoc.setDescription(newAnnotation);
						}
					}
				}catch(UtilCancelException e){
					//Do Nothing
				}
			}else{
				throw new Exception("No Document to Edit");
			}
		}
	} catch (Throwable exc) {
		exc.printStackTrace(System.out);
		PopupGenerator.showErrorDialog(this, "Failed to edit annotation!\n"+exc.getMessage(), exc);
	}
}


/**
 * Comment
 */
private void showLoginDialog() {

	final LoginManager loginManager = new LoginManager();

	LoginDelegate loginDelegate = new LoginDelegate(){

		public void userCancel() {
			loginManager.close();
			PopupGenerator.showInfoDialog(DocumentWindow.this, 
					"Note:  The Login dialog can be accessed any time under the 'Server' main menu as 'Change User...'");
		}
		public void registerRequest() {
			loginManager.close();
			System.out.println("LoginManager.registerRequest()");
			getWindowManager().getRequestManager().updateUserRegistration(getWindowManager(), true);
		}

		public void login(String userid, UserLoginInfo.DigestedPassword digestedPassword) {
			System.out.println("LoginManager.login("+userid+",xxx)");
			getWindowManager().connectAs(userid, digestedPassword);
		}

		public void lostPasswordRequest(String userid) {
			System.out.println("LoginManager.lostPasswordRequest("+userid+")");
			getWindowManager().getRequestManager().sendLostPassword(getWindowManager(), userid);
		}
	};

	loginManager.showLoginDialog(this, getWindowManager(), loginDelegate);
}


/**
 * Comment
 */
private void showTestingFrameworkWindow() {
	getWindowManager().showTestingFrameworkWindow();
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateConnectionStatus(ConnectionStatus connStatus) {
	// other updates
	String status = "";
	User user = getWindowManager().getUser();
	boolean isTestUser = (user!=null)?(user.isTestAccount()):(false);
	switch (connStatus.getStatus()) {
		case ConnectionStatus.NOT_CONNECTED: {
			status = "";
			getJProgressBarConnection().setString("NOT CONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getUpdate_UserMenuItem().setEnabled(false);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			getJMenuItemFieldData().setEnabled(false);
			getPermissionsMenuItem().setEnabled(false);
			break;
		}
		case ConnectionStatus.CONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("CONNECTED (" + connStatus.getUserName() + ")");
			getJProgressBarConnection().setValue(100);
			getChange_UserMenuItem().setEnabled(true);
			getUpdate_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(true);
			boolean bVersionedDocument = getWindowManager() != null &&  getWindowManager().getVCDocument() != null 
							&& getWindowManager().getVCDocument().getVersion() != null;
			getSaveMenuItem().setEnabled(
				bVersionedDocument && !(
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Archived) ||
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Published)
				)
			);
			getSave_AsMenuItem().setEnabled(true);
			getSave_VersionMenuItem().setEnabled(bVersionedDocument);
			getJMenuItemRevert().setEnabled(bVersionedDocument);
			getJMenuItemCompare().setEnabled(bVersionedDocument);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(true);
			getJMenuItemFieldData().setEnabled(true);
			getJMenuItemMIRIAM().setEnabled(true);
			getTransMAMenuItem().setEnabled(
					getWindowManager() != null && 
					getWindowManager().getVCDocument() != null &&
					getWindowManager().getVCDocument() instanceof BioModel
			);
			getJMenuImportPathway().setEnabled(getWindowManager().getVCDocument() instanceof BioModel);
			getPermissionsMenuItem().setEnabled(bVersionedDocument && getWindowManager().getVCDocument().getVersion().getOwner().equals(getWindowManager().getUser()));
			break;
		}
		case ConnectionStatus.INITIALIZING: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("INITIALIZING...");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(false);
			getUpdate_UserMenuItem().setEnabled(false);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(false);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(isTestUser);
			getJMenuItemFieldData().setEnabled(false);
			getJMenuItemMIRIAM().setEnabled(false);
			getPermissionsMenuItem().setEnabled(false);
			break;
		}
		case ConnectionStatus.DISCONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("DISCONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getUpdate_UserMenuItem().setEnabled(false);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			getJMenuItemFieldData().setEnabled(false);
			getJMenuItemMIRIAM().setEnabled(false);
			getPermissionsMenuItem().setEnabled(false);
			break;
		}
	}
	getJProgressBarConnection().setToolTipText(status);
}


/**
 * Insert the method's description here.
 * Creation date: (5/7/2004 11:51:20 AM)
 */
public void updateMemoryStatus(long freeBytes, long totalBytes) {
	DecimalFormat df = (DecimalFormat)DecimalFormat.getInstance();
	df.setMaximumFractionDigits(1);
	String usedMB = df.format((totalBytes - freeBytes)/1000000.0);
	String totalMB = df.format(totalBytes/1000000.0);
	getJProgressBarMemory().setValue((int)(100 * (totalBytes - freeBytes) / totalBytes));
	getJProgressBarMemory().setString(usedMB + "MB / " + totalMB + "MB");
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateWhileInitializing(int i) {
	// extra animation while initializing connection
	getJProgressBarConnection().setValue(i);
}


private void viewStatusBar() {
	/* Hide or show the statusbar */
	getStatusBarPane().setVisible(getStatusbarMenuItem().isSelected());
}

/**
 * This method initializes jMenuItemMIRIAM	
 * 	
 * @return javax.swing.JMenuItem	
 */
private JMenuItem getJMenuItemMIRIAM() {
	if (jMenuItemMIRIAM == null) {
		jMenuItemMIRIAM = new JMenuItem();
		jMenuItemMIRIAM.setText("Model Annotation ...");
		jMenuItemMIRIAM.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				if(getTopLevelWindowManager() instanceof BioModelWindowManager){
					((BioModelWindowManager)getTopLevelWindowManager()).showMIRIAMWindow();
				}else{
					PopupGenerator.showInfoDialog(DocumentWindow.this, "Sorry, Currently only BioModels have a MIRIAM editor.");
				}
			}
		});
	}
	return jMenuItemMIRIAM;
}

public void showTransMADialog() 
{
	String disclaimer = "Transforming reactions to stochastic capable cannot be undone. You may want to make a copy of the model.\nAlso some existing applications may need to be recreated in order to maintain consistency.\nLast but not least, stochastic transfomation may not be mathematically equivalent to the orignal model. \nDo you wish to proceed?";
	JTextArea ta = new JTextArea(disclaimer);
	ta.setEditable(false);
	int userChoice = PopupGenerator.showComponentOKCancelDialog(this, ta, "Model Transformation Warning");
	if(userChoice != JOptionPane.OK_OPTION)
	{
		return;
	}
	
	BioModel biomodel = null;
	if (getWindowManager().getVCDocument() instanceof BioModel)
		biomodel = (BioModel)getWindowManager().getVCDocument();
	TransformMassActionPanel transMAPanel = new TransformMassActionPanel();
	transMAPanel.setModel(biomodel.getModel());
	int choice = DialogUtils.showComponentOKCancelDialog(this, transMAPanel, "Transform to Stochastic Capable Model");
	if(choice == JOptionPane.OK_OPTION)
	{
		try
		{
			transMAPanel.saveTransformedReactions();
		}catch(Exception e)
		{
			PopupGenerator.showWarningDialog(getTopLevelWindowManager(), null, new UserMessage(e.getMessage(), new String[]{"Ok"},"Ok"), null);
			
		}
	}
}

private JMenuItem getMntmLicenseInformation() {
	if (mntmLicenseInformation == null) {
		mntmLicenseInformation = new JMenuItem("Virtual Cell License Information");
		mntmLicenseInformation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Integer year = 2013;
				try{
					int tempYear = Integer.parseInt((new SimpleDateFormat("yyyy")).format(Calendar.getInstance().getTime()));
					if(tempYear > year && tempYear < 2100){//sanity check
						year = tempYear;
					}
				}catch(Exception e){
					e.printStackTrace();
				}
				final String OK = "OK";
				final String SAVE_LICENSE = "Save...";
				String licenseStr = 
						"The Virtual Cell is free software distributed under the following MIT licensing terms:\n\n"+
						"Copyright (c) 1998-"+year+" University of Connecticut Health Center\n\n" +
						"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n" +
						"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n"+
						"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n";
				String result = DialogUtils.showWarningDialog(DocumentWindow.this, licenseStr, new String[] {OK,SAVE_LICENSE}, OK);
				if(result != null && result.equals(SAVE_LICENSE)){
					JFileChooser saveLicenseJFC = new JFileChooser();
					saveLicenseJFC.setApproveButtonText("Save");
					int returnVal = saveLicenseJFC.showOpenDialog(DocumentWindow.this);
				    if(returnVal == JFileChooser.APPROVE_OPTION) {
				       File outFile = saveLicenseJFC.getSelectedFile();
				       try{
				    	   ResourceUtil.writeResourceToFile("/"+System.getProperty(PropertyLoader.vcellThirdPartyLicense), outFile);
				       }catch(Exception e){
				    	   e.printStackTrace();
				    	   DialogUtils.showErrorDialog(DocumentWindow.this, "Error saving license info: "+e.getMessage());
				       }
				    }
				}
			}
		});
	}
	return mntmLicenseInformation;
}
	private JSeparator getSeparator() {
		if (separator == null) {
			separator = new JSeparator();
		}
		return separator;
	}

	public ChildWindowManager getChildWindowManager() {
		return childWindowManager;
	}
}
