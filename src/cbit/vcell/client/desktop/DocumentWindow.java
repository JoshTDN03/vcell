package cbit.vcell.client.desktop;
import cbit.vcell.server.PropertyLoader;
import java.net.URL;
import cbit.vcell.document.*;
import java.awt.event.*;
import cbit.vcell.client.server.*;
import cbit.vcell.client.*;
import java.text.*;
import java.awt.*;
import javax.swing.*;
import cbit.vcell.desktop.*;
import cbit.util.*;
import cbit.vcell.client.bionetgen.*;
/**
 * This type was generated by a SmartGuide.
 */
public class DocumentWindow extends JFrame implements TopLevelWindow {
	//class SimpleWebViewer extends JDialog implements WindowListener {

		//private URL initialURL = null;
		//private boolean isINIT = true;
		//private SimpleWebBrowserPanel swb = null;
		
		//public SimpleWebViewer(Frame parentFrame,String title,URL viewThisURL){
			//super(parentFrame,title);
			//initialURL = viewThisURL;
			//DocumentWindow.this.addWindowListener(this);
			//Container contentPane = getContentPane();
			//contentPane.setLayout(new BorderLayout());
			////
			//swb = new SimpleWebBrowserPanel();
			
			//contentPane.add(swb, BorderLayout.CENTER);
			////
			//pack();
			//setLocationRelativeTo(parentFrame);
		//}

		//public void show() {
			//super.show();

			//if(isINIT){
				//try {
					//swb.setCurrentURL(initialURL);
				//}finally{
					//isINIT = false;
				//}
			//}
			
		//}

		//public void windowActivated(WindowEvent e){
		//}
		//public void windowClosed(WindowEvent e){
			//SimpleWebViewer.this.dispose();
		//}
		//public void windowClosing(WindowEvent e){
		//}
		//public void windowDeactivated(WindowEvent e){
		//}
		//public void windowDeiconified(WindowEvent e){
		//}
		//public void windowIconified(WindowEvent e){
		//}
		//public void windowOpened(WindowEvent e){
		//}
	//}
	////
	////
	//private SimpleWebViewer userGuideSWV = null;
	//private SimpleWebViewer tutorialSWV = null;
	////
	////
	
	private JDialog compareDialog = null;
	private LoginDialog loginDialog = null;
	private boolean ppRunning = false;
	private JMenuItem ivjAbout_BoxMenuItem = null;
	private JMenuItem ivjCascadeMenuItem = null;
	private JMenuItem ivjChange_UserMenuItem = null;
	private JMenuItem ivjCloseMenuItem = null;
	private JMenuBar ivjDocumentWindowJMenuBar = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JMenuItem ivjExitMenuItem = null;
	private JMenu ivjFileMenu = null;
	private JMenu ivjHelpMenu = null;
	private JPanel ivjJFrameContentPane = null;
	private JSeparator ivjJSeparator1 = null;
	private JSeparator ivjJSeparator2 = null;
	private JSeparator ivjJSeparator3 = null;
	private JSeparator ivjJSeparator4 = null;
	private JSeparator ivjJSeparator5 = null;
	private JMenuItem ivjLocalMenuItem = null;
	private JMenuItem ivjManage_DatabaseMenuItem = null;
	private JMenuItem ivjMinimize_AllMenuItem = null;
	private JMenu ivjNewMenuItem = null;
	private JMenu ivjOpenMenuItem = null;
	private JMenuItem ivjReconnectMenuItem = null;
	private JMenuItem ivjSave_AsMenuItem = null;
	private JMenuItem ivjSave_VersionMenuItem = null;
	private JMenuItem ivjSaveMenuItem = null;
	private JMenu ivjServerMenu = null;
	private JCheckBoxMenuItem ivjStatusbarMenuItem = null;
	private JPanel ivjStatusBarPane = null;
	private JMenuItem ivjTile_HorizontallyMenuItem = null;
	private JMenuItem ivjTile_VerticallyMenuItem = null;
	private JMenu ivjViewMenu = null;
	private JMenu ivjWindowMenu = null;
	private JSeparator ivjJSeparator6 = null;
	private JMenuItem ivjJMenuItemNewBioModel = null;
	private JMenuItem ivjJMenuItemOpenBioModel = null;
	private JMenuItem ivjJMenuItemOpenGeometry = null;
	private JMenuItem ivjJMenuItemOpenMathModel = null;
	private JPanel ivjJPanelMemStatus = null;
	private JProgressBar ivjJProgressBarMemory = null;
	private JLabel ivjStatusMsgMemory = null;
	private DocumentWindowManager fieldWindowManager = null;
	private JMenuItem ivjJMenuItemExport = null;
	private JMenuItem ivjJMenuItemImport = null;
	private JSeparator ivjJSeparator7 = null;
	private JLabel ivjStatusMsgConnection = null;
	private JMenuItem ivjJMenuItemServer = null;
	private JProgressBar ivjJProgressBarConnection = null;
	private JMenuItem ivjJMenuItemCompare = null;
	private JMenuItem ivjJMenuItemRevert = null;
	private JSeparator ivjJSeparator8 = null;
	private JMenuItem ivjJMenuItemOptions = null;
	private JMenu ivjAnalyticMenu = null;
	private JMenuItem ivjChooseImageMenuItem = null;
	private JMenuItem ivjExistingImageMenuItem = null;
	private JMenu ivjGeometryMenu = null;
	private JMenu ivjImageMenu = null;
	private JMenuItem ivjMathFromBioMenuItem = null;
	private JMenu ivjMathMenu = null;
	private JMenuItem ivjDim1MenuItem = null;
	private JMenuItem ivjDim2MenuItem = null;
	private JMenuItem ivjDim3MenuItem = null;
	private JMenuItem ivjNonSpatialMenuItem = null;
	private JMenuItem ivjSpatialMenuItem = null;
	private JMenuItem ivjEdit_Annotation_JMenuItem = null;
	private JMenuItem ivjTestingFrameworkMenuItem = null;
	private JMenuItem ivjJMenuItemOnlineHelp = null;
	private JMenu ivjBNGMenu = null;
	private JMenuItem ivjRunBNGMenuItem = null;

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DocumentWindow.this.getAbout_BoxMenuItem()) 
				connEtoC3(e);
			if (e.getSource() == DocumentWindow.this.getCloseMenuItem()) 
				connEtoC5(e);
			if (e.getSource() == DocumentWindow.this.getExitMenuItem()) 
				connEtoC6(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemNewBioModel()) 
				connEtoC7(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenBioModel()) 
				connEtoC10(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenMathModel()) 
				connEtoC11(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenGeometry()) 
				connEtoC12(e);
			if (e.getSource() == DocumentWindow.this.getSaveMenuItem()) 
				connEtoC13(e);
			if (e.getSource() == DocumentWindow.this.getSave_AsMenuItem()) 
				connEtoC14(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemImport()) 
				connEtoC15(e);
			if (e.getSource() == DocumentWindow.this.getSave_VersionMenuItem()) 
				connEtoC16(e);
			if (e.getSource() == DocumentWindow.this.getChange_UserMenuItem()) 
				connEtoC18(e);
			if (e.getSource() == DocumentWindow.this.getReconnectMenuItem()) 
				connEtoC19(e);
			if (e.getSource() == DocumentWindow.this.getLocalMenuItem()) 
				connEtoC20(e);
			if (e.getSource() == DocumentWindow.this.getTile_HorizontallyMenuItem()) 
				connEtoC21(e);
			if (e.getSource() == DocumentWindow.this.getTile_VerticallyMenuItem()) 
				connEtoC22(e);
			if (e.getSource() == DocumentWindow.this.getCascadeMenuItem()) 
				connEtoC23(e);
			if (e.getSource() == DocumentWindow.this.getMinimize_AllMenuItem()) 
				connEtoC24(e);
			if (e.getSource() == DocumentWindow.this.getManage_DatabaseMenuItem()) 
				connEtoC27(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemServer()) 
				connEtoC4(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOptions()) 
				connEtoC1(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemRevert()) 
				connEtoC28(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemCompare()) 
				connEtoC29(e);
			if (e.getSource() == DocumentWindow.this.getExistingImageMenuItem()) 
				connEtoC9(e);
			if (e.getSource() == DocumentWindow.this.getChooseImageMenuItem()) 
				connEtoC30(e);
			if (e.getSource() == DocumentWindow.this.getNonSpatialMenuItem()) 
				connEtoC8(e);
			if (e.getSource() == DocumentWindow.this.getMathFromBioMenuItem()) 
				connEtoC31(e);
			if (e.getSource() == DocumentWindow.this.getDim1MenuItem()) 
				connEtoC32(e);
			if (e.getSource() == DocumentWindow.this.getDim2MenuItem()) 
				connEtoC33(e);
			if (e.getSource() == DocumentWindow.this.getDim3MenuItem()) 
				connEtoC34(e);
			if (e.getSource() == DocumentWindow.this.getSpatialMenuItem()) 
				connEtoC35(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemExport()) 
				connEtoC17(e);
			if (e.getSource() == DocumentWindow.this.getEdit_Annotation_JMenuItem()) 
				connEtoC36(e);
			if (e.getSource() == DocumentWindow.this.getTestingFrameworkMenuItem()) 
				connEtoC37(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOnlineHelp()) 
				connEtoC25(e);
			if (e.getSource() == DocumentWindow.this.getRunBNGMenuItem()) 
				connEtoC26(e);
		};
		public void itemStateChanged(java.awt.event.ItemEvent e) {
			if (e.getSource() == DocumentWindow.this.getStatusbarMenuItem()) 
				connEtoC2(e);
		};
	};

/**
 * DocumentWindow constructor comment.
 */
public DocumentWindow() {
	super();
	initialize();
}

/**
 * Comment
 */
private void cascadeWindows() {
	getWindowManager().cascadeWindows();
}


/**
 * Comment
 */
private void closeWindow() {
	getWindowManager().closeWindow();
}


/**
 * Comment
 */
private void compareWithSaved() {
	getWindowManager().compareWithSaved();
}


/**
 * connEtoC1:  (JMenuItemOptions.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JMenuItemOpenBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC11:  (JMenuItemOpenMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC12:  (JMenuItemOpenGeometry.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC13:  (SaveMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC14:  (Save_AsMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocumentAsNew();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC15:  (JMenuItemImport.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.importXMLDocument();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC16:  (Save_VersionMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC17:  (JMenuItemExport.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exportDocument();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC18:  (Change_UserMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showLoginDialog();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC19:  (ReconnectMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.reconnect();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC2:  (StatusbarMenuItem.item.itemStateChanged(java.awt.event.ItemEvent) --> DocumentWindow.viewStatusBar()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.viewStatusBar();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (LocalMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (Tile_HorizontallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.tileHorizontal();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC22:  (Tile_VerticallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.tileVertically();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC23:  (CascadeMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.cascadeWindows();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC24:  (Minimize_AllMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JMenuItemOnlineHelp.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.invokeOnlineHelp()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.invokeOnlineHelp();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (RunBNGMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.launchBNG()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showBNGWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC27:  (Manage_DatabaseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showDatabaseWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC28:  (JMenuItemRevert.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.revertToSaved()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC28(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.revertToSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC29:  (JMenuItemCompare.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC29(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.compareWithSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC3:  (About_BoxMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showAboutBox()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showAboutBox();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC30:  (ChooseImageMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.chooseImageFromFile(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC30(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC31:  (MathFromBioMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.mathFromBioModel(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC31(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC32:  (Dim1RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC32(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC33:  (Dim2RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC33(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC34:  (Dim3RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC34(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC35:  (SpatialMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC35(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC36:  (Edit_Annotation_JMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showEditAnnotationWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC36(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showEditAnnotationWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC37:  (TestingFrameworkMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showTestingFrameworkWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC37(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showTestingFrameworkWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JMenuItemServer.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (CloseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.closeWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.closeWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (ExitMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.exitApplication()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exitApplication();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JMenuItemNewBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newBioModel()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC8:  (JMenuItemNewMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC9:  (JMenuItemNewGeometry.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * Comment
 */
private void exitApplication() {
	getWindowManager().exitApplication();
}


/**
 * Comment
 */
private void exportDocument() {
	getWindowManager().exportDocument();
}


/**
 * Return the About_BoxMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getAbout_BoxMenuItem() {
	if (ivjAbout_BoxMenuItem == null) {
		try {
			ivjAbout_BoxMenuItem = new javax.swing.JMenuItem();
			ivjAbout_BoxMenuItem.setName("About_BoxMenuItem");
			ivjAbout_BoxMenuItem.setText("About the Virtual Cell");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAbout_BoxMenuItem;
}

/**
 * Return the AnalyticMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getAnalyticMenu() {
	if (ivjAnalyticMenu == null) {
		try {
			ivjAnalyticMenu = new javax.swing.JMenu();
			ivjAnalyticMenu.setName("AnalyticMenu");
			ivjAnalyticMenu.setText("Analytic");
			ivjAnalyticMenu.add(getDim1MenuItem());
			ivjAnalyticMenu.add(getDim2MenuItem());
			ivjAnalyticMenu.add(getDim3MenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAnalyticMenu;
}

/**
 * Return the BNGMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getBNGMenu() {
	if (ivjBNGMenu == null) {
		try {
			ivjBNGMenu = new javax.swing.JMenu();
			ivjBNGMenu.setName("BNGMenu");
			ivjBNGMenu.setText("BioNetGen");
			ivjBNGMenu.add(getRunBNGMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBNGMenu;
}

/**
 * Return the CascadeMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCascadeMenuItem() {
	if (ivjCascadeMenuItem == null) {
		try {
			ivjCascadeMenuItem = new javax.swing.JMenuItem();
			ivjCascadeMenuItem.setName("CascadeMenuItem");
			ivjCascadeMenuItem.setText("Cascade");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCascadeMenuItem;
}


/**
 * Return the Change_UserMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getChange_UserMenuItem() {
	if (ivjChange_UserMenuItem == null) {
		try {
			ivjChange_UserMenuItem = new javax.swing.JMenuItem();
			ivjChange_UserMenuItem.setName("Change_UserMenuItem");
			ivjChange_UserMenuItem.setText("Change User");
			ivjChange_UserMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChange_UserMenuItem;
}

/**
 * Return the ChooseImageMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getChooseImageMenuItem() {
	if (ivjChooseImageMenuItem == null) {
		try {
			ivjChooseImageMenuItem = new javax.swing.JMenuItem();
			ivjChooseImageMenuItem.setName("ChooseImageMenuItem");
			ivjChooseImageMenuItem.setText("Choose Image from File ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChooseImageMenuItem;
}


/**
 * Return the CloseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCloseMenuItem() {
	if (ivjCloseMenuItem == null) {
		try {
			ivjCloseMenuItem = new javax.swing.JMenuItem();
			ivjCloseMenuItem.setName("CloseMenuItem");
			ivjCloseMenuItem.setText("Close");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseMenuItem;
}


/**
 * Comment
 */
private JDialog getCompareDialog() {
	if (compareDialog == null) {
		compareDialog = new JDialog(this,  "Comparison with Saved Edition", false);
		compareDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		WindowAdapter listener = new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				if (e.getSource() == DocumentWindow.this) {
					compareDialog.dispose();
				}
			}
		};
		DocumentWindow.this.addWindowListener(listener);
	}
	return compareDialog;
}


/**
 * Return the Dim1MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim1MenuItem() {
	if (ivjDim1MenuItem == null) {
		try {
			ivjDim1MenuItem = new javax.swing.JMenuItem();
			ivjDim1MenuItem.setName("Dim1MenuItem");
			ivjDim1MenuItem.setText("1-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim1MenuItem;
}


/**
 * Return the Dim2MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim2MenuItem() {
	if (ivjDim2MenuItem == null) {
		try {
			ivjDim2MenuItem = new javax.swing.JMenuItem();
			ivjDim2MenuItem.setName("Dim2MenuItem");
			ivjDim2MenuItem.setText("2-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim2MenuItem;
}


/**
 * Return the Dim3MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim3MenuItem() {
	if (ivjDim3MenuItem == null) {
		try {
			ivjDim3MenuItem = new javax.swing.JMenuItem();
			ivjDim3MenuItem.setName("Dim3MenuItem");
			ivjDim3MenuItem.setText("3-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim3MenuItem;
}


/**
 * Return the DocumentWindowJMenuBar property value.
 * @return javax.swing.JMenuBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuBar getDocumentWindowJMenuBar() {
	if (ivjDocumentWindowJMenuBar == null) {
		try {
			ivjDocumentWindowJMenuBar = new javax.swing.JMenuBar();
			ivjDocumentWindowJMenuBar.setName("DocumentWindowJMenuBar");
			ivjDocumentWindowJMenuBar.add(getFileMenu());
			ivjDocumentWindowJMenuBar.add(getViewMenu());
			ivjDocumentWindowJMenuBar.add(getServerMenu());
			ivjDocumentWindowJMenuBar.add(getWindowMenu());
			ivjDocumentWindowJMenuBar.add(getBNGMenu());
			ivjDocumentWindowJMenuBar.add(getHelpMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDocumentWindowJMenuBar;
}

/**
 * Return the Edit_Annotation_JMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getEdit_Annotation_JMenuItem() {
	if (ivjEdit_Annotation_JMenuItem == null) {
		try {
			ivjEdit_Annotation_JMenuItem = new javax.swing.JMenuItem();
			ivjEdit_Annotation_JMenuItem.setName("Edit_Annotation_JMenuItem");
			ivjEdit_Annotation_JMenuItem.setText("Edit Annotation...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjEdit_Annotation_JMenuItem;
}


/**
 * Return the ExistingImageMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExistingImageMenuItem() {
	if (ivjExistingImageMenuItem == null) {
		try {
			ivjExistingImageMenuItem = new javax.swing.JMenuItem();
			ivjExistingImageMenuItem.setName("ExistingImageMenuItem");
			ivjExistingImageMenuItem.setText("Existing Image ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExistingImageMenuItem;
}


/**
 * Return the ExitMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExitMenuItem() {
	if (ivjExitMenuItem == null) {
		try {
			ivjExitMenuItem = new javax.swing.JMenuItem();
			ivjExitMenuItem.setName("ExitMenuItem");
			ivjExitMenuItem.setText("Exit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExitMenuItem;
}

/**
 * Return the FileMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getFileMenu() {
	if (ivjFileMenu == null) {
		try {
			ivjFileMenu = new javax.swing.JMenu();
			ivjFileMenu.setName("FileMenu");
			ivjFileMenu.setText("File");
			ivjFileMenu.add(getNewMenuItem());
			ivjFileMenu.add(getOpenMenuItem());
			ivjFileMenu.add(getCloseMenuItem());
			ivjFileMenu.add(getJSeparator2());
			ivjFileMenu.add(getSaveMenuItem());
			ivjFileMenu.add(getSave_VersionMenuItem());
			ivjFileMenu.add(getSave_AsMenuItem());
			ivjFileMenu.add(getJSeparator8());
			ivjFileMenu.add(getJMenuItemRevert());
			ivjFileMenu.add(getJMenuItemCompare());
			ivjFileMenu.add(getJSeparator1());
			ivjFileMenu.add(getManage_DatabaseMenuItem());
			ivjFileMenu.add(getTestingFrameworkMenuItem());
			ivjFileMenu.add(getEdit_Annotation_JMenuItem());
			ivjFileMenu.add(getJSeparator7());
			ivjFileMenu.add(getJMenuItemImport());
			ivjFileMenu.add(getJMenuItemExport());
			ivjFileMenu.add(getJSeparator3());
			ivjFileMenu.add(getExitMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFileMenu;
}

/**
 * Return the GeometryMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getGeometryMenu() {
	if (ivjGeometryMenu == null) {
		try {
			ivjGeometryMenu = new javax.swing.JMenu();
			ivjGeometryMenu.setName("GeometryMenu");
			ivjGeometryMenu.setText("Geometry");
			ivjGeometryMenu.add(getAnalyticMenu());
			ivjGeometryMenu.add(getImageMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGeometryMenu;
}


/**
 * Return the HelpMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getHelpMenu() {
	if (ivjHelpMenu == null) {
		try {
			ivjHelpMenu = new javax.swing.JMenu();
			ivjHelpMenu.setName("HelpMenu");
			ivjHelpMenu.setText("Help");
			ivjHelpMenu.add(getJMenuItemOnlineHelp());
			ivjHelpMenu.add(getJSeparator6());
			ivjHelpMenu.add(getAbout_BoxMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHelpMenu;
}

/**
 * Return the ImageMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getImageMenu() {
	if (ivjImageMenu == null) {
		try {
			ivjImageMenu = new javax.swing.JMenu();
			ivjImageMenu.setName("ImageMenu");
			ivjImageMenu.setText("From Image");
			ivjImageMenu.add(getExistingImageMenuItem());
			ivjImageMenu.add(getChooseImageMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjImageMenu;
}


/**
 * Return the JFrameContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJFrameContentPane() {
	if (ivjJFrameContentPane == null) {
		try {
			ivjJFrameContentPane = new javax.swing.JPanel();
			ivjJFrameContentPane.setName("JFrameContentPane");
			ivjJFrameContentPane.setLayout(new java.awt.BorderLayout());
			getJFrameContentPane().add(getStatusBarPane(), "South");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJFrameContentPane;
}

/**
 * Return the JMenuItemCompare property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemCompare() {
	if (ivjJMenuItemCompare == null) {
		try {
			ivjJMenuItemCompare = new javax.swing.JMenuItem();
			ivjJMenuItemCompare.setName("JMenuItemCompare");
			ivjJMenuItemCompare.setText("Compare with Saved");
			ivjJMenuItemCompare.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemCompare;
}

/**
 * Return the JMenuItemExport property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemExport() {
	if (ivjJMenuItemExport == null) {
		try {
			ivjJMenuItemExport = new javax.swing.JMenuItem();
			ivjJMenuItemExport.setName("JMenuItemExport");
			ivjJMenuItemExport.setText("Export...");
			ivjJMenuItemExport.setActionCommand("Export");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemExport;
}

/**
 * Return the JMenuItemImport property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemImport() {
	if (ivjJMenuItemImport == null) {
		try {
			ivjJMenuItemImport = new javax.swing.JMenuItem();
			ivjJMenuItemImport.setName("JMenuItemImport");
			ivjJMenuItemImport.setText("Import...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemImport;
}

/**
 * Return the JMenuItemNewBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemNewBioModel() {
	if (ivjJMenuItemNewBioModel == null) {
		try {
			ivjJMenuItemNewBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemNewBioModel.setName("JMenuItemNewBioModel");
			ivjJMenuItemNewBioModel.setText("BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemNewBioModel;
}


/**
 * Return the Help_TopicsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOnlineHelp() {
	if (ivjJMenuItemOnlineHelp == null) {
		try {
			ivjJMenuItemOnlineHelp = new javax.swing.JMenuItem();
			ivjJMenuItemOnlineHelp.setName("JMenuItemOnlineHelp");
			ivjJMenuItemOnlineHelp.setText("Online Help");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOnlineHelp;
}

/**
 * Return the JMenuItemOpenBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenBioModel() {
	if (ivjJMenuItemOpenBioModel == null) {
		try {
			ivjJMenuItemOpenBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenBioModel.setName("JMenuItemOpenBioModel");
			ivjJMenuItemOpenBioModel.setText("BioModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenBioModel;
}

/**
 * Return the JMenuItemOpenGeometry property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenGeometry() {
	if (ivjJMenuItemOpenGeometry == null) {
		try {
			ivjJMenuItemOpenGeometry = new javax.swing.JMenuItem();
			ivjJMenuItemOpenGeometry.setName("JMenuItemOpenGeometry");
			ivjJMenuItemOpenGeometry.setText("Geometry...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenGeometry;
}

/**
 * Return the JMenuItemOpenMathModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenMathModel() {
	if (ivjJMenuItemOpenMathModel == null) {
		try {
			ivjJMenuItemOpenMathModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenMathModel.setName("JMenuItemOpenMathModel");
			ivjJMenuItemOpenMathModel.setText("MathModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenMathModel;
}

/**
 * Return the JMenuItemOptions property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOptions() {
	if (ivjJMenuItemOptions == null) {
		try {
			ivjJMenuItemOptions = new javax.swing.JMenuItem();
			ivjJMenuItemOptions.setName("JMenuItemOptions");
			ivjJMenuItemOptions.setText("Options...");
			ivjJMenuItemOptions.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOptions;
}


/**
 * Return the JMenuItemRevert property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemRevert() {
	if (ivjJMenuItemRevert == null) {
		try {
			ivjJMenuItemRevert = new javax.swing.JMenuItem();
			ivjJMenuItemRevert.setName("JMenuItemRevert");
			ivjJMenuItemRevert.setText("Revert to Saved");
			ivjJMenuItemRevert.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemRevert;
}

/**
 * Return the JMenuItemServer property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemServer() {
	if (ivjJMenuItemServer == null) {
		try {
			ivjJMenuItemServer = new javax.swing.JMenuItem();
			ivjJMenuItemServer.setName("JMenuItemServer");
			ivjJMenuItemServer.setText("Change Server");
			ivjJMenuItemServer.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemServer;
}

/**
 * Return the JPanelMemStatus property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMemStatus() {
	if (ivjJPanelMemStatus == null) {
		try {
			ivjJPanelMemStatus = new javax.swing.JPanel();
			ivjJPanelMemStatus.setName("JPanelMemStatus");
			ivjJPanelMemStatus.setPreferredSize(new java.awt.Dimension(300, 26));
			ivjJPanelMemStatus.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMemStatus.setMinimumSize(new java.awt.Dimension(200, 26));

			java.awt.GridBagConstraints constraintsStatusMsgMemory = new java.awt.GridBagConstraints();
			constraintsStatusMsgMemory.gridx = 0; constraintsStatusMsgMemory.gridy = 0;
			constraintsStatusMsgMemory.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsStatusMsgMemory.weightx = 1.0;
			constraintsStatusMsgMemory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelMemStatus().add(getStatusMsgMemory(), constraintsStatusMsgMemory);

			java.awt.GridBagConstraints constraintsJProgressBarMemory = new java.awt.GridBagConstraints();
			constraintsJProgressBarMemory.gridx = 1; constraintsJProgressBarMemory.gridy = 0;
			constraintsJProgressBarMemory.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJProgressBarMemory.weightx = 2.0;
			constraintsJProgressBarMemory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelMemStatus().add(getJProgressBarMemory(), constraintsJProgressBarMemory);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMemStatus;
}

/**
 * Return the JProgressBarConnection property value.
 * @return javax.swing.JProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JProgressBar getJProgressBarConnection() {
	if (ivjJProgressBarConnection == null) {
		try {
			ivjJProgressBarConnection = new javax.swing.JProgressBar();
			ivjJProgressBarConnection.setName("JProgressBarConnection");
			ivjJProgressBarConnection.setString("NOT CONNECTED");
			ivjJProgressBarConnection.setStringPainted(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarConnection;
}

/**
 * Return the JProgressBarMemory property value.
 * @return javax.swing.JProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JProgressBar getJProgressBarMemory() {
	if (ivjJProgressBarMemory == null) {
		try {
			ivjJProgressBarMemory = new javax.swing.JProgressBar();
			ivjJProgressBarMemory.setName("JProgressBarMemory");
			ivjJProgressBarMemory.setMinimum(0);
			ivjJProgressBarMemory.setStringPainted(true);
			ivjJProgressBarMemory.setValue(50);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarMemory;
}

/**
 * Return the JSeparator1 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator1() {
	if (ivjJSeparator1 == null) {
		try {
			ivjJSeparator1 = new javax.swing.JSeparator();
			ivjJSeparator1.setName("JSeparator1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator1;
}


/**
 * Return the JSeparator2 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator2() {
	if (ivjJSeparator2 == null) {
		try {
			ivjJSeparator2 = new javax.swing.JSeparator();
			ivjJSeparator2.setName("JSeparator2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator2;
}


/**
 * Return the JSeparator3 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator3() {
	if (ivjJSeparator3 == null) {
		try {
			ivjJSeparator3 = new javax.swing.JSeparator();
			ivjJSeparator3.setName("JSeparator3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator3;
}


/**
 * Return the JSeparator4 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator4() {
	if (ivjJSeparator4 == null) {
		try {
			ivjJSeparator4 = new javax.swing.JSeparator();
			ivjJSeparator4.setName("JSeparator4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator4;
}


/**
 * Return the JSeparator5 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator5() {
	if (ivjJSeparator5 == null) {
		try {
			ivjJSeparator5 = new javax.swing.JSeparator();
			ivjJSeparator5.setName("JSeparator5");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator5;
}


/**
 * Return the JSeparator6 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator6() {
	if (ivjJSeparator6 == null) {
		try {
			ivjJSeparator6 = new javax.swing.JSeparator();
			ivjJSeparator6.setName("JSeparator6");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator6;
}


/**
 * Return the JSeparator7 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator7() {
	if (ivjJSeparator7 == null) {
		try {
			ivjJSeparator7 = new javax.swing.JSeparator();
			ivjJSeparator7.setName("JSeparator7");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator7;
}


/**
 * Return the JSeparator8 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator8() {
	if (ivjJSeparator8 == null) {
		try {
			ivjJSeparator8 = new javax.swing.JSeparator();
			ivjJSeparator8.setName("JSeparator8");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator8;
}


/**
 * Return the LocalMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getLocalMenuItem() {
	if (ivjLocalMenuItem == null) {
		try {
			ivjLocalMenuItem = new javax.swing.JMenuItem();
			ivjLocalMenuItem.setName("LocalMenuItem");
			ivjLocalMenuItem.setText("Local");
			ivjLocalMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLocalMenuItem;
}

/**
 * Comment
 */
private JDialog getLoginDialog() {
	if (loginDialog == null) {
		loginDialog = new LoginDialog(this, true,getTopLevelWindowManager().isApplet());
		loginDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		loginDialog.pack();
		loginDialog.setResizable(false);
		ActionListener listener = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				getWindowManager().connectAs(loginDialog.getUser(), loginDialog.getPassword());
			}
		};
		loginDialog.addActionListener(listener);
	}
	return loginDialog;
}


/**
 * Return the Manage_DatabaseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getManage_DatabaseMenuItem() {
	if (ivjManage_DatabaseMenuItem == null) {
		try {
			ivjManage_DatabaseMenuItem = new javax.swing.JMenuItem();
			ivjManage_DatabaseMenuItem.setName("Manage_DatabaseMenuItem");
			ivjManage_DatabaseMenuItem.setText("Manage Database");
			ivjManage_DatabaseMenuItem.setVisible(true);
			ivjManage_DatabaseMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjManage_DatabaseMenuItem;
}

/**
 * Return the MathFromBioMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMathFromBioMenuItem() {
	if (ivjMathFromBioMenuItem == null) {
		try {
			ivjMathFromBioMenuItem = new javax.swing.JMenuItem();
			ivjMathFromBioMenuItem.setName("MathFromBioMenuItem");
			ivjMathFromBioMenuItem.setText("From BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathFromBioMenuItem;
}


/**
 * Return the MathMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getMathMenu() {
	if (ivjMathMenu == null) {
		try {
			ivjMathMenu = new javax.swing.JMenu();
			ivjMathMenu.setName("MathMenu");
			ivjMathMenu.setText("MathModel");
			ivjMathMenu.add(getNonSpatialMenuItem());
			ivjMathMenu.add(getSpatialMenuItem());
			ivjMathMenu.add(getMathFromBioMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathMenu;
}

/**
 * Return the Minimize_AllMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMinimize_AllMenuItem() {
	if (ivjMinimize_AllMenuItem == null) {
		try {
			ivjMinimize_AllMenuItem = new javax.swing.JMenuItem();
			ivjMinimize_AllMenuItem.setName("Minimize_AllMenuItem");
			ivjMinimize_AllMenuItem.setText("Minimize All");
			ivjMinimize_AllMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinimize_AllMenuItem;
}

/**
 * Return the NewMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getNewMenuItem() {
	if (ivjNewMenuItem == null) {
		try {
			ivjNewMenuItem = new javax.swing.JMenu();
			ivjNewMenuItem.setName("NewMenuItem");
			ivjNewMenuItem.setText("New");
			ivjNewMenuItem.add(getJMenuItemNewBioModel());
			ivjNewMenuItem.add(getMathMenu());
			ivjNewMenuItem.add(getGeometryMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNewMenuItem;
}

/**
 * Return the BlankMathMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getNonSpatialMenuItem() {
	if (ivjNonSpatialMenuItem == null) {
		try {
			ivjNonSpatialMenuItem = new javax.swing.JMenuItem();
			ivjNonSpatialMenuItem.setName("NonSpatialMenuItem");
			ivjNonSpatialMenuItem.setText("Non-Spatial");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNonSpatialMenuItem;
}

/**
 * Return the OpenMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getOpenMenuItem() {
	if (ivjOpenMenuItem == null) {
		try {
			ivjOpenMenuItem = new javax.swing.JMenu();
			ivjOpenMenuItem.setName("OpenMenuItem");
			ivjOpenMenuItem.setText("Open");
			ivjOpenMenuItem.setEnabled(false);
			ivjOpenMenuItem.add(getJMenuItemOpenBioModel());
			ivjOpenMenuItem.add(getJMenuItemOpenMathModel());
			ivjOpenMenuItem.add(getJMenuItemOpenGeometry());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOpenMenuItem;
}

/**
 * Return the ReconnectMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getReconnectMenuItem() {
	if (ivjReconnectMenuItem == null) {
		try {
			ivjReconnectMenuItem = new javax.swing.JMenuItem();
			ivjReconnectMenuItem.setName("ReconnectMenuItem");
			ivjReconnectMenuItem.setText("Reconnect");
			ivjReconnectMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjReconnectMenuItem;
}

/**
 * Return the RunBNGMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getRunBNGMenuItem() {
	if (ivjRunBNGMenuItem == null) {
		try {
			ivjRunBNGMenuItem = new javax.swing.JMenuItem();
			ivjRunBNGMenuItem.setName("RunBNGMenuItem");
			ivjRunBNGMenuItem.setText("Launch BioNetGen");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunBNGMenuItem;
}


/**
 * Return the Save_AsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_AsMenuItem() {
	if (ivjSave_AsMenuItem == null) {
		try {
			ivjSave_AsMenuItem = new javax.swing.JMenuItem();
			ivjSave_AsMenuItem.setName("Save_AsMenuItem");
			ivjSave_AsMenuItem.setText("Save As...");
			ivjSave_AsMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_AsMenuItem;
}

/**
 * Return the Save_VersionMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_VersionMenuItem() {
	if (ivjSave_VersionMenuItem == null) {
		try {
			ivjSave_VersionMenuItem = new javax.swing.JMenuItem();
			ivjSave_VersionMenuItem.setName("Save_VersionMenuItem");
			ivjSave_VersionMenuItem.setText("Save New Edition");
			ivjSave_VersionMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_VersionMenuItem;
}

/**
 * Return the SaveMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSaveMenuItem() {
	if (ivjSaveMenuItem == null) {
		try {
			ivjSaveMenuItem = new javax.swing.JMenuItem();
			ivjSaveMenuItem.setName("SaveMenuItem");
			ivjSaveMenuItem.setText("Save");
			ivjSaveMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSaveMenuItem;
}

/**
 * Return the ServerMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getServerMenu() {
	if (ivjServerMenu == null) {
		try {
			ivjServerMenu = new javax.swing.JMenu();
			ivjServerMenu.setName("ServerMenu");
			ivjServerMenu.setText("Server");
			ivjServerMenu.add(getChange_UserMenuItem());
			ivjServerMenu.add(getReconnectMenuItem());
			ivjServerMenu.add(getJSeparator4());
			ivjServerMenu.add(getJMenuItemServer());
			ivjServerMenu.add(getLocalMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjServerMenu;
}

/**
 * Return the SpatialMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSpatialMenuItem() {
	if (ivjSpatialMenuItem == null) {
		try {
			ivjSpatialMenuItem = new javax.swing.JMenuItem();
			ivjSpatialMenuItem.setName("SpatialMenuItem");
			ivjSpatialMenuItem.setText("Spatial");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSpatialMenuItem;
}


/**
 * Return the StatusbarMenuItem property value.
 * @return javax.swing.JCheckBoxMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBoxMenuItem getStatusbarMenuItem() {
	if (ivjStatusbarMenuItem == null) {
		try {
			ivjStatusbarMenuItem = new javax.swing.JCheckBoxMenuItem();
			ivjStatusbarMenuItem.setName("StatusbarMenuItem");
			ivjStatusbarMenuItem.setSelected(true);
			ivjStatusbarMenuItem.setText("Status Bar");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusbarMenuItem;
}

/**
 * Return the StatusBarPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getStatusBarPane() {
	if (ivjStatusBarPane == null) {
		try {
			ivjStatusBarPane = new javax.swing.JPanel();
			ivjStatusBarPane.setName("StatusBarPane");
			ivjStatusBarPane.setLayout(new java.awt.BorderLayout());
			getStatusBarPane().add(getStatusMsgConnection(), "Center");
			getStatusBarPane().add(getJPanelMemStatus(), "East");
			getStatusBarPane().add(getJProgressBarConnection(), "West");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusBarPane;
}

/**
 * Return the StatusMsgConnection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsgConnection() {
	if (ivjStatusMsgConnection == null) {
		try {
			ivjStatusMsgConnection = new javax.swing.JLabel();
			ivjStatusMsgConnection.setName("StatusMsgConnection");
			ivjStatusMsgConnection.setBorder(new javax.swing.border.EtchedBorder());
			ivjStatusMsgConnection.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsgConnection;
}


/**
 * Return the StatusMsg1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsgMemory() {
	if (ivjStatusMsgMemory == null) {
		try {
			ivjStatusMsgMemory = new javax.swing.JLabel();
			ivjStatusMsgMemory.setName("StatusMsgMemory");
			ivjStatusMsgMemory.setText(" Java Memory used: 0.0MB / 50.0MB");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsgMemory;
}

/**
 * Comment
 */
private boolean getTestFrameworkMenuItemVisibility() {
	// return true;
	return (getWindowManager()!=null && 
			getWindowManager().getUser()!=null && 
			getWindowManager().getUser().isTestAccount() );
	
	
}


/**
 * Return the TestingFrameworkMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTestingFrameworkMenuItem() {
	if (ivjTestingFrameworkMenuItem == null) {
		try {
			ivjTestingFrameworkMenuItem = new javax.swing.JMenuItem();
			ivjTestingFrameworkMenuItem.setName("TestingFrameworkMenuItem");
			ivjTestingFrameworkMenuItem.setText("Testing Framework ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTestingFrameworkMenuItem;
}


/**
 * Return the Tile_HorizontallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_HorizontallyMenuItem() {
	if (ivjTile_HorizontallyMenuItem == null) {
		try {
			ivjTile_HorizontallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_HorizontallyMenuItem.setName("Tile_HorizontallyMenuItem");
			ivjTile_HorizontallyMenuItem.setText("Tile Horizontally");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_HorizontallyMenuItem;
}

/**
 * Return the Tile_VerticallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_VerticallyMenuItem() {
	if (ivjTile_VerticallyMenuItem == null) {
		try {
			ivjTile_VerticallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_VerticallyMenuItem.setName("Tile_VerticallyMenuItem");
			ivjTile_VerticallyMenuItem.setText("Tile Vertically");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_VerticallyMenuItem;
}

/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 3:38:47 PM)
 * @return cbit.vcell.client.desktop.TopLevelWindowManager
 */
public TopLevelWindowManager getTopLevelWindowManager() {
	return getWindowManager();
}


/**
 * Return the ViewMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getViewMenu() {
	if (ivjViewMenu == null) {
		try {
			ivjViewMenu = new javax.swing.JMenu();
			ivjViewMenu.setName("ViewMenu");
			ivjViewMenu.setText("View");
			ivjViewMenu.add(getStatusbarMenuItem());
			ivjViewMenu.add(getJMenuItemOptions());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjViewMenu;
}

/**
 * Gets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @return The windowManager property value.
 * @see #setWindowManager
 */
private DocumentWindowManager getWindowManager() {
	return fieldWindowManager;
}


/**
 * Return the WindowMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getWindowMenu() {
	if (ivjWindowMenu == null) {
		try {
			ivjWindowMenu = new javax.swing.JMenu();
			ivjWindowMenu.setName("WindowMenu");
			ivjWindowMenu.setText("Window");
			ivjWindowMenu.setEnabled(true);
			ivjWindowMenu.add(getTile_HorizontallyMenuItem());
			ivjWindowMenu.add(getTile_VerticallyMenuItem());
			ivjWindowMenu.add(getCascadeMenuItem());
			ivjWindowMenu.add(getJSeparator5());
			ivjWindowMenu.add(getMinimize_AllMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWindowMenu;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}


/**
 * Comment
 */
private void importXMLDocument() {
	getWindowManager().openDocument(VCDocument.XML_DOC);
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getAbout_BoxMenuItem().addActionListener(ivjEventHandler);
	getStatusbarMenuItem().addItemListener(ivjEventHandler);
	getCloseMenuItem().addActionListener(ivjEventHandler);
	getExitMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemNewBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenMathModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenGeometry().addActionListener(ivjEventHandler);
	getSaveMenuItem().addActionListener(ivjEventHandler);
	getSave_AsMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemImport().addActionListener(ivjEventHandler);
	getSave_VersionMenuItem().addActionListener(ivjEventHandler);
	getChange_UserMenuItem().addActionListener(ivjEventHandler);
	getReconnectMenuItem().addActionListener(ivjEventHandler);
	getLocalMenuItem().addActionListener(ivjEventHandler);
	getTile_HorizontallyMenuItem().addActionListener(ivjEventHandler);
	getTile_VerticallyMenuItem().addActionListener(ivjEventHandler);
	getCascadeMenuItem().addActionListener(ivjEventHandler);
	getMinimize_AllMenuItem().addActionListener(ivjEventHandler);
	getManage_DatabaseMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemServer().addActionListener(ivjEventHandler);
	getJMenuItemOptions().addActionListener(ivjEventHandler);
	getJMenuItemRevert().addActionListener(ivjEventHandler);
	getJMenuItemCompare().addActionListener(ivjEventHandler);
	getExistingImageMenuItem().addActionListener(ivjEventHandler);
	getChooseImageMenuItem().addActionListener(ivjEventHandler);
	getNonSpatialMenuItem().addActionListener(ivjEventHandler);
	getMathFromBioMenuItem().addActionListener(ivjEventHandler);
	getDim1MenuItem().addActionListener(ivjEventHandler);
	getDim2MenuItem().addActionListener(ivjEventHandler);
	getDim3MenuItem().addActionListener(ivjEventHandler);
	getSpatialMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemExport().addActionListener(ivjEventHandler);
	getEdit_Annotation_JMenuItem().addActionListener(ivjEventHandler);
	getTestingFrameworkMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemOnlineHelp().addActionListener(ivjEventHandler);
	getRunBNGMenuItem().addActionListener(ivjEventHandler);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DocumentWindow");
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setJMenuBar(getDocumentWindowJMenuBar());
		setSize(460, 536);
		setTitle("DocumentWindow");
		setContentPane(getJFrameContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Comment
 */
private void invokeOnlineHelp() {
	
	PopupGenerator.browserLauncher(
		ClientServerManager.ONLINEHELP_URL_STRING,
		"Please visit "+ClientServerManager.ONLINEHELP_URL_STRING+" for Online Help",
		getTopLevelWindowManager().isApplet());
}


/**
 * Starts the application.
 * @param args an array of command-line arguments
 */
public static void main(java.lang.String[] args) {
	try {
		/* Set native look and feel */
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		/* Create the frame */
		DocumentWindow aDocumentWindow = new DocumentWindow();
		/* Add a windowListener for the windowClosedEvent */
		aDocumentWindow.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aDocumentWindow.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of DocumentWindow");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
private void newDocument(java.awt.event.ActionEvent actionEvent) {
	if (actionEvent.getActionCommand().equals("BioModel")) {
		getWindowManager().newDocument(VCDocument.BIOMODEL_DOC, 0);
	} else if (actionEvent.getActionCommand().equals("Non-Spatial")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 0);
	} else if (actionEvent.getActionCommand().equals("Spatial")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 1);
	} else if (actionEvent.getActionCommand().equals("From BioModel")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 2);
	} else if (actionEvent.getActionCommand().equals("1-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 1);
	} else if (actionEvent.getActionCommand().equals("2-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 2);
	} else if (actionEvent.getActionCommand().equals("3-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 3);
	} else if (actionEvent.getActionCommand().equals("Existing Image ...")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 4);
	} else if (actionEvent.getActionCommand().equals("Choose Image from File ...")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 5);
	}
}


/**
 * Comment
 */
private void notYet() {
	PopupGenerator.showErrorDialog(this, "Feature not yet implemented...");
}


/**
 * Comment
 */
private void openDocument(java.awt.event.ActionEvent actionEvent) {
	if (actionEvent.getActionCommand().equals("BioModel...")) {
		getWindowManager().openDocument(VCDocument.BIOMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("MathModel...")) {
		getWindowManager().openDocument(VCDocument.MATHMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("Geometry...")) {
		getWindowManager().openDocument(VCDocument.GEOMETRY_DOC);
	}
}


/**
 * Comment
 */
private void reconnect() {
	getWindowManager().reconnect();
}


/**
 * Comment
 */
private void revertToSaved() {
	getWindowManager().revertToSaved();
}


/**
 * Comment
 */
private void saveDocument(boolean replace) {
	getWindowManager().saveDocument(replace);
}


/**
 * Comment
 */
private void saveDocumentAsNew() {
	getWindowManager().saveDocumentAsNew();
}


/**
 * Sets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @param windowManager The new value for the property.
 * @see #getWindowManager
 */
public void setWindowManager(DocumentWindowManager windowManager) {
	DocumentWindowManager oldValue = fieldWindowManager;
	fieldWindowManager = windowManager;
	firePropertyChange("windowManager", oldValue, windowManager);
}


/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 11:39:07 AM)
 * @param c java.awt.Component
 */
public void setWorkArea(Component c) {
	getContentPane().add(c, BorderLayout.CENTER);
}


private void showAboutBox() {
	/* Create the AboutBox dialog */
	DocumentWindowAboutBox aDocumentWindowAboutBox = new DocumentWindowAboutBox();
	Dimension dialogSize = aDocumentWindowAboutBox.getPreferredSize();
	Dimension frameSize = getSize();
	Point loc = getLocation();
	aDocumentWindowAboutBox.setLocation((frameSize.width - dialogSize.width) / 2 + loc.x, (frameSize.height - dialogSize.height) / 2 + loc.y);
	aDocumentWindowAboutBox.setModal(true);
	String version = "";
	String build = DocumentWindowAboutBox.BUILD_NO;
	try {
		java.util.StringTokenizer stk = new java.util.StringTokenizer(DocumentWindowAboutBox.BUILD_NO, "_");
		String edition = stk.nextToken();
		if (!stk.nextToken().equalsIgnoreCase("Version")) throw new RuntimeException("Expecting 'Version'");
		version = "Version " + stk.nextToken();
		if (!stk.nextToken().equalsIgnoreCase("build")) throw new RuntimeException("Expecting 'build'");
		build = edition + " edition , build no. " + stk.nextToken();
	} catch (Exception exc) {
		System.out.println("Failed to parse vcell.softwareVersion: " + exc.getMessage());
		exc.printStackTrace(System.out);
	}
	aDocumentWindowAboutBox.getVersion().setText(version);
	aDocumentWindowAboutBox.getBuildNumber().setText(build);
	aDocumentWindowAboutBox.setTitle("About the Virtual Cell");
	cbit.gui.ZEnforcer.showModalDialogOnTop(aDocumentWindowAboutBox,this);
}


/**
 * Comment
 */
private void  showBNGWindow() {
	getWindowManager().showBNGWindow();	
}


/**
 * Comment
 */
public void showCompareDialog(Container contentPane) {
	if (getCompareDialog().isShowing()) {
		getCompareDialog().hide();
	}
	getCompareDialog().setContentPane(contentPane);
	getCompareDialog().setSize((int)(getWidth() * 0.5), (int)(getHeight() * 0.8));
	BeanUtils.centerOnComponent(getCompareDialog(), getContentPane());
	getCompareDialog().show();
}


/**
 * Comment
 */
private void showDatabaseWindow() {
	getWindowManager().showDatabaseWindow();
}


/**
 * Comment
 */
private void showEditAnnotationWindow() {

	try {
		if (getWindowManager() != null && getWindowManager().getVCDocument() != null) {
			try{
				// initialize fields
				String oldAnnotation = getWindowManager().getVCDocument().getDescription();
				// show the editor
				String newAnnotation = cbit.gui.DialogUtils.showAnnotationDialog(this, oldAnnotation);
				if (cbit.util.BeanUtils.triggersPropertyChangeEvent(oldAnnotation, newAnnotation)) {
					// Update VCDocument annotation
					getWindowManager().getVCDocument().setDescription(newAnnotation);
				}
			}catch(cbit.gui.UtilCancelException e){
				//Do Nothing
			}
		}else{
			throw new Exception("No Document to Edit");
		}
	} catch (Throwable exc) {
		exc.printStackTrace(System.out);
		PopupGenerator.showErrorDialog(this, "Failed to edit annotation!\n"+exc.getMessage());
	}
}


/**
 * Comment
 */
private void showLoginDialog() {
	cbit.gui.ZEnforcer.showModalDialogOnTop(getLoginDialog(),this);
}


/**
 * Comment
 */
private void showTestingFrameworkWindow() {
	getWindowManager().showTestingFrameworkWindow();
}


/**
 * Comment
 */
private void tileHorizontal() {
	getWindowManager().tileWindows(true);
}


/**
 * Comment
 */
private void tileVertically() {
	getWindowManager().tileWindows(false);
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateConnectionStatus(ConnectionStatus connStatus) {

	// other updates
	String status = "";
	cbit.vcell.server.User user = getWindowManager().getUser();
	boolean isTestUser = (user!=null)?(user.isTestAccount()):(false);
	switch (connStatus.getStatus()) {
		case ConnectionStatus.NOT_CONNECTED: {
			status = "";
			getJProgressBarConnection().setString("NOT CONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			break;
		}
		case ConnectionStatus.CONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("CONNECTED");
			getJProgressBarConnection().setValue(100);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(true);
			getSaveMenuItem().setEnabled(
				getWindowManager() != null && 
				getWindowManager().getVCDocument() != null &&
				getWindowManager().getVCDocument().getVersion() != null &&
				!(
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(cbit.sql.VersionFlag.Archived) ||
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(cbit.sql.VersionFlag.Published)
				)
			);
			getSave_AsMenuItem().setEnabled(true);
			getSave_VersionMenuItem().setEnabled(
				getWindowManager() != null && 
				getWindowManager().getVCDocument() != null &&
				getWindowManager().getVCDocument().getVersion() != null
			);
			getJMenuItemRevert().setEnabled(getSave_VersionMenuItem().isEnabled());
			getJMenuItemCompare().setEnabled(getSave_VersionMenuItem().isEnabled());
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(true);
			break;
		}
		case ConnectionStatus.INITIALIZING: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("INITIALIZING...");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(false);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(false);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(isTestUser);
			break;
		}
		case ConnectionStatus.DISCONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("DISCONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			break;
		}
	}
	getStatusMsgConnection().setText(status);
}


/**
 * Insert the method's description here.
 * Creation date: (5/7/2004 11:51:20 AM)
 */
public void updateMemoryStatus(long freeBytes, long totalBytes) {
	DecimalFormat df = (DecimalFormat)DecimalFormat.getInstance();
	df.setMaximumFractionDigits(1);
	String usedMB = df.format((totalBytes - freeBytes)/1000000.0);
	String totalMB = df.format(totalBytes/1000000.0);
	getStatusMsgMemory().setText("Java Memory Used: " + usedMB + "MB / " + totalMB + "MB");
	getJProgressBarMemory().setValue((int)(100 * (totalBytes - freeBytes) / totalBytes));
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateWhileInitializing(int i) {
	// extra animation while initializing connection
	getJProgressBarConnection().setValue(i);
}


private void viewStatusBar() {
	/* Hide or show the statusbar */
	getStatusBarPane().setVisible(getStatusbarMenuItem().isSelected());
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GCDFBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E16DFD8FF4D45535B7EAD424C123C6899AB5EA5420D1D3C58D9594EDEC290DADCDE3459A7BE84BEA733A28CD1F3425BEDAAFC900C48284090A1A6AD8D103A6A10184838648DF9248DF12888122E41239498C194C8CB3B71989867D76B9676EB3775FB0A4BC5F7A5637BE565A4CBD7B6C334F6F6C334F5FFB6E091077EE542A1569F90230F215A07F7BF425A0AC3BD19086DFBA7CDD64D5FC1414ADA87E3D87
	34D1C8BA1E893F0D905775C4D2F62EB023B48B42BD900EFFACA97B8DF85EA4C41636DF878F8172A900387D33EDE1E74F27239773D9C343C78BF360F7BDD0AF7048EF6CC7A47FD3051BE5FE084CC7DA19AE88D38B08CCE8E13E4CCB8319AC605581F597B0F9977CB2G976F2E1065FA2E0C9116BD69CEDFC774A8F4A2AD1453AE13FFCD42CBABA337123C9E20B8C91AC288DB00C861B30435D2B17CD6368F8D6E6D6F33C945237D225DDE5CEF37098E2958A2FA06A427EB776EBAE77F48B0F00E589C9627D790B6FF
	CCF47E23B00B6A90044520AF1A72DE48A67974403384947AB172FF75B16127423370C9D27666CF30ECFBBE2A1431F7FF7510103CFDB8F3C3003215FC424A547D093FEC266167535F2475F0151958BB9C62620192015200F28B1332CB005E2675BF3377E3782D6E13EA1D4343CEC7354BD5E33738DB1C96518E4F3BF7C30C4C6B907B1DEE0BA030BAFE383050G4F5908257B510453B11B446C407A0E6D38C7C8397F5A74B586B6C90979AA3D311059223750EF9316F7FAD1203C27942A7DD11D7791C119F7581F1E
	4ED8E510F7EC4A539961321E98C55E0B8AC9DD773DC26AFA81BC2F147D03712F21BE10DF6467B35FDCC6FD06048BA1AE2C88FD23FBBDE2E94E3CC548AD1DE1E8070847C3531795B18CB945DAACCFD23F2FA8E6F9B6F1AC4BA9FF11024F30AC2198C95837ADA9BB39B4A91B7957757D242D1614A5E5B783D9004601A2016201924B5047FE533B6D9CFD2C5D6C16EAC6ECF60B6896D85A6B4D2F432F68135C66838E0FE4F6740B074DEE1B394FAEFA84D9A65ACCEC5027CAB70B7AFEBF6451A0BAC437D932B99D205D
	BCACCA225B43E46EB3EFA4B2EE1146F65906C548E058A5205E6F19B7412F5D6C11BEF7D94C126817E0710F1BC91D0C1A8F03C6D0G4F4CAE8BAC44DECB217C1965C959F965E807BDFDC4DF1368F608765D3B1B1D4E2191D797A909E0A9A7F6FE3308749D8570DCD50EB6CE9089AF864273399E296FD5051EBADBBF01EFF60FE19B333EC27A6364F27419973A51E76A565DAD94BEFD0D214F181EFFBAA32D1C79CA56CEED5B397EE3221360E26117323B03345B64F263B6F56EFD4526D7026511B1C97D6BF9DDED9F
	A4F5D58265ED86326FC49B5F5BE7E2BEDBE376086825EDEEF0B0516237B8433930B0DC46CC7A0535C0E4AC5AC0758842EBC0EF4879915D7F82FA9768D3208F00BE825A8A7489D09190E9AB65C087003E105B5DAE2096204F005A0076G6DA37800EA016A010E82B5G1D82BA8EF4B13763BFA93E90A8DBACD0B2508A20AD1FC21901A420C820842025C0F995C95915C09620D02059C0A9C0193B12328B013A004601220192011681656F06F19A488E948EB497E889D04EE7C959E5C0BDC0A1C031C049C0AB0036D4
	22AF7D616376F4FF3D2C12F12F5758F2FD90FBE27AC0B64578F259763BE4FB9A5932C136FF13EC77B6837FB9AA5B790BF37437D367A8F771F978747FA7BFB15F3A60932DEFE5A862C97F38D68E231F11B1C16BE7189EFD0D4CFB5F977C3E0671446708CF168A4C4F0CFC0C789771CB6213BB84660BDA6C448F097F951DE3D99B4ED12E697F02FA79FF015898F1DBBF7197F1949681F522CBF4D86041A3474576935F1267AD83CE1E66BE4AF741BC2796A6969E4E0F6FA7FEE716A4372DEFC492BBC5C932B9867D71
	73E9DE1E11BE17FF0A04F97D301F7835538B739CAE1F58CF66887DCE07C3240395CFA2477F044ED1C43BC816B0354E910744784996B24E8F09E3729CE911E535C066B87691B25FE26DA74ECC5A0C4BED9B06A110CC590448CAB2FFA9A95A2C30D1B37048BA4FC5FEABF1AE62FD9F67A2DBCE4F92661FF0259B4D25A3EE3BA2FDC9A51BBFAC2F744FC598269F094658FFCA67CAB25F43307E2D0C24552E555858BFE4A5FAB66F01F18D28EE8F0E7DCD83A49E67D77220DF6B345B19A9390DAB86F3C91D0827C6C418
	161209DC93375B3E41D7B5F107E59B327806C1E2C33BE28E18360758303388573FBD9016004277B0BBA66FE1F6E0F2EF9423DC65DE981301243DCCAEEE2FD26E17DCAE9178CB00B277B1393AFDCA399B3721DCAF70FD7B7CF291AA390E92140B877EC205DC1ACAEEF5A94A95D441FC9628370A49C5D5A9651E64F20B001F96D06E6B6DA817DB1D14DDD09DC8EE7B8E14EBA4B28A39A9709C894464864BD0AE8EF88B94F22955CAFD6FD521DCD6CDD2362946AFD7D52314FB1A4B75825FD7234EB7228673DDDB03F2
	3140CBD048ADD169FB144BE556427C2A56AFD7D92B14735422DC97706D8A39D0155CC7F5A8978D7C398A3994155CF3DCEE8570736A7CF2E5F5CA39AB6AF93E4037AB64C2D5F2357BF9F9011FD097885F5F385C9210D921104B2FD74A5D5500F2D5406F8672559B69F3B6F2BF057805C0E906F2BB8E20DC497E246C467DFEB96BFE255C6F39DC8870A395F2F3D5F2579FC4399460AF834AEBB0EA9FA71A387DA05E5E90C8EED3B34A05C2FCF4C0399FF2398408CF89A877D58B2FDFA25398C8EEDBAB4A1501CCF3C0
	395FF2B9BB480484141B51467D8FE4668614EBEA67768319E58A393C83CA391739DC99701B016C8718DC2CCA6E7B07D0AE9978CB01F28EB2396603CA39CBBBD04E877CB020B8D9AECDA55754497B21A66807009A1B185C54A6A647461D3F3FC546C23A07F852BCEA7695FB3CB01E6F5EFDF0BF5903E0FB05575175BE9997231BF0CF7052D3E4CCCA0170B2201CE69CB7FF368E77844307E284FBDAF2C6207D4EAD4D8CC7E333FF5CDC90634DE0E35E83B61267D4080BE846716E71C1653EC43547636C3751AD91F9
	2CBAE5D50E2B0CB7EAFD85FE87ECEE0FF4GA6BEBE9C57462D84AF59B31159729E52F8916EE745C23ECB0046DB883F401927401E8F3CBAA0ABD08655775B226D70EB2683EFB17BE9975D83CE7730E8A9A016ADB6FB25E2BA87AB2E26517564F9AB564356D6BAEF32BA3D55FD4E91294669AB58FAD85E573BE5D3151CEF62BD3788155FFC19EE344FBAF503B5BD210559F2E90B5F26F9494F2797G3172D5956748F5DF518AF31ED6AC5F05C714650B817EA220952DD83EBB0A49BA40A6094345643FCE49AC0935D6
	33E3D0DF3C8390AF970E156D16B3E47EB1EA933DA4590827466C0642B1BC995B90CFEE9B78E89B62095F2F357794080BEEC3BCA7371D1F3DD3B7923D7DF627C7E413ADE2EE5987FE48B145C3FEE99C535E4F0DB0953463FEFC75A1B21792FDB632CDE83775D35FD4687D2A8475D6C29A299D75D616E97546C25CC22E770E5DE46F5BA1FAF1FAD8509C38041F79735BD60A79AD81DD7907B03F01BAEDFEDD9067BB04363D36747CECBB63CB32EEF442CA63DC81B33CAFF23C2100A50163AD2CB7423B8208253BE3BB
	77218E70218ECC77DF066926F4E03A63BBB0DDB87092F93ABB9B0C6AB933936B63BEA71DCF1BC7C5DE3EE3DB8F333E724FBB703D4A66CE4C675AFD18CFBB7026F6E2BE17B49B65B31F67F37D6EBCCDBE551ED6514B5B4E41AA541B8CE9F23AD06FDB1DC6FA6B3A78FB23CA92EF9BF6B95DD2F7CBB3AF846A7DA7575B8DE942385E2F1A0C74AE00F8D67670EAACFBCA97163D2C86F565FD8EE35967286B0363DADDA1909773B937F14D2BF2FF586C9C34B96AECE63BF3D05116D2395E3910E69957DB56E3243770B0
	6A7DC183C967966595A7AFF3E4AD6A2B82D95FE154374AE224AF0E6B0B7C1C74518E27F4D414A8BC99DFFB9D6ACBG5995DC5FEF86347A4A0E407C70886A0B68A66BEB49E6979B1DEE5BE927C3B25B15FAB36BD12F9D52C49FC13DB103C6FAD3385E45B5287730681620EF325B4714FA63395EB4C8D3500DFA9DD6A33D3D5D28F756GFDB7E176741BADF2CF6AD16A356FC73D92240965FAFBEDC6FA17F4235F189AB05DF260159C45F4EB5A0DFC50FA9471BCD4701A6CB7F5E6495CE7D6F56FB226E42EFB9C524D
	663A7F5CE7D457CB0FE23F78D963E47BC516EFC4A366AB9CCB4A2EB80679DE592D4D170C3D2EE3186F4B6719EF4F814CB784F44E65794EEDB1326532E3E84B375F4E25EDE594BC264B59897D100537175C0328B36BB82CB10F234E052DC6BAFD47D16773BB499C2E5FB96CB23B21EAA4AB2A1531A6F03D2110A6016B4D2D566ADD81F1269E3451A7CD67E72329CD18EF99683477E03E3FB04CB73A877D3432194F9500174653CD5B29CDD7708574FFDFE03AB41E2E97F891DFE03A57AB0C52AD646922DB78188E3C
	7CAFB1DD559E5DD887F13EAFB1DDF7AB37AB7092F83A55FB0D522D6069F25A7858FA8246569318AE51B05D149318EEBECF978E3CC41E2E7DD32372E576E2BA299D53ED86DEFBAF26DBE2B826CD6D657D70FB249F92FDE4CCD38CE83C4D979CC23D1110A6196B5D52E124B7470CFEF54521731B8BDDD17D365C9F55DBE0DE68001102CE8B7D3D9243371463B3C15E5DE644F76C10913EB00E2F33637C70EDBF79AF99DF1768A1DB39F45D67F53A07747DE6DC87E20C067CD3B8461D8E2335D1DE9FE2FC23737CB0DE
	5CCF7A8C1BE354B9A436B96CB60758A85ADDFE5BC91D082BG726C6DC3DCE9C3DADC9190B71763FA6EBCF115FC1DAB5B2E2635011B0B3D4F39091E61D888F9AD69533FDFDE2E616574C31FCF4FB67CB7DDD71B7A3567AFD639697B5FFE6D790B6927F03DDA85F1517D78BE3EEE082C6B33ACC959DB00AA013A00A420F08B2E27B3ED643D4ED94FBB9CF0C8305CB65BBBD59B7AF86E40C6729D92476470A3B6E2973A87AF60FB2D8B831EE5C10A3328ED41520585CD172CC9476AE441AA0245E0BF23C5F40C101529
	7C8E60C13B729D40D25015AB429C8428D144796C89A74EE7FBC55C5FB833DF393FB1F74319F432BFEE343F91A1B2FC7122FFAD5E1E78D7F9FF6385BB591FD98EF1F983B0BF85EA843283CD850A9D40BAEABC39A7D89DD1276CF256822F51699C2A553ECB61B65DDF2C35E962005A0646F55125CBD72C89278E98554577B73CEFDC9735D631FF2846695354C966E123BA918641C603D8A7F30EE4497A8B87713DFC763649156B8DDDBAED39AC036AF48C67635B0CF00E03EC984779277D68BBB19C67D3134479DCD0
	1C0BB5B89906114F9143F20E61021249E138C2176E9DCD3844EAE42B555B3536A263D7A34876D851D61EB244A9D991E7F96964F0566A52E9F1469A620C2CB14219G320BB84E9B6A90E79A477977C962DC33BD984E821BD11D7657A306AA9BE238DB276B5CB0BC9C94034F9043D66E5BE19C03F94764B0B8F569343E3D4090439D87319FD84CB17C156A5AFC725C4FF331F4117BA6077DCEDDBAAD764213C65867B5A3763A13083D3DEAF2983E542553E298B744F028936BB01CE3482C1E9C06D7F5693498928DB1
	5C5704F6D842B14C243A7207A6DA073BEBA6073DD117CE0B3DE448283F3879285198508832BDC358DF749C4772C9C3D83E97A609F3C5D01C31C3C6B69E6AC18C899C43AD3513439027CB2745304290C32585B164599143613A49E1306852E9B1B45B0D6A6BB551283EACA06B33E3FD3DB9487BB50E73157A49615C2CCB27453940EEE42B7F609896F38C0FCC92C3E2D08C1B070DB05CE6C58CA54308413DFFF298266852E9B1D88DB14C30214FCC6198BEEC189C06B2DDBAAD06F8C38CFB5B33E49D8BB906DFCE92
	C3EAD08CD98EA38C857DE8871383B15C58B8B98C313AF4DA8C5D069896F4A386974750F7E0F298DC3AF4DA8CB10698DEECC18C73B906578FCE8E4396DDBAAD066506985634A106DCA7E2F8F21298966952E967DE0DCE23FE6C2AFD5AFE2C9764C200A21C580FB57077B0F19C6765CD13439929CB2745196AB432553A9A44A03890C3CD7364B0346B52E9B1D4388C579E65DADB11772A6DA0EBF1212D9E5B09B847B94E3FCE92E7E6CBB01C33DDC636EA29C08C099C431DBADD6706A1BEA8064CD3C6361A7F1911DF
	6503EC49A93415F78F62ECBC05B83FEC1D9CCE3BAE1D966714D3C6365A3397B1C4F08C2F36CD8E03C917CE0BE121A1060CFD08A115E37841A4B1A48745E0F29BE13874D344D061C68C275BA707E12AAEDD31A66CB24470F6977607D3B90662C31343D029CB2745B05F9043718E3443A20E613FA609C1688806A157E304614AC308214003989E5469BAB78C89C1B1749AE298F6A0869F47F03AF3127E20CB27459067B16AC3DCA70D66588BC0B64503FD48C7F644398CF86CFB3287697932C2897AE689F96B0B894F
	A24973F44AFB016E477A00974665B61CA23C5990DEA0E139D73A69F7E5BC3C1606177170552702FE93A61D7B7AD3CB72DCABE89E6773CD985B9BEE998AFC2E3FEB4878DC7F31A163F37D3DC39B999FF4A83FEE44F86B50594F7D3B060C4E7D7F0B16737792F9A72FBB635FEA9E96E5BBEC926694E54BB2751233163C17E0FB4859EF10EFDB826C678B2E913A3EACC63F5B8C611291D6F75DA36C7BC466F7AFF03F0B9F41B30CE706493B13B488E70DA6E51BC651BFACCE23F78F952301FD026D690F5077E04DA0E7
	851A82948194BF0AFB792B6DC15F37547B4E723EE539BDF0FD3FECB72E6FD543647C2547B9626E9735F51AB33C1947795F9A108DF9D2B5CC66B51ADEB23B87C51DCF645374ACAED07A8F0683798D730D9F3D3E017A1D47A3FA680B8CF2ECC37609B345CA1FA06F6A647D04433C4F9F453A7C71E1D217395E246C8220AAAFDFBB9FA1F5596DD5571D5D9B38AED95ED55B14F917733CDF5A06F9CF71E25E5369393EF888AF84CA65F9AF532DFD89893EE0F9E716A8735EA9E01FF27AF3A3FDF9C175452B74FD4A4B32
	F7BB9F37FCD8162768D93ADE887B0042FCD896DF19D15EB1C17336173E22483B348473CE2E413943DC1E775D748C56B288670CA5E5EF99637BD53ABD9FC215E34172AE592E4A3B14FFF72C5B97A1549ED45F92353E6D282F58301EADC175C56CD0695B41478E5D5A1010CF5697EA20170D056B68FB14A8080F9B43F75CBF5F274A238C73F8DC3746A114A06BDEE4108753F7E915CADFB96ABB2C1BB390DA9A54861FD52B746DC4FD8F69561D346D1CE67A72CE8732C19CDD7B96C0FC45E93441299AD59E9568034F
	9EC57FEFBE0DBEE8BDC6FCB0844211C033CF73779B470D70A44AB8969B60E1F9FFD02B4AFB975F8769B15237CC561375D5A0FD4F2A74EDAFC1FD5596A3FD79321E12007A265729741572B529485FD1FC053679E00058E69C4261C031DF21ED5E99B474A503BC55F9D7572B72666DE909213EC5C1757DC52D0F3727BB2D063E99D45F2C7DAAFD3C6DC45A8CFDF3DC764D71C0367E22C1256FD37E4ED2377EA2D4A06B29045FF60DCE26EFE32332DF87F8323E22FE437EC856618B086FE9153ED22E6F29EEA3FD2132
	1E28007AE69ED015378275AD576DD1901AAD6BD990D0DF4BC115BE5E16F2F4EBE8C2A9321E34007AD6B6A94BCB3E01E66B18148A23FD234CB3B017BC037349A7799EC04999EC9FC76939E9AB0427GC51C4176512CFBBFC6A86ECCB07FFB22C9D95E9D3C2D3F2AFB97C45BDBD0FDE34D4A72126FDB65F9C0B91FCF71327C2C1C4E273E067994D05557FC1FE327D15E5DDF874B3B28C5D596BE96F7D4986933875577EB353E6DD816651F717959577CDB25CABABF0370C220D4DE1671BD066D781BE0F9DF532A4A1B
	77B3B5FB8D67E7C1759DE8D369637DCC166E7DB26D97026A7B07DA9F9F23C3BFB51CC78555775DF65598467BADD31761BCCA234F2288B3FD62A195BEBE66776A76BEE8FF95945F568E15BE0E6FDA5DBE906D37026A7B23CA5FF6EEBF3743C8DFD4F07BF52A746DC4DF0DB9093EBA7B9B74554F06082FAE05F06614246C7CA9682B05F6233C4B26844B7B29A232763608836691BBAC791D9E314DA5DFB3847C10A9A44FD43A7FC24E30B5CE41B95387F47F052E32EB4CEE36967F2E171CF59BF01B07E1895769927B
	051E8B6859C49776178BA0FD8A508A029D62AAAFC0FD9F1E226F41ED121D2C7923AFA0773341821E63FC27182C9359D70730161468B604034832BE39522D6C13D3AFE0EB7B1C8BE15DFEA11E9DFE1CFE5BC64AD181BC5705F8B67842DDEF8981779020F400075A7EE51ABE86524D87DAF4A11E7973FD08E77EE2EF3FC568DDEA7CCD63622EB369E9974AF3000B58AFB973D7B67CFCBA2B43978D6B307D2240F5484EFE7E196ED3D8AEE2E7BF57F07EBFA8FFDC41E7F6380872C9B89C6216DF04FBE5DF517D331E10
	24ECFB886EC91CF1845ED388F1986FA9CCF3986FA105B94E3E079461883497A04FE18F9B367F10E07659F70414B7B40459E195679F247CA8851F5967E7F42F0004E7C35C660B51BECF53330563908E633CF73A51E65197E3DBFCD9F79E0FD05C4541F05ECC3FEFCB38186179087367D1FE7EA5FEBE43F9B55DD7A0E1896262AEC5CCEB9B90535229483B72F364AD1F0AB8EBF5673B88E5DE968C675F68F7F11BAF537ADBC6996117DC2675371FEFC7FFEB0438584B905395F4BD1ABB8D5A68B444742C615C25F09A
	43D4B5CD0F0D657D9E7D1E2AEB1A96D391655B27E9B15DDF0B18C2A0AEF59AE21AD307181A3F033CEF6A11574DF9757B11E7613C6F9FC49B3BB8EF8BBD43B48E61306FE0DF37250C6CB71B5D03252CFF5D4D4FB7C673F44FB6232E591C373B85F54D673CE1FACEAB9942CBB86FA7CD18B60D7336B5E35A959C478F2B55B81E2F46FEBEB7946B63D7C70D6AE3CBE8B09FC9216B640AD0E677351C7F874A6FD670D9FDB8A81F04FD9017920A38FD4731ACD55339EDA82F99423D1CF7E98F4AC91C175A03F2D3B82F5B
	02F2611CB7077222A0BCFBBA163BC3B4AA7702692C5CA953837961CC3A86CE1B2EAD779D141FFB39365C1F8CE039CBA0AE7CF244D4BE485BAB677DB767E5DE013C472C484B653C7BED484B673CBCBA17A800F0A5679DEBC739F64EFB1871A06C623C4CC368BBA11CD7C74F1DC4C0B80673E6D15EEC88AF603CA534FFCC0170D24E2B277BAA4BA11C93465F5334221C0973A44AAB04F095673D5F06F2DD1C975206F23DE1387E4A5B454F8C07615C6956DD44563190CEGCA89433A7E2961BCFAD9D8B09FFF0A2E67
	322E540EAB0BA8BF7FCA6D38F202FFB7DB82F161D7A27EFE5A6E16C3B86BAA64ED2DC1DE5ED53C3FAEB742E93AAA984E7A1DA45F322B34FD63A14AEF3ECA5BB7BED30EFD23856296F0CC4F6FC4CC05D7A34FD6013C0A2B9167BFBEB342D9F7F5B01C7FCD57E15DD7EBF12E59C3782E2B35B827D7A24E29903714E33AFA8FE2EA8FC75E513D486B613CF777A14F4AF937FE0ABC0973BE6D42BEF68A67C5D0DEA804E3B84FCB5FB54F06F082675DCD5B4EC288AF663C4B9CFCFC8E67E734CF9A59ECF9F8B01B5DCB57
	83B957E83F871AC3797957E83F872A26FCFA9FAB4405DD0318EA697B2FE5904E3C16FFD7DAC46EF4D0CC090B59C7CCB07FA6B718CA1E623A36932DEDDD0D87DA9BCE34351E28EDEE6B2C176F240872AA6FB52EF865C2437B318865DE4B4A38C57EDD715AF5ABD99B7E440563D18F4405DFCB6B51257CE60B60AC4DE46F1FD97CF7D471F8871EBFFE1EAA1EE01D19210C7F13AAFE152C23D840BBF4FF7C814E75D77CB8CE30BF9092703E669439BC428C769B36E4664A106527B3181E1F9ED75AA777BAFB7A4AGFA
	AA6474F5B37CEB8636EEF9F1EB003BD9484A484EECA839F11F56B7837B41AC0978C09C0497GAD1E01BE38C0779DCFB0E269FEB161F44CC73D749E0D65B3180F2E637CCBA8BFBF424FE73E3B0A72C9388A62E2A370DBB6071758E1734C246CB220E6A08BD088D054CCDC47BCB0D2A284F9375A65F4B543C2472ED81A3036714AB01F0B4DC4DB7D0D2E2166C3F8B150F24E4FF090BE39F7E773F56C5EB3463FECB8587BFE54F52EB6DC2E10155F03854DA3C3760509542FB26DA62128044C99A5D87431B57A3F4608
	B74BF32B43E8270A6B305C75F44DD487E18B6735D39E396B0D5CE745F84F9CA658094CC47C080FADC15231BC52E89E93A93F56F64162B789CBE959BCA239E3CF3430F9F5C6B75FF3841C4CEED5277DF6FB3D846D9646EDF4C7E9B371FB884F86CA84CA85922E873F822AG6A823283CD850A861A8B3498A8B39246E720BA20DE20F12070C8547BFD2A176CD7133BCE48BDFA31116CFEB9F2579B39BFAEB1125D9FC66E86DB9A496EB0DBAA5FCD15F3833BBB0E5CE7D5F8833BDF0F691DD9D232D2EF9312AF79A558
	889602FF42F59B494A286B9765F2CF26AEA7C21B95F910BAD82C88974A768D14966B8F6B8A7924BEB3F91D249A5A6EA3791774F164BB493593400CC46EF7FD4D00CF76F45E78166DC6E81D62190CFBEFAB42647E598F4E12967BAA9C4311CFECC64E0630F6B475AB01BF470F13E7F9ED339D5BD4738DFCDECA77AD3A095F8205F2FEB65D37A0F7C0123B86FA791968E737EB7BD312CE996E1675CC46B672D9C4DD9E5A7EA9C3D0774393A156A75DDE266E331FBB6337D3DA8D5F3F3A81670207EAF13D9747ED7491
	5DC7C900F0AAD04E0D485FC179D5721D1764BECB461FD39BECACD2925197A88E73545BAEE9C2F91C4D06C663A23355BF3F767B97E9CD78FCF4257F7931F4015B5ADACB72919D64AAD40B3CFF5E52047358129BF1EEFD085509FBC4E4BADE22C76119FCFF8B0E97F5DCBE24D3B36E2E7267DF355A1F363B99736A62E917D5936181335DA372FA7F4BD12CF7AB2F4B5F9CA3F3DF894261C033019201D2F9FC9A0DA7F7FD12FBBCB3EFE277D6123BBAD93CF4CCD99F122C03BC279A54EF78D96ADCCB099C43F4D59E4A
	36E154BFCEE42C4F66766CDF632F4F34637A7ADC5303753365A69C4FAF4972574146AF308E4AF8FC0A68573950225779FB8BFF47F293DFDB0BD8C7BD1C77A465D9A1BCFE935A64A6FAE7D498046301D200168365C67135A50D1FAB5F03CA6EB8AD09E2F7183278528123F6C45293FD9369EFC83EE10AB4A99C63C143BC56CE300E301E14F331B53C5EEA877DEDE2406AFFDEFF527FDCBA642F07CFCE6A6B2166A456C3FB9456DD175D1FA6291D249935F9EC642EE31666BF5B519FAC1006710A7819EFA98A5B6171
	FEF59B768E7B754E6F57E3F9269F3104F09D9F362AF5DC67706B68B92A5761B90ABAA2F8F966B97DE93E532ACFF3CBAB260965E9963B7C7EFDF79B464F67BE7666AE23B5E0F2D4307D0BB31F1171A3B5CA3B07B61572D7C4E97750E66D42BD345C1BE1FDF5B3360B5F713D1CC5B7A3261FD7915E9288E75D427733A90F5CE7CB6E2AE5BC314A48B7C91AE03EC8F41F4B3833D1785AB00FF3717DF3B987AE1FE3ABD77B46B6375F6FBB48EBB41C9B15232D8A38DD1A589EA1043B00DC1CFF047249FD3D642E5B94EE
	33674B030D3DE567E0BFA44CD3ED333F864DE3A2E76415FF0FE3BD374B086437D174085FC6F915E823B0EE0B15F49FB29242330192B9FF9D656749778B133B03656F88AA1578E7CF409ECACA54240B144372D9D0D59E13DD5BEA67C6E8D7E6179F0E7AED74872F7FF95D187FF964347FB9024E4919CF5E5BC556G6C72A43275E2F6D8385C4363FE394BBB543E7B2BB37E3804C36AB8BA5D11F5ECDD692F33041338073904574D83C3A4ED9A8FBFCA43643EE396EE98C27B25CD32FE02377DDE1E4779FC53F17636
	7F5CC9350DC2691C146D0F6D4AA0F64939955A7B2D389F760F91F2876BE173C9F9A70C5CBE66F4532DB0E0363B1DAE51AD0DB1AE3D71DFAECB09EB22FBFDEC3F7331B538EFBA7BFBF78A711754853C972971D6D68FD679376037B3D72E67E539B5136C75C5C05CEC20C5C0E9C01951B0A70D4632550D920C64EB89F2251AA4197B2D7446E75C68BBEC933DFEB6B92842F47F004E2965B38C239F84328FE8B8E89EB537751D947B25AE73A02F67B13756B6A551FE1F2A0B567B979B6B4669FEECF734F68F7F924A37
	C6EB777057CB38076F033814E87465B3745E212A5B208F873282CD810AG0A3D8DE5C2298C393B065CA1C96E2FA477EA12FB4F481DECCCE66D36DE85C65493AB6BA23C2E5B0C5BCAD5GFE60367121AA2FB5323F10BE836773017A340934A5D627DEEF6033ACDFFB0D4F3204F80D4F32CC731E7DFB272B3C017F4E49CC2F726F1C30767A21E24DF149E7E43F035FC8663F52CE0E4FAAA736B958A902EEB3F865CE19FF4168C66A774E9169047276ACD84B537B6ED6286E611BFF9B2BF3FFBFFFA04B0F61DD9F5145
	6E636EB33B953AD83C644DD5E1F4118E5E43625E6AD62FED6927C7F2BAC78B415EAAFA39C646BF59C5FC3A8DEA85A3983F32117882BD18264370CF335A8E5B711CF2BF51C5AE8ED56BFA1D5E23CD78A764BFF5270E1F7B71860C2F76E8702DAED567D501F55130C1E9078EFA992A9C376CBD150DEA59252672994C7DEAFD25F21AF9D5E4DF2E456CB08F0AA7700ADA8D16D27A77C73577B12A4BB2D4C87AB452EB1D70DFAAF962204E060FD42AF1FCAA73134D2AF29D2017C14BF13FBB210A2B77A9627AB5655AA1
	73DF20F7C3567BEC92A6E3BE79F50356A7C95F341E7BECD84B59631FEBBBFB7C8B9DE70FFF7573C0714CF77FEE717B6E4DB4AFDEEEF0629A1B133EC2E2715E4DD9346EA4AB91E13CBD85245C8D22F3D8145CE3044F74668F903DECBD75CDAD2E27D2EF43F5DE522657546DCBF4E0E69C4F2F0BDE574A504C19103C3E736874A0982E4752245C9FE23C53AD5806D958592C14E1E558B7286833B611BE0B5D78FF62F30F6856786CC5747E558E3CD7DB67074776287D26CC663BEBD43E56A93A210149F1BB76113E21
	5959EF366B7A3AA77A3475CA46BA7FFC691D9EF5796E69535B601F96FD197B2C7EB27FDA542F1D170B386EDF416B720FDF123658E5330BA77C17F65B47F4B698F53E01F27ECB38B5F68C21FB77356CBEEDCD5C6F3628EDD8AE731F7C1058224566308D5BCEC35FE6372B5BE019CDEBABB2A7705B6A68C93DED04C3EA7B55E942AF746B53CCBB2A674DE95573925A747B15A53BF0BD16F3BB4ED3AE22E779B7C3380473AE27BCFAC771F1645D3B4BE89DC952984D95B687601FFD9E3340B00F7F09390B3FAF3A5866
	773D674C24DDC3FFCA87018343B0DC687C696ABD2CCDBAE170D4CBB0FDB1A77D7ABE9148FD7A2DCEC7278B068AE503E2716BF75131D1934962628F13FCC857335F6D9CA65D14BA1F9FAB765CD6FBC9FFD8E79BAED50FD77125B2FF3B1A7F4E6BB2FF8772194E9794FBF2796F929BF50CB8EADA9B7C3859DCEBEF86096373B4361411636AB3685FB9F058C819EC2769905989020EC1369EF8E41844B702BFD8002682C582455D0E6B0C9FE57CDB206B8C03B5C63DE5D044F3B218DFECE66079677D19417FBE705CCC
	721DC01FD3121C43C4BF729F4FA4BEA8B9DD14A97FAD3DCCB269F25B862D92931579CFE51276E19787A81B352DB0FAC6A4914A3578F65CCF7B05876FD2483C835B510592DDBB73F0A88D5771F01EB41177B16BE5DD93EBE7C5934EE3A2ED0D795377E9DF339F7AE17FB87E6E8942A3ABC7BF6F09D524BE5810C42F9B1053C7506FFF58D9A9A5FF7DE9D28659C9E55E4FE9DEE4F2CF186CDC4F1592397B5760DC8F6F59D95AEBEB75FD670681755C7B10E22F778EBBE9CB558E33FD8C8697FFB92C3B082F709E027B
	4A8F06837B6BD343417D7597745C0C88FE56B566123F77FFEE186C5EB88786BCA2EF970B07F3B96F00275D69311116A8E3F693F93BF94CC9F66A58FD8E0F70EFBD2C60BFD3E49F0A01DFF207477CBB084C9FBD4A6FC10C6B7977DF1179837F1BC32A6FC966C95A6FC9086E2C18246C7C987C1E64F7EE7C1E248CF876987C1E64F7452ABB2649AD613BF757B8495FDFECE685E167305E77503DD5C8B797A8B9863FA7B9B904FBA579F75DCA4FFB85BAE336B40615BDF7167FEC989D43287E3FC8F8762BFD961E7D3A
	E11464B99542D1C07133306DAE556DDD1CDBFBFCE94269585E468CDA760533585E46CA4E0F227C94851F59FA2B87ED1D8AF14DF762592FEF6837C5F190CE84CA834A3A8B6A88286CAE6C27A31C64DE0DC0FBDD9DCEA77D1408FCD5E40605361BF65BEEF814300C12360C0DF7797B2D1E3B826D6BEC24E31D6BAE6DF956FFD17E543B3467D9EF9D45732CD19017990BF5F3835D3BE74F37AB1E37F9A65A97CE3CFE9B3F55BCD87DCCF5856EE72EF0856FE7A2DC4663620DAE7D38F82B4BF8DC1C65520F0B9BC7F0DC
	3446623858B10A63E2A82F1FB7E8FD46C3F89150B24EFF1F72B75F1D14DD8154F3B772E70D8632A9C99B48D6287F5C6A6D7100F9CC749C049131FEF87788761163F77B7B61F0F8A6F30279F753F75823263368093DDB394EB0BB48BC127547AD1EC17F15B1F2BC5B3FE327DBDB585F189B7148F1D7D868DA385D6D9CF40B9E521DAB124BEB4243DE65BAA76B9E063390FED91FFF7D18364FA771D5905FF58F7E4D0828AC258E3B2CA3629E9C937AC6301F0A855E12FB305F3D0972736F05FE892879DEDC9BDEB2CA
	6C5D890382D9D84AFFDBD8D4767F796FD625EF940C7BFF4B3D725962FB557D3FFCBEF8A0407960E6F39F1E8F1E6E4D12FDA261DE7CF66267E3D9B2169577A27EB7E95FD496875801ACF1B8562D5B760EF19E0A1A40716819AC4CEBBC8E5B02F5E4F2634E680453313EF793AD476CB86D3813CF79736334634EED3CBE93A12E643BB86E3C6BA6FE9D8E61B820E42025C042FDE0C320C2203A7BF07C59F52AC088BC7E300901FF50E1653B4A2BACDF6FFD2CFEA579F76AFD7AFE0025DBB40669A2E519B805EC82BCAF
	5224E5651FCE4B3F74BE6DFB78884A976E573E07FFF7945F4367C11C6FFE2C4F14AC12FF4A7DFAFCE9404B1C9D88771B749DA3FB7E3762792E11EFFF0CCB78D673E0BE7031BB7098D76A8EBE466DF69B0FF1D5EE7D98D76FB69E631A5C4AB10E715AE53DEEFE619A639FF613B9A71BF7335DE8722EC27E4E0B76991B21AE8BE7633878A79F7F160C735A47F02C6C714BD15ED488C7F3DEBADDEB46C3B81173AE10B0ED9A674D213C7C87208FFD003FE32763F1A304AD1CF7A36505C0B81A73BE6063A1117B1F2C5F
	C61E47DE1E47E45F4387228CEE7B97E99F1AGF9AEFA00FF5B14CD4F39C0D8F890F95159E83F3C87F12C196FDD4D6B9A4770E73CB866D501DC77034CB62170CB66AD727BFFBA67E46379601869ACB8239FD40E672BCF939FF2394581516D96AD1D3653449759BE693B27E91D03FC82477726C73F56AB616B38B4104BFA887AE0203A07581C0AE10A104E062967A1A526059259A39DA6FB21A3439411FC478175ADBB487A9EC2BC2B591E974EC7E04A61F40F49FA7E7A8D59AFD30EF2F234BC57D8B82A1DEB903C51
	8F713F956B554EA3C8FCBC4F7B15ECE28B8F5D0D62E7AF68D995966F4ADE47635B4930A1DA38EDAF4B46BD68440750C68FE71F4DC6A9320DD85F7E3297473C25405F920FE37DAA93F9A72E9D6B0B19C36D5EDDAF75DBC5CB0D6CDE729A3752C7F475008E89A8B41E1FE79DA3652B95495F0F6267C9C67D657B1B1B1C8FF708DE937FC3DBF536E151C15E5A956CA8A9A9B4ED5F39D5465B4D57065120BF0563AD6DD56D2330F5F8035BE629B18F3205B81B17C4F9707DCB5E9C1C6F7C046AEC063085E8FC8E62FE00
	6EF9551BBD72B90B922F9F730A1133E05E0E18653B423D38B68F1F03732E91AF4E3B92F9FED1596AFD75C5B4FCC474487304D53E494D1FB6CDB89D1B8F44517A4C7C1EF67EB40772F33F271DBF557830EE72A1EE4A77783D501E496136CFB25DED93CE474AD5C34FDAAC511537097253F465CD663E388262FA9F467266F80D72CFF818353BC58F871A971DB6CCC7E8A9249166C27F8ED4B0D7FBF66EC172A74B6567C7954F0D3EEFFFBEE57EDF4823D1721769106279177F8BFBA2AFFE2BF9485F39FBF1BED5B917
	FF676E45B13D11732E243C888847F25EAF395CFC4EFBE98D61654E03B95BBC7E9DBE1DCBD4C138EB9E0E7537D2DF091BC757435EBA9913F51E5EBF516FB3E49A8719B0A072DE0A7E8D48F97E36417A2E98AF311FBC764AE35523DE6CFB1703BC4B774FBC5F2CC70C6FE6D3661B7F08BA5F12C73479EE4C8ABCD6FE1C05E3E565A3586776E4A97FCE21FC0E1A4A11F073A358DFA772BE3C87F86F523400D940FFE97B74BC9C6B36507312EC3D7F6B9C65FA3F6E193A7477856375FE38EC0FA50F78577BDBCE19B298
	6EDFF869B7A6822E377F6DC3FC790F9A61932A98164B9567B52B3354634D34ACF210301C5FAD77B3D5FF5485FA2D0F1EFDBE4D564B636324CE47C1B682E8AED0B2D0AA10B09F7AB0208220CA20AEA0BB509420F0209820F820C4204573F1CDEDBB3DD5883C261687F945CEAE627FC8B56EAD83FDD90F1D9D3FFC17882D6B7C4718EFB15E9FA92FCC6649F79C0D87DE674D988F3E4E0B9AB7DE675DBE2EDF675DB5EE3C4E7B6E38FE1D7760B87103C130CBB717FB18730EF25EFC2A13700E58ACF4CFCAFE97C4F191
	FE23C8B2C4FEA24565253CEE1977B3856FA83E8B9AA773BDA832556946344F0D93DF9B30596DAC7C9FD446667008923747920A5166B2ABF07FA7679D65F53157272F1FDA1F32FE581C507CE10E405F7952A2B2FE3EEF1D1F0FC5245FC8EE926EBEBA9D9AC36C9F05D512309E7FF8B0FB3DA7892F5373F6A649AA1A8E5B5C520859EE2A956DF6C9F805AD9CCC30B41004D574841BA4E41293D0121005E7F9A4E1ADBE969797CBC28EBF40C303EB712C8E8DE51223E9C4B17C182ABD14174DCEE65167DC9A518A73CF
	529AE052898A58099C93B91183427C7C8DA02267E6A4E1A3B9EFE2D21ECB11048D1467BF03A289EB6493A78421FC0E44D4CDCA3901ED8E1870281AA42C1333E46FC5812EFCB610C25C408E4819A427097EE1EFC9F8D5BE96E7725AA4ABE762418693FDABE922E95FE2A799E456005BB9ECA26FE8D9645AD62723C8BE1EG9848C184135F489925C5F5707FF67A7F8E727F9AAE1B4D4E2FD1AD2B59B381G96B479CF4E51585764A3F7A6FE66CE4E1B1D50B4113738D08B4D6691F0F312FB2BA8B5002B8819ACA613
	3CBE069F029AF03452GB91185992335D623DF3DC20BC04B8A9839DB006F608BDCE0AB7248C2D7813F85833436F519EA5BDADB6BEB3B6A6BBCEE61D57D12247A72E71F09BDD11717AE249F90D6DB294F9F90D6F9C92370114FFD5E02C12850F3CA78DAA8E7A1E101A43CE7A2071FCDEC35EB9A7108165D26126212169A53B6D3B9FD005CB6705C8E50563CF8F4476E0C5F5E1A11AEE4C2D62CF7BBA0E412AE8AF2F4331CB320F72379E6AA09663FCB4B65E36756EF1477E8AC3F38BF60BDA391CF30FEBE76897F58
	4946269F516F79D2011F79839CDF5E6CA98AB43ED477C91D4350AC20318CD5BBAC449CB5E31268BF7B7B139E225F03B2F2A40BFB3A0760BE29C873FFGD0CB8788D8E160D103B0GG9C1FGGD0CB818294G94G88G88GCDFBB0B6D8E160D103B0GG9C1FGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG3DB0GGGG
**end of data**/
}
}