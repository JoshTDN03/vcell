package cbit.vcell.messaging.admin;

/**
 * Insert the type's description here.
 * Creation date: (12/3/2003 11:21:06 AM)
 * @author: Fei Gao
 */
public class LogDialog extends javax.swing.JDialog {
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JPanel ivjJDialogContentPane = null;
	private javax.swing.JPanel ivjJPanel1 = null;
	private javax.swing.JScrollPane ivjJScrollPane1 = null;
	private javax.swing.JTextArea ivjLogTextArea = null;
	private javax.swing.JButton ivjCloseButton = null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == LogDialog.this.getCloseButton()) 
				connEtoC1(e);
		};
	};
/**
 * LogDialog constructor comment.
 */
public LogDialog() {
	super();
	initialize();
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Dialog
 */
public LogDialog(java.awt.Dialog owner) {
	super(owner);
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 */
public LogDialog(java.awt.Dialog owner, String title) {
	super(owner, title);
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 * @param modal boolean
 */
public LogDialog(java.awt.Dialog owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Dialog
 * @param modal boolean
 */
public LogDialog(java.awt.Dialog owner, boolean modal) {
	super(owner, modal);
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Frame
 */
public LogDialog(java.awt.Frame owner) {
	super(owner);
	initialize();
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 */
public LogDialog(java.awt.Frame owner, String title) {
	super(owner, title);
	initialize();
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 * @param modal boolean
 */
public LogDialog(java.awt.Frame owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * LogDialog constructor comment.
 * @param owner java.awt.Frame
 * @param modal boolean
 */
public LogDialog(java.awt.Frame owner, boolean modal) {
	super(owner, modal);
}
/**
 * Comment
 */
public void closeButton_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
	dispose();
	return;
}
/**
 * connEtoC1:  (JButton1.action.actionPerformed(java.awt.event.ActionEvent) --> LogDialog.jButton1_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.closeButton_ActionPerformed(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the JButton1 property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCloseButton() {
	if (ivjCloseButton == null) {
		try {
			ivjCloseButton = new javax.swing.JButton();
			ivjCloseButton.setName("CloseButton");
			ivjCloseButton.setText("Close");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseButton;
}
/**
 * Return the JDialogContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJDialogContentPane() {
	if (ivjJDialogContentPane == null) {
		try {
			ivjJDialogContentPane = new javax.swing.JPanel();
			ivjJDialogContentPane.setName("JDialogContentPane");
			ivjJDialogContentPane.setLayout(new java.awt.BorderLayout());
			getJDialogContentPane().add(getJScrollPane1(), "Center");
			getJDialogContentPane().add(getJPanel1(), "South");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJDialogContentPane;
}
/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.FlowLayout());
			getJPanel1().add(getCloseButton(), getCloseButton().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjJScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
			getJScrollPane1().setViewportView(getLogTextArea());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}
/**
 * Return the LogTextArea property value.
 * @return javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextArea getLogTextArea() {
	if (ivjLogTextArea == null) {
		try {
			ivjLogTextArea = new javax.swing.JTextArea();
			ivjLogTextArea.setName("LogTextArea");
			ivjLogTextArea.setLineWrap(true);
			ivjLogTextArea.setWrapStyleWord(true);
			ivjLogTextArea.setBounds(0, 0, 160, 120);
			ivjLogTextArea.setEditable(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLogTextArea;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getCloseButton().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("LogDialog");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setSize(679, 484);
		setModal(true);
		setTitle("");
		setContentPane(getJDialogContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		LogDialog aLogDialog;
		aLogDialog = new LogDialog();
		aLogDialog.setModal(true);
		aLogDialog.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aLogDialog.show();
		java.awt.Insets insets = aLogDialog.getInsets();
		aLogDialog.setSize(aLogDialog.getWidth() + insets.left + insets.right, aLogDialog.getHeight() + insets.top + insets.bottom);
		aLogDialog.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JDialog");
		exception.printStackTrace(System.out);
	}
}
/**
 * Insert the method's description here.
 * Creation date: (12/3/2003 11:25:33 AM)
 * @param log java.lang.String
 */
public void setFile(java.io.File file) throws java.io.IOException {
	java.io.FileReader reader = new java.io.FileReader(file);
	char[] content = new char[10000];
	String out = "";
	getLogTextArea().setText(null);	
	while (true) {
		int n = reader.read(content, 0, 10000);
		if (n == -1) {
			break;
		} else if (n > 0) {
			out = new String(content, 0, n);
			getLogTextArea().append(out);
		}
	}
	reader.close();
}
/**
 * Insert the method's description here.
 * Creation date: (12/3/2003 11:25:33 AM)
 * @param log java.lang.String
 */
public void setText(String log) {
	getLogTextArea().setText(null);
	getLogTextArea().setText(log);
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GFBFBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135DA8FD09C67F5A7AEF16CD453520912E057CED5D9C9F0CA92F52C0CE9C6E9D557131058CE8815DACDC76EE8EAB5210EDB4B93B555F418E46F0EC3202088594441E35CE0590E11F41C0E3F02630F6E6010C0A0B8F1E7A0AE92DA3865B8D8EECFFB0BC0C8083E777D59DB0EBB30DC0919476E773E7F6F7D5E7B5E777604325FEE321A4CE502E0328A6C6F0CC990822785A17527C33BB82F697D5CE2417077
	B650B1614F2F9440339B6A1E7EA03738D4783B5BC5D09E05F28614FF836F2F895937DDF6F8C9B2CFB95439BE7D39485A739C1E64739CA26517EDA5707C9550D56061B373FD1C7FD0F5B96327B2BEA71399F8D55866F8F585636D07B6C540F381792BE8FB991EF4811FF4B631F623FF12A19C781EEABE026398466474AC6B3B1FBDAB057FB6251F4039FA2BCBD81FAAA8DF85424DDB041F3CF7921E2D5E19E07B44F8C833DF1F10E459BEABC523E2B0948E5A4540ECA86CF476A9C1CFC81415A0086FA40E77196AA2
	52DF907640D81B886F51F61CE3845EA3C08F1C647C40D9646F0377FC2032D3FCDFED6F3732F50F5CFCD258D9BBDBF0B4493EEC2768FE7C27E27B8ACCBFEFFE036860C290E51D86F55B003201DE82AA3165965B005EA43A3FB4097BF40FEB1D4A6C2C92F6C7A29DF2C03D2884A4995E1DCE28E13CC1E9C2D18302C075FB295A16E0BDEB916DB7F6477D28CCB26A382EB3873FA66CF962F366C389E432A7632659E32332983545E4C267CECFBA77AD5BCAAC2E1CFBD8B04E1D5A3F4BE2CDB0772616DD16B4B64E9643
	5CBBED286BE3C457CF433B096103725FA47C726A981F6272B10299ACD7C15D06EA0E0D11DF71357495EC96CAEBBE1FD08E69CFEDB06F2F26EBA832472FE5B719335E9E3F16FFA1FC0FBDFEAD53E779DA7CD01785C471658B211DD61C4EADEE827282CD81BDG3485A86BB44758431327BFA2463C222AF54C056400248A342FAF78BABC2585CD95FB42D1CD8CCFC8C3229A9247E5A9AA30B623C11441780AFEA2417E844CF1DE8ACB2A280514B00CAE4ECA1A24C6E91B6960B1EC23CA24569F826B5644D9F4F434DE
	8D3E86CFD90CEA9FC48222A645DA507A45A06A643AB884A342G70CE6512B20D725A8D7B5F8FA4B8389C7E130C57AB29E1C9C657214C4CC57C3893416BC0B9FF1D780EB2F837B9380CEF4DA0EFA314B375F1ECD32F9A467104A6F07922FA035B58EF4E22AF5E616018790F910E994F112F8A36DD1FCD08193256DD165D8E66A79D713673B6999357C54B0F370F5C219DFF945A416625F3BCF5CF663030A7156F0BB2313F1A5C62FAA0FF8D17F1F02A12E236C30CCA9C2583AAGCC8A44A4CE57794FC4B6A6FD5DF9
	24AC57F0D9C54E0EA410775DA2BA4703E48E4BBD1A034A64F2884FA1693A9456BCD2C48A8760A54A6A82A1449A3353C9C56FB3CD7891306BCEB024284E0F045076C4CDD3C363F31A6413B48D0E55D87D8219ABBAB79E093984BE57F2887D2FB28FF62D37CF8D21CDCCA86130C41423F7E17577931B14E4E996965D294C05B54A5FB00D3A1A11EEB01F10B6DDA820CD4BF368DFE8AC30D57CA56EC18D4D024A51C589F9B5E82F5F56E399240D404318E6BBBCF3EA386D4D3F43ED6F5D4547059DE391F32233A37D0B
	FFECF654D26CFBEAE336C75774091944EB7F94718D0C9F25EBCD9B46F98DE1894379BBE19CA3GE3AFG2555F21CDBE42C673E04813CD311E5AAC6DD3E7B65D25407F4EDCE82970CCE2BD71759FF492F46558DB179517ADF48A8BF59606F266AD0FEEF38F81C17816B59813437164A30320E4A006EE9709A2E1144E25362F5F1419E1D872CB81D9774BD52584BE1C7F9607E375571986B85876E7BA5A897546796D754F33D7C70880F31B64EE488D787F6DA12450E7575F4ADA3750658F1F85EC265BA2B601C69D0
	17D14FE53AB8EB74736EE8D4198811A3064963C45828B74A33078F43F3B224C6359EB02C85AE3B7AB02E974FA046E6E7F2072B0449E7BB4CFBGE8C383721FE8ABB32C5D86BCBF508210050C77382B966D0EA857CE9FDEC91DD454D9A9D00552350B731A1D58385DCD2A3B707D84574511571DE8E7329215BA66B4CD890F39638669CBBECA4B09A19ED3EDFE4D4556786C57B68B2D4BD74C09E25C870ECE19F7B6D03967B74464BF7243674DB29075FD8DF60C6B3A9B9347F0230C9FE14FD4F852F8E73886E5185E
	989F8709041F51989F877D1B0347C1D9D0D7F1061F5179917483A9D0FE84E89B5033C0AF8115B4F1CCEC8F57896B44C0BDE188CD42226CDB6174F8AC22D8281FE2656B0A157BA9011F815D2E7878362AE925CCBCF1E55AEFE8D53F7F09ABCF457523D8B86ACBE2179499D0C77D643FBA0DFEB285465A82148D3487085A6E0BEDC5EC5C83CD5CC6174E99EDF47B51A573AF1358282D192E2F2FB906113413BFE3B67AA5957D4C86284BG5A813487C8F0028E01DCCE2EA3A152361E0E880C7DCAA7703A411FF5461F
	B7501F46F2FD4497DD0531D301A86FB142CB0772D61DF75C013C1DD04E53F9B304178F6552969EC3DC2E41F32AC2AF87C99965486E5B0E3B9DAB61DCABF1D2D4F33767B046ABD48756EB49E30C12EB09E30CD72FA50EB14A2F9D23FC9843F83360751557560EC12A2EA50AC15EA26B7E6E6BC74958512894A52070081A486AFE2C7DDAC8900B744365036D99E298D7B1EB5325A91DB53ACD7D74C4F9E21B720AF01AD0FBCA2F0937A70C4BDBC1DF5E96EECFEF35F0FB1AEA61E7614FDB51FFED02F296D00E0E2517
	5B925D0B73187E73DBD67BD5EAD7559A1EB5252DB0BF1087E89468D6AB37273F3E362E4F6BDAD84367EDD513E361C9B5B1963E2562B99ED5665489A9DE5FCF2B65FADD4CF2FBB4E996D5C35BBCC77AEB229A14D661E5A769CF6B1275FFDECD06A92A7789BBE2A3A0CD0AF3B240950E5101883B1E229FE8C5BD5D36F35DBD524A73D1FFB90F3EEF92AE30B01CAFA2CD8819ED58761BF60E05F2A85B007A00E4208DED7C4CEFF6609833CAC01475B93C8E1E27BA20373B0F3453C21A0CB8ADE847BC5F311B023E767E
	DE0C73D85485825008DD05A59EFF5DDF4B575D5D4EB1672BC74C25C0B99DE8EBBB475C7116F84CE53747F03627FDB56668592C3661F87B5B634F6CDB04AF1C0DBF338B5A7819DD8AF55AD96EE38B5BF12D3B211C2773E65A39FFBEF016E338C1CB0E41D6ADB186BB34447E28DBDB5B9FF935353173D99267985C02FDB8948EA873208A4C0CE8D13B2747679D70F50D8D740FF576418BBDC7B74D9B7324CD076FCBF887A198F2D1395B58B37F578F1B28EE7792CCE21FG54BD62C21EFC5A98EB629A3F8B7F6C08DB
	D27F05957538B788A38D75B9AB6AF12D83D6E33D59E12C379A7A53FDBD739E0F8F721F59AA485FC8CD1A7F5D4776D364264F34FD8F197CDFDE34D039869DF816EA6A1CC4477D417F9A65D57A30ECB6A5995745466BF34767CB7E30B69E5FA96E9826B73A13617BBB44DEB25C9447D61D1FCB785B8DFC0A6F5F5773FBC08E5455F7F0ACB7937F1F8E65CC1D77C4AB47F7CE87374305B65CFB3EDE3E0F1471AEC64B075B121D7958677FFB7E53B95EC9BA475D48E7D09D3F55CEF48C46CA7D5A9BCB286932CE144BFD
	6D65EB7427E75D371748F793E83F5049FD43504DD3709C92275949569588E90ACA0EB6E0FAD585BC3BF603F2490D186D377374474B017F6DA10E77ED5F7C0A10F53FA7E9BC1C5EC9F513451ED5AFBCE40A6D45310C7B4D033A82CFEEF195108B488FA4FB785E9E3D09EB44939A166F56B4F1E20A5CD67941BD941266E3ECBC10D8CE182C140E71424D77124987C638GFEECE0FC9A8ED13F08F7F80A514D359C37A99E0E5B376BB9EE37F8B8AE1FA33CECA86F55F93B896F00075EF95977067A35E2D66C7BD1641F
	1D249D3321B567305E81CE1363772FEAB1AFA50BB714B98D6E30DDA81771967D6C073283E884C86E227B5FCB5AFC2F35F20DB91F6D227B22F37C4D886229B3F637E7384B3EEC7433152786927A590317974DD56718BFBC97730742EC2505626119A56469679BB58906155CA5747521F0C80368A234C882A29FB48C87A92E3EE8427A94987791209DC0BB01724E6936F87BB845EB822CF6850292BFA379FC4D4B494FF557727A5F9CFA16B1DFB32E0018E6F1FC4E9FD8C6CCE8CA04B0A94F3F0CF2D4C341A90DB6E5
	7C8F17912F32B4C958D427B935DC27856761FE8A64819AB9CF6F4C1173582629FEADFFC5F5196347F36102EFC2D5E49903349A968B12EFA574B6D1436E67079B0C63E53139764173A090BDE7BE5D423F1316F66796F7F77338342EF6C58EG73BECE67B9D9196FE3D0E531E1EE8B0F9FD23AF9ECA8107BC89614F300723A793DFF61F79CEF19DF5AAC78FB936766767A174CC28F45593BBDB13CADCCBFEF26FB7DF1AB2E51874B1892388F1D17785895FF7118D071DB1779D80231112E32B1B798460E79505B9614
	598E285B83A4DC48ADAE873281F9AEF0CC6E942A0464678395904125AA06F8CE772B2664385CE6DA9F175FB2115CA26049FFA3426EA4CF1950F7A81313D1C9477FF7CC25BA2FA76AD522A134B82A6B0335DC57A33017348BDC57BF323F39DA579D8A660C1936292EDDF5DC575997382E43F5A4BE6F85B981B9FA392E27E70C7AC099A70B613AFB59777F5E157A20EB8BF63DA5A43CB747ACC047E2C7832E8F6DA033172FEF3411FC0B07F2BED0D99FBFBF52D65DD356A35A6F8B9F335FBF5EF1BF9A9FEA4416ECFD
	B4BEB4697CA542EFB270290E8BDB390EBDD0175147F319472D086B120B9097G3900C6009600B6DE64389EB5BB04F56E75FEA55287A0168D579CE6B70515704C00311E864A83927AC15EC0B6A09750C8BF1F67B173DA76C30197EFBF1F32A4371FBF322CEFBF1F37A4766B0FDAD67B754D1644FEBD43E2746BD42FBFDFF59F78E8F8A8297BF87D3A6E389F7B8DG31D32DBF9EC7BFA17C147EF89CE9F59CC79B20EEFFBF47510F8EA10E7C83F0E681ED844A845A8134FB006B372520EE8D7D8EAA8A49AEE0228174
	EBD4B55B6379863E4717E0CC413BB2C6AB73A63BE36590DB2F724667907E09701B3C71B90471C61EC368063ACCAF778D0B683A58DA7E4070DE52FAAF3EDB2F546FFB77F48E2A1FD3566436D4EBCD1C7BE832A64EFD34DB574E351E33A67F5EFB513A7AFB6F0305495716D6383E1DBFD418584E7F2CF0351DEFA9CCEC67DFA9B45AB965FD1D0D2B6A89DF4A7FC6A11EEBB4FE3FA80645A0598B7B3DC0DD8CBB2F985E976B6EBD0EBEF3CF6720FBFF79D0F2DD7D6C507A3A7A4521443A32962D56556122443AAAADB2
	6A0A5EAB2F10B82074D2EEF17DA5FE57FC12703A219C51F9479A797DB37592377DFFE844FC42D63D3C1714337572D4635D14AB4E33DAF71F382BF3445FBFE98CBD57003F913DAE29DAE8C214E9B055A12ADEC58ECD5CE03964B4A233EA203CCBBC177C7D86BC872694B534087EFBD5CF1E07FE1174F583D58D72BBEBD5E3659A6B1C9AB45ED9B3A3F8E76DD302FE4010DB15C401FE87BFF64618BB3C85FDB0AF30E5102F6F4B8D784D4518CBB5C40A76212EC1FFCF273BEF4C57B9B8505757619E9CF3778D3BFF6F
	5367B5B5562D513FFBE030674301FEFF2291E87F2EC60C49BBA57C664BE3586716D644573198D65F9B0DDF3B4F705FB9E48DF23CDDBC03E7617E4198CE8AFC3177F2F83779D6E208E2BBC046F2C11D5F47717EDAB37226201C2A732EB4F39BC857F98FBA11379D4AB9BEAE571BE4BC994E6BE1D50CD09D9FEC625F9A76696DCEB623BF1C07B6BE6D06AC8D131F16B2CCF4B66B5FA620BD7D4EB1572C5F0B7DF007GEA829A81DA7073B1B7B9695DA724217B20E3BD6964F711F43D5D51E61E6F25658F75B2156F1F
	B6736F9819FE1E6B7E7B6678DC77AB02B1D7EDF546673ACDAB6A4FB863F35DEE1331BE640C4FF5737E4C1E1C481B9465E86CFB7F26E6E30C378F56FA503FF6BE0B79B8323F128FF20BF18D14371D705E855EAB82472378BB0CFBD8CEE6B8945026A83FE261C80C5FAD212F05B27DAD7968E57475197FAED8012789D612CDE2F76F934B463C7A41CFCEA47D8ED1B4C477D1B1943B6B5138B2FD8C57B982FCED084711F9D75077A44BB37AE6C5D9868FB4638E87B06758F1C313E2F14723E3B8FE1437E1156C5C9FAB
	E6B64E7B7C9FD0CB878820C4CB798C91GG0CAFGGD0CB818294G94G88G88GFBFBB0B620C4CB798C91GG0CAFGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGC691GGGG
**end of data**/
}
}
