package cbit.vcell.mapping.gui;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.event.*;
import java.awt.*;
import cbit.vcell.model.*;
import cbit.gui.*;
import cbit.vcell.mapping.*;
import cbit.vcell.geometry.*;
import cbit.gui.graph.*;
import cbit.vcell.graph.*;
import cbit.gui.graph.Shape;
import javax.swing.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class StructureMappingCartoonTool extends BioCartoonTool {
	//
	private StructureMappingCartoon structureMappingCartoon = null;
	//
	private boolean bLineStretch = false;
	private Point endPoint = null;
	private RubberBandEdgeShape edgeShape = null;
	
	
	private int mode = 	-1;

	private static final int LINE_TYPE_NULL = 0;
	private static final int LINE_TYPE_RESOLVED = 1;
	private static final int LINE_TYPE_DISTRIBUTED = 2;
	private static final String lineLabels[]  = {"<<?>>","<<R E S O L V E D>>","<<D I S T R I B U T E D>>"};
	private static final Color lineColors[]  = {Color.red, Color.black, Color.black};	
	private static final Cursor lineCursors[]  = {	Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR),
													Cursor.getPredefinedCursor(Cursor.HAND_CURSOR),
													Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)};

/**
 * This method was created by a SmartGuide.
 */
public StructureMappingCartoonTool () {
	super();
}


/**
 * Insert the method's description here.
 * Creation date: (9/9/2002 11:24:34 AM)
 * @return cbit.vcell.graph.GraphModel
 */
public GraphModel getGraphModel() {
	return getStructureMappingCartoon();
}


/**
 * This method was created in VisualAge.
 * @return java.lang.String
 * @param line cbit.vcell.graph.RubberBandEdgeShape
 * @param screenPoint java.awt.Point
 */
private int getLineTypeFromWorld(Feature feature, Point worldPoint) {
	try {
		Shape mouseOverShape = getStructureMappingCartoon().pickWorld(worldPoint);
		if (mouseOverShape instanceof SubvolumeLegendShape){
			SubVolume subVolume = (SubVolume)mouseOverShape.getModelObject();
			if (getStructureMappingCartoon().getGeometryContext().isResolvedAllowed(feature,subVolume)){
				return LINE_TYPE_RESOLVED;
			}else if (getStructureMappingCartoon().getGeometryContext().isDistributedAllowed(feature,subVolume)){
				return LINE_TYPE_DISTRIBUTED;
			}else{
				return LINE_TYPE_NULL;
			}
		}else{
			return LINE_TYPE_NULL;
		}
	}catch (Exception e){
		return LINE_TYPE_NULL;
	}
}


/**
 * Insert the method's description here.
 * Creation date: (5/14/2003 10:43:18 AM)
 * @return cbit.vcell.mapping.gui.StructureMappingCartoon
 */
public StructureMappingCartoon getStructureMappingCartoon() {
	return structureMappingCartoon;
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 3:56:54 PM)
 * @param shape cbit.vcell.graph.Shape
 * @param menuAction java.lang.String
 */
protected void menuAction(Shape shape, String menuAction) {
	//
	if(shape == null){return;}
	//	
	if (menuAction.equals(DELETE_MENU_ACTION)){
		if (shape instanceof FeatureMappingShape){
			try {
				FeatureMapping fm = (FeatureMapping)((FeatureMappingShape)shape).getModelObject();
				getStructureMappingCartoon().getGeometryContext().assignFeature(fm.getFeature(),null);
				getStructureMappingCartoon().refreshAll();
			}catch (IllegalMappingException e){
				cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
			}catch (java.beans.PropertyVetoException e){
				cbit.vcell.client.PopupGenerator.showErrorDialog(e.getMessage());
			}
		}
						
	}else{
		//
		// default action is to ignore
		//
		System.out.println("unsupported menu action '"+menuAction+"' on shape '"+shape+"'");
	}

}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseClicked(java.awt.event.MouseEvent event) {
	// do nothing on compartmental
	if (getStructureMappingCartoon() == null ||
		getStructureMappingCartoon().getGeometryContext() == null ||
		getStructureMappingCartoon().getGeometryContext().getGeometry() == null ||
		getStructureMappingCartoon().getGeometryContext().getGeometry().getDimension() == 0)
	{
			return;
	}
	// process clicks only in select mode
	switch (mode) {
		case SELECT_MODE: {
			selectEventFromWorld(screenToWorld(event.getPoint()));
			break;		
		}	
		default:
			break;
	}	
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseDragged(java.awt.event.MouseEvent event) {
	//
	if(getStructureMappingCartoon() == null){
		return;
	}
	//
	try {
		switch (mode){
			case LINE_MODE: {
				if (getStructureMappingCartoon().getGeometryContext().getGeometry().getDimension()==0) return;
				
				java.awt.Point worldPoint = screenToWorld(event.getX(),event.getY());
				if (bLineStretch){
					//
					// repaint last location with XOR
					//
					Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
					g.setXORMode(Color.white);
					edgeShape.setEnd(endPoint);
					edgeShape.paint_NoAntiAlias(g,0,0);
					//
					// set label and color for line depending on attachment area on ReactionStepShape
					//
					Feature feature = (Feature)edgeShape.getStartShape().getModelObject();
					int lineType = getLineTypeFromWorld(feature,worldPoint);
					edgeShape.setLabel(lineLabels[lineType]);
					edgeShape.forgroundColor = lineColors[lineType];
					getGraphPane().setCursor(lineCursors[lineType]);
					//
					// move line and paint with XOR
					//
					endPoint = worldPoint;
					edgeShape.setEnd(endPoint);
					edgeShape.paint_NoAntiAlias(g,0,0);
				}else{
					if (edgeShape != null){
						return;
					}	
					Shape startShape = getStructureMappingCartoon().pickWorld(worldPoint);
					if (startShape instanceof FeatureShape){
						FeatureShape featureShape = (FeatureShape)startShape;
						bLineStretch = true;
						endPoint = worldPoint;
				 		edgeShape = new RubberBandEdgeShape(featureShape,null,getStructureMappingCartoon());
						edgeShape.setEnd(endPoint);
						Graphics2D g = (Graphics2D)getGraphPane().getGraphics();
						g.setXORMode(Color.white);
						edgeShape.paint(g,0,0);
					}	
				}		
				break;
			}
			default: {
				break;
			}
		}		
	}catch (Exception e){
		System.out.println("CartoonCanvasTool.mouseDragged: uncaught exception");
		e.printStackTrace(System.out);
	}			
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mousePressed(java.awt.event.MouseEvent event) {
}


/**
 * This method was created by a SmartGuide.
 * @param event java.awt.event.MouseEvent
 */
public void mouseReleased(java.awt.event.MouseEvent event) {
	//
	if(getStructureMappingCartoon() == null){
		return;
	}
	//
	try {
		//Picked shape
		Shape pickedShape =  getStructureMappingCartoon().pickEdgeWorld(screenToWorld(event.getPoint()));
		//
		// if right mouse button, then do nothing
		//
		if (event.isPopupTrigger() && mode == SELECT_MODE){
			Shape selectedShape = getStructureMappingCartoon().getSelectedShape();
			if (selectedShape != null) {
				popupMenu(selectedShape,event.getX(),event.getY());
			}
		}
		//
		// else, line etc...
		//
		getGraphPane().setCursor(Cursor.getDefaultCursor());
		switch (mode){
			case LINE_MODE: {

				if (getStructureMappingCartoon() == null ||
					getStructureMappingCartoon().getGeometryContext() == null ||
					getStructureMappingCartoon().getGeometryContext().getGeometry() == null ||
					getStructureMappingCartoon().getGeometryContext().getGeometry().getDimension() == 0)
				{
						return;
				}

				getGraphPane().setCursor(Cursor.getDefaultCursor());
				java.awt.Point worldPoint = screenToWorld(event.getPoint());
				Shape shape = getStructureMappingCartoon().pickWorld(worldPoint);
				if (bLineStretch){
					bLineStretch = false;
					//
					// set label and color for line depending on attachment area on ReactionStepShape
					//
					Feature feature = (Feature)edgeShape.getStartShape().getModelObject();

					//
					// remove temporary edge
					//
					getStructureMappingCartoon().removeShape(edgeShape);
					edgeShape = null;
					
					if (shape instanceof SubvolumeLegendShape){
						cbit.vcell.geometry.SubVolume subVolume = (cbit.vcell.geometry.SubVolume)shape.getModelObject();
						getStructureMappingCartoon().getGeometryContext().assignFeature(feature,subVolume);
						getStructureMappingCartoon().refreshAll();
						setMode(SELECT_MODE);
					}else{
						getGraphPane().repaint();
					}
				}
				break;
			}

		}
	}catch (IllegalMappingException e){
		cbit.vcell.client.PopupGenerator.showErrorDialog("mapping error\n"+e.getMessage());
		setMode(SELECT_MODE);
	}catch (Exception e){
		System.out.println("CartoonTool.mouseReleased: uncaught exception");
		e.printStackTrace(System.out);
	}			
		
}


/**
 * This method was created by a SmartGuide.
 * @param x int
 * @param y int
 */
private void selectEventFromWorld(Point worldPoint) {
//	Shape selectedShape = cartoon.getSelectedShape();
	getStructureMappingCartoon().clearSelection();
	Shape pickedShape = getStructureMappingCartoon().pickEdgeWorld(worldPoint);
			
	if (pickedShape==null) return;
//	if (pickedShape!=selectedShape){
		getStructureMappingCartoon().select(pickedShape);
//	}	
}


/**
 * Insert the method's description here.
 * Creation date: (5/14/2003 10:43:18 AM)
 * @param newStructureMappingCartoon cbit.vcell.mapping.gui.StructureMappingCartoon
 */
public void setStructureMappingCartoon(StructureMappingCartoon newStructureMappingCartoon) {
	structureMappingCartoon = newStructureMappingCartoon;
}


/**
 * Insert the method's description here.
 * Creation date: (9/17/2002 4:07:05 PM)
 * @return boolean
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuAction(cbit.gui.graph.Shape shape, java.lang.String menuAction) {
	if (shape instanceof FeatureMappingShape){
		if (menuAction.equals(DELETE_MENU_ACTION)){
			return true;
		}
	}
	return false;
}


/**
 * Insert the method's description here.
 * Creation date: (5/9/2003 9:11:39 AM)
 * @return boolean
 * @param actionString java.lang.String
 */
protected boolean shapeHasMenuActionEnabled(cbit.gui.graph.Shape shape, java.lang.String menuAction) {
	return true;
}


/**
 * updateMode method comment.
 */
public void updateMode(int newMode) {
	
	if (newMode==mode){
		return;
	}		

	bLineStretch = false;
	edgeShape = null;
	endPoint = null;

	if (getStructureMappingCartoon() != null){
		getStructureMappingCartoon().clearSelection();
	}
	this.mode = newMode;
	if(getGraphPane() != null){
		switch (mode){
			case LINE_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
				break;
			}
			case SELECT_MODE:{
				getGraphPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				break;
			}
			default:{
				System.out.println("ERROR: mode " + newMode + "not defined");
				break;
			}
		}
	}	
	return;
}
}