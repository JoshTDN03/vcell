package cbit.vcell.constraints.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.gui.graph.CartoonTool;
import cbit.gui.graph.GraphPane;
import java.util.*;
import javax.swing.*;
import javax.swing.plaf.basic.*;

import org.vcell.util.gui.JDesktopPaneEnhanced;

import java.awt.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class ConstraintsGraphModelPanel extends JPanel implements java.awt.event.ActionListener, java.beans.PropertyChangeListener {
	private JPanel ivjFeatureSizePanel = null;
	private cbit.gui.graph.GraphPane ivjGraphPane = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private boolean ivjConnPtoP1Aligning = false;
	private JPanel ivjJPanel1 = null;
	private JToolBar ivjJToolBar1 = null;
	private ButtonModel ivjSelection = null;
	private org.vcell.util.gui.JToolBarToggleButton ivjSelectButton = null;
	private org.vcell.util.gui.ButtonGroupCivilized ivjButtonGroupCivilized = null;
	private JScrollPane ivjJScrollPane1 = null;
	private JLabel ivjJLabel3 = null;
	private JButton ivjAnnealLayoutButton = null;
	private JButton ivjCircleLayoutButton = null;
	private JLabel ivjJLabel4 = null;
	private JButton ivjLevellerLayoutButton = null;
	private JButton ivjRandomLayoutButton = null;
	private JButton ivjRelaxerLayoutButton = null;
	private JButton ivjZoomInButton = null;
	private JButton ivjZoomOutButton = null;
	private JButton ivjGlgLayoutJButton = null;
	private javax.swing.JDesktopPane fieldDesktopPane = new JDesktopPaneEnhanced();
	private ConstraintsGraphModel ivjConstraintGraphModel = null;
	private ConstraintGraphCartoonTool ivjConstraintsGraphModelTool1 = null;
	private cbit.vcell.constraints.ConstraintSolver fieldConstraintSolver = null;
	private boolean ivjConnPtoP3Aligning = false;
	private boolean ivjConnPtoP4Aligning = false;
	private cbit.vcell.constraints.ConstraintContainerImpl ivjconstraintContainerImpl = null;
	private cbit.vcell.constraints.ConstraintSolver ivjconstraintSolver1 = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public ConstraintsGraphModelPanel() {
	super();
	initialize();
}


/**
 * CartoonPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public ConstraintsGraphModelPanel(java.awt.LayoutManager layout) {
	super(layout);
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getZoomInButton()) 
		connEtoC1(e);
	if (e.getSource() == getZoomOutButton()) 
		connEtoC2(e);
	if (e.getSource() == getRelaxerLayoutButton()) 
		connEtoM12(e);
	if (e.getSource() == getRandomLayoutButton()) 
		connEtoM1(e);
	if (e.getSource() == getCircleLayoutButton()) 
		connEtoM7(e);
	if (e.getSource() == getGlgLayoutJButton()) 
		connEtoM9(e);
	if (e.getSource() == getLevellerLayoutButton()) 
		connEtoM13(e);
	if (e.getSource() == getAnnealLayoutButton()) 
		connEtoM2(e);
	// user code begin {2}
	// user code end
}

/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}


/**
 * connEtoC1:  (ZoomInButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomInButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomInButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC2:  (ZoomOutButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonEditorPanel.zoomOutButton_ActionPerformed()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.zoomOutButton_ActionPerformed();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM1:  (Button1.action.actionPerformed(java.awt.event.ActionEvent) --> CanvasTool.randomize()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layout(this.getRandomizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM10:  (ReactionCartoonEditorPanel.initialize() --> GraphPane.graphModel)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10() {
	try {
		// user code begin {1}
		// user code end
		getGraphPane().setGraphModel(getConstraintGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM12:  (RelaxerButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layout(this.getRelaxer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM13:  (LevellerButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layout(this.getLeveller());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM16:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.graphPane)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().setGraphPane(getGraphPane());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM18:  (ReactionCartoonEditorPanel.initialize() --> ReactionCartoonTool1.buttonGroup)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18() {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().setButtonGroup(getButtonGroupCivilized());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM2:  (AnnealButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layout(this.getAnnealer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM3:  (constraintSolver1.this --> constraintContainerImpl.this)
 * @param value cbit.vcell.constraints.ConstraintSolver
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(cbit.vcell.constraints.ConstraintSolver value) {
	try {
		// user code begin {1}
		// user code end
		if ((getconstraintSolver1() != null)) {
			setconstraintContainerImpl(getconstraintSolver1().getConstraintContainerImpl());
		}
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM4:  (constraintSolver1.this --> ConstraintsGraphModelTool1.constraintSolver)
 * @param value cbit.vcell.constraints.ConstraintSolver
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM4(cbit.vcell.constraints.ConstraintSolver value) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().setConstraintSolver(getconstraintSolver1());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM5:  (ReactionCartoonEditorPanel.initialize() --> ButtonGroup1.add(Ljavax.swing.AbstractButton;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5() {
	try {
		// user code begin {1}
		// user code end
		getButtonGroupCivilized().add(getSelectButton());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM7:  (CircleButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layout(Ljava.lang.String;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layout(this.getCircularizer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM8:  (SimpleGraphModelPanel.initialize() --> SimpleGraphModelTool1.setSimpleGraphModel(Lcbit.vcell.constraints.gui.SimpleGraphModel;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8() {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().setConstraintsGraphModel(getConstraintGraphModel());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM9:  (GlgLayoutJButton.action.actionPerformed(java.awt.event.ActionEvent) --> ReactionCartoonTool.layoutGlg()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getConstraintsGraphModelTool1().layoutGlg();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP1SetSource:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			if ((getSelection() != null)) {
				getButtonGroupCivilized().setSelection(getSelection());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP1SetTarget:  (ButtonGroup1.selection <--> selection1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			setSelection(getButtonGroupCivilized().getSelection());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP2SetTarget:  (Selection.actionCommand <--> ReactionCartoonTool1.modeString)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if ((getSelection() != null)) {
			getConstraintsGraphModelTool1().setModeString(getSelection().getActionCommand());
		}
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP3SetSource:  (ConstraintsGraphModelPanel.constraintSolver <--> constraintSolver1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			if ((getconstraintSolver1() != null)) {
				this.setConstraintSolver(getconstraintSolver1());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP3SetTarget:  (ConstraintsGraphModelPanel.constraintSolver <--> constraintSolver1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			setconstraintSolver1(this.getConstraintSolver());
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP4SetSource:  (constraintContainerImpl.this <--> ConstraintGraphModel.constraintContainerImpl)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP4SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP4Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP4Aligning = true;
			setconstraintContainerImpl(getConstraintGraphModel().getConstraintContainerImpl());
			// user code begin {2}
			// user code end
			ivjConnPtoP4Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP4Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP4SetTarget:  (constraintContainerImpl.this <--> ConstraintGraphModel.constraintContainerImpl)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP4SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP4Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP4Aligning = true;
			if ((getconstraintContainerImpl() != null)) {
				getConstraintGraphModel().setConstraintContainerImpl(getconstraintContainerImpl());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP4Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP4Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * The firePropertyChange method was generated to support the propertyChange field.
 * @param propertyName java.lang.String
 * @param oldValue java.lang.Object
 * @param newValue java.lang.Object
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}


/**
 * Comment
 */
private java.lang.String getAnnealer() {
	return CartoonTool.ANNEALER;
}


/**
 * Return the AnnealLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getAnnealLayoutButton() {
	if (ivjAnnealLayoutButton == null) {
		try {
			ivjAnnealLayoutButton = new javax.swing.JButton();
			ivjAnnealLayoutButton.setName("AnnealLayoutButton");
			ivjAnnealLayoutButton.setText("anl");
			ivjAnnealLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setActionCommand("AnnealLayout");
			ivjAnnealLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjAnnealLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjAnnealLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAnnealLayoutButton;
}

/**
 * Return the ButtonGroup1 property value.
 * @return cbit.gui.ButtonGroupCivilized
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.util.gui.ButtonGroupCivilized getButtonGroupCivilized() {
	if (ivjButtonGroupCivilized == null) {
		try {
			ivjButtonGroupCivilized = new org.vcell.util.gui.ButtonGroupCivilized();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonGroupCivilized;
}

/**
 * Return the CircleLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCircleLayoutButton() {
	if (ivjCircleLayoutButton == null) {
		try {
			ivjCircleLayoutButton = new javax.swing.JButton();
			ivjCircleLayoutButton.setName("CircleLayoutButton");
			ivjCircleLayoutButton.setText("crc");
			ivjCircleLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setActionCommand("CircleLayout");
			ivjCircleLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjCircleLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjCircleLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCircleLayoutButton;
}

/**
 * Comment
 */
private java.lang.String getCircularizer() {
	return CartoonTool.CIRCULARIZER;
}


/**
 * Return the constraintContainerImpl property value.
 * @return cbit.vcell.constraints.ConstraintContainerImpl
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.constraints.ConstraintContainerImpl getconstraintContainerImpl() {
	// user code begin {1}
	// user code end
	return ivjconstraintContainerImpl;
}


/**
 * Return the SimpleGraphModel property value.
 * @return cbit.vcell.constraints.gui.ConstraintsGraphModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private ConstraintsGraphModel getConstraintGraphModel() {
	if (ivjConstraintGraphModel == null) {
		try {
			ivjConstraintGraphModel = new cbit.vcell.constraints.gui.ConstraintsGraphModel();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConstraintGraphModel;
}

/**
 * Return the ConstraintsGraphModelTool1 property value.
 * @return cbit.vcell.constraints.gui.ConstraintGraphCartoonTool
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private ConstraintGraphCartoonTool getConstraintsGraphModelTool1() {
	if (ivjConstraintsGraphModelTool1 == null) {
		try {
			ivjConstraintsGraphModelTool1 = new cbit.vcell.constraints.gui.ConstraintGraphCartoonTool();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjConstraintsGraphModelTool1;
}


/**
 * Gets the constraintSolver property (cbit.vcell.constraints.ConstraintSolver) value.
 * @return The constraintSolver property value.
 * @see #setConstraintSolver
 */
public cbit.vcell.constraints.ConstraintSolver getConstraintSolver() {
	return fieldConstraintSolver;
}


/**
 * Return the constraintSolver1 property value.
 * @return cbit.vcell.constraints.ConstraintSolver
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.constraints.ConstraintSolver getconstraintSolver1() {
	// user code begin {1}
	// user code end
	return ivjconstraintSolver1;
}


/**
 * Comment
 */
private java.lang.String getCycleizer() {
	return CartoonTool.CYCLEIZER;
}


/**
 * Gets the desktopPane property (javax.swing.JDesktopPane) value.
 * @return The desktopPane property value.
 * @see #setDesktopPane
 */
public javax.swing.JDesktopPane getDesktopPane() {
	return fieldDesktopPane;
}


/**
 * Return the FeatureSizePanel property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getFeatureSizePanel() {
	if (ivjFeatureSizePanel == null) {
		try {
			ivjFeatureSizePanel = new javax.swing.JPanel();
			ivjFeatureSizePanel.setName("FeatureSizePanel");
			ivjFeatureSizePanel.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjFeatureSizePanel.setLayout(new java.awt.BorderLayout());
			ivjFeatureSizePanel.setMinimumSize(new java.awt.Dimension(22, 396));
			getFeatureSizePanel().add(getJPanel1(), "South");
			getFeatureSizePanel().add(getJScrollPane1(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFeatureSizePanel;
}

/**
 * Comment
 */
private java.lang.String getForceDirect() {
	return CartoonTool.FORCEDIRECT;
}


/**
 * Return the GlgLayoutJButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getGlgLayoutJButton() {
	if (ivjGlgLayoutJButton == null) {
		try {
			ivjGlgLayoutJButton = new javax.swing.JButton();
			ivjGlgLayoutJButton.setName("GlgLayoutJButton");
			ivjGlgLayoutJButton.setText("glg");
			ivjGlgLayoutJButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjGlgLayoutJButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjGlgLayoutJButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGlgLayoutJButton;
}

/**
 * Return the GraphPane property value.
 * @return cbit.vcell.graph.GraphPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.graph.GraphPane getGraphPane() {
	if (ivjGraphPane == null) {
		try {
			ivjGraphPane = new cbit.gui.graph.GraphPane();
			ivjGraphPane.setName("GraphPane");
			ivjGraphPane.setBounds(0, 0, 372, 364);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGraphPane;
}

/**
 * Return the JLabel3 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel3() {
	if (ivjJLabel3 == null) {
		try {
			ivjJLabel3 = new javax.swing.JLabel();
			ivjJLabel3.setName("JLabel3");
			ivjJLabel3.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel3;
}


/**
 * Return the JLabel4 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getJLabel4() {
	if (ivjJLabel4 == null) {
		try {
			ivjJLabel4 = new javax.swing.JLabel();
			ivjJLabel4.setName("JLabel4");
			ivjJLabel4.setText(" ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJLabel4;
}


/**
 * Return the JPanel1 property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanel1() {
	if (ivjJPanel1 == null) {
		try {
			ivjJPanel1 = new javax.swing.JPanel();
			ivjJPanel1.setName("JPanel1");
			ivjJPanel1.setLayout(new java.awt.GridBagLayout());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanel1;
}

/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setPreferredSize(new java.awt.Dimension(22, 396));
			ivjJScrollPane1.setMinimumSize(new java.awt.Dimension(22, 396));
			getJScrollPane1().setViewportView(getGraphPane());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}

/**
 * Return the JToolBar1 property value.
 * @return javax.swing.JToolBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JToolBar getJToolBar1() {
	if (ivjJToolBar1 == null) {
		try {
			ivjJToolBar1 = new javax.swing.JToolBar();
			ivjJToolBar1.setName("JToolBar1");
			ivjJToolBar1.setFloatable(false);
			ivjJToolBar1.setBorder(new javax.swing.border.EtchedBorder());
			ivjJToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
			getJToolBar1().add(getSelectButton(), getSelectButton().getName());
			getJToolBar1().add(getJLabel3(), getJLabel3().getName());
			getJToolBar1().add(getZoomInButton(), getZoomInButton().getName());
			getJToolBar1().add(getZoomOutButton(), getZoomOutButton().getName());
			getJToolBar1().add(getJLabel4(), getJLabel4().getName());
			getJToolBar1().add(getRandomLayoutButton(), getRandomLayoutButton().getName());
			getJToolBar1().add(getCircleLayoutButton(), getCircleLayoutButton().getName());
			getJToolBar1().add(getAnnealLayoutButton(), getAnnealLayoutButton().getName());
			getJToolBar1().add(getLevellerLayoutButton(), getLevellerLayoutButton().getName());
			getJToolBar1().add(getRelaxerLayoutButton(), getRelaxerLayoutButton().getName());
			getJToolBar1().add(getGlgLayoutJButton(), getGlgLayoutJButton().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJToolBar1;
}

/**
 * Comment
 */
private java.lang.String getLeveller() {
	return CartoonTool.LEVELLER;
}


/**
 * Return the LevellerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getLevellerLayoutButton() {
	if (ivjLevellerLayoutButton == null) {
		try {
			ivjLevellerLayoutButton = new javax.swing.JButton();
			ivjLevellerLayoutButton.setName("LevellerLayoutButton");
			ivjLevellerLayoutButton.setText("lev");
			ivjLevellerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setActionCommand("LevellerLayout");
			ivjLevellerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjLevellerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjLevellerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLevellerLayoutButton;
}

/**
 * Accessor for the propertyChange field.
 * @return java.beans.PropertyChangeSupport
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}


/**
 * Comment
 */
private java.lang.String getRandomizer() {
	return CartoonTool.RANDOMIZER;
}


/**
 * Return the RandomLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRandomLayoutButton() {
	if (ivjRandomLayoutButton == null) {
		try {
			ivjRandomLayoutButton = new javax.swing.JButton();
			ivjRandomLayoutButton.setName("RandomLayoutButton");
			ivjRandomLayoutButton.setText("rnd");
			ivjRandomLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setActionCommand("RandomLayout");
			ivjRandomLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRandomLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRandomLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRandomLayoutButton;
}

/**
 * Comment
 */
private java.lang.String getRelaxer() {
	return CartoonTool.RELAXER;
}


/**
 * Return the RelaxerLayoutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getRelaxerLayoutButton() {
	if (ivjRelaxerLayoutButton == null) {
		try {
			ivjRelaxerLayoutButton = new javax.swing.JButton();
			ivjRelaxerLayoutButton.setName("RelaxerLayoutButton");
			ivjRelaxerLayoutButton.setText("rlx");
			ivjRelaxerLayoutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setActionCommand("RelaxerLayout");
			ivjRelaxerLayoutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setFont(new java.awt.Font("Arial", 1, 10));
			ivjRelaxerLayoutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjRelaxerLayoutButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRelaxerLayoutButton;
}

/**
 * Return the JToolBarToggleButton2 property value.
 * @return cbit.gui.JToolBarToggleButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.util.gui.JToolBarToggleButton getSelectButton() {
	if (ivjSelectButton == null) {
		try {
			ivjSelectButton = new org.vcell.util.gui.JToolBarToggleButton();
			ivjSelectButton.setName("SelectButton");
			ivjSelectButton.setText("");
			ivjSelectButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setActionCommand("select");
			ivjSelectButton.setSelected(true);
			ivjSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select.gif")));
			ivjSelectButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjSelectButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSelectButton;
}

/**
 * Return the selection1 property value.
 * @return javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.ButtonModel getSelection() {
	// user code begin {1}
	// user code end
	return ivjSelection;
}

/**
 * Comment
 */
private java.lang.String getStabilizer() {
	return CartoonTool.STABILIZER;
}


/**
 * Return the ZoomInButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomInButton() {
	if (ivjZoomInButton == null) {
		try {
			ivjZoomInButton = new javax.swing.JButton();
			ivjZoomInButton.setName("ZoomInButton");
			ivjZoomInButton.setText("");
			ivjZoomInButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setActionCommand("ZoomIn");
			ivjZoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomin.gif")));
			ivjZoomInButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMinimumSize(new java.awt.Dimension(28, 28));
			ivjZoomInButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomInButton;
}

/**
 * Return the ZoomOutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getZoomOutButton() {
	if (ivjZoomOutButton == null) {
		try {
			ivjZoomOutButton = new javax.swing.JButton();
			ivjZoomOutButton.setName("ZoomOutButton");
			ivjZoomOutButton.setText("");
			ivjZoomOutButton.setMaximumSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setActionCommand("ZoomOut");
			ivjZoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/zoomout.gif")));
			ivjZoomOutButton.setPreferredSize(new java.awt.Dimension(28, 28));
			ivjZoomOutButton.setMinimumSize(new java.awt.Dimension(28, 28));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjZoomOutButton;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION --------- in CartoonPanel");
	exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getButtonGroupCivilized().addPropertyChangeListener(this);
	getZoomInButton().addActionListener(this);
	getZoomOutButton().addActionListener(this);
	getRelaxerLayoutButton().addActionListener(this);
	getRandomLayoutButton().addActionListener(this);
	getCircleLayoutButton().addActionListener(this);
	getGlgLayoutJButton().addActionListener(this);
	getLevellerLayoutButton().addActionListener(this);
	getAnnealLayoutButton().addActionListener(this);
	this.addPropertyChangeListener(this);
	getConstraintGraphModel().addPropertyChangeListener(this);
	connPtoP1SetTarget();
	connPtoP2SetTarget();
	connPtoP3SetTarget();
	connPtoP4SetTarget();
}

/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("CartoonPanel");
		setPreferredSize(new java.awt.Dimension(54, 425));
		setLayout(new java.awt.BorderLayout());
		setSize(472, 422);
		setMinimumSize(new java.awt.Dimension(54, 425));
		add(getFeatureSizePanel(), "Center");
		add(getJToolBar1(), "West");
		initConnections();
		connEtoM5();
		connEtoM10();
		connEtoM16();
		connEtoM18();
		connEtoM8();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == getButtonGroupCivilized() && (evt.getPropertyName().equals("selection"))) 
		connPtoP1SetTarget();
	if (evt.getSource() == this && (evt.getPropertyName().equals("constraintSolver"))) 
		connPtoP3SetTarget();
	if (evt.getSource() == getConstraintGraphModel() && (evt.getPropertyName().equals("constraintContainerImpl"))) 
		connPtoP4SetSource();
	// user code begin {2}
	// user code end
}

/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 * @param listener java.beans.PropertyChangeListener
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}


/**
 * Set the constraintContainerImpl to a new value.
 * @param newValue cbit.vcell.constraints.ConstraintContainerImpl
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setconstraintContainerImpl(cbit.vcell.constraints.ConstraintContainerImpl newValue) {
	if (ivjconstraintContainerImpl != newValue) {
		try {
			ivjconstraintContainerImpl = newValue;
			connPtoP4SetTarget();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Sets the constraintSolver property (cbit.vcell.constraints.ConstraintSolver) value.
 * @param constraintSolver The new value for the property.
 * @see #getConstraintSolver
 */
public void setConstraintSolver(cbit.vcell.constraints.ConstraintSolver constraintSolver) {
	cbit.vcell.constraints.ConstraintSolver oldValue = fieldConstraintSolver;
	fieldConstraintSolver = constraintSolver;
	firePropertyChange("constraintSolver", oldValue, constraintSolver);
}


/**
 * Set the constraintSolver1 to a new value.
 * @param newValue cbit.vcell.constraints.ConstraintSolver
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setconstraintSolver1(cbit.vcell.constraints.ConstraintSolver newValue) {
	if (ivjconstraintSolver1 != newValue) {
		try {
			cbit.vcell.constraints.ConstraintSolver oldValue = getconstraintSolver1();
			ivjconstraintSolver1 = newValue;
			connPtoP3SetSource();
			connEtoM3(ivjconstraintSolver1);
			connEtoM4(ivjconstraintSolver1);
			firePropertyChange("constraintSolver", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Set the selection1 to a new value.
 * @param newValue javax.swing.ButtonModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setSelection(javax.swing.ButtonModel newValue) {
	if (ivjSelection != newValue) {
		try {
			ivjSelection = newValue;
			connPtoP1SetSource();
			connPtoP2SetTarget();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Comment
 */
private void zoomInButton_ActionPerformed() {
	if (getConstraintGraphModel()!=null){
		switch (getConstraintGraphModel().getZoomPercent()){
			case 195: {
				// already at top, do nothing
				break;
			}
			case 156: {
				getConstraintGraphModel().setZoomPercent(195);
				break;
			}
			case 125: {
				getConstraintGraphModel().setZoomPercent(156);
				break;
			}
			case 100: {
				getConstraintGraphModel().setZoomPercent(125);
				break;
			}
			case 80: {
				getConstraintGraphModel().setZoomPercent(100);
				break;
			}
			case 64: {
				getConstraintGraphModel().setZoomPercent(80);
				break;
			}
			case 50: {
				getConstraintGraphModel().setZoomPercent(64);
				break;
			}
			case 40: {
				getConstraintGraphModel().setZoomPercent(50);
				break;
			}
			case 30: {
				getConstraintGraphModel().setZoomPercent(40);
				break;
			}
			case 20: {
				getConstraintGraphModel().setZoomPercent(30);
				break;
			}
			case 10: {
				getConstraintGraphModel().setZoomPercent(20);
				break;
			}
			default: {
				getConstraintGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}


/**
 * Comment
 */
private void zoomOutButton_ActionPerformed() {
	if (getConstraintGraphModel()!=null){
		switch (getConstraintGraphModel().getZoomPercent()){
			case 195: {
				getConstraintGraphModel().setZoomPercent(156);
				break;
			}
			case 156: {
				getConstraintGraphModel().setZoomPercent(125);
				break;
			}
			case 125: {
				getConstraintGraphModel().setZoomPercent(100);
				break;
			}
			case 100: {
				getConstraintGraphModel().setZoomPercent(80);
				break;
			}
			case 80: {
				getConstraintGraphModel().setZoomPercent(64);
				break;
			}
			case 64: {
				getConstraintGraphModel().setZoomPercent(50);
				break;
			}
			case 50: {
				getConstraintGraphModel().setZoomPercent(40);
				break;
			}
			case 40: {
				getConstraintGraphModel().setZoomPercent(30);
				break;
			}
			case 30: {
				getConstraintGraphModel().setZoomPercent(20);
				break;
			}
			case 20: {
				getConstraintGraphModel().setZoomPercent(10);
				break;
			}
			case 10: {
				// can't zoom out any further
				break;
			}
			default: {
				getConstraintGraphModel().setZoomPercent(100);
				break;
			}
		}
	}
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88GDCFBB0B6GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E15DFD8BD8D45735B0E9B03189C9C844C88CC9091A447CA53924712624250DCDCDAFE96DADA5A657B424655E722526352DED397DE84AED8F43C3462022E2C3DBD4FCC50808002084D1F9BF9495919FD112B0B0879898E6461903A0225E3577BEEB1FB3E74EB0C07FFC5F7D6A67621C3D76DE4F3D76736CF3C6485E961A16EC48960464B4C17EF7A8D990F28284E1CF25F892F195FBE20C026A5FF6008D427C
	5CD438B6C35E68D7E20CD9C27DF08624BBA16DF8B24678BE5CEF92DA06B37C60460B1C38DB0270704B43FF19D84E4B45A8E7B5CDAF9C4B046BBA00AE4011EB589EA2FF71D80E0C771771884986C1884AA7E55E9C4B15F12B20CC86605AG4C792C7CB8DC1982B3AAAB64F21D77AF94923E6BB42CA5FCD4BC91E2E5DA2100DD7304F713979690D92957B3E51A8AC8BBG0871A9C27D3543F02DEA9B6CBB5A53ED110A2E7608D6EBD10F5D66121CA60BCDF295758DDBAAAB6B94C413536468BFE9B70B56B613CD348A
	3BBEA47CDB2FE7D0FE023092F807D35C9FFB084CFE387783887E90715B7B88BE816EB3774698F76DC5BB0F6C29126D38F87D2B423252215475DE6C2C5A4B6CB36FD56C0C9DFC4B70D7DAA7E925447721103784E0B9C092C0EEE10C318A606FB496B2CBBE04EBCD37D4E79F9A325BEA9C0EDA2B59C94D027B4ACA4811F16DE20F5DE99684D65FEB2E976A68B391B03A1CA953B11FACBC00F59F567E0C907B5C030655BABE09DDF85D50D148FCE1ADD4FC42E41F71AABB2050BDB65DE5DF905432C77F653514B49D59
	C1A12F25044AFC9629E4A795123A3EE5A6F53D8C6E899D29CF063F0F622B77A9F896274994CF527D10973F8FE36362BA5425B5F51E10D5B2C7578F41AF85983A0A188E23C5DADDDE68A73C9794B119C738AEF1941F3FDF41B3DD7650B8A569B0488BAE09B13278DAD7C65A2D7F0198E3A8C084C0B440AA004C3298E3DE99465839127D130C31B613D32A9D36D84D22D3E0346BCAC9C7A40EC223EB0126E732750867CDCE0B295BAA3A84394C7B2544875DEEF439B476FBC0C613E8931DA649E23781F75310A809CE
	97AB333BF483A96394E9EE07E5C88481C38E81796EAB5DC4624864124EB94CA6C9D4CA307C72D2D2A7D7CD6701A3B000FB6617436534CE417E0BG7D5C8F61145F8951895DC5E5E52B5DBEB86C68A0168891E5444F7D346F98077B20B274712103841784696CF2647333520DAABE75169E223E49F98D5B588CB32917FCA8DF8D5085B08A908A3098A02E9CE369D797B1166A57BEAD943EB6DBB716B29EF9ADA575A00B215C035AB6B51B4AA27A56C31E99409FE0814092007803B8BE2CB6BBB4FC2BE53D08CE080B
	ABF7EF0721F23A2BDC3FFD6AC13E2AAC137D01076CB439ED2FD56156EB4A3C2762B1D959A92AFBD6FF0F9FA23110FA885A83C075A12C439D8772D81B28B539C4EC85271D904022D929D1267F0B7D23F05D2C521934270F810E919EGCDF23D8D826C84388CF08860930083GE4EC3BG50A230717B8440C7G3B81E683B4G1483DC8118817099G19E81C66BEFC1B6AF091747783D888908D10C86C2A08B1B683B8G028196832CG487AA846D8815085B093A09CE0B900D099E34C87E883988588850882D88510
	F398FC84508F9088908190F798E3E8DFDFDC32E7FC9A656BDA8DFE3317BA5AAE7BE837CE5EFE79FAC07647A159CF07E5BC7AFB1D6C33A65927A7D47ED2733BA05753E539AEBE732253206A7E4AA4E3ED060F7C59D3085B7FCBA04FA7E9DDEF526425294AF8EBF7EA5883C0663C7BF472B0EE364975CD5A65DE01458746937689A5D4A796B385820B07A39AFEA426C81FC15A7D9601450D1ECE6A38AC1F24CF8E79485FBFC9BE7F57007505B9E5444F62D551A6550B8E51E6069B171C372D0C5413BC7E775AB94DEE
	0AF740FC218E86E897476FADA375E412A42725FBD8924F0A12E43175A9798728AC57F037C319EA202C4AB292DF769118AF7072474A48D88B6BG1BC8BBE5CEA267575031DE340AC320F41DFD58A6B1FCD3B9D99F8D0A576439460972F4014C952C43E45E42569C61A692AF8E27E5883AFAB27591AED6513962759C150FB2GC756CE05F02D2E4231FBE4A70E5D3B461E9296FF66B0684DC9039F3F4F90DAA54FC92B14311B69D4F5D0DF77DABA671071AE26EB0B01142D83A56DE4A285B30F94DAF693D9C08A3543
	12E437B5B96D430EBA4BD50B55B2A61AD97EBD7DC45F33400C3ACFE0EDF513103067EF041F5EF22A43EE3716E03967F7E53B15D30A317C174EEDE075A3671F35DB2F0A4E92AE67E86B7BEE7940C9022B68EC99F2D865B17A4795F4EE8E7ED981A09C41B17A1B87C9BE4E336441394EEED5ECE9BEC26A6B4766EC154FF30E307AA27791B4FF0D08790110DE284AE7744F08EAFA6128B67FC7EE794DC7357C53FBB1BFG7296F864FF1967AF023C252AFCE667178FE511B6A1DE9996E1FACDA624A7F85CFE6550C6CD
	5EF9B906D97E578E1198362A66322D47084CB28B2E69B30F3139612EE3ECFED885572D00CF24657E444B859FE3FA054B65230EB19D832AC9390881ACD7DF4D66A01DF035D6B3FEC5009F2FA1653EB0086516C35EAAC2DB43783655487B8934DC23954BC5C1BA2EC6A9A75432F2CC3FF7F93942DA16DF8F57CE0071DA35FECB0730DCD0AD1B93055532F97062DA269F6367EF43F25100DF8110D147664C4DF5EA394DF6AC67G7CCC00053A65B29DD8EEC51D229FA9A7542B4BAD6765F2GDFDC6FCDEE4095AC5786
	E57A81E65633F2D1EE7C5A1CD8AE8E7009DE792D394965B6386BD75C20AE77BAAF578C782E86EF7C6E3A05657CB47C02E5FEAC7E0E8AD8AE210145DDE6A3AB175F48620F555B06E4ACD75D486628979BD93D75B732FADB5AC84A7D04179BEDE4735940C6A6BF34D19D87F38C5C5EA6B677A5F1D02F0A83466FC48A16ABEEE2736466A6466FE29363474A2524E2B97FA6B62F8E114B05B52965FE1D170BEDE2F370B0B9CE5D655A5338DF1A58FCBD3319714BEDD64B5D130E65DA1B595C5EAC17131A55FE7E89AF97
	AA67C7B433355F32E6F5BBFFEAB5160BD765474BD7458EFB8616CBEAE66BGE287A91F5D426CE0F28B0DD82E22C561C36A2D2DC5AD770F3C1C544278843430B888E9E1F25978763B82B266527D3F8153D553E811EB84668D15154769D84776765E216BF3B21EC534609E5E77AF1131E39524B30EC33BBF0E63738F57629EDE5060C221A3FCD90A373D4A0A63CC0F4E634A781C9FB0124246267CCAA2B38472420E6338D4DE215EC728F1396CBD963A05A1774971956A711B615E29D88357DE0B53A5354084EB947B
	6FDFD790FD499E070C167D71444E1D02FABF146EFE6A8D73729E590DC6353D116BEF985E73E26FE2594EB8153D95813FCFE1FBCDA5E22640466E3C935096G82CF903CCDA473A9B206B0F9BD87D0DE605863C2576C39DE65ADBB4164A41CD064A59A4BD3181D2E5DD35C77259390F99EC4E6AA323FAE649E1C9A9F55048777597675226D052D505EDA517601DEE2BBE9D72CDCCCAF6EE107C019E52D3807FDE7FF5944BA28653BCD04985FCFACA8BF73A474D9GEC8E65AF921F3BBC66F0ABACC4AF295F62E2F572
	5B1AEA5967CB1F19A7C42C8EB0686DDB77BF99EC98BF496AE241C925CEA27F73ADC3B4003C67B8003AA4C01942D3284B3D94EF31D9A40B0944DFFE81333D5836832EA633B93FD555FE0BEA3A0939BD920B5C438567F1CF77692DEADDB3CCB3F4F58DF8274FE0BEA577CF27D4717A6ADB0656D7D1577F643AAE03B21927D15766C1629F13332F044D63D272547338FAA8A781841F46189E7F98F572DB3AC84859F40F2ECE8442CEB3DD161DD6F4CA855F65F07FFDF9B0D3EE4B3B5AE09CGE0BAFCB42856A1280D69
	905906BAEF3416921DE9C59731CB1B686C35BB07C4F3BE71EC11E9C4AA22EB35229A1A5DC06E8B305F786DC1321E9E335B07DAEC4C691F55E838C0A5B0FB67EDD257C1552DCFF56D1D393E5F905DA64F815A94FB23E35EB24447203DF6AB5ADBFF8666E6E750DE33C54F5EC5E7304D1C5D12A76BFBFAD8722AB01331F3886BB98A6805F67459DDC35A18E432DFCAD34B2E0072E600191CEE519069137BBC7A017F66F2C2206C32F654B57BA83952B5A4EF03B69B36C1C67B340D37613350064F229F724CFAFE98BF
	0B3AE45B7F31FAFF61A699CF2C26EB76E109B541A22B899A60D9D8085B7AC843E37ADD31E3BD85026CA82E5F97F47593BAD03F6553560F49ADF720DF3201E7AB673B58E144BAA0A33D401F3FDC41727ED0B63283759C907474CC68403E79DFB9DD46B9D82F1FC33A31EEBD3A51F328C72E739F73FF6747195C7FCD56BE9E33571C28CFG48DA427539CDD71F24F3E847011BD8CFD9670166BC6A794D1BE41C6DD6A682323F7EFC936578C1590873A867A5031E1CD567D14EF337D0CE6A85D84BDD40D85F5EC976D3
	DD2224BBE26637FA9FE40BF4A9E857AF6B5AA7202E92488B3B00367DBB5D73E34EA70F2ACCB6B3EFE7FF90C8DB9D82D6AC2211D7E5B2720A87BE39971157E34958773374AB496E6DB44300F6F7GCDG27339B100E79611D0FC9FF5AA7CAB5B61BE8320A4E7C824F56A57727FF5C027D692E7A85C2C542205771E349C5560F2E3C287427238F152784GB07D969B502E2A0F214EBE467A12D2D06FB04045FF0CFA3F19622E77018AD96FD608D92BB73D994F42D46419FBA94658F189F94ECAF567693FFBA763D9E7
	F1768CDBCDCE68EBA7629B1F4AE39FF8AE3904B68427213CA44015DDC6F9FFCEF31737735AF6A62F9DA241BE64D59A46C2DBBA7235824F851C6FD7535D799E4F5EAA73952D26D1EFCC65B8D90DB644823F6CCE646957CB76EC347BDE325FD63B47DA8C67518A747E1D5C8F99080F84DC82673D41B8511E9923BDE764F355CFE0DC7B84E963A6C13BEB8D7AA9846816F15A28ED28B7CB2F5A26E7A3FBBE70AB7EACBF73D3B906BFD51E7B1541FD33AACD57137499F74DE5A23B73D3760CBB0D63DBA95E2142B3DDDF
	3D043A7AC35E0ACF71396C1CA3E43D587A992CD1817CG0281A2G16FF066B34110F48F305891FFB3758A4D846192CE75DB6247179F3A5714320F8CDCE17D42A47FF790C47B1523FA6004C2C2E98E3BEC0B5C0D7976A90D169D30706D1DD9D181F8F09444FFEDD13FF7E4A689AA8DD709468D89FD6F0C9FD46A7F543F1C30A17BEACCA663D3CCB694318CF1E29A6BE49B1C15B86E885B083781B50A70643053EFC02E78CE4E7B01B8E74CE4F97B53DD3758523DB5EBB3DB3B6EFCF132E47620BEE01495D86C6F745
	A7DD14060E55D3EAAD591B09033CA4006C6E98E3B1C0870083A0289B6B2B6DF02D2F7A2A4187BE9DF6FEDB27FDE8037A6E9B181E1D07FD5205F56B59F92D0E5839847262G928132FBE20C95G9DG23BDE8673C4307FD59C9A7FDE023BCC7519A48747C59B46D7BEF1FF441BD6EF4ECBC7BC30E4EDE51F132B9D2EBF2F6587B7AC8BBA293C67979D67BEA75732D709EF65EE5B9DCD782303DB6E1E706401E39261A314F7DC3BD71E3BF247D81C2GA2GE2819281F2C574E3026FF861C701A693AF4F8EEA7DD2A6
	3A7BC15F1FAFFA5095E952ED221EBF571F7D2B203B97A9FBD1104F9ABA8651C77DA27A4856C8FC349452ABG04DE708BC0B5C0A700DFAF7A28296A48A4E32D8EF04DF67B200EFBE4BB072D53734F6D9EF4DA7F04763A53B13B9F36903B495CB622974F06948CCDAF668F79244B6D532B232C5ABC41F32F0D2EA3ABAB1BF0B949627DD83BBA5E4B00DF9700BFC0F09F467B9F52705CE8F89F5A7447E95AE4347922DB5127C7771CCFBAFDF95F72C9A7746B556385B346EFCEBF5ABCE21FDEAC4D7020534652382E8E
	AFF09D02388E079D5373C30BCF3A44FEBD3A55D726A7EF33CF3AAC0B1E4D0F89E8F33E85ED7E7AB4F5F845A7DD002E8E4FF6E39BDE40F518F1E3FABA4C72C917B12027C3C4B77AA1EFGF578686674622F4903CE9BFF7E83FAF4E93726E773A61FF4A13AB67F4100B6AF62B63F6041EBF2B67F1B871D56661CC1BD3AA1E1FAB6DF77C9D72CAB2FBAF9FA72CE7924EB5615374EB0BDFF66FA50E97D59251147467CDFB511B1FF947202G42G22GD682E4D8E30C05D69C7367D611330B131D97799E773F63216F64
	7C3A4CA7DD2BD50FEEACE5FAFE1D69C127752BD9D7DEE96A7464D5FB50E9650D6B4A7B39875D647C196813AEC8D75E23E95333AF4C03CEEBDF182E3C73695313E77620534ADB22ABEF5D6A6979B357A7DD2C2E3C6553147736CF3A847D7A4B181E3CB01FF419C3FAF4170D5313E771C937CBD75E07EB2697AF959EF4DBB569AA0DBC767EC55AB8999BBBA04F8140F0ABCE901CBF2403B96E651384978969E59C7776A902CB04F4168D4755264B84378B52559C57CEF1E47ECF1E03B05C9B17AE7A704FBA190F2FB2
	55BAE5180C5FCECA0637F354EAC853413171A5740877F33CCF9E51BF477B74917DF33C4F9D59407040C37DD69066FF7D484467FC3FFD447BB95F35473C6B19FDCCDF4F3F9D5357B36F5844FA669F732667966A6F5769F3966730CD328C0914B5DBDF0A236459830C486D43B6B6DC936EAE6D7E2400F300229632F7FE5106E37D0B47CA854F313E41EC116CCEE452A11A1C27FBFB798648D9075803FABFDF6D5DC75F28567751372B75FD74CA7544BE7AE17544BE7A19C44E4CFB1C41BE85B395811F4F4D359865B2
	ED123D2D0473DED76B5D0E4D357AF67C3D16BC87F459071DBD22D6579D35B9BCCF199935C86290D1C7BE03CE69A51333CF743035145233BCEF7407EB69B3D60B596214CF5CB09B4D83E8E303E4BFD94EF95EDE675D463B6A74ED8C2C73EE631CBA5FB60656F9377149BA5FB60657F92BF3E66B56417730BEFB1D76A128D156AE3AEE11F363BAFBE372F6A32EF36EDA0DE775A49B1E55FBF7ABE9EBE110DE82904B7B64341DFAFDE3025C17E65859B5572E742D45F0DF8FF0516E5E5FDAA16D2741B1FBD39A3C5751
	1A867DBA4AEA70DEC76FB7782E233C866FF5342741F79D95B7E863103547D77E321E36E717CBF451CD42FA13E442B3E1032A982DA36DD05EA39C5473F1106C2B0572B5D2653BE8380F37FB0EE709004BF44498739CCA9E53F734513B0FEFB56A7BF8C623F79F87B47A76716CC66FBE8EE9746D63479BA7EE87E1D635BFCB39BFC3ADFA7EAC13FD52ACDFBBD5BEF2403D3F43531F41008B5360196CAEFABE897B1B12E25C7B6CEB58225F864F76B86DD62BFC0E066DFD7ADF563E4BC2767A97033CE58E5C7B9CE94F
	106DDA6940363A16BE235FF5A546D88550F1855B6A1FBC569EEE6D6F0A27FD4C16D21BFBFFD2A163FFEEF33331947D5BE956732F1F4CBFC83EAE54480B04F43486978F69C400CC2702E7321F312B7BF3252DFCD3D7F61ECCDFA6DF1B1D6EF2BAA16D50607CA19D8C9066A15B69F0337BA0FFDF660ADA27C3DC27A784BD1D964BFC174957959A79C9104EF2E97621A0DD81506A526A74DBB7599FF1594FF76B496E1269A517E71D9318897890CDDEB82417GAC77109DF9434D9F87D076B7F4E52F14698509DD33A5
	F7B979102E52605AA0ED86981534329DB75DE4D7A03E6A165A9FCA5B7F13C1CF27G19EF28FCDD24119F8569D88DEE9524D307E30CB943DA1DD639492E60788502FA1ED54A71A3496E6D2BD446B7985C70F587643EB13149FBDF7D67A67D3EBA2D59FBDF1D596C3B2F5E5C6C3D2F4EED765DD76FEE1E382F7E9FBA17D74DD90A997E5994F79FFCA41737243A634BE47C76B4F7DFE279575C71F56863FB525D715837B52CD65755812E677A8CF55DAA7857B25C659E10718F9855FC4AF8F9539AB59F851FBBCE7C6C
	F00A3D2253A91A4FDA4648F8E09E2667B0699A3B906EAB0679392B93645DC8F6F6915A52D5FA4E2C95470D05D0EEB1408A0024E1B6FE30F168599122EF2F53B48455C097AF2BA8ED6CC9246D043483A090A09CA07AAA4A7C1FD3049688ADC343C3D4C3265F77CE937DAAC6E0FEB702E57F6D9AB90754A81A24E127C84A2A5EFF4C5EC0FC0033CFE55DD15A32D69DAB72DA05355F7B68FE0FE30435B97F9177B6992CC907C11A1DD1FAE69B092F45A36C0C92B9E74570AFD1FC228A4F4EAE8994CF524523B1461523
	38D73107BEDBDFF88D52579097C0F1CBA09D4BF115E384378A5219E3081BC7F1B910AE6438DFD0DCB5245BB86EF909604C107663385EC15CB7896238D7A8AE8252519CB7076262A11D40F10994A7DC073E6ABA62BAA92E90524D9C370462BAA0ED663806A1029B05F490471D9BC0DD96F2DC8445AD05F4BC472D214F1A93A11DB90E3817AC28DF8E476D9CC07DF6F15CD77BD03F8A0E4B69C77D6AB96E55C1546FA247ED69C67D2C9CF7249B758B9C4739D364E5DC67AC984739531913245EE3A11DG10F98367CE
	636DB8F75AF543F34C2CGDC2B864F626BB6BA976B3A4162AB05636F26F8078A4F62EED39ABF8B8CF971B7D07F4D69E8D373CD445D244FDF2D109E67381FD25CCCC807F2DCCEB77AF29147DD233845100E653805BDB4E6A1AD5CC25C718C141B4DF18394D78169B60E7BA125B5C3FA1463624CD8577E9CD7A3E2DD87F25CB62E5F820E736B46FA8D67388E2E5F920EBBDF0E7AAD67382B65D857C99CB7D2007AE579A1AECAC07DF2B92EA099754B6738F596542F0A636C96542F1963EE7521FE1D9CD7D7067AB9B8
	2E278C758B6238177722FE8BB9EEB97541A2C8AF6138A354875110DE6167DEEFE46FB50963BE6CC6DD32EEC35CF3C654E597473DEA443D57E60EE36D07685249F1BF2138FEC80FF2DCBD156B8F69900EFB3A87FD954EF16BE89CC4C2FAB9476D637A2D6438D82E1F708544A5D15CAEC8D7F1DCA2572F0D6372D268375AA0ED65389994B78A69C00EFB0077AB8BB86EF794978E69259CD7E8C17D62B8EEBFEF8B899CF71A62F2EE0FB1965F0E38C3E6542F9EF0ED3713EF40653589820E71EF1DA0673BED62C89EFF
	B9215EB2A45A480710724B4B8A734ACA4B8B64B31D21A36AB31D95EB3E207B2D823A2E3ADDDED74957244DF3656F36053462BBEFF11017630FF300370B48F84B5722C4114A4ADABBF9D73F15CDA8D8BF995F1AA1533779E3BF39117613B3A19D8A90610F6FE10DFE006F9606BDB1CFE88E53FFF7B32E6306A15A1F6919A0DF499954D503EF9918CC43A914D9BCA34658BF03600ACF295F07A03EBC19421EE7317CEE37FCB25FA45F9BD172035C72093E4F3A51FF47AD1F78E80BCC4FEC7B5EEE34AD69FB610275DF
	7D3DFEC3AFFC063C36132F01718FA5473FB91642E2213ADD090570CB13098596D7CF50FD394CBB207D5E0131769B0A2B00F4AB47FD3A1577B99C77A04505C0FA519DB826AD5AC64634A8C84781A4GE45E897D9EC095C0A740B8C088C0A4C06C1DC897C569487783926FE45F89A05FG4819495E35A76F4713F75049FB6D649DFD729EBC23CB5F968ED742DF6B2F909D9C0D0DBB7471F1DE7031B21FC8AF7CE8BB12732A64AB311978E05C8B8D533D1C6A7E1ECE3E76BBBBEABABD3C5EB3A0826F4BD7EF5FDEA200
	5F54416FB59965B85A60253C3CAF31133E9BG0BC296FFBDE715781B3F134E65CD231A397C57691C36826A34FEA64E654F0C693D6343F84E6AD0F83EC067346C1DD7514C78C50F6199BD8767E738CE743240A2081549216F087BC1FEGAF73FD497BFA68EDBACF0E0332AB818A3FC8F0B786F17D1273C5EF7BD9F1037A6B97B6CF16004E6F0BA87F0581F75FBDFFCE31F33DD55FF7FB2C04CF98700860FCDC035EFD7746F905671B036EBE798D1B4F831FD51CD76710F71F8C5379FA7DDDB06E5C05BE318E20CF46
	6F7266139F8C687B64E7F4EE9E88F4A1F7217C6D16F4EA37334FE2C39B4E13ED95797E9A79EC17CC5FCA692300F659DDB896FE651212DFC36774425D5077GB0DC9235398B52563B5106326E9C41FB3BE0F43DF4DE908CB48B6E46BE67DB17F15E9EFDB733BD7EEE458709C4EE005E3C7DE5BA3E6585E85FF509267832G6D3BAE97CE623BAE4D109796007D6E2CF61C1BE55D033827BA79BC0C637E2B9367E1ED77206EF752F72A4CBCFDBFCD136FD23074DF5354FBD9241CB77FCC8764F3BCEEB2A6730CFBAA40
	769C8A53F9FC028D01G61G51G2B6E41181BEDF6EF072FDDD65A4C3BE67DF638112EB5326E05797D3D98FB091D8ADDE03777F674940D25E6206B3897F5986CA1BA745AED92AB4356BCFE109FF0AF4629A9E322B8E5FCEE4B50EFEB8F3179A5700A62B26FAD70ECEBFF7FD4E9EBC7BFD35A52G35B781E8057B505E373B840DCD0510D7F19F363555F41EEB063463BE34E1285CF7DB7B92DDE30582CD9817F532DB514B512348ED27EB2A65D0AE1E171DE5D67203298ED901D0CF012857C2BAA7EF06F4C7A06AF5
	294C37DE81F4ED658FB40101A86BF9D12973DFF73B47519B3DCADEC70FFE9CD9E9BDC7823FA82E9F2B7B84C88B77A36EAC73AF24AB6EC71D3FEB742DB3DB6374830DF4BF6A1C54276875FB0D4E5BACCA5EE5AFBA3B28FE2140AF0C732C9DD068F61B3D477ED13AFED98EF4715C367354362C87200E9EC05BFEB721EDCC4E26B57A313EF78D61578A3CAEBE007A09030AFE07D25CEDDEE4D572C2D274EDDEC457FB7E40AF10737C0FA105EECD3FF71BF752F1A89268229EC01B4F5138CC0034B08BEDEE1CC47B6E75
	523EEF5276DD8C3C2AE621FE6F5A08FEECFD71034B6A35DE56DC2B010CB1FA6B0B7ED972731BD94A5A091DE5D9E9277B1300DFB28B4F3308ED645B0C67CD831EA7D9G596634BBC427F40DE169974A643EFFDE6B745E058B1FA65DBBD326E3E3729DF46C0D1F454664E40E3F0F62D72970EC2C4EB9096B61A4486B8A4277FF36DCA1F53B8452F1G09GD933E1BD8350BA9BFD79CCDB3160639CF0075DC1DF5CD69D57115FD5B8B5D57BD8DCFCEBB52EBB97FD6D7F8991F754FB7DDECF57EC968FFE72B57F278FA5
	13AB33AF5CC96C8B073C25G2BGB29E04768CD076A05A777BB6797DCE928EB512E46A6927DFC2620727AC620802A68F8ED84CFF03BEAF69355ACD12FC360A457CEB2BF19D5F7CA00EE99999E4CC6B269B8D784CE29BEFD71DD0CE82D8889079A0BB6B977FA01D5BEE4D1B40D74B9EE4B6B399CFEFA5BE32BBAD20A57B3E935367652D388EA91C037A941511F8E05FD9E42F09494FD473C83D9DEFB5F50BD6FC1E7335E1D276126A9BAD72737E7435B21EFF8B056B32642842871FD3E5F712EF8332176359E68B92
	317C148DA41F3C2CEF95757283BEA0796C4386FA798F6EA5FB99788181F58916EF5CCC562D72CB74EE8CD87E1F4648F31BA6EB9F4B13DF1FE35F25B8BD205EA7691C436A48EF8EFE37A224C7AFBFE88E76F967A4017BE67F98B9DF6AE57F233422B02F3422G4B7EEC0C0E894EE1117159B82270F9CCEAD27141CF98358C197A4496D8CC6513C71364E0DDFEC1917DF8GFB5A193FE33F0594F16DE72B5522BECB6F0E0282F98ED3BE2A703FBCB899BD595E55FC3AFE21EB03B938AF967509FA6FA8EF6FE95D3D23
	44CF468CF1F3D89C2786ABFD3B1FADCF5EBBFA641A22D36940E4F4E2F40B47943AB3133205513946953A6221FF4C4764CBC1961B3B0F9F3C2170BFBEA9FB180F9F98C09FD784E3DC3DF0D36175677E495B98FBCB218B6B1BBC5D69E4056E1B034D7F30EF201D494EE17C1D86057F466E496BB5BBC5213B55B399BA79F943E5DC2BBA02F1DD9ACF676E7E108E66381E94DC3FC6F2DCC88A2EDFD784637A74FB742CF79224339EC25C6B94177F907B1E9343FDF2F2227355C94113DB5792995E6796D7A714B159F52D
	373DBBB636C45235FEAB68F171A19C3396F766CD404FDF5619513F77895D3FG5C0207F0ECEA4FA77DC7136A9BCBAC7E5B53B17E239F427D713B52357B63EF98547B5B11695A7DF19240CA7E2F52357B636F3851672D566E0FA3BD0B3B08D4A56E56CEA1DE5FCCD3689E19D43CB23A475FD3680EE6EC5752B542C2BDFFC70D53E2326EA84CAB017F4585DC5728CC0576BBD310790B358ADD7694ECDC37DE21EB19023C018D8A5D71722959F84FC60556DAB0F919611B943A944B6469DE4DD66824A97423AF7EDD21
	BBD4B6B59B7FABD7217D5A5E494BCC5BBA3D184B5F2650ED1BC27D7BEFD7681EB4CE4D46A7F7A834D399873E3BD3211BB7859BFF39CB215BB185F9ADFB943A68A95A98182F507EF28AB21FABD0686E1CC24C3D7E21C237FD8AB1FEE41FC237F30AFDCED711C2DBE81E0CCC36EEDBCBFE22C0BE9BF554CEFEC7C1F7AD8F2B3363406BF477G4CE4BBCCFD1C66B7F652DF7373D4EC090FE7896D2451726FAF5225927B0C969BB78368EF26493FD7233A5FBA61F87A0F027CFD094FD586337F03AB5E4FD26E3B22FF16
	72G45FB3E2B735115095F2B2A39627D3D2A66AB6A5FCFE0757E37E2D2B799F3E30C3BG1A81BA819CF3F12D7E7A9552B130AF78E857698D66BE11FE4C4FE413D07E8BCE6F36AEF67A7E2D28D71C642CED379DD602C304BF62FFC077B7A43B03A299EE19137848E9696B17D8D1997FA3A7BD33A476D2B4EB8BABD7935BFBCDD617728D49A67EFD35G30F749DCBC331016C762DFFBFE3E08EDA6D4D6B6C8BD7D2239D65EDA1067CA77E5609EC452DCBC3F708D4A3F6C6198E3AB0079E11CEFBD3015CCE2AE08AE09
	2D5BC6C4DC3765FEF93E103B2D5A0073A6EDBC0DBFAC1F3FF8D8D937A97B9131DBC9E72CD679AC790BD564AABA5F505E51D2D7530A5F546E7572CDED3A0B406C3A032F01E29F46B3ED2F76A0AEBB047F3E205B37F4DA815F95B2711C1A455FD3A574DCAF148D84D8843094A08EA0B184E3705AA869383D6DAD324D83652312CC1FB9EE5FCA4AFCA446187748447A3079F1B2FDC6D686E52B9F417A7AE3326779570D865CCB32BE424E3F7A43B57891766D98B6AF9FCB491BC0DE78A36AF9794BF4ED3384F051DC6E
	6BE9F4CF071EE6AD116B784755A426D4EFF2143077B8B2CEE95F63A0FAA4812F2CC7795EBCB9CAAC73F934F302B3A1252505F987BEBAD800E709BA097DF5A279969E0EB3E21942EBD56AE4F831FA3960762EF8BE68D675684475A23F57D76C3DDFA9A8765D2F1496937F0A509FF4DCF34867458F95933B6C3D3DAE1177DFD545D99C5762EA333BACE434E23A1F7479DEF61B4696793DEC1FF45A771F99DD10CFBAAD30BD69ED74BDBA6B235A3D6AFC0A9FFDD43BD77D6D8C5C2B76073C950F62DE7571F2923F2DDF
	02359FC0G4082008800E800F80024AFE19B7D7762095AA86BAC35ED74EE5D6F196504B29F9606FAFBD7FAF90F9EDD35DC3EC3070E6D9F3CC8774C7AA17F8C47317348FEB2CE7ECD15926F3176C2096FD8FB29C4FF8C0BAA719C433EDF22BF063DDA229E43182E4F8CF86A7F5C00DAFF56B6FFFBD0E91BEFA4CF26ED4A5F4AB5E09C04G3FE521585FFF4100E3DB66E3B83605533275106E84109E43BEEBCE0AE7DF3139C251276C64E474E1F22BCF61B8934065861CA1F217C0BA96A061B15C9B322523EF8EA723
	EFDC69681BDF88782E7262CDE4F1ED31D9ADB6310E7D7AA40F2B5DF43D466E0BD4772FE4FC7E735068AD1F7FBC74DC3977386EAC779D57E239FEDC8F16FB463523DCBF2E5939E90CEB063BAE73F5721746997E36F2D2D7EC5CBDE932197A68FCCBFE4FE1G4FD5E74E4398D84D5FDF486138DF77E039AA0EEBB3E33966F9B867B3FD10A970B54A850BD96AE7785C51358A3ED9A47670BA2B76791D9C7D3ABEB5CD3ABB27CC477A7DDD741B5056F95A71E09F450F4E530E874F73FE409F72D64C43B95E17CFEB6537
	4ED77A5A2E791E7DAE13A33493FE52FC2DFCA3457B4D574AFF608C4A8F003CD573F17ED2C1DEB99458B3722D0393BDA3E765AFD7AA657B4C9315173FE7C27734597D8155FD246E7BFC7FFF5B7FEB1F2B8C793D987A6ED44782984F9770F7A54EE0DB88D8404F5036AB362FD75D871F797C7D706C67AAC39E93CFFB4E67D71D467808GBFC483A482E4BE9EE34C677B6C974F64CD40FB5763725A0CBD7FEF43982EG3C63F16CE7CA3A48E62266BCFC1353E22EB5490FC15958575506E36E4247F16C3B17720C03F4
	A2C05693B8668E1FA13C4F82EDBF776356366975B10553249327CC477AG83ED6B79CFE87B0677A83E6C89ED5F90447DDA8DF98B1E40184DB823446986557D5C364FBFE61F7BDCE53CCF6BF8FE4E3BB0C8067DD2C8F3B9050D1EF3271AFB5F780F304F6A338D0221C5C86F2783D50B10B6C2C632D187F86CA9E0F350F5C5204FAFD98A02DF925259D3E9F64F4E9C000475DC82A4C54995F775C0E54ACF67279804D4E04F26GADC2AA9947C10A13C9CB01A9G11A59854C0B92F16CFADC8C20A53BAAA89EB5DCE85
	D035D6FB9226B8EDE6C948D41FE070DA34475983C55507993C966D3376F94D330AD7A5E11D7B19862F05CDB6AB48D49F1050AF0AEE273FF9178B6E5D59E39FAA32F48F958DDF9DAAB2F5CBC5A2AC170A485C474C9F67DE7AF6D7C47FAB1BF798043496613DDE0BE8B51F258FF4DB05AC1A2A97DDBDCE0B032CCFA5E1A37D09027D64A78A764BBFD150AAEC206570C1B0E1CF94595AAAECD231EB34D8C51B1235CE15F52E3D15B803F2360952FEC89F26951CAC89FFABAA6A249F556DE4CF17BB15538D200D671187
	42FE3BC36389DF29ADCC56F610F53E8EE46555D949E19B9429BC6CD709D41004431EE90A5CB101C879993AA4EC52F932CEF86C1B2AD0F5EC2CF55B68FF79317237177E783CABC5C8EF917ECA4E851F951D6CE70C4C6433AE72EF5BB78AC6071D7C84836021DD3A68A54DA5DD0346A0E47736135F87F5C92219FFCB4AA5891BD9458ECB966B7EE6132B1F9E2A0228C96551406A3AA60F6AC7666849205FA62A9F21AA62D41B3E3EFE7776637191A90221D1D8E3351B4C0D269ED87F3788C6295FA93A7A6DD6732863
	D8B5E514B1C206B672DCB595587D1D1BCB0CAB6A00A588D7F2F074110035AB56B6C2A39AF58A7BE9C9F2DC330817B057751B486F07094E96G93085C4573EE5BAAFD707D2677BB8DC2323BD15051751A06AC56EBF0D38F3E34336E208212A33463649DA07D450FC6F2606CC73FFCE55E1BD52BD68233C6A10D7E468328142514BAB5BC54ADBA6F881B3D653D20383B09468EE2AEF2B642424A66A23F97844C73B4B6E396D73DE856AB45331FFA7792D5DDA11504ED2C4E00F4FF1FE89F5ADF535B8B8BD94EGDAA7
	305F425913B2C51AB29BC76F5FFC7C35BFF7C3C4558BA9C3454574EF897DDBCA7E16D0CC89451414C2352D92A67C274D9FC51BE9985244B192C323642EEAF40ACD6300C788926CC14FD8A268CADE23A4F5047C29A1FFEAA9D1BD7D5BB4E5FB88D50B460EB37FA4F6DC7AA73123671F448E6BBF099D43DE6CC88E00BFFF19FCCA92127388705F1F3925BE3F1EB823476B3B4A11DFE16B31682FE84F2F4F5DC25FF1FD8E56F64F617E754FF349C3F7EF4F3C4F8E192CD649E49D2C311949736F5AEB1228BCF37D5296
	425F05E564CC167744962277000A66FF81D0CB878800A9F5DD5FAAGGC00CGGD0CB818294G94G88G88GDCFBB0B600A9F5DD5FAAGGC00CGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG99ABGGGG
**end of data**/
}
}