/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.optimization.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-12")
public class ReferenceVariable implements org.apache.thrift.TBase<ReferenceVariable, ReferenceVariable._Fields>, java.io.Serializable, Cloneable, Comparable<ReferenceVariable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferenceVariable");

  private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("varType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReferenceVariableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReferenceVariableTupleSchemeFactory();

  public java.lang.String varName; // required
  /**
   * 
   * @see ReferenceVariableType
   */
  public ReferenceVariableType varType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VAR_NAME((short)1, "varName"),
    /**
     * 
     * @see ReferenceVariableType
     */
    VAR_TYPE((short)2, "varType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VAR_NAME
          return VAR_NAME;
        case 2: // VAR_TYPE
          return VAR_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("varType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReferenceVariableType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferenceVariable.class, metaDataMap);
  }

  public ReferenceVariable() {
  }

  public ReferenceVariable(
    java.lang.String varName,
    ReferenceVariableType varType)
  {
    this();
    this.varName = varName;
    this.varType = varType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferenceVariable(ReferenceVariable other) {
    if (other.isSetVarName()) {
      this.varName = other.varName;
    }
    if (other.isSetVarType()) {
      this.varType = other.varType;
    }
  }

  public ReferenceVariable deepCopy() {
    return new ReferenceVariable(this);
  }

  @Override
  public void clear() {
    this.varName = null;
    this.varType = null;
  }

  public java.lang.String getVarName() {
    return this.varName;
  }

  public ReferenceVariable setVarName(java.lang.String varName) {
    this.varName = varName;
    return this;
  }

  public void unsetVarName() {
    this.varName = null;
  }

  /** Returns true if field varName is set (has been assigned a value) and false otherwise */
  public boolean isSetVarName() {
    return this.varName != null;
  }

  public void setVarNameIsSet(boolean value) {
    if (!value) {
      this.varName = null;
    }
  }

  /**
   * 
   * @see ReferenceVariableType
   */
  public ReferenceVariableType getVarType() {
    return this.varType;
  }

  /**
   * 
   * @see ReferenceVariableType
   */
  public ReferenceVariable setVarType(ReferenceVariableType varType) {
    this.varType = varType;
    return this;
  }

  public void unsetVarType() {
    this.varType = null;
  }

  /** Returns true if field varType is set (has been assigned a value) and false otherwise */
  public boolean isSetVarType() {
    return this.varType != null;
  }

  public void setVarTypeIsSet(boolean value) {
    if (!value) {
      this.varType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case VAR_NAME:
      if (value == null) {
        unsetVarName();
      } else {
        setVarName((java.lang.String)value);
      }
      break;

    case VAR_TYPE:
      if (value == null) {
        unsetVarType();
      } else {
        setVarType((ReferenceVariableType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VAR_NAME:
      return getVarName();

    case VAR_TYPE:
      return getVarType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VAR_NAME:
      return isSetVarName();
    case VAR_TYPE:
      return isSetVarType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferenceVariable)
      return this.equals((ReferenceVariable)that);
    return false;
  }

  public boolean equals(ReferenceVariable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_varName = true && this.isSetVarName();
    boolean that_present_varName = true && that.isSetVarName();
    if (this_present_varName || that_present_varName) {
      if (!(this_present_varName && that_present_varName))
        return false;
      if (!this.varName.equals(that.varName))
        return false;
    }

    boolean this_present_varType = true && this.isSetVarType();
    boolean that_present_varType = true && that.isSetVarType();
    if (this_present_varType || that_present_varType) {
      if (!(this_present_varType && that_present_varType))
        return false;
      if (!this.varType.equals(that.varType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVarName()) ? 131071 : 524287);
    if (isSetVarName())
      hashCode = hashCode * 8191 + varName.hashCode();

    hashCode = hashCode * 8191 + ((isSetVarType()) ? 131071 : 524287);
    if (isSetVarType())
      hashCode = hashCode * 8191 + varType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(ReferenceVariable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVarName()).compareTo(other.isSetVarName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVarType()).compareTo(other.isSetVarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varType, other.varType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReferenceVariable(");
    boolean first = true;

    sb.append("varName:");
    if (this.varName == null) {
      sb.append("null");
    } else {
      sb.append(this.varName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("varType:");
    if (this.varType == null) {
      sb.append("null");
    } else {
      sb.append(this.varType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (varName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'varName' was not present! Struct: " + toString());
    }
    if (varType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'varType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferenceVariableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferenceVariableStandardScheme getScheme() {
      return new ReferenceVariableStandardScheme();
    }
  }

  private static class ReferenceVariableStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReferenceVariable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferenceVariable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.varName = iprot.readString();
              struct.setVarNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.varType = org.vcell.optimization.thrift.ReferenceVariableType.findByValue(iprot.readI32());
              struct.setVarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferenceVariable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.varName != null) {
        oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
        oprot.writeString(struct.varName);
        oprot.writeFieldEnd();
      }
      if (struct.varType != null) {
        oprot.writeFieldBegin(VAR_TYPE_FIELD_DESC);
        oprot.writeI32(struct.varType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferenceVariableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferenceVariableTupleScheme getScheme() {
      return new ReferenceVariableTupleScheme();
    }
  }

  private static class ReferenceVariableTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReferenceVariable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferenceVariable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.varName);
      oprot.writeI32(struct.varType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferenceVariable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.varName = iprot.readString();
      struct.setVarNameIsSet(true);
      struct.varType = org.vcell.optimization.thrift.ReferenceVariableType.findByValue(iprot.readI32());
      struct.setVarTypeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

