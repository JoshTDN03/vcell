/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.optimization.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-12")
public class OptProblem implements org.apache.thrift.TBase<OptProblem, OptProblem._Fields>, java.io.Serializable, Cloneable, Comparable<OptProblem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptProblem");

  private static final org.apache.thrift.protocol.TField MATH_MODEL_SBML_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mathModelSbmlFile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_OPTIMIZATION_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfOptimizationRuns", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETER_DESCRIPTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterDescriptionList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REFERENCE_VARIABLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("referenceVariableList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EXPERIMENTAL_DATA_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentalDataFile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPTIMIZATION_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizationMethod", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptProblemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptProblemTupleSchemeFactory();

  public java.lang.String mathModelSbmlFile; // required
  public int numberOfOptimizationRuns; // required
  public java.util.List<ParameterDescription> parameterDescriptionList; // required
  public java.util.List<ReferenceVariable> referenceVariableList; // required
  public java.lang.String experimentalDataFile; // required
  public CopasiOptimizationMethod optimizationMethod; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATH_MODEL_SBML_FILE((short)1, "mathModelSbmlFile"),
    NUMBER_OF_OPTIMIZATION_RUNS((short)2, "numberOfOptimizationRuns"),
    PARAMETER_DESCRIPTION_LIST((short)3, "parameterDescriptionList"),
    REFERENCE_VARIABLE_LIST((short)4, "referenceVariableList"),
    EXPERIMENTAL_DATA_FILE((short)5, "experimentalDataFile"),
    OPTIMIZATION_METHOD((short)6, "optimizationMethod");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATH_MODEL_SBML_FILE
          return MATH_MODEL_SBML_FILE;
        case 2: // NUMBER_OF_OPTIMIZATION_RUNS
          return NUMBER_OF_OPTIMIZATION_RUNS;
        case 3: // PARAMETER_DESCRIPTION_LIST
          return PARAMETER_DESCRIPTION_LIST;
        case 4: // REFERENCE_VARIABLE_LIST
          return REFERENCE_VARIABLE_LIST;
        case 5: // EXPERIMENTAL_DATA_FILE
          return EXPERIMENTAL_DATA_FILE;
        case 6: // OPTIMIZATION_METHOD
          return OPTIMIZATION_METHOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBEROFOPTIMIZATIONRUNS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATH_MODEL_SBML_FILE, new org.apache.thrift.meta_data.FieldMetaData("mathModelSbmlFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "FilePath")));
    tmpMap.put(_Fields.NUMBER_OF_OPTIMIZATION_RUNS, new org.apache.thrift.meta_data.FieldMetaData("numberOfOptimizationRuns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PARAMETER_DESCRIPTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("parameterDescriptionList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ParameterDescriptionList")));
    tmpMap.put(_Fields.REFERENCE_VARIABLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("referenceVariableList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ReferenceVariableList")));
    tmpMap.put(_Fields.EXPERIMENTAL_DATA_FILE, new org.apache.thrift.meta_data.FieldMetaData("experimentalDataFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "FilePath")));
    tmpMap.put(_Fields.OPTIMIZATION_METHOD, new org.apache.thrift.meta_data.FieldMetaData("optimizationMethod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CopasiOptimizationMethod.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptProblem.class, metaDataMap);
  }

  public OptProblem() {
  }

  public OptProblem(
    java.lang.String mathModelSbmlFile,
    int numberOfOptimizationRuns,
    java.util.List<ParameterDescription> parameterDescriptionList,
    java.util.List<ReferenceVariable> referenceVariableList,
    java.lang.String experimentalDataFile,
    CopasiOptimizationMethod optimizationMethod)
  {
    this();
    this.mathModelSbmlFile = mathModelSbmlFile;
    this.numberOfOptimizationRuns = numberOfOptimizationRuns;
    setNumberOfOptimizationRunsIsSet(true);
    this.parameterDescriptionList = parameterDescriptionList;
    this.referenceVariableList = referenceVariableList;
    this.experimentalDataFile = experimentalDataFile;
    this.optimizationMethod = optimizationMethod;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptProblem(OptProblem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMathModelSbmlFile()) {
      this.mathModelSbmlFile = other.mathModelSbmlFile;
    }
    this.numberOfOptimizationRuns = other.numberOfOptimizationRuns;
    if (other.isSetParameterDescriptionList()) {
      java.util.List<ParameterDescription> __this__parameterDescriptionList = new java.util.ArrayList<ParameterDescription>(other.parameterDescriptionList.size());
      for (ParameterDescription other_element : other.parameterDescriptionList) {
        __this__parameterDescriptionList.add(new ParameterDescription(other_element));
      }
      this.parameterDescriptionList = __this__parameterDescriptionList;
    }
    if (other.isSetReferenceVariableList()) {
      java.util.List<ReferenceVariable> __this__referenceVariableList = new java.util.ArrayList<ReferenceVariable>(other.referenceVariableList.size());
      for (ReferenceVariable other_element : other.referenceVariableList) {
        __this__referenceVariableList.add(new ReferenceVariable(other_element));
      }
      this.referenceVariableList = __this__referenceVariableList;
    }
    if (other.isSetExperimentalDataFile()) {
      this.experimentalDataFile = other.experimentalDataFile;
    }
    if (other.isSetOptimizationMethod()) {
      this.optimizationMethod = new CopasiOptimizationMethod(other.optimizationMethod);
    }
  }

  public OptProblem deepCopy() {
    return new OptProblem(this);
  }

  @Override
  public void clear() {
    this.mathModelSbmlFile = null;
    setNumberOfOptimizationRunsIsSet(false);
    this.numberOfOptimizationRuns = 0;
    this.parameterDescriptionList = null;
    this.referenceVariableList = null;
    this.experimentalDataFile = null;
    this.optimizationMethod = null;
  }

  public java.lang.String getMathModelSbmlFile() {
    return this.mathModelSbmlFile;
  }

  public OptProblem setMathModelSbmlFile(java.lang.String mathModelSbmlFile) {
    this.mathModelSbmlFile = mathModelSbmlFile;
    return this;
  }

  public void unsetMathModelSbmlFile() {
    this.mathModelSbmlFile = null;
  }

  /** Returns true if field mathModelSbmlFile is set (has been assigned a value) and false otherwise */
  public boolean isSetMathModelSbmlFile() {
    return this.mathModelSbmlFile != null;
  }

  public void setMathModelSbmlFileIsSet(boolean value) {
    if (!value) {
      this.mathModelSbmlFile = null;
    }
  }

  public int getNumberOfOptimizationRuns() {
    return this.numberOfOptimizationRuns;
  }

  public OptProblem setNumberOfOptimizationRuns(int numberOfOptimizationRuns) {
    this.numberOfOptimizationRuns = numberOfOptimizationRuns;
    setNumberOfOptimizationRunsIsSet(true);
    return this;
  }

  public void unsetNumberOfOptimizationRuns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFOPTIMIZATIONRUNS_ISSET_ID);
  }

  /** Returns true if field numberOfOptimizationRuns is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfOptimizationRuns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFOPTIMIZATIONRUNS_ISSET_ID);
  }

  public void setNumberOfOptimizationRunsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFOPTIMIZATIONRUNS_ISSET_ID, value);
  }

  public int getParameterDescriptionListSize() {
    return (this.parameterDescriptionList == null) ? 0 : this.parameterDescriptionList.size();
  }

  public java.util.Iterator<ParameterDescription> getParameterDescriptionListIterator() {
    return (this.parameterDescriptionList == null) ? null : this.parameterDescriptionList.iterator();
  }

  public void addToParameterDescriptionList(ParameterDescription elem) {
    if (this.parameterDescriptionList == null) {
      this.parameterDescriptionList = new java.util.ArrayList<ParameterDescription>();
    }
    this.parameterDescriptionList.add(elem);
  }

  public java.util.List<ParameterDescription> getParameterDescriptionList() {
    return this.parameterDescriptionList;
  }

  public OptProblem setParameterDescriptionList(java.util.List<ParameterDescription> parameterDescriptionList) {
    this.parameterDescriptionList = parameterDescriptionList;
    return this;
  }

  public void unsetParameterDescriptionList() {
    this.parameterDescriptionList = null;
  }

  /** Returns true if field parameterDescriptionList is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterDescriptionList() {
    return this.parameterDescriptionList != null;
  }

  public void setParameterDescriptionListIsSet(boolean value) {
    if (!value) {
      this.parameterDescriptionList = null;
    }
  }

  public int getReferenceVariableListSize() {
    return (this.referenceVariableList == null) ? 0 : this.referenceVariableList.size();
  }

  public java.util.Iterator<ReferenceVariable> getReferenceVariableListIterator() {
    return (this.referenceVariableList == null) ? null : this.referenceVariableList.iterator();
  }

  public void addToReferenceVariableList(ReferenceVariable elem) {
    if (this.referenceVariableList == null) {
      this.referenceVariableList = new java.util.ArrayList<ReferenceVariable>();
    }
    this.referenceVariableList.add(elem);
  }

  public java.util.List<ReferenceVariable> getReferenceVariableList() {
    return this.referenceVariableList;
  }

  public OptProblem setReferenceVariableList(java.util.List<ReferenceVariable> referenceVariableList) {
    this.referenceVariableList = referenceVariableList;
    return this;
  }

  public void unsetReferenceVariableList() {
    this.referenceVariableList = null;
  }

  /** Returns true if field referenceVariableList is set (has been assigned a value) and false otherwise */
  public boolean isSetReferenceVariableList() {
    return this.referenceVariableList != null;
  }

  public void setReferenceVariableListIsSet(boolean value) {
    if (!value) {
      this.referenceVariableList = null;
    }
  }

  public java.lang.String getExperimentalDataFile() {
    return this.experimentalDataFile;
  }

  public OptProblem setExperimentalDataFile(java.lang.String experimentalDataFile) {
    this.experimentalDataFile = experimentalDataFile;
    return this;
  }

  public void unsetExperimentalDataFile() {
    this.experimentalDataFile = null;
  }

  /** Returns true if field experimentalDataFile is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentalDataFile() {
    return this.experimentalDataFile != null;
  }

  public void setExperimentalDataFileIsSet(boolean value) {
    if (!value) {
      this.experimentalDataFile = null;
    }
  }

  public CopasiOptimizationMethod getOptimizationMethod() {
    return this.optimizationMethod;
  }

  public OptProblem setOptimizationMethod(CopasiOptimizationMethod optimizationMethod) {
    this.optimizationMethod = optimizationMethod;
    return this;
  }

  public void unsetOptimizationMethod() {
    this.optimizationMethod = null;
  }

  /** Returns true if field optimizationMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizationMethod() {
    return this.optimizationMethod != null;
  }

  public void setOptimizationMethodIsSet(boolean value) {
    if (!value) {
      this.optimizationMethod = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MATH_MODEL_SBML_FILE:
      if (value == null) {
        unsetMathModelSbmlFile();
      } else {
        setMathModelSbmlFile((java.lang.String)value);
      }
      break;

    case NUMBER_OF_OPTIMIZATION_RUNS:
      if (value == null) {
        unsetNumberOfOptimizationRuns();
      } else {
        setNumberOfOptimizationRuns((java.lang.Integer)value);
      }
      break;

    case PARAMETER_DESCRIPTION_LIST:
      if (value == null) {
        unsetParameterDescriptionList();
      } else {
        setParameterDescriptionList((java.util.List<ParameterDescription>)value);
      }
      break;

    case REFERENCE_VARIABLE_LIST:
      if (value == null) {
        unsetReferenceVariableList();
      } else {
        setReferenceVariableList((java.util.List<ReferenceVariable>)value);
      }
      break;

    case EXPERIMENTAL_DATA_FILE:
      if (value == null) {
        unsetExperimentalDataFile();
      } else {
        setExperimentalDataFile((java.lang.String)value);
      }
      break;

    case OPTIMIZATION_METHOD:
      if (value == null) {
        unsetOptimizationMethod();
      } else {
        setOptimizationMethod((CopasiOptimizationMethod)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MATH_MODEL_SBML_FILE:
      return getMathModelSbmlFile();

    case NUMBER_OF_OPTIMIZATION_RUNS:
      return getNumberOfOptimizationRuns();

    case PARAMETER_DESCRIPTION_LIST:
      return getParameterDescriptionList();

    case REFERENCE_VARIABLE_LIST:
      return getReferenceVariableList();

    case EXPERIMENTAL_DATA_FILE:
      return getExperimentalDataFile();

    case OPTIMIZATION_METHOD:
      return getOptimizationMethod();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MATH_MODEL_SBML_FILE:
      return isSetMathModelSbmlFile();
    case NUMBER_OF_OPTIMIZATION_RUNS:
      return isSetNumberOfOptimizationRuns();
    case PARAMETER_DESCRIPTION_LIST:
      return isSetParameterDescriptionList();
    case REFERENCE_VARIABLE_LIST:
      return isSetReferenceVariableList();
    case EXPERIMENTAL_DATA_FILE:
      return isSetExperimentalDataFile();
    case OPTIMIZATION_METHOD:
      return isSetOptimizationMethod();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OptProblem)
      return this.equals((OptProblem)that);
    return false;
  }

  public boolean equals(OptProblem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mathModelSbmlFile = true && this.isSetMathModelSbmlFile();
    boolean that_present_mathModelSbmlFile = true && that.isSetMathModelSbmlFile();
    if (this_present_mathModelSbmlFile || that_present_mathModelSbmlFile) {
      if (!(this_present_mathModelSbmlFile && that_present_mathModelSbmlFile))
        return false;
      if (!this.mathModelSbmlFile.equals(that.mathModelSbmlFile))
        return false;
    }

    boolean this_present_numberOfOptimizationRuns = true;
    boolean that_present_numberOfOptimizationRuns = true;
    if (this_present_numberOfOptimizationRuns || that_present_numberOfOptimizationRuns) {
      if (!(this_present_numberOfOptimizationRuns && that_present_numberOfOptimizationRuns))
        return false;
      if (this.numberOfOptimizationRuns != that.numberOfOptimizationRuns)
        return false;
    }

    boolean this_present_parameterDescriptionList = true && this.isSetParameterDescriptionList();
    boolean that_present_parameterDescriptionList = true && that.isSetParameterDescriptionList();
    if (this_present_parameterDescriptionList || that_present_parameterDescriptionList) {
      if (!(this_present_parameterDescriptionList && that_present_parameterDescriptionList))
        return false;
      if (!this.parameterDescriptionList.equals(that.parameterDescriptionList))
        return false;
    }

    boolean this_present_referenceVariableList = true && this.isSetReferenceVariableList();
    boolean that_present_referenceVariableList = true && that.isSetReferenceVariableList();
    if (this_present_referenceVariableList || that_present_referenceVariableList) {
      if (!(this_present_referenceVariableList && that_present_referenceVariableList))
        return false;
      if (!this.referenceVariableList.equals(that.referenceVariableList))
        return false;
    }

    boolean this_present_experimentalDataFile = true && this.isSetExperimentalDataFile();
    boolean that_present_experimentalDataFile = true && that.isSetExperimentalDataFile();
    if (this_present_experimentalDataFile || that_present_experimentalDataFile) {
      if (!(this_present_experimentalDataFile && that_present_experimentalDataFile))
        return false;
      if (!this.experimentalDataFile.equals(that.experimentalDataFile))
        return false;
    }

    boolean this_present_optimizationMethod = true && this.isSetOptimizationMethod();
    boolean that_present_optimizationMethod = true && that.isSetOptimizationMethod();
    if (this_present_optimizationMethod || that_present_optimizationMethod) {
      if (!(this_present_optimizationMethod && that_present_optimizationMethod))
        return false;
      if (!this.optimizationMethod.equals(that.optimizationMethod))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMathModelSbmlFile()) ? 131071 : 524287);
    if (isSetMathModelSbmlFile())
      hashCode = hashCode * 8191 + mathModelSbmlFile.hashCode();

    hashCode = hashCode * 8191 + numberOfOptimizationRuns;

    hashCode = hashCode * 8191 + ((isSetParameterDescriptionList()) ? 131071 : 524287);
    if (isSetParameterDescriptionList())
      hashCode = hashCode * 8191 + parameterDescriptionList.hashCode();

    hashCode = hashCode * 8191 + ((isSetReferenceVariableList()) ? 131071 : 524287);
    if (isSetReferenceVariableList())
      hashCode = hashCode * 8191 + referenceVariableList.hashCode();

    hashCode = hashCode * 8191 + ((isSetExperimentalDataFile()) ? 131071 : 524287);
    if (isSetExperimentalDataFile())
      hashCode = hashCode * 8191 + experimentalDataFile.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptimizationMethod()) ? 131071 : 524287);
    if (isSetOptimizationMethod())
      hashCode = hashCode * 8191 + optimizationMethod.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OptProblem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMathModelSbmlFile()).compareTo(other.isSetMathModelSbmlFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMathModelSbmlFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mathModelSbmlFile, other.mathModelSbmlFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfOptimizationRuns()).compareTo(other.isSetNumberOfOptimizationRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfOptimizationRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfOptimizationRuns, other.numberOfOptimizationRuns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParameterDescriptionList()).compareTo(other.isSetParameterDescriptionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterDescriptionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterDescriptionList, other.parameterDescriptionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReferenceVariableList()).compareTo(other.isSetReferenceVariableList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferenceVariableList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referenceVariableList, other.referenceVariableList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExperimentalDataFile()).compareTo(other.isSetExperimentalDataFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentalDataFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentalDataFile, other.experimentalDataFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptimizationMethod()).compareTo(other.isSetOptimizationMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizationMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizationMethod, other.optimizationMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OptProblem(");
    boolean first = true;

    sb.append("mathModelSbmlFile:");
    if (this.mathModelSbmlFile == null) {
      sb.append("null");
    } else {
      sb.append(this.mathModelSbmlFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfOptimizationRuns:");
    sb.append(this.numberOfOptimizationRuns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterDescriptionList:");
    if (this.parameterDescriptionList == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterDescriptionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("referenceVariableList:");
    if (this.referenceVariableList == null) {
      sb.append("null");
    } else {
      sb.append(this.referenceVariableList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentalDataFile:");
    if (this.experimentalDataFile == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentalDataFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optimizationMethod:");
    if (this.optimizationMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.optimizationMethod);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mathModelSbmlFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mathModelSbmlFile' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numberOfOptimizationRuns' because it's a primitive and you chose the non-beans generator.
    if (parameterDescriptionList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parameterDescriptionList' was not present! Struct: " + toString());
    }
    if (referenceVariableList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'referenceVariableList' was not present! Struct: " + toString());
    }
    if (experimentalDataFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'experimentalDataFile' was not present! Struct: " + toString());
    }
    if (optimizationMethod == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'optimizationMethod' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (optimizationMethod != null) {
      optimizationMethod.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptProblemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptProblemStandardScheme getScheme() {
      return new OptProblemStandardScheme();
    }
  }

  private static class OptProblemStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptProblem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptProblem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATH_MODEL_SBML_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mathModelSbmlFile = iprot.readString();
              struct.setMathModelSbmlFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER_OF_OPTIMIZATION_RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfOptimizationRuns = iprot.readI32();
              struct.setNumberOfOptimizationRunsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETER_DESCRIPTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.parameterDescriptionList = new java.util.ArrayList<ParameterDescription>(_list8.size);
                ParameterDescription _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ParameterDescription();
                  _elem9.read(iprot);
                  struct.parameterDescriptionList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setParameterDescriptionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFERENCE_VARIABLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.referenceVariableList = new java.util.ArrayList<ReferenceVariable>(_list11.size);
                ReferenceVariable _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new ReferenceVariable();
                  _elem12.read(iprot);
                  struct.referenceVariableList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setReferenceVariableListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPERIMENTAL_DATA_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentalDataFile = iprot.readString();
              struct.setExperimentalDataFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTIMIZATION_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.optimizationMethod = new CopasiOptimizationMethod();
              struct.optimizationMethod.read(iprot);
              struct.setOptimizationMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumberOfOptimizationRuns()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfOptimizationRuns' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptProblem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mathModelSbmlFile != null) {
        oprot.writeFieldBegin(MATH_MODEL_SBML_FILE_FIELD_DESC);
        oprot.writeString(struct.mathModelSbmlFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_OPTIMIZATION_RUNS_FIELD_DESC);
      oprot.writeI32(struct.numberOfOptimizationRuns);
      oprot.writeFieldEnd();
      if (struct.parameterDescriptionList != null) {
        oprot.writeFieldBegin(PARAMETER_DESCRIPTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterDescriptionList.size()));
          for (ParameterDescription _iter14 : struct.parameterDescriptionList)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.referenceVariableList != null) {
        oprot.writeFieldBegin(REFERENCE_VARIABLE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.referenceVariableList.size()));
          for (ReferenceVariable _iter15 : struct.referenceVariableList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.experimentalDataFile != null) {
        oprot.writeFieldBegin(EXPERIMENTAL_DATA_FILE_FIELD_DESC);
        oprot.writeString(struct.experimentalDataFile);
        oprot.writeFieldEnd();
      }
      if (struct.optimizationMethod != null) {
        oprot.writeFieldBegin(OPTIMIZATION_METHOD_FIELD_DESC);
        struct.optimizationMethod.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptProblemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptProblemTupleScheme getScheme() {
      return new OptProblemTupleScheme();
    }
  }

  private static class OptProblemTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptProblem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptProblem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.mathModelSbmlFile);
      oprot.writeI32(struct.numberOfOptimizationRuns);
      {
        oprot.writeI32(struct.parameterDescriptionList.size());
        for (ParameterDescription _iter16 : struct.parameterDescriptionList)
        {
          _iter16.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.referenceVariableList.size());
        for (ReferenceVariable _iter17 : struct.referenceVariableList)
        {
          _iter17.write(oprot);
        }
      }
      oprot.writeString(struct.experimentalDataFile);
      struct.optimizationMethod.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptProblem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.mathModelSbmlFile = iprot.readString();
      struct.setMathModelSbmlFileIsSet(true);
      struct.numberOfOptimizationRuns = iprot.readI32();
      struct.setNumberOfOptimizationRunsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.parameterDescriptionList = new java.util.ArrayList<ParameterDescription>(_list18.size);
        ParameterDescription _elem19;
        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
        {
          _elem19 = new ParameterDescription();
          _elem19.read(iprot);
          struct.parameterDescriptionList.add(_elem19);
        }
      }
      struct.setParameterDescriptionListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.referenceVariableList = new java.util.ArrayList<ReferenceVariable>(_list21.size);
        ReferenceVariable _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new ReferenceVariable();
          _elem22.read(iprot);
          struct.referenceVariableList.add(_elem22);
        }
      }
      struct.setReferenceVariableListIsSet(true);
      struct.experimentalDataFile = iprot.readString();
      struct.setExperimentalDataFileIsSet(true);
      struct.optimizationMethod = new CopasiOptimizationMethod();
      struct.optimizationMethod.read(iprot);
      struct.setOptimizationMethodIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

