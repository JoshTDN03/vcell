/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.optimization.thrift;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-4")
public class ParameterDescription implements org.apache.thrift.TBase<ParameterDescription, ParameterDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ParameterDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParameterDescription");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("minValue", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField INITIAL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("initialValue", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParameterDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParameterDescriptionTupleSchemeFactory());
  }

  public String name; // required
  public double scale; // required
  public double minValue; // required
  public double maxValue; // required
  public double initialValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SCALE((short)2, "scale"),
    MIN_VALUE((short)3, "minValue"),
    MAX_VALUE((short)4, "maxValue"),
    INITIAL_VALUE((short)5, "initialValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SCALE
          return SCALE;
        case 3: // MIN_VALUE
          return MIN_VALUE;
        case 4: // MAX_VALUE
          return MAX_VALUE;
        case 5: // INITIAL_VALUE
          return INITIAL_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCALE_ISSET_ID = 0;
  private static final int __MINVALUE_ISSET_ID = 1;
  private static final int __MAXVALUE_ISSET_ID = 2;
  private static final int __INITIALVALUE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("minValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("maxValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INITIAL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("initialValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParameterDescription.class, metaDataMap);
  }

  public ParameterDescription() {
  }

  public ParameterDescription(
    String name,
    double scale,
    double minValue,
    double maxValue,
    double initialValue)
  {
    this();
    this.name = name;
    this.scale = scale;
    setScaleIsSet(true);
    this.minValue = minValue;
    setMinValueIsSet(true);
    this.maxValue = maxValue;
    setMaxValueIsSet(true);
    this.initialValue = initialValue;
    setInitialValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ParameterDescription(ParameterDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.scale = other.scale;
    this.minValue = other.minValue;
    this.maxValue = other.maxValue;
    this.initialValue = other.initialValue;
  }

  public ParameterDescription deepCopy() {
    return new ParameterDescription(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setScaleIsSet(false);
    this.scale = 0.0;
    setMinValueIsSet(false);
    this.minValue = 0.0;
    setMaxValueIsSet(false);
    this.maxValue = 0.0;
    setInitialValueIsSet(false);
    this.initialValue = 0.0;
  }

  public String getName() {
    return this.name;
  }

  public ParameterDescription setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getScale() {
    return this.scale;
  }

  public ParameterDescription setScale(double scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public double getMinValue() {
    return this.minValue;
  }

  public ParameterDescription setMinValue(double minValue) {
    this.minValue = minValue;
    setMinValueIsSet(true);
    return this;
  }

  public void unsetMinValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVALUE_ISSET_ID);
  }

  /** Returns true if field minValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMinValue() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVALUE_ISSET_ID);
  }

  public void setMinValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVALUE_ISSET_ID, value);
  }

  public double getMaxValue() {
    return this.maxValue;
  }

  public ParameterDescription setMaxValue(double maxValue) {
    this.maxValue = maxValue;
    setMaxValueIsSet(true);
    return this;
  }

  public void unsetMaxValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
  }

  /** Returns true if field maxValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxValue() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
  }

  public void setMaxValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVALUE_ISSET_ID, value);
  }

  public double getInitialValue() {
    return this.initialValue;
  }

  public ParameterDescription setInitialValue(double initialValue) {
    this.initialValue = initialValue;
    setInitialValueIsSet(true);
    return this;
  }

  public void unsetInitialValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALVALUE_ISSET_ID);
  }

  /** Returns true if field initialValue is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialValue() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALVALUE_ISSET_ID);
  }

  public void setInitialValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((Double)value);
      }
      break;

    case MIN_VALUE:
      if (value == null) {
        unsetMinValue();
      } else {
        setMinValue((Double)value);
      }
      break;

    case MAX_VALUE:
      if (value == null) {
        unsetMaxValue();
      } else {
        setMaxValue((Double)value);
      }
      break;

    case INITIAL_VALUE:
      if (value == null) {
        unsetInitialValue();
      } else {
        setInitialValue((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SCALE:
      return Double.valueOf(getScale());

    case MIN_VALUE:
      return Double.valueOf(getMinValue());

    case MAX_VALUE:
      return Double.valueOf(getMaxValue());

    case INITIAL_VALUE:
      return Double.valueOf(getInitialValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SCALE:
      return isSetScale();
    case MIN_VALUE:
      return isSetMinValue();
    case MAX_VALUE:
      return isSetMaxValue();
    case INITIAL_VALUE:
      return isSetInitialValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ParameterDescription)
      return this.equals((ParameterDescription)that);
    return false;
  }

  public boolean equals(ParameterDescription that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_scale = true;
    boolean that_present_scale = true;
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_minValue = true;
    boolean that_present_minValue = true;
    if (this_present_minValue || that_present_minValue) {
      if (!(this_present_minValue && that_present_minValue))
        return false;
      if (this.minValue != that.minValue)
        return false;
    }

    boolean this_present_maxValue = true;
    boolean that_present_maxValue = true;
    if (this_present_maxValue || that_present_maxValue) {
      if (!(this_present_maxValue && that_present_maxValue))
        return false;
      if (this.maxValue != that.maxValue)
        return false;
    }

    boolean this_present_initialValue = true;
    boolean that_present_initialValue = true;
    if (this_present_initialValue || that_present_initialValue) {
      if (!(this_present_initialValue && that_present_initialValue))
        return false;
      if (this.initialValue != that.initialValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_scale = true;
    list.add(present_scale);
    if (present_scale)
      list.add(scale);

    boolean present_minValue = true;
    list.add(present_minValue);
    if (present_minValue)
      list.add(minValue);

    boolean present_maxValue = true;
    list.add(present_maxValue);
    if (present_maxValue)
      list.add(maxValue);

    boolean present_initialValue = true;
    list.add(present_initialValue);
    if (present_initialValue)
      list.add(initialValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(ParameterDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinValue()).compareTo(other.isSetMinValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minValue, other.minValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxValue()).compareTo(other.isSetMaxValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxValue, other.maxValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialValue()).compareTo(other.isSetInitialValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialValue, other.initialValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ParameterDescription(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scale:");
    sb.append(this.scale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minValue:");
    sb.append(this.minValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxValue:");
    sb.append(this.maxValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initialValue:");
    sb.append(this.initialValue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'scale' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'minValue' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxValue' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'initialValue' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParameterDescriptionStandardSchemeFactory implements SchemeFactory {
    public ParameterDescriptionStandardScheme getScheme() {
      return new ParameterDescriptionStandardScheme();
    }
  }

  private static class ParameterDescriptionStandardScheme extends StandardScheme<ParameterDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ParameterDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.scale = iprot.readDouble();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minValue = iprot.readDouble();
              struct.setMinValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxValue = iprot.readDouble();
              struct.setMaxValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INITIAL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialValue = iprot.readDouble();
              struct.setInitialValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetScale()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scale' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMinValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'minValue' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxValue' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInitialValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'initialValue' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ParameterDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCALE_FIELD_DESC);
      oprot.writeDouble(struct.scale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.minValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.maxValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INITIAL_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.initialValue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParameterDescriptionTupleSchemeFactory implements SchemeFactory {
    public ParameterDescriptionTupleScheme getScheme() {
      return new ParameterDescriptionTupleScheme();
    }
  }

  private static class ParameterDescriptionTupleScheme extends TupleScheme<ParameterDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ParameterDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeDouble(struct.scale);
      oprot.writeDouble(struct.minValue);
      oprot.writeDouble(struct.maxValue);
      oprot.writeDouble(struct.initialValue);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ParameterDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.scale = iprot.readDouble();
      struct.setScaleIsSet(true);
      struct.minValue = iprot.readDouble();
      struct.setMinValueIsSet(true);
      struct.maxValue = iprot.readDouble();
      struct.setMaxValueIsSet(true);
      struct.initialValue = iprot.readDouble();
      struct.setInitialValueIsSet(true);
    }
  }

}

