/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cbit.vcell.client.pyvcellproxy;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-12")
public class VCellProxy {

  public interface Iface {

    public java.lang.String getDataSetFileOfVariableAtTimeIndex(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex) throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<SimulationDataSetRef> getSimsFromOpenModels() throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<java.lang.Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException;

    public java.util.List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException;

    public PostProcessingData getPostProcessingData(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException;

    public void displayPostProcessingDataInVCell(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDataSetFileOfVariableAtTimeIndex(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>> resultHandler) throws org.apache.thrift.TException;

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException;

    public void getPostProcessingData(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<PostProcessingData> resultHandler) throws org.apache.thrift.TException;

    public void displayPostProcessingDataInVCell(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getDataSetFileOfVariableAtTimeIndex(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getDataSetFileOfVariableAtTimeIndex(simulationDataSetRef, varInfo, timeIndex);
      return recv_getDataSetFileOfVariableAtTimeIndex();
    }

    public void send_getDataSetFileOfVariableAtTimeIndex(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex) throws org.apache.thrift.TException
    {
      getDataSetFileOfVariableAtTimeIndex_args args = new getDataSetFileOfVariableAtTimeIndex_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      args.setVarInfo(varInfo);
      args.setTimeIndex(timeIndex);
      sendBase("getDataSetFileOfVariableAtTimeIndex", args);
    }

    public java.lang.String recv_getDataSetFileOfVariableAtTimeIndex() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getDataSetFileOfVariableAtTimeIndex_result result = new getDataSetFileOfVariableAtTimeIndex_result();
      receiveBase(result, "getDataSetFileOfVariableAtTimeIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataSetFileOfVariableAtTimeIndex failed: unknown result");
    }

    public java.util.List<SimulationDataSetRef> getSimsFromOpenModels() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getSimsFromOpenModels();
      return recv_getSimsFromOpenModels();
    }

    public void send_getSimsFromOpenModels() throws org.apache.thrift.TException
    {
      getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
      sendBase("getSimsFromOpenModels", args);
    }

    public java.util.List<SimulationDataSetRef> recv_getSimsFromOpenModels() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
      receiveBase(result, "getSimsFromOpenModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimsFromOpenModels failed: unknown result");
    }

    public java.util.List<java.lang.Double> getTimePoints(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getTimePoints(simulationDataSetRef);
      return recv_getTimePoints();
    }

    public void send_getTimePoints(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getTimePoints_args args = new getTimePoints_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getTimePoints", args);
    }

    public java.util.List<java.lang.Double> recv_getTimePoints() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getTimePoints_result result = new getTimePoints_result();
      receiveBase(result, "getTimePoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimePoints failed: unknown result");
    }

    public java.util.List<VariableInfo> getVariableList(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getVariableList(simulationDataSetRef);
      return recv_getVariableList();
    }

    public void send_getVariableList(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getVariableList_args args = new getVariableList_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getVariableList", args);
    }

    public java.util.List<VariableInfo> recv_getVariableList() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getVariableList_result result = new getVariableList_result();
      receiveBase(result, "getVariableList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVariableList failed: unknown result");
    }

    public PostProcessingData getPostProcessingData(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_getPostProcessingData(simulationDataSetRef);
      return recv_getPostProcessingData();
    }

    public void send_getPostProcessingData(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      getPostProcessingData_args args = new getPostProcessingData_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("getPostProcessingData", args);
    }

    public PostProcessingData recv_getPostProcessingData() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      getPostProcessingData_result result = new getPostProcessingData_result();
      receiveBase(result, "getPostProcessingData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPostProcessingData failed: unknown result");
    }

    public void displayPostProcessingDataInVCell(SimulationDataSetRef simulationDataSetRef) throws ThriftDataAccessException, org.apache.thrift.TException
    {
      send_displayPostProcessingDataInVCell(simulationDataSetRef);
      recv_displayPostProcessingDataInVCell();
    }

    public void send_displayPostProcessingDataInVCell(SimulationDataSetRef simulationDataSetRef) throws org.apache.thrift.TException
    {
      displayPostProcessingDataInVCell_args args = new displayPostProcessingDataInVCell_args();
      args.setSimulationDataSetRef(simulationDataSetRef);
      sendBase("displayPostProcessingDataInVCell", args);
    }

    public void recv_displayPostProcessingDataInVCell() throws ThriftDataAccessException, org.apache.thrift.TException
    {
      displayPostProcessingDataInVCell_result result = new displayPostProcessingDataInVCell_result();
      receiveBase(result, "displayPostProcessingDataInVCell");
      if (result.dataAccessException != null) {
        throw result.dataAccessException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDataSetFileOfVariableAtTimeIndex(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataSetFileOfVariableAtTimeIndex_call method_call = new getDataSetFileOfVariableAtTimeIndex_call(simulationDataSetRef, varInfo, timeIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataSetFileOfVariableAtTimeIndex_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private SimulationDataSetRef simulationDataSetRef;
      private VariableInfo varInfo;
      private int timeIndex;
      public getDataSetFileOfVariableAtTimeIndex_call(SimulationDataSetRef simulationDataSetRef, VariableInfo varInfo, int timeIndex, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
        this.varInfo = varInfo;
        this.timeIndex = timeIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataSetFileOfVariableAtTimeIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataSetFileOfVariableAtTimeIndex_args args = new getDataSetFileOfVariableAtTimeIndex_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.setVarInfo(varInfo);
        args.setTimeIndex(timeIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataSetFileOfVariableAtTimeIndex();
      }
    }

    public void getSimsFromOpenModels(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimsFromOpenModels_call method_call = new getSimsFromOpenModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimsFromOpenModels_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SimulationDataSetRef>> {
      public getSimsFromOpenModels_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimsFromOpenModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimsFromOpenModels_args args = new getSimsFromOpenModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SimulationDataSetRef> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimsFromOpenModels();
      }
    }

    public void getTimePoints(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimePoints_call method_call = new getTimePoints_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimePoints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private SimulationDataSetRef simulationDataSetRef;
      public getTimePoints_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimePoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimePoints_args args = new getTimePoints_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Double> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimePoints();
      }
    }

    public void getVariableList(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVariableList_call method_call = new getVariableList_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVariableList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<VariableInfo>> {
      private SimulationDataSetRef simulationDataSetRef;
      public getVariableList_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVariableList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVariableList_args args = new getVariableList_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<VariableInfo> getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVariableList();
      }
    }

    public void getPostProcessingData(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<PostProcessingData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPostProcessingData_call method_call = new getPostProcessingData_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPostProcessingData_call extends org.apache.thrift.async.TAsyncMethodCall<PostProcessingData> {
      private SimulationDataSetRef simulationDataSetRef;
      public getPostProcessingData_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<PostProcessingData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPostProcessingData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPostProcessingData_args args = new getPostProcessingData_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PostProcessingData getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPostProcessingData();
      }
    }

    public void displayPostProcessingDataInVCell(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      displayPostProcessingDataInVCell_call method_call = new displayPostProcessingDataInVCell_call(simulationDataSetRef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class displayPostProcessingDataInVCell_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private SimulationDataSetRef simulationDataSetRef;
      public displayPostProcessingDataInVCell_call(SimulationDataSetRef simulationDataSetRef, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simulationDataSetRef = simulationDataSetRef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("displayPostProcessingDataInVCell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        displayPostProcessingDataInVCell_args args = new displayPostProcessingDataInVCell_args();
        args.setSimulationDataSetRef(simulationDataSetRef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftDataAccessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDataSetFileOfVariableAtTimeIndex", new getDataSetFileOfVariableAtTimeIndex());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getPostProcessingData", new getPostProcessingData());
      processMap.put("displayPostProcessingDataInVCell", new displayPostProcessingDataInVCell());
      return processMap;
    }

    public static class getDataSetFileOfVariableAtTimeIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataSetFileOfVariableAtTimeIndex_args> {
      public getDataSetFileOfVariableAtTimeIndex() {
        super("getDataSetFileOfVariableAtTimeIndex");
      }

      public getDataSetFileOfVariableAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfVariableAtTimeIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataSetFileOfVariableAtTimeIndex_result getResult(I iface, getDataSetFileOfVariableAtTimeIndex_args args) throws org.apache.thrift.TException {
        getDataSetFileOfVariableAtTimeIndex_result result = new getDataSetFileOfVariableAtTimeIndex_result();
        try {
          result.success = iface.getDataSetFileOfVariableAtTimeIndex(args.simulationDataSetRef, args.varInfo, args.timeIndex);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getSimsFromOpenModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimsFromOpenModels_args> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSimsFromOpenModels_result getResult(I iface, getSimsFromOpenModels_args args) throws org.apache.thrift.TException {
        getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
        try {
          result.success = iface.getSimsFromOpenModels();
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getTimePoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimePoints_args> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimePoints_result getResult(I iface, getTimePoints_args args) throws org.apache.thrift.TException {
        getTimePoints_result result = new getTimePoints_result();
        try {
          result.success = iface.getTimePoints(args.simulationDataSetRef);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getVariableList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVariableList_args> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVariableList_result getResult(I iface, getVariableList_args args) throws org.apache.thrift.TException {
        getVariableList_result result = new getVariableList_result();
        try {
          result.success = iface.getVariableList(args.simulationDataSetRef);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class getPostProcessingData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPostProcessingData_args> {
      public getPostProcessingData() {
        super("getPostProcessingData");
      }

      public getPostProcessingData_args getEmptyArgsInstance() {
        return new getPostProcessingData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPostProcessingData_result getResult(I iface, getPostProcessingData_args args) throws org.apache.thrift.TException {
        getPostProcessingData_result result = new getPostProcessingData_result();
        try {
          result.success = iface.getPostProcessingData(args.simulationDataSetRef);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

    public static class displayPostProcessingDataInVCell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, displayPostProcessingDataInVCell_args> {
      public displayPostProcessingDataInVCell() {
        super("displayPostProcessingDataInVCell");
      }

      public displayPostProcessingDataInVCell_args getEmptyArgsInstance() {
        return new displayPostProcessingDataInVCell_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public displayPostProcessingDataInVCell_result getResult(I iface, displayPostProcessingDataInVCell_args args) throws org.apache.thrift.TException {
        displayPostProcessingDataInVCell_result result = new displayPostProcessingDataInVCell_result();
        try {
          iface.displayPostProcessingDataInVCell(args.simulationDataSetRef);
        } catch (ThriftDataAccessException dataAccessException) {
          result.dataAccessException = dataAccessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDataSetFileOfVariableAtTimeIndex", new getDataSetFileOfVariableAtTimeIndex());
      processMap.put("getSimsFromOpenModels", new getSimsFromOpenModels());
      processMap.put("getTimePoints", new getTimePoints());
      processMap.put("getVariableList", new getVariableList());
      processMap.put("getPostProcessingData", new getPostProcessingData());
      processMap.put("displayPostProcessingDataInVCell", new displayPostProcessingDataInVCell());
      return processMap;
    }

    public static class getDataSetFileOfVariableAtTimeIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataSetFileOfVariableAtTimeIndex_args, java.lang.String> {
      public getDataSetFileOfVariableAtTimeIndex() {
        super("getDataSetFileOfVariableAtTimeIndex");
      }

      public getDataSetFileOfVariableAtTimeIndex_args getEmptyArgsInstance() {
        return new getDataSetFileOfVariableAtTimeIndex_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getDataSetFileOfVariableAtTimeIndex_result result = new getDataSetFileOfVariableAtTimeIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDataSetFileOfVariableAtTimeIndex_result result = new getDataSetFileOfVariableAtTimeIndex_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataSetFileOfVariableAtTimeIndex_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getDataSetFileOfVariableAtTimeIndex(args.simulationDataSetRef, args.varInfo, args.timeIndex,resultHandler);
      }
    }

    public static class getSimsFromOpenModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimsFromOpenModels_args, java.util.List<SimulationDataSetRef>> {
      public getSimsFromOpenModels() {
        super("getSimsFromOpenModels");
      }

      public getSimsFromOpenModels_args getEmptyArgsInstance() {
        return new getSimsFromOpenModels_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>>() { 
          public void onComplete(java.util.List<SimulationDataSetRef> o) {
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSimsFromOpenModels_result result = new getSimsFromOpenModels_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSimsFromOpenModels_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SimulationDataSetRef>> resultHandler) throws org.apache.thrift.TException {
        iface.getSimsFromOpenModels(resultHandler);
      }
    }

    public static class getTimePoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimePoints_args, java.util.List<java.lang.Double>> {
      public getTimePoints() {
        super("getTimePoints");
      }

      public getTimePoints_args getEmptyArgsInstance() {
        return new getTimePoints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          public void onComplete(java.util.List<java.lang.Double> o) {
            getTimePoints_result result = new getTimePoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTimePoints_result result = new getTimePoints_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimePoints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.getTimePoints(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getVariableList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVariableList_args, java.util.List<VariableInfo>> {
      public getVariableList() {
        super("getVariableList");
      }

      public getVariableList_args getEmptyArgsInstance() {
        return new getVariableList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>>() { 
          public void onComplete(java.util.List<VariableInfo> o) {
            getVariableList_result result = new getVariableList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getVariableList_result result = new getVariableList_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVariableList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VariableInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getVariableList(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class getPostProcessingData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPostProcessingData_args, PostProcessingData> {
      public getPostProcessingData() {
        super("getPostProcessingData");
      }

      public getPostProcessingData_args getEmptyArgsInstance() {
        return new getPostProcessingData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PostProcessingData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PostProcessingData>() { 
          public void onComplete(PostProcessingData o) {
            getPostProcessingData_result result = new getPostProcessingData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPostProcessingData_result result = new getPostProcessingData_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPostProcessingData_args args, org.apache.thrift.async.AsyncMethodCallback<PostProcessingData> resultHandler) throws org.apache.thrift.TException {
        iface.getPostProcessingData(args.simulationDataSetRef,resultHandler);
      }
    }

    public static class displayPostProcessingDataInVCell<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, displayPostProcessingDataInVCell_args, Void> {
      public displayPostProcessingDataInVCell() {
        super("displayPostProcessingDataInVCell");
      }

      public displayPostProcessingDataInVCell_args getEmptyArgsInstance() {
        return new displayPostProcessingDataInVCell_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            displayPostProcessingDataInVCell_result result = new displayPostProcessingDataInVCell_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            displayPostProcessingDataInVCell_result result = new displayPostProcessingDataInVCell_result();
            if (e instanceof ThriftDataAccessException) {
              result.dataAccessException = (ThriftDataAccessException) e;
              result.setDataAccessExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, displayPostProcessingDataInVCell_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.displayPostProcessingDataInVCell(args.simulationDataSetRef,resultHandler);
      }
    }

  }

  public static class getDataSetFileOfVariableAtTimeIndex_args implements org.apache.thrift.TBase<getDataSetFileOfVariableAtTimeIndex_args, getDataSetFileOfVariableAtTimeIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfVariableAtTimeIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfVariableAtTimeIndex_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VAR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("varInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIndex", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDataSetFileOfVariableAtTimeIndex_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDataSetFileOfVariableAtTimeIndex_argsTupleSchemeFactory();

    public SimulationDataSetRef simulationDataSetRef; // required
    public VariableInfo varInfo; // required
    public int timeIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef"),
      VAR_INFO((short)2, "varInfo"),
      TIME_INDEX((short)3, "timeIndex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          case 2: // VAR_INFO
            return VAR_INFO;
          case 3: // TIME_INDEX
            return TIME_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      tmpMap.put(_Fields.VAR_INFO, new org.apache.thrift.meta_data.FieldMetaData("varInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VariableInfo.class)));
      tmpMap.put(_Fields.TIME_INDEX, new org.apache.thrift.meta_data.FieldMetaData("timeIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TimeIndex")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfVariableAtTimeIndex_args.class, metaDataMap);
    }

    public getDataSetFileOfVariableAtTimeIndex_args() {
    }

    public getDataSetFileOfVariableAtTimeIndex_args(
      SimulationDataSetRef simulationDataSetRef,
      VariableInfo varInfo,
      int timeIndex)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
      this.varInfo = varInfo;
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfVariableAtTimeIndex_args(getDataSetFileOfVariableAtTimeIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
      if (other.isSetVarInfo()) {
        this.varInfo = new VariableInfo(other.varInfo);
      }
      this.timeIndex = other.timeIndex;
    }

    public getDataSetFileOfVariableAtTimeIndex_args deepCopy() {
      return new getDataSetFileOfVariableAtTimeIndex_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
      this.varInfo = null;
      setTimeIndexIsSet(false);
      this.timeIndex = 0;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getDataSetFileOfVariableAtTimeIndex_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public VariableInfo getVarInfo() {
      return this.varInfo;
    }

    public getDataSetFileOfVariableAtTimeIndex_args setVarInfo(VariableInfo varInfo) {
      this.varInfo = varInfo;
      return this;
    }

    public void unsetVarInfo() {
      this.varInfo = null;
    }

    /** Returns true if field varInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetVarInfo() {
      return this.varInfo != null;
    }

    public void setVarInfoIsSet(boolean value) {
      if (!value) {
        this.varInfo = null;
      }
    }

    public int getTimeIndex() {
      return this.timeIndex;
    }

    public getDataSetFileOfVariableAtTimeIndex_args setTimeIndex(int timeIndex) {
      this.timeIndex = timeIndex;
      setTimeIndexIsSet(true);
      return this;
    }

    public void unsetTimeIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    /** Returns true if field timeIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEINDEX_ISSET_ID);
    }

    public void setTimeIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      case VAR_INFO:
        if (value == null) {
          unsetVarInfo();
        } else {
          setVarInfo((VariableInfo)value);
        }
        break;

      case TIME_INDEX:
        if (value == null) {
          unsetTimeIndex();
        } else {
          setTimeIndex((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      case VAR_INFO:
        return getVarInfo();

      case TIME_INDEX:
        return getTimeIndex();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      case VAR_INFO:
        return isSetVarInfo();
      case TIME_INDEX:
        return isSetTimeIndex();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfVariableAtTimeIndex_args)
        return this.equals((getDataSetFileOfVariableAtTimeIndex_args)that);
      return false;
    }

    public boolean equals(getDataSetFileOfVariableAtTimeIndex_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      boolean this_present_varInfo = true && this.isSetVarInfo();
      boolean that_present_varInfo = true && that.isSetVarInfo();
      if (this_present_varInfo || that_present_varInfo) {
        if (!(this_present_varInfo && that_present_varInfo))
          return false;
        if (!this.varInfo.equals(that.varInfo))
          return false;
      }

      boolean this_present_timeIndex = true;
      boolean that_present_timeIndex = true;
      if (this_present_timeIndex || that_present_timeIndex) {
        if (!(this_present_timeIndex && that_present_timeIndex))
          return false;
        if (this.timeIndex != that.timeIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimulationDataSetRef()) ? 131071 : 524287);
      if (isSetSimulationDataSetRef())
        hashCode = hashCode * 8191 + simulationDataSetRef.hashCode();

      hashCode = hashCode * 8191 + ((isSetVarInfo()) ? 131071 : 524287);
      if (isSetVarInfo())
        hashCode = hashCode * 8191 + varInfo.hashCode();

      hashCode = hashCode * 8191 + timeIndex;

      return hashCode;
    }

    @Override
    public int compareTo(getDataSetFileOfVariableAtTimeIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVarInfo()).compareTo(other.isSetVarInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVarInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varInfo, other.varInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeIndex()).compareTo(other.isSetTimeIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIndex, other.timeIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDataSetFileOfVariableAtTimeIndex_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("varInfo:");
      if (this.varInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.varInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeIndex:");
      sb.append(this.timeIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
      if (varInfo != null) {
        varInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDataSetFileOfVariableAtTimeIndex_argsStandardScheme getScheme() {
        return new getDataSetFileOfVariableAtTimeIndex_argsStandardScheme();
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDataSetFileOfVariableAtTimeIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfVariableAtTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAR_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.varInfo = new VariableInfo();
                struct.varInfo.read(iprot);
                struct.setVarInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeIndex = iprot.readI32();
                struct.setTimeIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfVariableAtTimeIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.varInfo != null) {
          oprot.writeFieldBegin(VAR_INFO_FIELD_DESC);
          struct.varInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_INDEX_FIELD_DESC);
        oprot.writeI32(struct.timeIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfVariableAtTimeIndex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDataSetFileOfVariableAtTimeIndex_argsTupleScheme getScheme() {
        return new getDataSetFileOfVariableAtTimeIndex_argsTupleScheme();
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDataSetFileOfVariableAtTimeIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfVariableAtTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        if (struct.isSetVarInfo()) {
          optionals.set(1);
        }
        if (struct.isSetTimeIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
        if (struct.isSetVarInfo()) {
          struct.varInfo.write(oprot);
        }
        if (struct.isSetTimeIndex()) {
          oprot.writeI32(struct.timeIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfVariableAtTimeIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
        if (incoming.get(1)) {
          struct.varInfo = new VariableInfo();
          struct.varInfo.read(iprot);
          struct.setVarInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeIndex = iprot.readI32();
          struct.setTimeIndexIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDataSetFileOfVariableAtTimeIndex_result implements org.apache.thrift.TBase<getDataSetFileOfVariableAtTimeIndex_result, getDataSetFileOfVariableAtTimeIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataSetFileOfVariableAtTimeIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataSetFileOfVariableAtTimeIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDataSetFileOfVariableAtTimeIndex_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDataSetFileOfVariableAtTimeIndex_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "FilePath")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataSetFileOfVariableAtTimeIndex_result.class, metaDataMap);
    }

    public getDataSetFileOfVariableAtTimeIndex_result() {
    }

    public getDataSetFileOfVariableAtTimeIndex_result(
      java.lang.String success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataSetFileOfVariableAtTimeIndex_result(getDataSetFileOfVariableAtTimeIndex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getDataSetFileOfVariableAtTimeIndex_result deepCopy() {
      return new getDataSetFileOfVariableAtTimeIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getDataSetFileOfVariableAtTimeIndex_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getDataSetFileOfVariableAtTimeIndex_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataSetFileOfVariableAtTimeIndex_result)
        return this.equals((getDataSetFileOfVariableAtTimeIndex_result)that);
      return false;
    }

    public boolean equals(getDataSetFileOfVariableAtTimeIndex_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDataSetFileOfVariableAtTimeIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDataSetFileOfVariableAtTimeIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDataSetFileOfVariableAtTimeIndex_resultStandardScheme getScheme() {
        return new getDataSetFileOfVariableAtTimeIndex_resultStandardScheme();
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDataSetFileOfVariableAtTimeIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataSetFileOfVariableAtTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataSetFileOfVariableAtTimeIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataSetFileOfVariableAtTimeIndex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDataSetFileOfVariableAtTimeIndex_resultTupleScheme getScheme() {
        return new getDataSetFileOfVariableAtTimeIndex_resultTupleScheme();
      }
    }

    private static class getDataSetFileOfVariableAtTimeIndex_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDataSetFileOfVariableAtTimeIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfVariableAtTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataSetFileOfVariableAtTimeIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSimsFromOpenModels_args implements org.apache.thrift.TBase<getSimsFromOpenModels_args, getSimsFromOpenModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSimsFromOpenModels_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSimsFromOpenModels_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_args.class, metaDataMap);
    }

    public getSimsFromOpenModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_args(getSimsFromOpenModels_args other) {
    }

    public getSimsFromOpenModels_args deepCopy() {
      return new getSimsFromOpenModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_args)
        return this.equals((getSimsFromOpenModels_args)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getSimsFromOpenModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSimsFromOpenModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSimsFromOpenModels_argsStandardScheme getScheme() {
        return new getSimsFromOpenModels_argsStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSimsFromOpenModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSimsFromOpenModels_argsTupleScheme getScheme() {
        return new getSimsFromOpenModels_argsTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSimsFromOpenModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSimsFromOpenModels_result implements org.apache.thrift.TBase<getSimsFromOpenModels_result, getSimsFromOpenModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimsFromOpenModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimsFromOpenModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSimsFromOpenModels_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSimsFromOpenModels_resultTupleSchemeFactory();

    public java.util.List<SimulationDataSetRef> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "SimulationDataSetRefList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimsFromOpenModels_result.class, metaDataMap);
    }

    public getSimsFromOpenModels_result() {
    }

    public getSimsFromOpenModels_result(
      java.util.List<SimulationDataSetRef> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimsFromOpenModels_result(getSimsFromOpenModels_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SimulationDataSetRef> __this__success = new java.util.ArrayList<SimulationDataSetRef>(other.success.size());
        for (SimulationDataSetRef other_element : other.success) {
          __this__success.add(new SimulationDataSetRef(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getSimsFromOpenModels_result deepCopy() {
      return new getSimsFromOpenModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SimulationDataSetRef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SimulationDataSetRef elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SimulationDataSetRef>();
      }
      this.success.add(elem);
    }

    public java.util.List<SimulationDataSetRef> getSuccess() {
      return this.success;
    }

    public getSimsFromOpenModels_result setSuccess(java.util.List<SimulationDataSetRef> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getSimsFromOpenModels_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SimulationDataSetRef>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimsFromOpenModels_result)
        return this.equals((getSimsFromOpenModels_result)that);
      return false;
    }

    public boolean equals(getSimsFromOpenModels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSimsFromOpenModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSimsFromOpenModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimsFromOpenModels_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSimsFromOpenModels_resultStandardScheme getScheme() {
        return new getSimsFromOpenModels_resultStandardScheme();
      }
    }

    private static class getSimsFromOpenModels_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSimsFromOpenModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SimulationDataSetRef>(_list48.size);
                  SimulationDataSetRef _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new SimulationDataSetRef();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SimulationDataSetRef _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimsFromOpenModels_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSimsFromOpenModels_resultTupleScheme getScheme() {
        return new getSimsFromOpenModels_resultTupleScheme();
      }
    }

    private static class getSimsFromOpenModels_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSimsFromOpenModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SimulationDataSetRef _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimsFromOpenModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SimulationDataSetRef>(_list53.size);
            SimulationDataSetRef _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new SimulationDataSetRef();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTimePoints_args implements org.apache.thrift.TBase<getTimePoints_args, getTimePoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTimePoints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTimePoints_argsTupleSchemeFactory();

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_args.class, metaDataMap);
    }

    public getTimePoints_args() {
    }

    public getTimePoints_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_args(getTimePoints_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getTimePoints_args deepCopy() {
      return new getTimePoints_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getTimePoints_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_args)
        return this.equals((getTimePoints_args)that);
      return false;
    }

    public boolean equals(getTimePoints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimulationDataSetRef()) ? 131071 : 524287);
      if (isSetSimulationDataSetRef())
        hashCode = hashCode * 8191 + simulationDataSetRef.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTimePoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTimePoints_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_argsStandardScheme getScheme() {
        return new getTimePoints_argsStandardScheme();
      }
    }

    private static class getTimePoints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTimePoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_argsTupleScheme getScheme() {
        return new getTimePoints_argsTupleScheme();
      }
    }

    private static class getTimePoints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTimePoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTimePoints_result implements org.apache.thrift.TBase<getTimePoints_result, getTimePoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimePoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimePoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTimePoints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTimePoints_resultTupleSchemeFactory();

    public java.util.List<java.lang.Double> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TimePoints")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimePoints_result.class, metaDataMap);
    }

    public getTimePoints_result() {
    }

    public getTimePoints_result(
      java.util.List<java.lang.Double> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimePoints_result(getTimePoints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success.size());
        for (java.lang.Double other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getTimePoints_result deepCopy() {
      return new getTimePoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public getTimePoints_result setSuccess(java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getTimePoints_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimePoints_result)
        return this.equals((getTimePoints_result)that);
      return false;
    }

    public boolean equals(getTimePoints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTimePoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTimePoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimePoints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_resultStandardScheme getScheme() {
        return new getTimePoints_resultStandardScheme();
      }
    }

    private static class getTimePoints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTimePoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list56.size);
                  double _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readDouble();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimePoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter59 : struct.success)
            {
              oprot.writeDouble(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimePoints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTimePoints_resultTupleScheme getScheme() {
        return new getTimePoints_resultTupleScheme();
      }
    }

    private static class getTimePoints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTimePoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter60 : struct.success)
            {
              oprot.writeDouble(_iter60);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimePoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Double>(_list61.size);
            double _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readDouble();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariableList_args implements org.apache.thrift.TBase<getVariableList_args, getVariableList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariableList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariableList_argsTupleSchemeFactory();

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_args.class, metaDataMap);
    }

    public getVariableList_args() {
    }

    public getVariableList_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_args(getVariableList_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getVariableList_args deepCopy() {
      return new getVariableList_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getVariableList_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_args)
        return this.equals((getVariableList_args)that);
      return false;
    }

    public boolean equals(getVariableList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimulationDataSetRef()) ? 131071 : 524287);
      if (isSetSimulationDataSetRef())
        hashCode = hashCode * 8191 + simulationDataSetRef.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariableList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariableList_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_argsStandardScheme getScheme() {
        return new getVariableList_argsStandardScheme();
      }
    }

    private static class getVariableList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariableList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_argsTupleScheme getScheme() {
        return new getVariableList_argsTupleScheme();
      }
    }

    private static class getVariableList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariableList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getVariableList_result implements org.apache.thrift.TBase<getVariableList_result, getVariableList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVariableList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVariableList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getVariableList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getVariableList_resultTupleSchemeFactory();

    public java.util.List<VariableInfo> success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "VariableList")));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVariableList_result.class, metaDataMap);
    }

    public getVariableList_result() {
    }

    public getVariableList_result(
      java.util.List<VariableInfo> success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVariableList_result(getVariableList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<VariableInfo> __this__success = new java.util.ArrayList<VariableInfo>(other.success.size());
        for (VariableInfo other_element : other.success) {
          __this__success.add(new VariableInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getVariableList_result deepCopy() {
      return new getVariableList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VariableInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VariableInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<VariableInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<VariableInfo> getSuccess() {
      return this.success;
    }

    public getVariableList_result setSuccess(java.util.List<VariableInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getVariableList_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<VariableInfo>)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getVariableList_result)
        return this.equals((getVariableList_result)that);
      return false;
    }

    public boolean equals(getVariableList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getVariableList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getVariableList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVariableList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_resultStandardScheme getScheme() {
        return new getVariableList_resultStandardScheme();
      }
    }

    private static class getVariableList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getVariableList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<VariableInfo>(_list64.size);
                  VariableInfo _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new VariableInfo();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVariableList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VariableInfo _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVariableList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getVariableList_resultTupleScheme getScheme() {
        return new getVariableList_resultTupleScheme();
      }
    }

    private static class getVariableList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getVariableList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VariableInfo _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVariableList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<VariableInfo>(_list69.size);
            VariableInfo _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new VariableInfo();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPostProcessingData_args implements org.apache.thrift.TBase<getPostProcessingData_args, getPostProcessingData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPostProcessingData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPostProcessingData_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPostProcessingData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPostProcessingData_argsTupleSchemeFactory();

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPostProcessingData_args.class, metaDataMap);
    }

    public getPostProcessingData_args() {
    }

    public getPostProcessingData_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPostProcessingData_args(getPostProcessingData_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public getPostProcessingData_args deepCopy() {
      return new getPostProcessingData_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public getPostProcessingData_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPostProcessingData_args)
        return this.equals((getPostProcessingData_args)that);
      return false;
    }

    public boolean equals(getPostProcessingData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimulationDataSetRef()) ? 131071 : 524287);
      if (isSetSimulationDataSetRef())
        hashCode = hashCode * 8191 + simulationDataSetRef.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPostProcessingData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPostProcessingData_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPostProcessingData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPostProcessingData_argsStandardScheme getScheme() {
        return new getPostProcessingData_argsStandardScheme();
      }
    }

    private static class getPostProcessingData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPostProcessingData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPostProcessingData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPostProcessingData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPostProcessingData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPostProcessingData_argsTupleScheme getScheme() {
        return new getPostProcessingData_argsTupleScheme();
      }
    }

    private static class getPostProcessingData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPostProcessingData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPostProcessingData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPostProcessingData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPostProcessingData_result implements org.apache.thrift.TBase<getPostProcessingData_result, getPostProcessingData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPostProcessingData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPostProcessingData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPostProcessingData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPostProcessingData_resultTupleSchemeFactory();

    public PostProcessingData success; // required
    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostProcessingData.class)));
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPostProcessingData_result.class, metaDataMap);
    }

    public getPostProcessingData_result() {
    }

    public getPostProcessingData_result(
      PostProcessingData success,
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.success = success;
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPostProcessingData_result(getPostProcessingData_result other) {
      if (other.isSetSuccess()) {
        this.success = new PostProcessingData(other.success);
      }
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public getPostProcessingData_result deepCopy() {
      return new getPostProcessingData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataAccessException = null;
    }

    public PostProcessingData getSuccess() {
      return this.success;
    }

    public getPostProcessingData_result setSuccess(PostProcessingData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public getPostProcessingData_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PostProcessingData)value);
        }
        break;

      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPostProcessingData_result)
        return this.equals((getPostProcessingData_result)that);
      return false;
    }

    public boolean equals(getPostProcessingData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPostProcessingData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPostProcessingData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPostProcessingData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPostProcessingData_resultStandardScheme getScheme() {
        return new getPostProcessingData_resultStandardScheme();
      }
    }

    private static class getPostProcessingData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPostProcessingData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPostProcessingData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PostProcessingData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPostProcessingData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPostProcessingData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPostProcessingData_resultTupleScheme getScheme() {
        return new getPostProcessingData_resultTupleScheme();
      }
    }

    private static class getPostProcessingData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPostProcessingData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPostProcessingData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataAccessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPostProcessingData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PostProcessingData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class displayPostProcessingDataInVCell_args implements org.apache.thrift.TBase<displayPostProcessingDataInVCell_args, displayPostProcessingDataInVCell_args._Fields>, java.io.Serializable, Cloneable, Comparable<displayPostProcessingDataInVCell_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("displayPostProcessingDataInVCell_args");

    private static final org.apache.thrift.protocol.TField SIMULATION_DATA_SET_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("simulationDataSetRef", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new displayPostProcessingDataInVCell_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new displayPostProcessingDataInVCell_argsTupleSchemeFactory();

    public SimulationDataSetRef simulationDataSetRef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMULATION_DATA_SET_REF((short)1, "simulationDataSetRef");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMULATION_DATA_SET_REF
            return SIMULATION_DATA_SET_REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMULATION_DATA_SET_REF, new org.apache.thrift.meta_data.FieldMetaData("simulationDataSetRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimulationDataSetRef.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(displayPostProcessingDataInVCell_args.class, metaDataMap);
    }

    public displayPostProcessingDataInVCell_args() {
    }

    public displayPostProcessingDataInVCell_args(
      SimulationDataSetRef simulationDataSetRef)
    {
      this();
      this.simulationDataSetRef = simulationDataSetRef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayPostProcessingDataInVCell_args(displayPostProcessingDataInVCell_args other) {
      if (other.isSetSimulationDataSetRef()) {
        this.simulationDataSetRef = new SimulationDataSetRef(other.simulationDataSetRef);
      }
    }

    public displayPostProcessingDataInVCell_args deepCopy() {
      return new displayPostProcessingDataInVCell_args(this);
    }

    @Override
    public void clear() {
      this.simulationDataSetRef = null;
    }

    public SimulationDataSetRef getSimulationDataSetRef() {
      return this.simulationDataSetRef;
    }

    public displayPostProcessingDataInVCell_args setSimulationDataSetRef(SimulationDataSetRef simulationDataSetRef) {
      this.simulationDataSetRef = simulationDataSetRef;
      return this;
    }

    public void unsetSimulationDataSetRef() {
      this.simulationDataSetRef = null;
    }

    /** Returns true if field simulationDataSetRef is set (has been assigned a value) and false otherwise */
    public boolean isSetSimulationDataSetRef() {
      return this.simulationDataSetRef != null;
    }

    public void setSimulationDataSetRefIsSet(boolean value) {
      if (!value) {
        this.simulationDataSetRef = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        if (value == null) {
          unsetSimulationDataSetRef();
        } else {
          setSimulationDataSetRef((SimulationDataSetRef)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return getSimulationDataSetRef();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SIMULATION_DATA_SET_REF:
        return isSetSimulationDataSetRef();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof displayPostProcessingDataInVCell_args)
        return this.equals((displayPostProcessingDataInVCell_args)that);
      return false;
    }

    public boolean equals(displayPostProcessingDataInVCell_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simulationDataSetRef = true && this.isSetSimulationDataSetRef();
      boolean that_present_simulationDataSetRef = true && that.isSetSimulationDataSetRef();
      if (this_present_simulationDataSetRef || that_present_simulationDataSetRef) {
        if (!(this_present_simulationDataSetRef && that_present_simulationDataSetRef))
          return false;
        if (!this.simulationDataSetRef.equals(that.simulationDataSetRef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimulationDataSetRef()) ? 131071 : 524287);
      if (isSetSimulationDataSetRef())
        hashCode = hashCode * 8191 + simulationDataSetRef.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(displayPostProcessingDataInVCell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSimulationDataSetRef()).compareTo(other.isSetSimulationDataSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimulationDataSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simulationDataSetRef, other.simulationDataSetRef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("displayPostProcessingDataInVCell_args(");
      boolean first = true;

      sb.append("simulationDataSetRef:");
      if (this.simulationDataSetRef == null) {
        sb.append("null");
      } else {
        sb.append(this.simulationDataSetRef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simulationDataSetRef != null) {
        simulationDataSetRef.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class displayPostProcessingDataInVCell_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public displayPostProcessingDataInVCell_argsStandardScheme getScheme() {
        return new displayPostProcessingDataInVCell_argsStandardScheme();
      }
    }

    private static class displayPostProcessingDataInVCell_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<displayPostProcessingDataInVCell_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, displayPostProcessingDataInVCell_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMULATION_DATA_SET_REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simulationDataSetRef = new SimulationDataSetRef();
                struct.simulationDataSetRef.read(iprot);
                struct.setSimulationDataSetRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, displayPostProcessingDataInVCell_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simulationDataSetRef != null) {
          oprot.writeFieldBegin(SIMULATION_DATA_SET_REF_FIELD_DESC);
          struct.simulationDataSetRef.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class displayPostProcessingDataInVCell_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public displayPostProcessingDataInVCell_argsTupleScheme getScheme() {
        return new displayPostProcessingDataInVCell_argsTupleScheme();
      }
    }

    private static class displayPostProcessingDataInVCell_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<displayPostProcessingDataInVCell_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, displayPostProcessingDataInVCell_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimulationDataSetRef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimulationDataSetRef()) {
          struct.simulationDataSetRef.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, displayPostProcessingDataInVCell_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simulationDataSetRef = new SimulationDataSetRef();
          struct.simulationDataSetRef.read(iprot);
          struct.setSimulationDataSetRefIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class displayPostProcessingDataInVCell_result implements org.apache.thrift.TBase<displayPostProcessingDataInVCell_result, displayPostProcessingDataInVCell_result._Fields>, java.io.Serializable, Cloneable, Comparable<displayPostProcessingDataInVCell_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("displayPostProcessingDataInVCell_result");

    private static final org.apache.thrift.protocol.TField DATA_ACCESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataAccessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new displayPostProcessingDataInVCell_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new displayPostProcessingDataInVCell_resultTupleSchemeFactory();

    public ThriftDataAccessException dataAccessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_ACCESS_EXCEPTION((short)1, "dataAccessException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_ACCESS_EXCEPTION
            return DATA_ACCESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_ACCESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataAccessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDataAccessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(displayPostProcessingDataInVCell_result.class, metaDataMap);
    }

    public displayPostProcessingDataInVCell_result() {
    }

    public displayPostProcessingDataInVCell_result(
      ThriftDataAccessException dataAccessException)
    {
      this();
      this.dataAccessException = dataAccessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayPostProcessingDataInVCell_result(displayPostProcessingDataInVCell_result other) {
      if (other.isSetDataAccessException()) {
        this.dataAccessException = new ThriftDataAccessException(other.dataAccessException);
      }
    }

    public displayPostProcessingDataInVCell_result deepCopy() {
      return new displayPostProcessingDataInVCell_result(this);
    }

    @Override
    public void clear() {
      this.dataAccessException = null;
    }

    public ThriftDataAccessException getDataAccessException() {
      return this.dataAccessException;
    }

    public displayPostProcessingDataInVCell_result setDataAccessException(ThriftDataAccessException dataAccessException) {
      this.dataAccessException = dataAccessException;
      return this;
    }

    public void unsetDataAccessException() {
      this.dataAccessException = null;
    }

    /** Returns true if field dataAccessException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataAccessException() {
      return this.dataAccessException != null;
    }

    public void setDataAccessExceptionIsSet(boolean value) {
      if (!value) {
        this.dataAccessException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DATA_ACCESS_EXCEPTION:
        if (value == null) {
          unsetDataAccessException();
        } else {
          setDataAccessException((ThriftDataAccessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_ACCESS_EXCEPTION:
        return getDataAccessException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA_ACCESS_EXCEPTION:
        return isSetDataAccessException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof displayPostProcessingDataInVCell_result)
        return this.equals((displayPostProcessingDataInVCell_result)that);
      return false;
    }

    public boolean equals(displayPostProcessingDataInVCell_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dataAccessException = true && this.isSetDataAccessException();
      boolean that_present_dataAccessException = true && that.isSetDataAccessException();
      if (this_present_dataAccessException || that_present_dataAccessException) {
        if (!(this_present_dataAccessException && that_present_dataAccessException))
          return false;
        if (!this.dataAccessException.equals(that.dataAccessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDataAccessException()) ? 131071 : 524287);
      if (isSetDataAccessException())
        hashCode = hashCode * 8191 + dataAccessException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(displayPostProcessingDataInVCell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDataAccessException()).compareTo(other.isSetDataAccessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataAccessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataAccessException, other.dataAccessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("displayPostProcessingDataInVCell_result(");
      boolean first = true;

      sb.append("dataAccessException:");
      if (this.dataAccessException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataAccessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class displayPostProcessingDataInVCell_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public displayPostProcessingDataInVCell_resultStandardScheme getScheme() {
        return new displayPostProcessingDataInVCell_resultStandardScheme();
      }
    }

    private static class displayPostProcessingDataInVCell_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<displayPostProcessingDataInVCell_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, displayPostProcessingDataInVCell_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_ACCESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataAccessException = new ThriftDataAccessException();
                struct.dataAccessException.read(iprot);
                struct.setDataAccessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, displayPostProcessingDataInVCell_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataAccessException != null) {
          oprot.writeFieldBegin(DATA_ACCESS_EXCEPTION_FIELD_DESC);
          struct.dataAccessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class displayPostProcessingDataInVCell_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public displayPostProcessingDataInVCell_resultTupleScheme getScheme() {
        return new displayPostProcessingDataInVCell_resultTupleScheme();
      }
    }

    private static class displayPostProcessingDataInVCell_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<displayPostProcessingDataInVCell_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, displayPostProcessingDataInVCell_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDataAccessException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataAccessException()) {
          struct.dataAccessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, displayPostProcessingDataInVCell_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataAccessException = new ThriftDataAccessException();
          struct.dataAccessException.read(iprot);
          struct.setDataAccessExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
