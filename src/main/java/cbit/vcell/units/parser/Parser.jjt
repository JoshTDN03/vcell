/**
 *
 * VCell Unit Symbol Parser Grammer for JavaCC 
 *
 */

options {
  LOOKAHEAD = 1;
  UNICODE_INPUT = false;
  MULTI = true;
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(UnitSymbolParser)

package cbit.vcell.units.parser;

public class UnitSymbolParser {

  public static void main(String args[]) {
    UnitSymbolParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 0.2:  Reading from standard input . . .");
      parser = new UnitSymbolParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 0.2:  Reading from file " + args[0] + " . . .");
      try {
        parser = new UnitSymbolParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 0.2:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("VCELL Unit Symbol Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.unit.parser.UnitSymbolParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.unit.parser.UnitSymbolParser inputfile");
      return;
    }
    try {
      SimpleNode n = parser.UnitSymbol();
      n.dump("");
      System.out.println("infix = "+n.toInfix());
      System.out.println("symbol = "+n.toSymbol());
      UnitSymbol unitSymbol1 = new UnitSymbol(n.toInfix());
      UnitSymbol unitSymbol2 = new UnitSymbol(n.toSymbol());
      System.out.println("infix1 = "+unitSymbol1.getUnitSymbolAsInfix());
      System.out.println("symbol1 = "+unitSymbol1.getUnitSymbol());
      System.out.println("infix2 = "+unitSymbol2.getUnitSymbolAsInfix());
      System.out.println("symbol2 = "+unitSymbol2.getUnitSymbol());
      
      System.out.println("Java Parser Version 0.2:  Java program parsed successfully.");
    } catch (Exception e) {
      System.out.println("Java Parser Version 0.2:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(UnitSymbolParser)


/*
 * Tokens to consider in BNF follow.
 */

TOKEN : /* Arithmetic Operators */
{
  <POWER: "^"  > | 
  <SUB: "-" > |
  <MULT: "*" > |
  <DIV: "/" > 
}

TOKEN : /* LITERALS */
{
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
   >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < INTEGER_LITERAL: ("0") | ("1" (["0"-"9"])+) | (["2"-"9"] (["0"-"9"])*) >
|
  < ONE_LITERAL: "1" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER:
      (<LETTER>) (<LETTER>)*
  >
|
  < #LETTER:
      ["a"-"z", "_", "A"-"Z"]
  >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
ASTUnitSymbol UnitSymbol() :
{}
{
   (
   LOOKAHEAD(NumericScale() (" " | "*"))
   NumericScale() (" " | "*") MultiplicativeExpression() ";"
   |
   LOOKAHEAD(NumericScale() ";")
   NumericScale() ";"
   |
   MultiplicativeExpression() ";"
   )
   { return jjtThis; }
}

void MultiplicativeExpression() #void :
{}
{ 
  (
  ("1" | PowerTerm()) ( ((<MULT>|".") ("1" | PowerTerm() ) ) | DivTerm() )* 
  ) #MultNode(>1)
/*  |
  (
  IntegerBase() DivTerm() ( ((<MULT>|".") PowerTerm() ) | DivTerm() )* 
  ) #MultNode(>1)
*/  
}

void DivTerm() #InvertTermNode :
{}
{
   <DIV> PowerTerm()
}

void PowerTerm() #PowerTerm :
{}
{

  BaseExpression() [ ExponentExpression() ]
}

void ExponentExpression() #ExponentExpression :
{}
{
  
  [<POWER>] (Negative() | RationalNumberExponent())
}

void Negative() #Negative :
{}
{
	<SUB> RationalNumberExponent()
}

void BaseExpression() #void :
{}
{
  LOOKAHEAD(Name())
  Name()
|
  LOOKAHEAD("(")
  "(" MultiplicativeExpression() ")"
}

void NumericScale() #NumericScale:
{ Token t; }
{
  t = <FLOATING_POINT_LITERAL>
  { jjtThis.value = new Double(t.image); }
  |
  t = <INTEGER_LITERAL> 
  { jjtThis.value = new Double(t.image); }
  |
  t = <ONE_LITERAL> 
  { jjtThis.value = new Double(t.image); }
}

/*
void IntegerBase() #IntegerBaseNode:
{ Token t; }
{
  t = <INTEGER_LITERAL> 
  { jjtThis.value = new Integer(t.image); }
}
*/

void RationalNumberExponent() #RationalNumberExponent:
{ Token t1; Token t2; }
{
  t1 = <ONE_LITERAL>
  { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image)); }
  | 
  t1 = <INTEGER_LITERAL>
  { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image)); }
  | 
  LOOKAHEAD(<INTEGER_LITERAL> <DIV> <INTEGER_LITERAL>)
  "(" t1 = <INTEGER_LITERAL> <DIV> t2 = <INTEGER_LITERAL> ")"
   { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image)); }
  | 
  LOOKAHEAD(<ONE_LITERAL> <DIV> <INTEGER_LITERAL>)
  "(" t1 = <ONE_LITERAL> <DIV> t2 = <INTEGER_LITERAL> ")"
   { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image)); }
  | 
  LOOKAHEAD(<INTEGER_LITERAL> <DIV> <ONE_LITERAL>)
  "(" t1 = <INTEGER_LITERAL> <DIV> t2 = <ONE_LITERAL> ")"
  { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image)); }
  | 
  LOOKAHEAD(<ONE_LITERAL> <DIV> <ONE_LITERAL>)
  "(" t1 = <ONE_LITERAL> <DIV> t2 = <ONE_LITERAL> ")"
  { jjtThis.value = new cbit.vcell.matrix.RationalNumber(Long.valueOf(t1.image), Long.valueOf(t2.image)); }
}


void Name() #IdNode :
{ Token t_name=null; }
{
  t_name = <IDENTIFIER>
  { jjtThis.name = t_name.image; }
}

