/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vis.vismesh.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-10-27")
public class VisSurfaceTriangle implements org.apache.thrift.TBase<VisSurfaceTriangle, VisSurfaceTriangle._Fields>, java.io.Serializable, Cloneable, Comparable<VisSurfaceTriangle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VisSurfaceTriangle");

  private static final org.apache.thrift.protocol.TField POINT_INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("pointIndices", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FACE_FIELD_DESC = new org.apache.thrift.protocol.TField("face", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHOMBO_SURFACE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("chomboSurfaceIndex", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VisSurfaceTriangleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VisSurfaceTriangleTupleSchemeFactory());
  }

  public List<Integer> pointIndices; // required
  /**
   * 
   * @see Face
   */
  public Face face; // required
  public ChomboSurfaceIndex chomboSurfaceIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POINT_INDICES((short)1, "pointIndices"),
    /**
     * 
     * @see Face
     */
    FACE((short)2, "face"),
    CHOMBO_SURFACE_INDEX((short)3, "chomboSurfaceIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POINT_INDICES
          return POINT_INDICES;
        case 2: // FACE
          return FACE;
        case 3: // CHOMBO_SURFACE_INDEX
          return CHOMBO_SURFACE_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHOMBO_SURFACE_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POINT_INDICES, new org.apache.thrift.meta_data.FieldMetaData("pointIndices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "IntList")));
    tmpMap.put(_Fields.FACE, new org.apache.thrift.meta_data.FieldMetaData("face", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Face.class)));
    tmpMap.put(_Fields.CHOMBO_SURFACE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("chomboSurfaceIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChomboSurfaceIndex.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VisSurfaceTriangle.class, metaDataMap);
  }

  public VisSurfaceTriangle() {
  }

  public VisSurfaceTriangle(
    List<Integer> pointIndices,
    Face face)
  {
    this();
    this.pointIndices = pointIndices;
    this.face = face;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VisSurfaceTriangle(VisSurfaceTriangle other) {
    if (other.isSetPointIndices()) {
      this.pointIndices = other.pointIndices;
    }
    if (other.isSetFace()) {
      this.face = other.face;
    }
    if (other.isSetChomboSurfaceIndex()) {
      this.chomboSurfaceIndex = new ChomboSurfaceIndex(other.chomboSurfaceIndex);
    }
  }

  public VisSurfaceTriangle deepCopy() {
    return new VisSurfaceTriangle(this);
  }

  @Override
  public void clear() {
    this.pointIndices = null;
    this.face = null;
    this.chomboSurfaceIndex = null;
  }

  public int getPointIndicesSize() {
    return (this.pointIndices == null) ? 0 : this.pointIndices.size();
  }

  public java.util.Iterator<Integer> getPointIndicesIterator() {
    return (this.pointIndices == null) ? null : this.pointIndices.iterator();
  }

  public void addToPointIndices(int elem) {
    if (this.pointIndices == null) {
      this.pointIndices = new ArrayList<Integer>();
    }
    this.pointIndices.add(elem);
  }

  public List<Integer> getPointIndices() {
    return this.pointIndices;
  }

  public VisSurfaceTriangle setPointIndices(List<Integer> pointIndices) {
    this.pointIndices = pointIndices;
    return this;
  }

  public void unsetPointIndices() {
    this.pointIndices = null;
  }

  /** Returns true if field pointIndices is set (has been assigned a value) and false otherwise */
  public boolean isSetPointIndices() {
    return this.pointIndices != null;
  }

  public void setPointIndicesIsSet(boolean value) {
    if (!value) {
      this.pointIndices = null;
    }
  }

  /**
   * 
   * @see Face
   */
  public Face getFace() {
    return this.face;
  }

  /**
   * 
   * @see Face
   */
  public VisSurfaceTriangle setFace(Face face) {
    this.face = face;
    return this;
  }

  public void unsetFace() {
    this.face = null;
  }

  /** Returns true if field face is set (has been assigned a value) and false otherwise */
  public boolean isSetFace() {
    return this.face != null;
  }

  public void setFaceIsSet(boolean value) {
    if (!value) {
      this.face = null;
    }
  }

  public ChomboSurfaceIndex getChomboSurfaceIndex() {
    return this.chomboSurfaceIndex;
  }

  public VisSurfaceTriangle setChomboSurfaceIndex(ChomboSurfaceIndex chomboSurfaceIndex) {
    this.chomboSurfaceIndex = chomboSurfaceIndex;
    return this;
  }

  public void unsetChomboSurfaceIndex() {
    this.chomboSurfaceIndex = null;
  }

  /** Returns true if field chomboSurfaceIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetChomboSurfaceIndex() {
    return this.chomboSurfaceIndex != null;
  }

  public void setChomboSurfaceIndexIsSet(boolean value) {
    if (!value) {
      this.chomboSurfaceIndex = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POINT_INDICES:
      if (value == null) {
        unsetPointIndices();
      } else {
        setPointIndices((List<Integer>)value);
      }
      break;

    case FACE:
      if (value == null) {
        unsetFace();
      } else {
        setFace((Face)value);
      }
      break;

    case CHOMBO_SURFACE_INDEX:
      if (value == null) {
        unsetChomboSurfaceIndex();
      } else {
        setChomboSurfaceIndex((ChomboSurfaceIndex)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POINT_INDICES:
      return getPointIndices();

    case FACE:
      return getFace();

    case CHOMBO_SURFACE_INDEX:
      return getChomboSurfaceIndex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POINT_INDICES:
      return isSetPointIndices();
    case FACE:
      return isSetFace();
    case CHOMBO_SURFACE_INDEX:
      return isSetChomboSurfaceIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VisSurfaceTriangle)
      return this.equals((VisSurfaceTriangle)that);
    return false;
  }

  public boolean equals(VisSurfaceTriangle that) {
    if (that == null)
      return false;

    boolean this_present_pointIndices = true && this.isSetPointIndices();
    boolean that_present_pointIndices = true && that.isSetPointIndices();
    if (this_present_pointIndices || that_present_pointIndices) {
      if (!(this_present_pointIndices && that_present_pointIndices))
        return false;
      if (!this.pointIndices.equals(that.pointIndices))
        return false;
    }

    boolean this_present_face = true && this.isSetFace();
    boolean that_present_face = true && that.isSetFace();
    if (this_present_face || that_present_face) {
      if (!(this_present_face && that_present_face))
        return false;
      if (!this.face.equals(that.face))
        return false;
    }

    boolean this_present_chomboSurfaceIndex = true && this.isSetChomboSurfaceIndex();
    boolean that_present_chomboSurfaceIndex = true && that.isSetChomboSurfaceIndex();
    if (this_present_chomboSurfaceIndex || that_present_chomboSurfaceIndex) {
      if (!(this_present_chomboSurfaceIndex && that_present_chomboSurfaceIndex))
        return false;
      if (!this.chomboSurfaceIndex.equals(that.chomboSurfaceIndex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pointIndices = true && (isSetPointIndices());
    list.add(present_pointIndices);
    if (present_pointIndices)
      list.add(pointIndices);

    boolean present_face = true && (isSetFace());
    list.add(present_face);
    if (present_face)
      list.add(face.getValue());

    boolean present_chomboSurfaceIndex = true && (isSetChomboSurfaceIndex());
    list.add(present_chomboSurfaceIndex);
    if (present_chomboSurfaceIndex)
      list.add(chomboSurfaceIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(VisSurfaceTriangle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPointIndices()).compareTo(other.isSetPointIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointIndices, other.pointIndices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFace()).compareTo(other.isSetFace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face, other.face);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChomboSurfaceIndex()).compareTo(other.isSetChomboSurfaceIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChomboSurfaceIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chomboSurfaceIndex, other.chomboSurfaceIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VisSurfaceTriangle(");
    boolean first = true;

    sb.append("pointIndices:");
    if (this.pointIndices == null) {
      sb.append("null");
    } else {
      sb.append(this.pointIndices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("face:");
    if (this.face == null) {
      sb.append("null");
    } else {
      sb.append(this.face);
    }
    first = false;
    if (isSetChomboSurfaceIndex()) {
      if (!first) sb.append(", ");
      sb.append("chomboSurfaceIndex:");
      if (this.chomboSurfaceIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.chomboSurfaceIndex);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pointIndices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pointIndices' was not present! Struct: " + toString());
    }
    if (face == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'face' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (chomboSurfaceIndex != null) {
      chomboSurfaceIndex.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VisSurfaceTriangleStandardSchemeFactory implements SchemeFactory {
    public VisSurfaceTriangleStandardScheme getScheme() {
      return new VisSurfaceTriangleStandardScheme();
    }
  }

  private static class VisSurfaceTriangleStandardScheme extends StandardScheme<VisSurfaceTriangle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VisSurfaceTriangle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POINT_INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.pointIndices = new ArrayList<Integer>(_list40.size);
                int _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readI32();
                  struct.pointIndices.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setPointIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.face = org.vcell.vis.vismesh.thrift.Face.findByValue(iprot.readI32());
              struct.setFaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHOMBO_SURFACE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.chomboSurfaceIndex = new ChomboSurfaceIndex();
              struct.chomboSurfaceIndex.read(iprot);
              struct.setChomboSurfaceIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VisSurfaceTriangle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pointIndices != null) {
        oprot.writeFieldBegin(POINT_INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pointIndices.size()));
          for (int _iter43 : struct.pointIndices)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.face != null) {
        oprot.writeFieldBegin(FACE_FIELD_DESC);
        oprot.writeI32(struct.face.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.chomboSurfaceIndex != null) {
        if (struct.isSetChomboSurfaceIndex()) {
          oprot.writeFieldBegin(CHOMBO_SURFACE_INDEX_FIELD_DESC);
          struct.chomboSurfaceIndex.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VisSurfaceTriangleTupleSchemeFactory implements SchemeFactory {
    public VisSurfaceTriangleTupleScheme getScheme() {
      return new VisSurfaceTriangleTupleScheme();
    }
  }

  private static class VisSurfaceTriangleTupleScheme extends TupleScheme<VisSurfaceTriangle> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VisSurfaceTriangle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.pointIndices.size());
        for (int _iter44 : struct.pointIndices)
        {
          oprot.writeI32(_iter44);
        }
      }
      oprot.writeI32(struct.face.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetChomboSurfaceIndex()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetChomboSurfaceIndex()) {
        struct.chomboSurfaceIndex.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VisSurfaceTriangle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.pointIndices = new ArrayList<Integer>(_list45.size);
        int _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = iprot.readI32();
          struct.pointIndices.add(_elem46);
        }
      }
      struct.setPointIndicesIsSet(true);
      struct.face = org.vcell.vis.vismesh.thrift.Face.findByValue(iprot.readI32());
      struct.setFaceIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.chomboSurfaceIndex = new ChomboSurfaceIndex();
        struct.chomboSurfaceIndex.read(iprot);
        struct.setChomboSurfaceIndexIsSet(true);
      }
    }
  }

}

