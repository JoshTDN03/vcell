/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vis.vismesh.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-7")
public class VarData implements org.apache.thrift.TBase<VarData, VarData._Fields>, java.io.Serializable, Cloneable, Comparable<VarData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VarData");

  private static final org.apache.thrift.protocol.TField VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("varName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VAR_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("varData", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VarDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VarDataTupleSchemeFactory());
  }

  public String varName; // required
  public List<Double> varData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VAR_NAME((short)1, "varName"),
    VAR_DATA((short)2, "varData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VAR_NAME
          return VAR_NAME;
        case 2: // VAR_DATA
          return VAR_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("varName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VAR_DATA, new org.apache.thrift.meta_data.FieldMetaData("varData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VarData.class, metaDataMap);
  }

  public VarData() {
  }

  public VarData(
    String varName,
    List<Double> varData)
  {
    this();
    this.varName = varName;
    this.varData = varData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VarData(VarData other) {
    if (other.isSetVarName()) {
      this.varName = other.varName;
    }
    if (other.isSetVarData()) {
      List<Double> __this__varData = new ArrayList<Double>(other.varData);
      this.varData = __this__varData;
    }
  }

  public VarData deepCopy() {
    return new VarData(this);
  }

  @Override
  public void clear() {
    this.varName = null;
    this.varData = null;
  }

  public String getVarName() {
    return this.varName;
  }

  public VarData setVarName(String varName) {
    this.varName = varName;
    return this;
  }

  public void unsetVarName() {
    this.varName = null;
  }

  /** Returns true if field varName is set (has been assigned a value) and false otherwise */
  public boolean isSetVarName() {
    return this.varName != null;
  }

  public void setVarNameIsSet(boolean value) {
    if (!value) {
      this.varName = null;
    }
  }

  public int getVarDataSize() {
    return (this.varData == null) ? 0 : this.varData.size();
  }

  public java.util.Iterator<Double> getVarDataIterator() {
    return (this.varData == null) ? null : this.varData.iterator();
  }

  public void addToVarData(double elem) {
    if (this.varData == null) {
      this.varData = new ArrayList<Double>();
    }
    this.varData.add(elem);
  }

  public List<Double> getVarData() {
    return this.varData;
  }

  public VarData setVarData(List<Double> varData) {
    this.varData = varData;
    return this;
  }

  public void unsetVarData() {
    this.varData = null;
  }

  /** Returns true if field varData is set (has been assigned a value) and false otherwise */
  public boolean isSetVarData() {
    return this.varData != null;
  }

  public void setVarDataIsSet(boolean value) {
    if (!value) {
      this.varData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VAR_NAME:
      if (value == null) {
        unsetVarName();
      } else {
        setVarName((String)value);
      }
      break;

    case VAR_DATA:
      if (value == null) {
        unsetVarData();
      } else {
        setVarData((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VAR_NAME:
      return getVarName();

    case VAR_DATA:
      return getVarData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VAR_NAME:
      return isSetVarName();
    case VAR_DATA:
      return isSetVarData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VarData)
      return this.equals((VarData)that);
    return false;
  }

  public boolean equals(VarData that) {
    if (that == null)
      return false;

    boolean this_present_varName = true && this.isSetVarName();
    boolean that_present_varName = true && that.isSetVarName();
    if (this_present_varName || that_present_varName) {
      if (!(this_present_varName && that_present_varName))
        return false;
      if (!this.varName.equals(that.varName))
        return false;
    }

    boolean this_present_varData = true && this.isSetVarData();
    boolean that_present_varData = true && that.isSetVarData();
    if (this_present_varData || that_present_varData) {
      if (!(this_present_varData && that_present_varData))
        return false;
      if (!this.varData.equals(that.varData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_varName = true && (isSetVarName());
    list.add(present_varName);
    if (present_varName)
      list.add(varName);

    boolean present_varData = true && (isSetVarData());
    list.add(present_varData);
    if (present_varData)
      list.add(varData);

    return list.hashCode();
  }

  @Override
  public int compareTo(VarData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVarName()).compareTo(other.isSetVarName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varName, other.varName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVarData()).compareTo(other.isSetVarData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varData, other.varData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VarData(");
    boolean first = true;

    sb.append("varName:");
    if (this.varName == null) {
      sb.append("null");
    } else {
      sb.append(this.varName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("varData:");
    if (this.varData == null) {
      sb.append("null");
    } else {
      sb.append(this.varData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (varName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'varName' was not present! Struct: " + toString());
    }
    if (varData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'varData' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VarDataStandardSchemeFactory implements SchemeFactory {
    public VarDataStandardScheme getScheme() {
      return new VarDataStandardScheme();
    }
  }

  private static class VarDataStandardScheme extends StandardScheme<VarData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VarData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.varName = iprot.readString();
              struct.setVarNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VAR_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.varData = new ArrayList<Double>(_list72.size);
                double _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readDouble();
                  struct.varData.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setVarDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VarData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.varName != null) {
        oprot.writeFieldBegin(VAR_NAME_FIELD_DESC);
        oprot.writeString(struct.varName);
        oprot.writeFieldEnd();
      }
      if (struct.varData != null) {
        oprot.writeFieldBegin(VAR_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.varData.size()));
          for (double _iter75 : struct.varData)
          {
            oprot.writeDouble(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VarDataTupleSchemeFactory implements SchemeFactory {
    public VarDataTupleScheme getScheme() {
      return new VarDataTupleScheme();
    }
  }

  private static class VarDataTupleScheme extends TupleScheme<VarData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VarData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.varName);
      {
        oprot.writeI32(struct.varData.size());
        for (double _iter76 : struct.varData)
        {
          oprot.writeDouble(_iter76);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VarData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.varName = iprot.readString();
      struct.setVarNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.varData = new ArrayList<Double>(_list77.size);
        double _elem78;
        for (int _i79 = 0; _i79 < _list77.size; ++_i79)
        {
          _elem78 = iprot.readDouble();
          struct.varData.add(_elem78);
        }
      }
      struct.setVarDataIsSet(true);
    }
  }

}

