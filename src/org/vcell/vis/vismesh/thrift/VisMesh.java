/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vcell.vis.vismesh.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-10-27")
public class VisMesh implements org.apache.thrift.TBase<VisMesh, VisMesh._Fields>, java.io.Serializable, Cloneable, Comparable<VisMesh> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VisMesh");

  private static final org.apache.thrift.protocol.TField DIMENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dimension", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("extent", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField POLYGONS_FIELD_DESC = new org.apache.thrift.protocol.TField("polygons", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IRREGULAR_POLYHEDRA_FIELD_DESC = new org.apache.thrift.protocol.TField("irregularPolyhedra", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TETRAHEDRA_FIELD_DESC = new org.apache.thrift.protocol.TField("tetrahedra", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VIS_VOXELS_FIELD_DESC = new org.apache.thrift.protocol.TField("visVoxels", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SURFACE_TRIANGLES_FIELD_DESC = new org.apache.thrift.protocol.TField("surfaceTriangles", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField VIS_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("visLines", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SURFACE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("surfacePoints", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VisMeshStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VisMeshTupleSchemeFactory());
  }

  public int dimension; // required
  public Vect3D origin; // required
  public Vect3D extent; // required
  public List<VisPoint> points; // optional
  public List<VisPolygon> polygons; // optional
  public List<VisIrregularPolyhedron> irregularPolyhedra; // optional
  public List<VisTetrahedron> tetrahedra; // optional
  public List<VisVoxel> visVoxels; // optional
  public List<VisSurfaceTriangle> surfaceTriangles; // optional
  public List<VisLine> visLines; // optional
  public List<VisPoint> surfacePoints; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIMENSION((short)1, "dimension"),
    ORIGIN((short)2, "origin"),
    EXTENT((short)3, "extent"),
    POINTS((short)4, "points"),
    POLYGONS((short)5, "polygons"),
    IRREGULAR_POLYHEDRA((short)6, "irregularPolyhedra"),
    TETRAHEDRA((short)7, "tetrahedra"),
    VIS_VOXELS((short)8, "visVoxels"),
    SURFACE_TRIANGLES((short)9, "surfaceTriangles"),
    VIS_LINES((short)10, "visLines"),
    SURFACE_POINTS((short)11, "surfacePoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIMENSION
          return DIMENSION;
        case 2: // ORIGIN
          return ORIGIN;
        case 3: // EXTENT
          return EXTENT;
        case 4: // POINTS
          return POINTS;
        case 5: // POLYGONS
          return POLYGONS;
        case 6: // IRREGULAR_POLYHEDRA
          return IRREGULAR_POLYHEDRA;
        case 7: // TETRAHEDRA
          return TETRAHEDRA;
        case 8: // VIS_VOXELS
          return VIS_VOXELS;
        case 9: // SURFACE_TRIANGLES
          return SURFACE_TRIANGLES;
        case 10: // VIS_LINES
          return VIS_LINES;
        case 11: // SURFACE_POINTS
          return SURFACE_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIMENSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POINTS,_Fields.POLYGONS,_Fields.IRREGULAR_POLYHEDRA,_Fields.TETRAHEDRA,_Fields.VIS_VOXELS,_Fields.SURFACE_TRIANGLES,_Fields.VIS_LINES,_Fields.SURFACE_POINTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIMENSION, new org.apache.thrift.meta_data.FieldMetaData("dimension", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vect3D.class)));
    tmpMap.put(_Fields.EXTENT, new org.apache.thrift.meta_data.FieldMetaData("extent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vect3D.class)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisPoints")));
    tmpMap.put(_Fields.POLYGONS, new org.apache.thrift.meta_data.FieldMetaData("polygons", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisPolygons")));
    tmpMap.put(_Fields.IRREGULAR_POLYHEDRA, new org.apache.thrift.meta_data.FieldMetaData("irregularPolyhedra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisIrregularPolyhedra")));
    tmpMap.put(_Fields.TETRAHEDRA, new org.apache.thrift.meta_data.FieldMetaData("tetrahedra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisTetrahedra")));
    tmpMap.put(_Fields.VIS_VOXELS, new org.apache.thrift.meta_data.FieldMetaData("visVoxels", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisVoxels")));
    tmpMap.put(_Fields.SURFACE_TRIANGLES, new org.apache.thrift.meta_data.FieldMetaData("surfaceTriangles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisSurfaceTriangles")));
    tmpMap.put(_Fields.VIS_LINES, new org.apache.thrift.meta_data.FieldMetaData("visLines", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisLines")));
    tmpMap.put(_Fields.SURFACE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("surfacePoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VisPoints")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VisMesh.class, metaDataMap);
  }

  public VisMesh() {
  }

  public VisMesh(
    int dimension,
    Vect3D origin,
    Vect3D extent)
  {
    this();
    this.dimension = dimension;
    setDimensionIsSet(true);
    this.origin = origin;
    this.extent = extent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VisMesh(VisMesh other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dimension = other.dimension;
    if (other.isSetOrigin()) {
      this.origin = new Vect3D(other.origin);
    }
    if (other.isSetExtent()) {
      this.extent = new Vect3D(other.extent);
    }
    if (other.isSetPoints()) {
      this.points = other.points;
    }
    if (other.isSetPolygons()) {
      this.polygons = other.polygons;
    }
    if (other.isSetIrregularPolyhedra()) {
      this.irregularPolyhedra = other.irregularPolyhedra;
    }
    if (other.isSetTetrahedra()) {
      this.tetrahedra = other.tetrahedra;
    }
    if (other.isSetVisVoxels()) {
      this.visVoxels = other.visVoxels;
    }
    if (other.isSetSurfaceTriangles()) {
      this.surfaceTriangles = other.surfaceTriangles;
    }
    if (other.isSetVisLines()) {
      this.visLines = other.visLines;
    }
    if (other.isSetSurfacePoints()) {
      this.surfacePoints = other.surfacePoints;
    }
  }

  public VisMesh deepCopy() {
    return new VisMesh(this);
  }

  @Override
  public void clear() {
    setDimensionIsSet(false);
    this.dimension = 0;
    this.origin = null;
    this.extent = null;
    this.points = null;
    this.polygons = null;
    this.irregularPolyhedra = null;
    this.tetrahedra = null;
    this.visVoxels = null;
    this.surfaceTriangles = null;
    this.visLines = null;
    this.surfacePoints = null;
  }

  public int getDimension() {
    return this.dimension;
  }

  public VisMesh setDimension(int dimension) {
    this.dimension = dimension;
    setDimensionIsSet(true);
    return this;
  }

  public void unsetDimension() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIMENSION_ISSET_ID);
  }

  /** Returns true if field dimension is set (has been assigned a value) and false otherwise */
  public boolean isSetDimension() {
    return EncodingUtils.testBit(__isset_bitfield, __DIMENSION_ISSET_ID);
  }

  public void setDimensionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIMENSION_ISSET_ID, value);
  }

  public Vect3D getOrigin() {
    return this.origin;
  }

  public VisMesh setOrigin(Vect3D origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public Vect3D getExtent() {
    return this.extent;
  }

  public VisMesh setExtent(Vect3D extent) {
    this.extent = extent;
    return this;
  }

  public void unsetExtent() {
    this.extent = null;
  }

  /** Returns true if field extent is set (has been assigned a value) and false otherwise */
  public boolean isSetExtent() {
    return this.extent != null;
  }

  public void setExtentIsSet(boolean value) {
    if (!value) {
      this.extent = null;
    }
  }

  public int getPointsSize() {
    return (this.points == null) ? 0 : this.points.size();
  }

  public java.util.Iterator<VisPoint> getPointsIterator() {
    return (this.points == null) ? null : this.points.iterator();
  }

  public void addToPoints(VisPoint elem) {
    if (this.points == null) {
      this.points = new ArrayList<VisPoint>();
    }
    this.points.add(elem);
  }

  public List<VisPoint> getPoints() {
    return this.points;
  }

  public VisMesh setPoints(List<VisPoint> points) {
    this.points = points;
    return this;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  public int getPolygonsSize() {
    return (this.polygons == null) ? 0 : this.polygons.size();
  }

  public java.util.Iterator<VisPolygon> getPolygonsIterator() {
    return (this.polygons == null) ? null : this.polygons.iterator();
  }

  public void addToPolygons(VisPolygon elem) {
    if (this.polygons == null) {
      this.polygons = new ArrayList<VisPolygon>();
    }
    this.polygons.add(elem);
  }

  public List<VisPolygon> getPolygons() {
    return this.polygons;
  }

  public VisMesh setPolygons(List<VisPolygon> polygons) {
    this.polygons = polygons;
    return this;
  }

  public void unsetPolygons() {
    this.polygons = null;
  }

  /** Returns true if field polygons is set (has been assigned a value) and false otherwise */
  public boolean isSetPolygons() {
    return this.polygons != null;
  }

  public void setPolygonsIsSet(boolean value) {
    if (!value) {
      this.polygons = null;
    }
  }

  public int getIrregularPolyhedraSize() {
    return (this.irregularPolyhedra == null) ? 0 : this.irregularPolyhedra.size();
  }

  public java.util.Iterator<VisIrregularPolyhedron> getIrregularPolyhedraIterator() {
    return (this.irregularPolyhedra == null) ? null : this.irregularPolyhedra.iterator();
  }

  public void addToIrregularPolyhedra(VisIrregularPolyhedron elem) {
    if (this.irregularPolyhedra == null) {
      this.irregularPolyhedra = new ArrayList<VisIrregularPolyhedron>();
    }
    this.irregularPolyhedra.add(elem);
  }

  public List<VisIrregularPolyhedron> getIrregularPolyhedra() {
    return this.irregularPolyhedra;
  }

  public VisMesh setIrregularPolyhedra(List<VisIrregularPolyhedron> irregularPolyhedra) {
    this.irregularPolyhedra = irregularPolyhedra;
    return this;
  }

  public void unsetIrregularPolyhedra() {
    this.irregularPolyhedra = null;
  }

  /** Returns true if field irregularPolyhedra is set (has been assigned a value) and false otherwise */
  public boolean isSetIrregularPolyhedra() {
    return this.irregularPolyhedra != null;
  }

  public void setIrregularPolyhedraIsSet(boolean value) {
    if (!value) {
      this.irregularPolyhedra = null;
    }
  }

  public int getTetrahedraSize() {
    return (this.tetrahedra == null) ? 0 : this.tetrahedra.size();
  }

  public java.util.Iterator<VisTetrahedron> getTetrahedraIterator() {
    return (this.tetrahedra == null) ? null : this.tetrahedra.iterator();
  }

  public void addToTetrahedra(VisTetrahedron elem) {
    if (this.tetrahedra == null) {
      this.tetrahedra = new ArrayList<VisTetrahedron>();
    }
    this.tetrahedra.add(elem);
  }

  public List<VisTetrahedron> getTetrahedra() {
    return this.tetrahedra;
  }

  public VisMesh setTetrahedra(List<VisTetrahedron> tetrahedra) {
    this.tetrahedra = tetrahedra;
    return this;
  }

  public void unsetTetrahedra() {
    this.tetrahedra = null;
  }

  /** Returns true if field tetrahedra is set (has been assigned a value) and false otherwise */
  public boolean isSetTetrahedra() {
    return this.tetrahedra != null;
  }

  public void setTetrahedraIsSet(boolean value) {
    if (!value) {
      this.tetrahedra = null;
    }
  }

  public int getVisVoxelsSize() {
    return (this.visVoxels == null) ? 0 : this.visVoxels.size();
  }

  public java.util.Iterator<VisVoxel> getVisVoxelsIterator() {
    return (this.visVoxels == null) ? null : this.visVoxels.iterator();
  }

  public void addToVisVoxels(VisVoxel elem) {
    if (this.visVoxels == null) {
      this.visVoxels = new ArrayList<VisVoxel>();
    }
    this.visVoxels.add(elem);
  }

  public List<VisVoxel> getVisVoxels() {
    return this.visVoxels;
  }

  public VisMesh setVisVoxels(List<VisVoxel> visVoxels) {
    this.visVoxels = visVoxels;
    return this;
  }

  public void unsetVisVoxels() {
    this.visVoxels = null;
  }

  /** Returns true if field visVoxels is set (has been assigned a value) and false otherwise */
  public boolean isSetVisVoxels() {
    return this.visVoxels != null;
  }

  public void setVisVoxelsIsSet(boolean value) {
    if (!value) {
      this.visVoxels = null;
    }
  }

  public int getSurfaceTrianglesSize() {
    return (this.surfaceTriangles == null) ? 0 : this.surfaceTriangles.size();
  }

  public java.util.Iterator<VisSurfaceTriangle> getSurfaceTrianglesIterator() {
    return (this.surfaceTriangles == null) ? null : this.surfaceTriangles.iterator();
  }

  public void addToSurfaceTriangles(VisSurfaceTriangle elem) {
    if (this.surfaceTriangles == null) {
      this.surfaceTriangles = new ArrayList<VisSurfaceTriangle>();
    }
    this.surfaceTriangles.add(elem);
  }

  public List<VisSurfaceTriangle> getSurfaceTriangles() {
    return this.surfaceTriangles;
  }

  public VisMesh setSurfaceTriangles(List<VisSurfaceTriangle> surfaceTriangles) {
    this.surfaceTriangles = surfaceTriangles;
    return this;
  }

  public void unsetSurfaceTriangles() {
    this.surfaceTriangles = null;
  }

  /** Returns true if field surfaceTriangles is set (has been assigned a value) and false otherwise */
  public boolean isSetSurfaceTriangles() {
    return this.surfaceTriangles != null;
  }

  public void setSurfaceTrianglesIsSet(boolean value) {
    if (!value) {
      this.surfaceTriangles = null;
    }
  }

  public int getVisLinesSize() {
    return (this.visLines == null) ? 0 : this.visLines.size();
  }

  public java.util.Iterator<VisLine> getVisLinesIterator() {
    return (this.visLines == null) ? null : this.visLines.iterator();
  }

  public void addToVisLines(VisLine elem) {
    if (this.visLines == null) {
      this.visLines = new ArrayList<VisLine>();
    }
    this.visLines.add(elem);
  }

  public List<VisLine> getVisLines() {
    return this.visLines;
  }

  public VisMesh setVisLines(List<VisLine> visLines) {
    this.visLines = visLines;
    return this;
  }

  public void unsetVisLines() {
    this.visLines = null;
  }

  /** Returns true if field visLines is set (has been assigned a value) and false otherwise */
  public boolean isSetVisLines() {
    return this.visLines != null;
  }

  public void setVisLinesIsSet(boolean value) {
    if (!value) {
      this.visLines = null;
    }
  }

  public int getSurfacePointsSize() {
    return (this.surfacePoints == null) ? 0 : this.surfacePoints.size();
  }

  public java.util.Iterator<VisPoint> getSurfacePointsIterator() {
    return (this.surfacePoints == null) ? null : this.surfacePoints.iterator();
  }

  public void addToSurfacePoints(VisPoint elem) {
    if (this.surfacePoints == null) {
      this.surfacePoints = new ArrayList<VisPoint>();
    }
    this.surfacePoints.add(elem);
  }

  public List<VisPoint> getSurfacePoints() {
    return this.surfacePoints;
  }

  public VisMesh setSurfacePoints(List<VisPoint> surfacePoints) {
    this.surfacePoints = surfacePoints;
    return this;
  }

  public void unsetSurfacePoints() {
    this.surfacePoints = null;
  }

  /** Returns true if field surfacePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetSurfacePoints() {
    return this.surfacePoints != null;
  }

  public void setSurfacePointsIsSet(boolean value) {
    if (!value) {
      this.surfacePoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIMENSION:
      if (value == null) {
        unsetDimension();
      } else {
        setDimension((Integer)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((Vect3D)value);
      }
      break;

    case EXTENT:
      if (value == null) {
        unsetExtent();
      } else {
        setExtent((Vect3D)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((List<VisPoint>)value);
      }
      break;

    case POLYGONS:
      if (value == null) {
        unsetPolygons();
      } else {
        setPolygons((List<VisPolygon>)value);
      }
      break;

    case IRREGULAR_POLYHEDRA:
      if (value == null) {
        unsetIrregularPolyhedra();
      } else {
        setIrregularPolyhedra((List<VisIrregularPolyhedron>)value);
      }
      break;

    case TETRAHEDRA:
      if (value == null) {
        unsetTetrahedra();
      } else {
        setTetrahedra((List<VisTetrahedron>)value);
      }
      break;

    case VIS_VOXELS:
      if (value == null) {
        unsetVisVoxels();
      } else {
        setVisVoxels((List<VisVoxel>)value);
      }
      break;

    case SURFACE_TRIANGLES:
      if (value == null) {
        unsetSurfaceTriangles();
      } else {
        setSurfaceTriangles((List<VisSurfaceTriangle>)value);
      }
      break;

    case VIS_LINES:
      if (value == null) {
        unsetVisLines();
      } else {
        setVisLines((List<VisLine>)value);
      }
      break;

    case SURFACE_POINTS:
      if (value == null) {
        unsetSurfacePoints();
      } else {
        setSurfacePoints((List<VisPoint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIMENSION:
      return Integer.valueOf(getDimension());

    case ORIGIN:
      return getOrigin();

    case EXTENT:
      return getExtent();

    case POINTS:
      return getPoints();

    case POLYGONS:
      return getPolygons();

    case IRREGULAR_POLYHEDRA:
      return getIrregularPolyhedra();

    case TETRAHEDRA:
      return getTetrahedra();

    case VIS_VOXELS:
      return getVisVoxels();

    case SURFACE_TRIANGLES:
      return getSurfaceTriangles();

    case VIS_LINES:
      return getVisLines();

    case SURFACE_POINTS:
      return getSurfacePoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIMENSION:
      return isSetDimension();
    case ORIGIN:
      return isSetOrigin();
    case EXTENT:
      return isSetExtent();
    case POINTS:
      return isSetPoints();
    case POLYGONS:
      return isSetPolygons();
    case IRREGULAR_POLYHEDRA:
      return isSetIrregularPolyhedra();
    case TETRAHEDRA:
      return isSetTetrahedra();
    case VIS_VOXELS:
      return isSetVisVoxels();
    case SURFACE_TRIANGLES:
      return isSetSurfaceTriangles();
    case VIS_LINES:
      return isSetVisLines();
    case SURFACE_POINTS:
      return isSetSurfacePoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VisMesh)
      return this.equals((VisMesh)that);
    return false;
  }

  public boolean equals(VisMesh that) {
    if (that == null)
      return false;

    boolean this_present_dimension = true;
    boolean that_present_dimension = true;
    if (this_present_dimension || that_present_dimension) {
      if (!(this_present_dimension && that_present_dimension))
        return false;
      if (this.dimension != that.dimension)
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_extent = true && this.isSetExtent();
    boolean that_present_extent = true && that.isSetExtent();
    if (this_present_extent || that_present_extent) {
      if (!(this_present_extent && that_present_extent))
        return false;
      if (!this.extent.equals(that.extent))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    boolean this_present_polygons = true && this.isSetPolygons();
    boolean that_present_polygons = true && that.isSetPolygons();
    if (this_present_polygons || that_present_polygons) {
      if (!(this_present_polygons && that_present_polygons))
        return false;
      if (!this.polygons.equals(that.polygons))
        return false;
    }

    boolean this_present_irregularPolyhedra = true && this.isSetIrregularPolyhedra();
    boolean that_present_irregularPolyhedra = true && that.isSetIrregularPolyhedra();
    if (this_present_irregularPolyhedra || that_present_irregularPolyhedra) {
      if (!(this_present_irregularPolyhedra && that_present_irregularPolyhedra))
        return false;
      if (!this.irregularPolyhedra.equals(that.irregularPolyhedra))
        return false;
    }

    boolean this_present_tetrahedra = true && this.isSetTetrahedra();
    boolean that_present_tetrahedra = true && that.isSetTetrahedra();
    if (this_present_tetrahedra || that_present_tetrahedra) {
      if (!(this_present_tetrahedra && that_present_tetrahedra))
        return false;
      if (!this.tetrahedra.equals(that.tetrahedra))
        return false;
    }

    boolean this_present_visVoxels = true && this.isSetVisVoxels();
    boolean that_present_visVoxels = true && that.isSetVisVoxels();
    if (this_present_visVoxels || that_present_visVoxels) {
      if (!(this_present_visVoxels && that_present_visVoxels))
        return false;
      if (!this.visVoxels.equals(that.visVoxels))
        return false;
    }

    boolean this_present_surfaceTriangles = true && this.isSetSurfaceTriangles();
    boolean that_present_surfaceTriangles = true && that.isSetSurfaceTriangles();
    if (this_present_surfaceTriangles || that_present_surfaceTriangles) {
      if (!(this_present_surfaceTriangles && that_present_surfaceTriangles))
        return false;
      if (!this.surfaceTriangles.equals(that.surfaceTriangles))
        return false;
    }

    boolean this_present_visLines = true && this.isSetVisLines();
    boolean that_present_visLines = true && that.isSetVisLines();
    if (this_present_visLines || that_present_visLines) {
      if (!(this_present_visLines && that_present_visLines))
        return false;
      if (!this.visLines.equals(that.visLines))
        return false;
    }

    boolean this_present_surfacePoints = true && this.isSetSurfacePoints();
    boolean that_present_surfacePoints = true && that.isSetSurfacePoints();
    if (this_present_surfacePoints || that_present_surfacePoints) {
      if (!(this_present_surfacePoints && that_present_surfacePoints))
        return false;
      if (!this.surfacePoints.equals(that.surfacePoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dimension = true;
    list.add(present_dimension);
    if (present_dimension)
      list.add(dimension);

    boolean present_origin = true && (isSetOrigin());
    list.add(present_origin);
    if (present_origin)
      list.add(origin);

    boolean present_extent = true && (isSetExtent());
    list.add(present_extent);
    if (present_extent)
      list.add(extent);

    boolean present_points = true && (isSetPoints());
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_polygons = true && (isSetPolygons());
    list.add(present_polygons);
    if (present_polygons)
      list.add(polygons);

    boolean present_irregularPolyhedra = true && (isSetIrregularPolyhedra());
    list.add(present_irregularPolyhedra);
    if (present_irregularPolyhedra)
      list.add(irregularPolyhedra);

    boolean present_tetrahedra = true && (isSetTetrahedra());
    list.add(present_tetrahedra);
    if (present_tetrahedra)
      list.add(tetrahedra);

    boolean present_visVoxels = true && (isSetVisVoxels());
    list.add(present_visVoxels);
    if (present_visVoxels)
      list.add(visVoxels);

    boolean present_surfaceTriangles = true && (isSetSurfaceTriangles());
    list.add(present_surfaceTriangles);
    if (present_surfaceTriangles)
      list.add(surfaceTriangles);

    boolean present_visLines = true && (isSetVisLines());
    list.add(present_visLines);
    if (present_visLines)
      list.add(visLines);

    boolean present_surfacePoints = true && (isSetSurfacePoints());
    list.add(present_surfacePoints);
    if (present_surfacePoints)
      list.add(surfacePoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(VisMesh other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDimension()).compareTo(other.isSetDimension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimension, other.dimension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtent()).compareTo(other.isSetExtent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extent, other.extent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolygons()).compareTo(other.isSetPolygons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolygons()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polygons, other.polygons);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIrregularPolyhedra()).compareTo(other.isSetIrregularPolyhedra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIrregularPolyhedra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.irregularPolyhedra, other.irregularPolyhedra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTetrahedra()).compareTo(other.isSetTetrahedra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTetrahedra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tetrahedra, other.tetrahedra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisVoxels()).compareTo(other.isSetVisVoxels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisVoxels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visVoxels, other.visVoxels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurfaceTriangles()).compareTo(other.isSetSurfaceTriangles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurfaceTriangles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surfaceTriangles, other.surfaceTriangles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisLines()).compareTo(other.isSetVisLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visLines, other.visLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurfacePoints()).compareTo(other.isSetSurfacePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurfacePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surfacePoints, other.surfacePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VisMesh(");
    boolean first = true;

    sb.append("dimension:");
    sb.append(this.dimension);
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extent:");
    if (this.extent == null) {
      sb.append("null");
    } else {
      sb.append(this.extent);
    }
    first = false;
    if (isSetPoints()) {
      if (!first) sb.append(", ");
      sb.append("points:");
      if (this.points == null) {
        sb.append("null");
      } else {
        sb.append(this.points);
      }
      first = false;
    }
    if (isSetPolygons()) {
      if (!first) sb.append(", ");
      sb.append("polygons:");
      if (this.polygons == null) {
        sb.append("null");
      } else {
        sb.append(this.polygons);
      }
      first = false;
    }
    if (isSetIrregularPolyhedra()) {
      if (!first) sb.append(", ");
      sb.append("irregularPolyhedra:");
      if (this.irregularPolyhedra == null) {
        sb.append("null");
      } else {
        sb.append(this.irregularPolyhedra);
      }
      first = false;
    }
    if (isSetTetrahedra()) {
      if (!first) sb.append(", ");
      sb.append("tetrahedra:");
      if (this.tetrahedra == null) {
        sb.append("null");
      } else {
        sb.append(this.tetrahedra);
      }
      first = false;
    }
    if (isSetVisVoxels()) {
      if (!first) sb.append(", ");
      sb.append("visVoxels:");
      if (this.visVoxels == null) {
        sb.append("null");
      } else {
        sb.append(this.visVoxels);
      }
      first = false;
    }
    if (isSetSurfaceTriangles()) {
      if (!first) sb.append(", ");
      sb.append("surfaceTriangles:");
      if (this.surfaceTriangles == null) {
        sb.append("null");
      } else {
        sb.append(this.surfaceTriangles);
      }
      first = false;
    }
    if (isSetVisLines()) {
      if (!first) sb.append(", ");
      sb.append("visLines:");
      if (this.visLines == null) {
        sb.append("null");
      } else {
        sb.append(this.visLines);
      }
      first = false;
    }
    if (isSetSurfacePoints()) {
      if (!first) sb.append(", ");
      sb.append("surfacePoints:");
      if (this.surfacePoints == null) {
        sb.append("null");
      } else {
        sb.append(this.surfacePoints);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'dimension' because it's a primitive and you chose the non-beans generator.
    if (origin == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'origin' was not present! Struct: " + toString());
    }
    if (extent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'extent' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (origin != null) {
      origin.validate();
    }
    if (extent != null) {
      extent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VisMeshStandardSchemeFactory implements SchemeFactory {
    public VisMeshStandardScheme getScheme() {
      return new VisMeshStandardScheme();
    }
  }

  private static class VisMeshStandardScheme extends StandardScheme<VisMesh> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VisMesh struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIMENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dimension = iprot.readI32();
              struct.setDimensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.origin = new Vect3D();
              struct.origin.read(iprot);
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extent = new Vect3D();
              struct.extent.read(iprot);
              struct.setExtentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.points = new ArrayList<VisPoint>(_list88.size);
                VisPoint _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = new VisPoint();
                  _elem89.read(iprot);
                  struct.points.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POLYGONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.polygons = new ArrayList<VisPolygon>(_list91.size);
                VisPolygon _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = new VisPolygon();
                  _elem92.read(iprot);
                  struct.polygons.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setPolygonsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IRREGULAR_POLYHEDRA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.irregularPolyhedra = new ArrayList<VisIrregularPolyhedron>(_list94.size);
                VisIrregularPolyhedron _elem95;
                for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                {
                  _elem95 = new VisIrregularPolyhedron();
                  _elem95.read(iprot);
                  struct.irregularPolyhedra.add(_elem95);
                }
                iprot.readListEnd();
              }
              struct.setIrregularPolyhedraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TETRAHEDRA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.tetrahedra = new ArrayList<VisTetrahedron>(_list97.size);
                VisTetrahedron _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = new VisTetrahedron();
                  _elem98.read(iprot);
                  struct.tetrahedra.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setTetrahedraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIS_VOXELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.visVoxels = new ArrayList<VisVoxel>(_list100.size);
                VisVoxel _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = new VisVoxel();
                  _elem101.read(iprot);
                  struct.visVoxels.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setVisVoxelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SURFACE_TRIANGLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list103 = iprot.readListBegin();
                struct.surfaceTriangles = new ArrayList<VisSurfaceTriangle>(_list103.size);
                VisSurfaceTriangle _elem104;
                for (int _i105 = 0; _i105 < _list103.size; ++_i105)
                {
                  _elem104 = new VisSurfaceTriangle();
                  _elem104.read(iprot);
                  struct.surfaceTriangles.add(_elem104);
                }
                iprot.readListEnd();
              }
              struct.setSurfaceTrianglesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIS_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.visLines = new ArrayList<VisLine>(_list106.size);
                VisLine _elem107;
                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                {
                  _elem107 = new VisLine();
                  _elem107.read(iprot);
                  struct.visLines.add(_elem107);
                }
                iprot.readListEnd();
              }
              struct.setVisLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SURFACE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list109 = iprot.readListBegin();
                struct.surfacePoints = new ArrayList<VisPoint>(_list109.size);
                VisPoint _elem110;
                for (int _i111 = 0; _i111 < _list109.size; ++_i111)
                {
                  _elem110 = new VisPoint();
                  _elem110.read(iprot);
                  struct.surfacePoints.add(_elem110);
                }
                iprot.readListEnd();
              }
              struct.setSurfacePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDimension()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dimension' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VisMesh struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIMENSION_FIELD_DESC);
      oprot.writeI32(struct.dimension);
      oprot.writeFieldEnd();
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        struct.origin.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.extent != null) {
        oprot.writeFieldBegin(EXTENT_FIELD_DESC);
        struct.extent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.points != null) {
        if (struct.isSetPoints()) {
          oprot.writeFieldBegin(POINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.points.size()));
            for (VisPoint _iter112 : struct.points)
            {
              _iter112.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.polygons != null) {
        if (struct.isSetPolygons()) {
          oprot.writeFieldBegin(POLYGONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.polygons.size()));
            for (VisPolygon _iter113 : struct.polygons)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.irregularPolyhedra != null) {
        if (struct.isSetIrregularPolyhedra()) {
          oprot.writeFieldBegin(IRREGULAR_POLYHEDRA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.irregularPolyhedra.size()));
            for (VisIrregularPolyhedron _iter114 : struct.irregularPolyhedra)
            {
              _iter114.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tetrahedra != null) {
        if (struct.isSetTetrahedra()) {
          oprot.writeFieldBegin(TETRAHEDRA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tetrahedra.size()));
            for (VisTetrahedron _iter115 : struct.tetrahedra)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.visVoxels != null) {
        if (struct.isSetVisVoxels()) {
          oprot.writeFieldBegin(VIS_VOXELS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.visVoxels.size()));
            for (VisVoxel _iter116 : struct.visVoxels)
            {
              _iter116.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.surfaceTriangles != null) {
        if (struct.isSetSurfaceTriangles()) {
          oprot.writeFieldBegin(SURFACE_TRIANGLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.surfaceTriangles.size()));
            for (VisSurfaceTriangle _iter117 : struct.surfaceTriangles)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.visLines != null) {
        if (struct.isSetVisLines()) {
          oprot.writeFieldBegin(VIS_LINES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.visLines.size()));
            for (VisLine _iter118 : struct.visLines)
            {
              _iter118.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.surfacePoints != null) {
        if (struct.isSetSurfacePoints()) {
          oprot.writeFieldBegin(SURFACE_POINTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.surfacePoints.size()));
            for (VisPoint _iter119 : struct.surfacePoints)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VisMeshTupleSchemeFactory implements SchemeFactory {
    public VisMeshTupleScheme getScheme() {
      return new VisMeshTupleScheme();
    }
  }

  private static class VisMeshTupleScheme extends TupleScheme<VisMesh> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VisMesh struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.dimension);
      struct.origin.write(oprot);
      struct.extent.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetPoints()) {
        optionals.set(0);
      }
      if (struct.isSetPolygons()) {
        optionals.set(1);
      }
      if (struct.isSetIrregularPolyhedra()) {
        optionals.set(2);
      }
      if (struct.isSetTetrahedra()) {
        optionals.set(3);
      }
      if (struct.isSetVisVoxels()) {
        optionals.set(4);
      }
      if (struct.isSetSurfaceTriangles()) {
        optionals.set(5);
      }
      if (struct.isSetVisLines()) {
        optionals.set(6);
      }
      if (struct.isSetSurfacePoints()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPoints()) {
        {
          oprot.writeI32(struct.points.size());
          for (VisPoint _iter120 : struct.points)
          {
            _iter120.write(oprot);
          }
        }
      }
      if (struct.isSetPolygons()) {
        {
          oprot.writeI32(struct.polygons.size());
          for (VisPolygon _iter121 : struct.polygons)
          {
            _iter121.write(oprot);
          }
        }
      }
      if (struct.isSetIrregularPolyhedra()) {
        {
          oprot.writeI32(struct.irregularPolyhedra.size());
          for (VisIrregularPolyhedron _iter122 : struct.irregularPolyhedra)
          {
            _iter122.write(oprot);
          }
        }
      }
      if (struct.isSetTetrahedra()) {
        {
          oprot.writeI32(struct.tetrahedra.size());
          for (VisTetrahedron _iter123 : struct.tetrahedra)
          {
            _iter123.write(oprot);
          }
        }
      }
      if (struct.isSetVisVoxels()) {
        {
          oprot.writeI32(struct.visVoxels.size());
          for (VisVoxel _iter124 : struct.visVoxels)
          {
            _iter124.write(oprot);
          }
        }
      }
      if (struct.isSetSurfaceTriangles()) {
        {
          oprot.writeI32(struct.surfaceTriangles.size());
          for (VisSurfaceTriangle _iter125 : struct.surfaceTriangles)
          {
            _iter125.write(oprot);
          }
        }
      }
      if (struct.isSetVisLines()) {
        {
          oprot.writeI32(struct.visLines.size());
          for (VisLine _iter126 : struct.visLines)
          {
            _iter126.write(oprot);
          }
        }
      }
      if (struct.isSetSurfacePoints()) {
        {
          oprot.writeI32(struct.surfacePoints.size());
          for (VisPoint _iter127 : struct.surfacePoints)
          {
            _iter127.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VisMesh struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dimension = iprot.readI32();
      struct.setDimensionIsSet(true);
      struct.origin = new Vect3D();
      struct.origin.read(iprot);
      struct.setOriginIsSet(true);
      struct.extent = new Vect3D();
      struct.extent.read(iprot);
      struct.setExtentIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.points = new ArrayList<VisPoint>(_list128.size);
          VisPoint _elem129;
          for (int _i130 = 0; _i130 < _list128.size; ++_i130)
          {
            _elem129 = new VisPoint();
            _elem129.read(iprot);
            struct.points.add(_elem129);
          }
        }
        struct.setPointsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.polygons = new ArrayList<VisPolygon>(_list131.size);
          VisPolygon _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = new VisPolygon();
            _elem132.read(iprot);
            struct.polygons.add(_elem132);
          }
        }
        struct.setPolygonsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.irregularPolyhedra = new ArrayList<VisIrregularPolyhedron>(_list134.size);
          VisIrregularPolyhedron _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = new VisIrregularPolyhedron();
            _elem135.read(iprot);
            struct.irregularPolyhedra.add(_elem135);
          }
        }
        struct.setIrregularPolyhedraIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tetrahedra = new ArrayList<VisTetrahedron>(_list137.size);
          VisTetrahedron _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = new VisTetrahedron();
            _elem138.read(iprot);
            struct.tetrahedra.add(_elem138);
          }
        }
        struct.setTetrahedraIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list140 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.visVoxels = new ArrayList<VisVoxel>(_list140.size);
          VisVoxel _elem141;
          for (int _i142 = 0; _i142 < _list140.size; ++_i142)
          {
            _elem141 = new VisVoxel();
            _elem141.read(iprot);
            struct.visVoxels.add(_elem141);
          }
        }
        struct.setVisVoxelsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.surfaceTriangles = new ArrayList<VisSurfaceTriangle>(_list143.size);
          VisSurfaceTriangle _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = new VisSurfaceTriangle();
            _elem144.read(iprot);
            struct.surfaceTriangles.add(_elem144);
          }
        }
        struct.setSurfaceTrianglesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.visLines = new ArrayList<VisLine>(_list146.size);
          VisLine _elem147;
          for (int _i148 = 0; _i148 < _list146.size; ++_i148)
          {
            _elem147 = new VisLine();
            _elem147.read(iprot);
            struct.visLines.add(_elem147);
          }
        }
        struct.setVisLinesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.surfacePoints = new ArrayList<VisPoint>(_list149.size);
          VisPoint _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = new VisPoint();
            _elem150.read(iprot);
            struct.surfacePoints.add(_elem150);
          }
        }
        struct.setSurfacePointsIsSet(true);
      }
    }
  }

}

