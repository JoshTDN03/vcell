/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Parser.jj */
/*@egen*//**
 *
 * VCell Expression Parser Grammer for JavaCC 
 *
 */

options {
  LOOKAHEAD = 1;
  UNICODE_INPUT = false;                 
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;                   
}

PARSER_BEGIN(BNGLParser)

package org.vcell.model.bngl;

public class BNGLParser/*@bgen(jjtree)*/implements BNGLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTBNGLParserState jjtree = new JJTBNGLParserState();

/*@egen*/

  public static void main(String args[]) {
    BNGLParser parser;
    if (args.length == 0) {
      System.out.println("BNGLParser:  Reading from standard input . . .");
      parser = new BNGLParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("BNGL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new BNGLParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("BNGL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("BNGL Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser inputfile");
      return;
    }
    /*
    try {
      System.out.println("trying as species pattern");
      SimpleNode n = parser.SpeciesPattern();
      n.dump("");
      System.out.println("BNGL string: "+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Exception e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    */
    try {
      System.out.println("trying as model");
      ASTModel n = parser.Model();
      n.dump("");
      System.out.println("BNGL string: \n"+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Throwable e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(BNGLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


/*
 * Tokens to consider in BNF follow.
 */
TOKEN : 
{
   < PLUS: "+" > |
   < QUESTION_MARK: "?" > |
   < COMMA: "," > 
}


TOKEN : /* pattern escape tokens */
{
  < NAMED_ATTRIBUTE: "~"  > | 
  < VARIABLE_ATTRIBUTE: "%"  > | 
  < MINUS: "-"  > | 
  < BOND: "!"  > | 
  < DOT: "." > |
  < REACTION_ARROW_RIGHT: "->" > |
  < REACTION_ARROW_LEFT: "<-" > |
  < REACTION_ARROW_BOTH: "<->" >
}

TOKEN : /* IDENTIFIERS */
{
   < BEGIN: "begin" > |
   < MODEL: "model" > |
   < END: "end" > |
   < MOLECULES: "Molecules" | "molecules" > |
   < MOLECULE: "molecule" > |
   < SPECIES: "Species" | "species" > |
   < SEED: "seed" > | 
   < ACTION: "action" > |
   < PARAMETERS: "parameters" > |
   < REACTION: "reaction" > |
   < RULES: "rules" > |
   < TYPES: "types" > |
   < OBSERVABLES: "observables" > |
  < INTEGER: ["1"-"9"] (["0"-"9"])* >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*  >
|
  < #LETTER: ["a"-"z", "_", "A"-"Z"]  >
|
  < #DIGIT:  ["0"-"9"] >
|
  < ESCAPED_EXPRESSION: "{" (<DIGIT> | <LETTER> | "." | "^" | "(" | ")" | "+" | "-" | "*" | "/")+ "}" > 
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
ASTModel Model() :
{/*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Model */
        try {
/*@egen*/	
	(
	<BEGIN> <MODEL> 
	( <BEGIN> ( ParameterBlock() | MolecularDefinitionBlock() | SeedSpeciesBlock() | ReactionRulesBlock() | ObservablesBlock() ) )+ 
	<END> <MODEL>
	( Action() )* 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void ParameterBlock()                 :
{/*@bgen(jjtree) ParameterBlock */
  ASTParameterBlock jjtn000 = new ASTParameterBlock(JJTPARAMETERBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterBlock */
        try {
/*@egen*/
	<PARAMETERS>
	( Parameter() )*
	<END> <PARAMETERS>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parameter()            :
{/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; Token t2; }
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	[ <INTEGER> ] ( t1 = <IDENTIFIER> ) ( t2 = <ESCAPED_EXPRESSION> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { jjtn000.setName(t1.image);  jjtn000.setExpressionString(t2.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MolecularDefinitionBlock()                           :
{/*@bgen(jjtree) MolecularDefinitionBlock */
  ASTMolecularDefinitionBlock jjtn000 = new ASTMolecularDefinitionBlock(JJTMOLECULARDEFINITIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MolecularDefinitionBlock */
        try {
/*@egen*/
	<MOLECULE> <TYPES>
	( [ <INTEGER> ] MolecularTypePattern() )*
	<END> <MOLECULE> <TYPES>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SeedSpeciesBlock()                   :
{/*@bgen(jjtree) SeedSpeciesBlock */
  ASTSeedSpeciesBlock jjtn000 = new ASTSeedSpeciesBlock(JJTSEEDSPECIESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SeedSpeciesBlock */
        try {
/*@egen*/
	<SPECIES>
	( [ <INTEGER> ] SeedSpecies() )* 
	<END> <SPECIES>
|
	<SEED> <SPECIES>
	( [ <INTEGER> ] SeedSpecies() )*
	<END> <SEED> <SPECIES>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SeedSpecies()              :
{/*@bgen(jjtree) SeedSpecies */
  ASTSeedSpecies jjtn000 = new ASTSeedSpecies(JJTSEEDSPECIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) SeedSpecies */
        try {
/*@egen*/
	SpeciesPattern() ( t = <ESCAPED_EXPRESSION> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setInitial(t.image); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ReactionRulesBlock()                     :
{/*@bgen(jjtree) ReactionRulesBlock */
  ASTReactionRulesBlock jjtn000 = new ASTReactionRulesBlock(JJTREACTIONRULESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReactionRulesBlock */
        try {
/*@egen*/
	<REACTION> <RULES>
	( [ <INTEGER> ] ReactionRule() )*
	<END> <REACTION> <RULES>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void ObservablesBlock()                   :
{/*@bgen(jjtree) ObservablesBlock */
  ASTObservablesBlock jjtn000 = new ASTObservablesBlock(JJTOBSERVABLESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ObservablesBlock */
        try {
/*@egen*/
	<OBSERVABLES>
	(Observable() )*
	<END> <OBSERVABLES>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Observable()             :
{/*@bgen(jjtree) Observable */
  ASTObservable jjtn000 = new ASTObservable(JJTOBSERVABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1=null; Token t2=null; Token t=null;}
{/*@bgen(jjtree) Observable */
        try {
/*@egen*/
	([<INTEGER>] ((t1=<MOLECULES>) | (t2=<SPECIES>)) (t = <IDENTIFIER>) SpeciesPattern() )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
 	 { jjtn000.setName(t.image);
 	 if (t1 != null) {jjtn000.setType(t1.image);}
 	 if (t2 != null) {jjtn000.setType(t2.image);} }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Action()         :
{/*@bgen(jjtree) Action */
  ASTAction jjtn000 = new ASTAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Action */
        try {
/*@egen*/
	<ACTION>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ReactionRule()               :
{/*@bgen(jjtree) ReactionRule */
  ASTReactionRule jjtn000 = new ASTReactionRule(JJTREACTIONRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; Token t1; Token t2=null; }
{/*@bgen(jjtree) ReactionRule */
        try {
/*@egen*/
	Reactant() (<PLUS> Reactant())* 
	( ( t = <REACTION_ARROW_RIGHT>) | ( t = <REACTION_ARROW_LEFT> ) | ( t = <REACTION_ARROW_BOTH> ) )
	Product() (<PLUS> Product())*
	KineticsParameter() [ <COMMA> KineticsParameter() ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setArrowString(t.image); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Reactant()           :
{/*@bgen(jjtree) Reactant */
  ASTReactant jjtn000 = new ASTReactant(JJTREACTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Reactant */
        try {
/*@egen*/
	SpeciesPattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Product()          :
{/*@bgen(jjtree) Product */
  ASTProduct jjtn000 = new ASTProduct(JJTPRODUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Product */
        try {
/*@egen*/
	SpeciesPattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void KineticsParameter()                    :
{/*@bgen(jjtree) KineticsParameter */
  ASTKineticsParameter jjtn000 = new ASTKineticsParameter(JJTKINETICSPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) KineticsParameter */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(t.image); }
|
	t = <INTEGER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
 
ASTSpeciesPattern SpeciesPattern() :
{/*@bgen(jjtree) SpeciesPattern */
  ASTSpeciesPattern jjtn000 = new ASTSpeciesPattern(JJTSPECIESPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SpeciesPattern */
   try {
/*@egen*/
   MolecularTypePattern() ( <DOT> MolecularTypePattern() )*/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

ASTMolecularTypePattern MolecularTypePattern() :
{/*@bgen(jjtree) MolecularTypePattern */
  ASTMolecularTypePattern jjtn000 = new ASTMolecularTypePattern(JJTMOLECULARTYPEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) MolecularTypePattern */
  try {
/*@egen*/
  (t = <IDENTIFIER> [ Arguments() ])/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setName(t.image); return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arguments()       :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList()      :
{}
{
  (MolecularComponentPattern()) ( "," MolecularComponentPattern() )*
}

void MolecularComponentPattern()                            : 
{/*@bgen(jjtree) MolecularComponentPattern */
  ASTMolecularComponentPattern jjtn000 = new ASTMolecularComponentPattern(JJTMOLECULARCOMPONENTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) MolecularComponentPattern */
   try {
/*@egen*/
   ( t = <IDENTIFIER> ( AttributePattern() )* [ BondPattern() ] )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AttributePattern()                   : 
{/*@bgen(jjtree) AttributePattern */
  ASTAttributePattern jjtn000 = new ASTAttributePattern(JJTATTRIBUTEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) AttributePattern */
    try {
/*@egen*/
    ( <NAMED_ATTRIBUTE> (t = <IDENTIFIER> ) )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setComponentState(t.image); 
	}
|
    ( <VARIABLE_ATTRIBUTE> (t = <INTEGER> ) )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setVariableName(t.image); 
	}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BondPattern()       :
{ Token t; }
{
	LOOKAHEAD(<BOND> <INTEGER>)
	( 
	   <BOND>  t = <INTEGER> 
	)/*@bgen(jjtree) BondState */
        {
          ASTBondState jjtn001 = new ASTBondState(JJTBONDSTATE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ jjtn001.setBondState(Integer.parseInt(t.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/
|
	LOOKAHEAD(<BOND> <PLUS>)/*@bgen(jjtree) BondExist */
        {
          ASTBondExist jjtn002 = new ASTBondExist(JJTBONDEXIST);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	( 
	   <BOND>  <PLUS>
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/
|
	LOOKAHEAD(<BOND> <QUESTION_MARK>)/*@bgen(jjtree) BondPossible */
        {
          ASTBondPossible jjtn003 = new ASTBondPossible(JJTBONDPOSSIBLE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
	( 
	   <BOND>  <QUESTION_MARK>
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/
|
	LOOKAHEAD(<BOND> <MINUS>)
	( 
	   <BOND>  <MINUS>
	)
}

