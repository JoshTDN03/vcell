/* Generated By:JJTree: Do not edit this line. ASTReactionRule.java */

package org.vcell.model.bngl;

public class ASTReactionRule extends SimpleNode {

	public String arrowString;

	public ASTReactionRule(int id) {
		super(id);
	}

	public ASTReactionRule(BNGLParser p, int id) {
		super(p, id);
	}

	public void setArrowString(String image) {
		this.arrowString = image;
	}

	@Override
	public String toBNGL() {
		StringBuffer buffer = new StringBuffer();

		int numReactants = 0;
		for (int i = 0; i < jjtGetNumChildren(); i++) {
			if (jjtGetChild(i) instanceof ASTReactant) {
				numReactants++;
				if (numReactants > 1) {
					buffer.append(" + ");
				}
				buffer.append(jjtGetChild(i).toBNGL());
			}
		}

		buffer.append(" " + arrowString + " ");

		int numProducts = 0;
		for (int i = 0; i < jjtGetNumChildren(); i++) {
			if (jjtGetChild(i) instanceof ASTProduct) {
				numProducts++;
				if (numProducts > 1) {
					buffer.append(" + ");
				}
				buffer.append(jjtGetChild(i).toBNGL());
			}
		}
		buffer.append(" ");
		int numParameters = 0;
		for (int i = 0; i < jjtGetNumChildren(); i++) {
			if (jjtGetChild(i) instanceof ASTKineticsParameter) {
				numParameters++;
				if (numParameters > 1) {
					buffer.append(", ");
				}
				buffer.append(jjtGetChild(i).toBNGL());
			}
		}
		return buffer.toString() + "\n";
	}

	/** Accept the visitor. **/
	public Object jjtAccept(BNGLParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public final String getArrowString() {
		return arrowString;
	}
}
