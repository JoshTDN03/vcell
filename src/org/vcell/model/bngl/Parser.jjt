/**
 *
 * VCell Expression Parser Grammer for JavaCC 
 *
 */

options {
  LOOKAHEAD = 1;
  UNICODE_INPUT = false;
  MULTI = true;
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;
  VISITOR = true;
}

PARSER_BEGIN(BNGLParser)

package org.vcell.model.bngl;

public class BNGLParser {

  public static void main(String args[]) {
    BNGLParser parser;
    if (args.length == 0) {
      System.out.println("BNGLParser:  Reading from standard input . . .");
      parser = new BNGLParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("BNGL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new BNGLParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("BNGL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("BNGL Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser inputfile");
      return;
    }
    /*
    try {
      System.out.println("trying as species pattern");
      SimpleNode n = parser.SpeciesPattern();
      n.dump("");
      System.out.println("BNGL string: "+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Exception e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    */
    try {
      System.out.println("trying as model");
      ASTModel n = parser.Model();
      n.dump("");
      System.out.println("BNGL string: \n"+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Throwable e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(BNGLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


/*
 * Tokens to consider in BNF follow.
 */
TOKEN : 
{
   < PLUS: "+" > |
   < QUESTION_MARK: "?" > |
   < COMMA: "," > 
}


TOKEN : /* pattern escape tokens */
{
  < NAMED_ATTRIBUTE: "~"  > | 
  < VARIABLE_ATTRIBUTE: "%"  > | 
  < MINUS: "-"  > | 
  < BOND: "!"  > | 
  < DOT: "." > |
  < REACTION_ARROW_RIGHT: "->" > |
  < REACTION_ARROW_LEFT: "<-" > |
  < REACTION_ARROW_BOTH: "<->" >
}

TOKEN : /* IDENTIFIERS */
{
   < BEGIN: "begin" > |
   < MODEL: "model" > |
   < END: "end" > |
   < MOLECULES: "Molecules" | "molecules" > |
   < MOLECULE: "molecule" > |
   < SPECIES: "Species" | "species" > |
   < SEED: "seed" > | 
   < ACTION: "action" > |
   < PARAMETERS: "parameters" > |
   < REACTION: "reaction" > |
   < RULES: "rules" > |
   < TYPES: "types" > |
   < OBSERVABLES: "observables" > |
  < INTEGER: ["1"-"9"] (["0"-"9"])* >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*  >
|
  < #LETTER: ["a"-"z", "_", "A"-"Z"]  >
|
  < #DIGIT:  ["0"-"9"] >
|
  < ESCAPED_EXPRESSION: "{" (<DIGIT> | <LETTER> | "." | "^" | "(" | ")" | "+" | "-" | "*" | "/")+ "}" > 
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
ASTModel Model() :
{}
{	
	(
	<BEGIN> <MODEL> 
	( <BEGIN> ( ParameterBlock() | MolecularDefinitionBlock() | SeedSpeciesBlock() | ReactionRulesBlock() | ObservablesBlock() ) )+ 
	<END> <MODEL>
	( Action() )* 
	)
	{ return jjtThis; }

}

void ParameterBlock() #ParameterBlock :
{}
{
	<PARAMETERS>
	( Parameter() )*
	<END> <PARAMETERS>
}

void Parameter() #Parameter :
{ Token t1; Token t2; }
{
	[ <INTEGER> ] ( t1 = <IDENTIFIER> ) ( t2 = <ESCAPED_EXPRESSION> ) 
    { jjtThis.setName(t1.image);  jjtThis.setExpressionString(t2.image); }
}

void MolecularDefinitionBlock() #MolecularDefinitionBlock :
{}
{
	<MOLECULE> <TYPES>
	( [ <INTEGER> ] MolecularTypePattern() )*
	<END> <MOLECULE> <TYPES>
}

void SeedSpeciesBlock() #SeedSpeciesBlock :
{}
{
	<SPECIES>
	( [ <INTEGER> ] SeedSpecies() )* 
	<END> <SPECIES>
|
	<SEED> <SPECIES>
	( [ <INTEGER> ] SeedSpecies() )*
	<END> <SEED> <SPECIES>
}

void SeedSpecies() #SeedSpecies :
{ Token t; }
{
	SpeciesPattern() ( t = <ESCAPED_EXPRESSION> )
	{ jjtThis.setInitial(t.image); }
}

void ReactionRulesBlock() #ReactionRulesBlock :
{}
{
	<REACTION> <RULES>
	( [ <INTEGER> ] ReactionRule() )*
	<END> <REACTION> <RULES>
}



void ObservablesBlock() #ObservablesBlock :
{}
{
	<OBSERVABLES>
	(Observable() )*
	<END> <OBSERVABLES>
}

void Observable() #Observable :
{ Token t1=null; Token t2=null; Token t=null;}
{
	([<INTEGER>] ((t1=<MOLECULES>) | (t2=<SPECIES>)) (t = <IDENTIFIER>) SpeciesPattern() )
 	 { jjtThis.setName(t.image);
 	 if (t1 != null) {jjtThis.setType(t1.image);}
 	 if (t2 != null) {jjtThis.setType(t2.image);} }
}

void Action() #Action :
{}
{
	<ACTION>
}

void ReactionRule() #ReactionRule :
{ Token t; Token t1; Token t2=null; }
{
	Reactant() (<PLUS> Reactant())* 
	( ( t = <REACTION_ARROW_RIGHT>) | ( t = <REACTION_ARROW_LEFT> ) | ( t = <REACTION_ARROW_BOTH> ) )
	Product() (<PLUS> Product())*
	KineticsParameter() [ <COMMA> KineticsParameter() ]
	{ jjtThis.setArrowString(t.image); }
}

void Reactant() #Reactant :
{}
{
	SpeciesPattern()
}

void Product() #Product :
{}
{
	SpeciesPattern()
}

void KineticsParameter() #KineticsParameter :
{ Token t; }
{
	t = <IDENTIFIER>
	{ jjtThis.setValue(t.image); }
|
	t = <INTEGER>
	{ jjtThis.setValue(t.image); }
}
 
ASTSpeciesPattern SpeciesPattern() :
{}
{
   MolecularTypePattern() ( <DOT> MolecularTypePattern() )*
   { return jjtThis; }
}

ASTMolecularTypePattern MolecularTypePattern() :
{ Token t; }
{
  (t = <IDENTIFIER> [ Arguments() ])
  { jjtThis.setName(t.image); return jjtThis; }
}

void Arguments() #void :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() #void:
{}
{
  (MolecularComponentPattern()) ( "," MolecularComponentPattern() )*
}

void MolecularComponentPattern() #MolecularComponentPattern : 
{ Token t; }
{
   ( t = <IDENTIFIER> ( AttributePattern() )* [ BondPattern() ] )
   { jjtThis.setName(t.image); }
}

void AttributePattern() #AttributePattern : 
{
  Token t;
}
{
    ( <NAMED_ATTRIBUTE> (t = <IDENTIFIER> ) )
	{
	  jjtThis.setComponentState(t.image); 
	}
|
    ( <VARIABLE_ATTRIBUTE> (t = <INTEGER> ) )
	{
	  jjtThis.setVariableName(t.image); 
	}
}

void BondPattern() #void :
{ Token t; }
{
	LOOKAHEAD(<BOND> <INTEGER>)
	( 
	   <BOND>  t = <INTEGER> 
	)
	{ jjtThis.setBondState(Integer.parseInt(t.image)); }
	 #BondState
|
	LOOKAHEAD(<BOND> <PLUS>)
	( 
	   <BOND>  <PLUS>
	) #BondExist
|
	LOOKAHEAD(<BOND> <QUESTION_MARK>)
	( 
	   <BOND>  <QUESTION_MARK>
	) #BondPossible
|
	LOOKAHEAD(<BOND> <MINUS>)
	( 
	   <BOND>  <MINUS>
	)
}

