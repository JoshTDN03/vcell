/**
 *
 * VCell Expression Parser Grammar for JavaCC 
 *
 */

options {
  LOOKAHEAD = 1;
  UNICODE_INPUT = false;
  MULTI = true;
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;
  VISITOR = true;
}

PARSER_BEGIN(BNGLParser)

package org.vcell.model.bngl;

public class BNGLParser {

  public static void main(String args[]) {
    BNGLParser parser;
    if (args.length == 0) {
      System.out.println("BNGLParser:  Reading from standard input . . .");
      parser = new BNGLParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("BNGL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new BNGLParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("BNGL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("BNGL Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser inputfile");
      return;
    }
    /*
    try {
      System.out.println("trying as species pattern");
      SimpleNode n = parser.SpeciesPattern();
      n.dump("");
      System.out.println("BNGL string: "+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Exception e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    */
    try {
      System.out.println("trying as model");
      ASTModel n = parser.Model();
      n.dump("");
      System.out.println("BNGL string: \n"+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Throwable e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(BNGLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

TOKEN : /* IDENTIFIERS */
{
   < BEGIN: "begin" > |
   < MODEL: "model" > |
   < END: "end" > |
   < MOLECULES: "Molecules" | "molecules" > |
   < MOLECULE: "molecule" > |
   < SPECIES: "Species" | "species" > |
   < SEED: "seed" > | 
   < FUNCTIONS: "functions" > | 
   < ACTION: "action" > |
   < COMPARTMENTS: "compartments" > |
   < PARAMETERS: "parameters" > |
   < REACTION: "reaction" > |
   < RULES: "rules" > |
   < TYPES: "types" > |
   < OBSERVABLES: "observables" > |
   < IDENTIFIER: <ID> >
|
  < #ID:
      <LETTER> (<LETTER>|<DIGIT>)*
  >
|
  < #LETTER:
      ["a"-"z", "_", "A"-"Z"]
  >
|
  < #DIGIT:
      ["0"-"9"]
  > 
|
   < INTEGER: ["0"-"9"] (["0"-"9"])* > 
|
   <LABEL: <ID> ":">
|
   <ATSIGN: "@">
  
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <QUOTE: "'">
}


/*******************************************/

/*
 * Tokens to consider in BNF follow.
 */
TOKEN : /* Relational Operators */
{
  <RELATIONAL_OPERATOR_WITHOUT_LT_GT: <LE>|<GE>|<EQ>|<NE>> |
  <LT: "<"  > | 
  <GT: ">"  > | 
  <#LE: "<=" > |
  <#GE: ">=" > |
  <#EQ: "==" > |
  <#NE: "!=" >
}

TOKEN : /* Logical Operators */
{
  <AND: "&&" | ["a","A"] ["n","N"] ["d","D"] > | 
  <OR:  "||" | ["o","O"] ["r","R"]           > |
  <NOT: ["n","N"] ["o","O"] ["t","T"] >
}

TOKEN : /* Arithmetic Operators */
{
  <POWER: "^"  > | 
  <ADD: "+"  > | 
  <SUB: "-" > |
  <MULT: "*" > |
  <DIV: "/" > 
}


TOKEN : /* LITERALS */
{
/*
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | <INTEGER_LITERAL>
      | "0"
  >
*/
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | "0"
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

TOKEN : 
{
   < CLAMP: "$" > |
   < QUESTION_MARK: "?" > |
   < COMMA: "," > 
}

TOKEN : /* pattern escape tokens */
{
  < NAMED_ATTRIBUTE: "~"  > | 
  < VARIABLE_ATTRIBUTE: "%"  > | 
  < MINUS: <SUB>  > | 
  < BOND: "!" > | 
  < DOT: "." > |
  < REACTION_ARROW_RIGHT: (<SUB><GT>) > |
  < REACTION_ARROW_BOTH: (<LT><SUB><GT>) >

}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
ASTModel Model() :
{}
{	
	LOOKAHEAD(2)
	(
	<BEGIN> <MODEL>
	( <BEGIN> ( CompartmentsBlock() | ParameterBlock() | MolecularDefinitionBlock() | SeedSpeciesBlock() | ReactionRulesBlock() | ObservablesBlock() | FunctionsBlock() ) )+ 
	<END> <MODEL>
	( Action() )* 
	)
	{ return jjtThis; }
|
	LOOKAHEAD(2)
	(
	( <BEGIN> ( CompartmentsBlock() | ParameterBlock() | MolecularDefinitionBlock() | SeedSpeciesBlock() | ReactionRulesBlock() | ObservablesBlock() | FunctionsBlock() ) )+ 
	( Action() )* 
	)
	{ return jjtThis; }
}

void FunctionsBlock() #FunctionsBlock :
{}
{
	<FUNCTIONS>
	(FunctionDecl() )*
	<END> <FUNCTIONS>
}


void CompartmentsBlock() #CompartmentsBlock :
{}
{
	<COMPARTMENTS>
	( Compartment() )*
	<END> <COMPARTMENTS>
}

void ParameterBlock() #ParameterBlock :
{}
{
	<PARAMETERS>
	( Parameter() )*
	<END> <PARAMETERS>
}

void MolecularDefinitionBlock() #MolecularDefinitionBlock :
{}
{
	<MOLECULE> <TYPES>
	( [ <INTEGER> ] MolecularTypePattern() )*
	<END> <MOLECULE> <TYPES>
}

void SeedSpeciesBlock() #SeedSpeciesBlock :
{}
{
	<SEED> <SPECIES>
	( [ <INTEGER> ]  SeedSpecies() )*
	<END> <SEED> <SPECIES>
}

void ReactionRulesBlock() #ReactionRulesBlock :
{}
{
	<REACTION> <RULES>
	( [ <INTEGER> ] ReactionRule() )*
	<END> <REACTION> <RULES>
}

void ObservablesBlock() #ObservablesBlock :
{}
{
	<OBSERVABLES>
	(Observable() )*
	<END> <OBSERVABLES>
}

void Compartment() #Compartment :					// ------------ Compartment ---------------------------------
{ Token t1=null; Token t2=null; ASTExpression t3=null;}
{	
	// Format: [index] name dimension volume
	[ <INTEGER> ] ( t1 = <IDENTIFIER> ) ( t2 = <INTEGER> ) ( "{" t3 = Expression() "}")
	{ jjtThis.setName(t1.image); jjtThis.setDimension(t2.image); jjtThis.setVolume(t3.toBNGL()); }
}

void Parameter() #Parameter :						// ----------- Parameter -------------------------------------
{ Token t1; ASTExpression t2; }
{
	[ <INTEGER> ] ( t1 = <IDENTIFIER> ) ( "{" t2 = Expression() "}") 
    { jjtThis.setName(t1.image);  jjtThis.setExpressionString(t2.toBNGL()); }
}

void SeedSpecies() #SeedSpecies :					// ---------- SeedSpecies ------------------------------------
{ Token t1=null; ASTExpression t2; Token tClamped = null;}
{
	[  <ATSIGN> (t1 = <LABEL>) ] [ tClamped = <CLAMP> ] SpeciesPattern() ( "{" t2 = Expression() "}")
	{
	if (t1!=null) { jjtThis.setCompartment(t1.image.replace(":","")); }
	jjtThis.setInitial(t2.toBNGL());
	if(tClamped != null) {jjtThis.setClamped();} 
	}
}

void Observable() #Observable :						// --------- Observable ---------------------------------------
{ Token t1=null; Token t2=null; Token t=null;}
{
	([<INTEGER>] ((t1=<MOLECULES>) | (t2=<SPECIES>)) (t = <IDENTIFIER>) (ObservablePattern() ( [ <COMMA> ] ObservablePattern())*) )
 	 { jjtThis.setName(t.image);
 	 if (t1 != null) {jjtThis.setType(t1.image);}
 	 if (t2 != null) {jjtThis.setType(t2.image);} 
 	 }
}
void ObservablePattern() #ObservablePattern:
{ Token t=null; }
{
	[  <ATSIGN> (t = <LABEL>) ] SpeciesPattern()
	{ if (t!=null) { jjtThis.setCompartment(t.image.replace(":","")); } }
}

void FunctionDecl() #FunctionDecl :					// ----------- Function -------------------------------------
{ Token t1; ASTExpression t2; }
{
	( t1 = <IDENTIFIER> ) "(" ")" "=" ( t2 = Expression() )
	{ jjtThis.setName(t1.image);  jjtThis.setExpressionString(t2.toBNGL()); }
}

void ReactionRule() #ReactionRule :					// ---------- ReactionRule ------------------------------------
{ Token t; Token t1; Token t2=null; Token tLabel;}
{
	( tLabel = <LABEL> )
	Reactant() (<ADD> Reactant())* 
	( ( t = <REACTION_ARROW_RIGHT>) | ( t = <REACTION_ARROW_BOTH> ) )
	Product() (<ADD> Product())*
	KineticsParameter() [ <COMMA> KineticsParameter() ]
	{ jjtThis.setArrowString(t.image); jjtThis.setLabel(tLabel.image);}
}
void Reactant() #Reactant :
{ Token t=null; }
{
	[  <ATSIGN> (t = <LABEL>) ] SpeciesPattern()
	{ if (t!=null) { jjtThis.setCompartment(t.image.replace(":","")); } }
}
void Product() #Product :
{ Token t=null; }
{
	[  <ATSIGN> (t = <LABEL>) ] SpeciesPattern()
	{ if (t!=null) { jjtThis.setCompartment(t.image.replace(":","")); } }
}
void KineticsParameter() #KineticsParameter :
{ ASTExpression t; }
{
	t = Expression()
	{ jjtThis.setValue(t.toBNGL()); }
}
 
ASTSpeciesPattern SpeciesPattern() :				// ------------ SpeciesPattern ---------------------------------
{}
{
   MolecularTypePattern() ( <DOT> MolecularTypePattern() )*
   { return jjtThis; }
}

ASTMolecularTypePattern MolecularTypePattern() :	// ------------- MolecularTypePattern --------------------------
{ Token t; Token label=null; }
{
  (t = <IDENTIFIER>)  Components()  [<VARIABLE_ATTRIBUTE> ( label = <INTEGER> ) ]
  { 
  	jjtThis.setName(t.image); 
  	if (label != null){
  		jjtThis.setMatchLabel(label.image);
  	}
  	return jjtThis;
  }
}

void Action() #Action :
{}
{
	<ACTION>
}

void Components() #void :
{}
{
  "(" [ ComponentList() ] ")"
}

void ComponentList() #void:
{}
{
  (MolecularComponentPattern()) ( "," MolecularComponentPattern() )*
}

void MolecularComponentPattern() #MolecularComponentPattern : 	// ---- MolecularComponentPattern ---------------------
{ Token t; }
{
   ( t = <IDENTIFIER> ( AttributePattern() )* [ BondPattern() ] )
   { jjtThis.setName(t.image); }
}

void AttributePattern() #AttributePattern : 					// ----- State -----------------------------------------
{
  Token t;
}
{
    ( <NAMED_ATTRIBUTE> (( (t =  <IDENTIFIER>) | (t = <INTEGER>)) ) )
	{
	  jjtThis.setComponentState(t.image); 
	}
|
    ( <VARIABLE_ATTRIBUTE> (t = <INTEGER> ) )
	{
	  jjtThis.setVariableName(t.image); 
	}
}

void BondPattern() #void :										// ---- Bond -----------------------------------------
{ Token t; }
{
	LOOKAHEAD(<BOND> <INTEGER>)
	( 
	   <BOND>  t = <INTEGER> 
	)
	{ jjtThis.setBondState(Integer.parseInt(t.image)); }
	 #BondState
|
	LOOKAHEAD(<BOND> <ADD>)
	( 
	   <BOND>  <ADD>
	) #BondExist
|
	LOOKAHEAD(<BOND> <QUESTION_MARK>)
	( 
	   <BOND>  <QUESTION_MARK>
	) #BondPossible
|
	LOOKAHEAD(<BOND> <MINUS>)
	( 
	   <BOND>  <MINUS>
	)
}

/*
 * Expression syntax follows.
 */
ASTExpression Expression() :
{}
{
   StringLiteral() ";"
   { return jjtThis; }
|
   LogicalORExpression() 
   { return jjtThis; }
}

void LogicalORExpression() #void : 
{}
{
   (
   LogicalANDExpression() ( <OR> LogicalANDExpression() )*
   ) #OrNode(>1)
}

void LogicalANDExpression() #void : 
{}
{
   (
   RelationalExpression() ( <AND> RelationalExpression() )*
   ) #AndNode(>1)
}

void RelationalExpression() #void : 
{Token t_name=null;}
{
   AdditiveExpression() 
   [ LOOKAHEAD(3) (t_name = <RELATIONAL_OPERATOR_WITHOUT_LT_GT> | t_name = <LT> | t_name = <GT>) AdditiveExpression() 
   { 
     if (jjtThis!=null){
        ((ASTRelationalNode)jjtThis).setOperationFromToken(t_name.image);
     }
   }
   #RelationalNode(2) ]
}

void AdditiveExpression() #void :
{}
{
  (
  MultiplicativeExpression() ((<ADD> MultiplicativeExpression()) | MinusTerm())*
  ) #AddNode(>1)
}


void MinusTerm() #MinusTermNode :
{}
{
   <SUB> MultiplicativeExpression()
}


void MultiplicativeExpression() #void :
{}
{
  (
  PowerTerm() ( (<MULT> PowerTerm() ) | DivTerm() )* 
  ) #MultNode(>1)
}

void DivTerm() #InvertTermNode :
{}
{
   <DIV> PowerTerm()
}

void PowerTerm() #void :
{}
{
  (
  UnaryExpression() (LOOKAHEAD(<POWER>) <POWER> UnaryExpression() #PowerNode(2))*
  )
}

void UnaryExpression() #void :
{}
{
  (
  <SUB> UnaryExpression()
  ) #MinusTermNode
|
  (
  <NOT> UnaryExpression()
  ) #NotNode
|
  PrimaryExpression()
}


void PrimaryExpression() #void :
{}
{
  LOOKAHEAD(<IDENTIFIER> "(")
  Function()
| 
  LOOKAHEAD(Name())
  Name()
|
  Float()
|
  "(" LogicalORExpression() ")"
}

void Function() #FuncNode :
{ Token t; }
{
  (t = <IDENTIFIER> Arguments())
  { jjtThis.setFunctionFromName(t.image); }
}


void Arguments() #void :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() #void:
{}
{
  (StringLiteral() | LogicalORExpression()) ( "," (StringLiteral() | LogicalORExpression()) )*
}

void Float() #FloatNode:
{ Token t; }
{
  t = <FLOATING_POINT_LITERAL>
  { jjtThis.value = new Double(t.image); }
  |
    t = <INTEGER> [ <DOT> ]
  { jjtThis.value = new Double(t.image); }
  
}

void Name() #IdNode :
{ Token t_name=null; }
{
  t_name = <IDENTIFIER>
  { jjtThis.name = t_name.image; }
}

void StringLiteral() #LiteralNode :
{ Token t_quote=null; 
Token t_name=null; }
{
  t_quote = <QUOTE> t_name = <IDENTIFIER> <QUOTE>
  { jjtThis.name = t_quote.image + t_name.image + t_quote.image; 
  }
}


