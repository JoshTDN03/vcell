/* Generated By:JJTree&JavaCC: Do not edit this line. BNGLParser.java */
package org.vcell.model.bngl;

public class BNGLParser/*@bgen(jjtree)*/implements BNGLParserTreeConstants, BNGLParserConstants {/*@bgen(jjtree)*/
  protected JJTBNGLParserState jjtree = new JJTBNGLParserState();
  public static void main(String args[]) {
    BNGLParser parser;
    if (args.length == 0) {
      System.out.println("BNGLParser:  Reading from standard input . . .");
      parser = new BNGLParser(new java.io.DataInputStream(System.in));
    } else if (args.length == 1) {
      System.out.println("BNGL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new BNGLParser(new java.io.DataInputStream(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("BNGL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("BNGL Parser:  Usage is one of:");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java cbit.vcell.model.rbm.BNGLParser inputfile");
      return;
    }
    /*
    try {
      System.out.println("trying as species pattern");
      SimpleNode n = parser.SpeciesPattern();
      n.dump("");
      System.out.println("BNGL string: "+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Exception e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    */
    try {
      System.out.println("trying as model");
      ASTModel n = parser.Model();
      n.dump("");
      System.out.println("BNGL string: \n"+n.toBNGL());
      System.out.println("BNGL Parser:  program parsed successfully.");
    } catch (Throwable e) {
      System.out.println("BNGL Parser:  exception during parse.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Expression syntax follows.
 */
  final public ASTModel Model() throws ParseException {
 /*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BEGIN);
      jj_consume_token(MODEL);
      label_1:
      while (true) {
        jj_consume_token(BEGIN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARAMETERS:
          ParameterBlock();
          break;
        case MOLECULE:
          MolecularDefinitionBlock();
          break;
        case SPECIES:
        case SEED:
          SeedSpeciesBlock();
          break;
        case REACTION:
          ReactionRulesBlock();
          break;
        case OBSERVABLES:
          ObservablesBlock();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGIN:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(END);
      jj_consume_token(MODEL);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACTION:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        Action();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ParameterBlock() throws ParseException {
 /*@bgen(jjtree) ParameterBlock */
  ASTParameterBlock jjtn000 = new ASTParameterBlock(JJTPARAMETERBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PARAMETERS);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        Parameter();
      }
      jj_consume_token(END);
      jj_consume_token(PARAMETERS);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t1 = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(ESCAPED_EXPRESSION);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setName(t1.image);  jjtn000.setExpressionString(t2.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MolecularDefinitionBlock() throws ParseException {
 /*@bgen(jjtree) MolecularDefinitionBlock */
  ASTMolecularDefinitionBlock jjtn000 = new ASTMolecularDefinitionBlock(JJTMOLECULARDEFINITIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOLECULE);
      jj_consume_token(TYPES);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        MolecularTypePattern();
      }
      jj_consume_token(END);
      jj_consume_token(MOLECULE);
      jj_consume_token(TYPES);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SeedSpeciesBlock() throws ParseException {
 /*@bgen(jjtree) SeedSpeciesBlock */
  ASTSeedSpeciesBlock jjtn000 = new ASTSeedSpeciesBlock(JJTSEEDSPECIESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIES:
        jj_consume_token(SPECIES);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          SeedSpecies();
        }
        jj_consume_token(END);
        jj_consume_token(SPECIES);
        break;
      case SEED:
        jj_consume_token(SEED);
        jj_consume_token(SPECIES);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_6;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          SeedSpecies();
        }
        jj_consume_token(END);
        jj_consume_token(SEED);
        jj_consume_token(SPECIES);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SeedSpecies() throws ParseException {
 /*@bgen(jjtree) SeedSpecies */
  ASTSeedSpecies jjtn000 = new ASTSeedSpecies(JJTSEEDSPECIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      SpeciesPattern();
      t = jj_consume_token(ESCAPED_EXPRESSION);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setInitial(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ReactionRulesBlock() throws ParseException {
 /*@bgen(jjtree) ReactionRulesBlock */
  ASTReactionRulesBlock jjtn000 = new ASTReactionRulesBlock(JJTREACTIONRULESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REACTION);
      jj_consume_token(RULES);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        ReactionRule();
      }
      jj_consume_token(END);
      jj_consume_token(REACTION);
      jj_consume_token(RULES);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ObservablesBlock() throws ParseException {
 /*@bgen(jjtree) ObservablesBlock */
  ASTObservablesBlock jjtn000 = new ASTObservablesBlock(JJTOBSERVABLESBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBSERVABLES);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOLECULES:
        case SPECIES:
        case INTEGER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        Observable();
      }
      jj_consume_token(END);
      jj_consume_token(OBSERVABLES);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Observable() throws ParseException {
 /*@bgen(jjtree) Observable */
  ASTObservable jjtn000 = new ASTObservable(JJTOBSERVABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1=null; Token t2=null; Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOLECULES:
        t1 = jj_consume_token(MOLECULES);
        break;
      case SPECIES:
        t2 = jj_consume_token(SPECIES);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
      SpeciesPattern();
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setName(t.image);
         if (t1 != null) {jjtn000.setType(t1.image);}
         if (t2 != null) {jjtn000.setType(t2.image);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Action() throws ParseException {
 /*@bgen(jjtree) Action */
  ASTAction jjtn000 = new ASTAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACTION);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ReactionRule() throws ParseException {
 /*@bgen(jjtree) ReactionRule */
  ASTReactionRule jjtn000 = new ASTReactionRule(JJTREACTIONRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; Token t1; Token t2=null;
    try {
      Reactant();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(PLUS);
        Reactant();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REACTION_ARROW_RIGHT:
        t = jj_consume_token(REACTION_ARROW_RIGHT);
        break;
      case REACTION_ARROW_LEFT:
        t = jj_consume_token(REACTION_ARROW_LEFT);
        break;
      case REACTION_ARROW_BOTH:
        t = jj_consume_token(REACTION_ARROW_BOTH);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Product();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(PLUS);
        Product();
      }
      KineticsParameter();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        KineticsParameter();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setArrowString(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Reactant() throws ParseException {
 /*@bgen(jjtree) Reactant */
  ASTReactant jjtn000 = new ASTReactant(JJTREACTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpeciesPattern();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Product() throws ParseException {
 /*@bgen(jjtree) Product */
  ASTProduct jjtn000 = new ASTProduct(JJTPRODUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpeciesPattern();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void KineticsParameter() throws ParseException {
 /*@bgen(jjtree) KineticsParameter */
  ASTKineticsParameter jjtn000 = new ASTKineticsParameter(JJTKINETICSPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(t.image);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(t.image);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public ASTSpeciesPattern SpeciesPattern() throws ParseException {
 /*@bgen(jjtree) SpeciesPattern */
  ASTSpeciesPattern jjtn000 = new ASTSpeciesPattern(JJTSPECIESPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MolecularTypePattern();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        jj_consume_token(DOT);
        MolecularTypePattern();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMolecularTypePattern MolecularTypePattern() throws ParseException {
 /*@bgen(jjtree) MolecularTypePattern */
  ASTMolecularTypePattern jjtn000 = new ASTMolecularTypePattern(JJTMOLECULARTYPEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        Arguments();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(34);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ArgumentList();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(35);
  }

  final public void ArgumentList() throws ParseException {
    MolecularComponentPattern();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      MolecularComponentPattern();
    }
  }

  final public void MolecularComponentPattern() throws ParseException {
 /*@bgen(jjtree) MolecularComponentPattern */
  ASTMolecularComponentPattern jjtn000 = new ASTMolecularComponentPattern(JJTMOLECULARCOMPONENTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMED_ATTRIBUTE:
        case VARIABLE_ATTRIBUTE:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_13;
        }
        AttributePattern();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOND:
        BondPattern();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AttributePattern() throws ParseException {
 /*@bgen(jjtree) AttributePattern */
  ASTAttributePattern jjtn000 = new ASTAttributePattern(JJTATTRIBUTEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMED_ATTRIBUTE:
        jj_consume_token(NAMED_ATTRIBUTE);
        t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setComponentState(t.image);
        break;
      case VARIABLE_ATTRIBUTE:
        jj_consume_token(VARIABLE_ATTRIBUTE);
        t = jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setVariableName(t.image);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BondPattern() throws ParseException {
  Token t;
    if (jj_2_1(2147483647)) {
      jj_consume_token(BOND);
      t = jj_consume_token(INTEGER);
          ASTBondState jjtn001 = new ASTBondState(JJTBONDSTATE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.setBondState(Integer.parseInt(t.image));
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_2(2147483647)) {
          ASTBondExist jjtn002 = new ASTBondExist(JJTBONDEXIST);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOND);
        jj_consume_token(PLUS);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
    } else if (jj_2_3(2147483647)) {
          ASTBondPossible jjtn003 = new ASTBondPossible(JJTBONDPOSSIBLE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(BOND);
        jj_consume_token(QUESTION_MARK);
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
    } else if (jj_2_4(2147483647)) {
      jj_consume_token(BOND);
      jj_consume_token(MINUS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(BOND)) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(BOND)) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(BOND)) return true;
    if (jj_scan_token(QUESTION_MARK)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(BOND)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  public BNGLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x13700000,0x10000,0x800000,0x60000000,0x20000000,0x60000000,0x20000000,0x60000000,0x20000000,0x60000000,0x20000000,0x600000,0x60000000,0x20000000,0x20280000,0x20000000,0x280000,0x20,0xe000,0x20,0x80,0x60000000,0x1000,0x0,0x40000000,0x80,0x300,0x800,0x300,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public BNGLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public BNGLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BNGLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BNGLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BNGLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BNGLParser(BNGLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BNGLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
