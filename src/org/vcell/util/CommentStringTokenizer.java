package org.vcell.util;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.*;

import cbit.vcell.parser.ASTFloatNode;
import cbit.vcell.parser.ExpressionException;


/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CommentStringTokenizer {
	//private StringTokenizer lineTokenizer = null;
	BufferedReader reader = null;
	private final static String LineComment = "//";
	private final static String QuoteCharacter = "\"";
	private LinkedList<Token> tokenLinkedList = new LinkedList<Token>();
	int currLine = 0;
	int currCol = 0;

/**
 * MathStringTokenizer constructor comment.
 * @param str java.lang.String
 */
public CommentStringTokenizer(BufferedReader str) {
	reader = str;
	//lineTokenizer = new StringTokenizer(str, " \t\n\r"+QuoteCharacter, true);
	refreshCurrTokenizer();
}

public CommentStringTokenizer(String str) {
	reader = new BufferedReader(new StringReader(str));
	//lineTokenizer = new StringTokenizer(str, " \t\n\r"+QuoteCharacter, true);
	refreshCurrTokenizer();
}

/**
 * This method was created by a SmartGuide.
 * @return int
 */
public int columnIndex() {
	return currCol;
}

/**
 * This method was created by a SmartGuide.
 * @return boolean
 */
public boolean hasMoreTokens() {
	refreshCurrTokenizer();
	return (tokenLinkedList.size() > 0);
}

public String readToSemicolon(){
	String expressionString = new String();
	String token = null;
	while (hasMoreTokens()){
		token = nextToken();
		if (token.equals(";")){
			break;
		}	
		if (token.charAt(token.length()-1) == ';'){
			expressionString += token.substring(0,token.length()-1);
			break;
		}	
		expressionString += token;
	}
	return expressionString;
}

/**
 * This method was created by a SmartGuide.
 * @return int
 */
public int lineIndex() {
	return currLine;
}


/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String nextToken() {
	refreshCurrTokenizer();
	if (tokenLinkedList.size() == 0) {
		throw new NoSuchElementException();
	}
	Token token = (Token)tokenLinkedList.removeFirst();	
	return token.getValue();
}


/**
 * Insert the method's description here.
 * Creation date: (8/6/2002 1:13:53 PM)
 * @param token java.lang.String
 */
public void pushToken(String token) {
	Token newToken = new Token(token,columnIndex(),lineIndex());
	tokenLinkedList.addFirst(newToken);
}


/**
 * This method was created by a SmartGuide.
 */
private void refreshCurrTokenizer() {
	if (tokenLinkedList.size() != 0) {
		return;
	}
	
	//
	// if tokenLinkedList is empty, fill with tokens from next non-empty line of text
	//
	while (tokenLinkedList.size() == 0) { // read until there is something in the list
		String nextLine = null;
		try {
			nextLine = reader.readLine();
		} catch (IOException e) {			
			e.printStackTrace();
			throw new NoSuchElementException(e.getMessage());
		}
		if (nextLine == null) {
			return;
		}		
		StringTokenizer lineTokenizer = new StringTokenizer(nextLine, " \t" + QuoteCharacter, true);		
		currLine ++;
		currCol = 0;		
		boolean bInsideQuotes = false;
		Token quotedToken = null;
		while (lineTokenizer.hasMoreElements()){
			String nextToken = lineTokenizer.nextToken();
			//
			// comments use the C++/Java convension for line comments "//"
			//
			// flag comments until end of line (reset only by \n)
			// comment token is ignored within quotes
			//
			// if not inside quotes, forget about comment, space and tab
			if (!bInsideQuotes) {
				if (nextToken.equals(" ") || nextToken.equals("\t")){
					currCol += nextToken.length();
					continue;
				}
				if (nextToken.startsWith(LineComment)) {
					break;
				}
			}
			
			if (nextToken.equals(QuoteCharacter)){
				if (bInsideQuotes){
					//
					// if ending a quoted string, add current quotedToken to the linkedList
					// quotedToken is the accumulator for tokens within the current quoted string.
					//					
					if (quotedToken!=null){
						tokenLinkedList.addLast(quotedToken);
						quotedToken = null;
					}
					bInsideQuotes = false;
				}else{
					bInsideQuotes = true;
				}
				currCol ++;
				continue;
			}
			
			Token newToken = new Token(nextToken,currCol,currLine);
			currCol += nextToken.length();
			
			if (bInsideQuotes){
				//
				// start a new quotedToken or append to current one, add to linked list after receiving end-quote
				//
				if (quotedToken==null){
					quotedToken = newToken;
				}else{
					quotedToken.join(newToken);
				}
			} else {
				tokenLinkedList.addLast(newToken);				
			}	
		}	
		if (bInsideQuotes){
			throw new RuntimeException("unterminated string, expected a \" before end of line");
		}
	}
}


/**
 * Insert the method's description here.
 * Creation date: (4/18/2001 2:30:23 PM)
 */
public void show() {
	for (Token token :  tokenLinkedList){
		System.out.println(token);
	}
}
}