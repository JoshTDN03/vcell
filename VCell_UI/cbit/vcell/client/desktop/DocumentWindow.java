package cbit.vcell.client.desktop;
import java.awt.event.*;
import cbit.vcell.client.server.*;
import cbit.vcell.client.*;
import java.text.*;
import java.awt.*;
import javax.swing.*;

import org.vcell.util.*;
import org.vcell.util.document.User;
import org.vcell.util.document.VCDocument;
import org.vcell.util.document.VersionFlag;

import cbit.vcell.desktop.*;
/**
 * This type was generated by a SmartGuide.
 */
public class DocumentWindow extends JFrame implements TopLevelWindow {
	//class SimpleWebViewer extends JDialog implements WindowListener {

		//private URL initialURL = null;
		//private boolean isINIT = true;
		//private SimpleWebBrowserPanel swb = null;
		
		//public SimpleWebViewer(Frame parentFrame,String title,URL viewThisURL){
			//super(parentFrame,title);
			//initialURL = viewThisURL;
			//DocumentWindow.this.addWindowListener(this);
			//Container contentPane = getContentPane();
			//contentPane.setLayout(new BorderLayout());
			////
			//swb = new SimpleWebBrowserPanel();
			
			//contentPane.add(swb, BorderLayout.CENTER);
			////
			//pack();
			//setLocationRelativeTo(parentFrame);
		//}

		//public void show() {
			//super.show();

			//if(isINIT){
				//try {
					//swb.setCurrentURL(initialURL);
				//}finally{
					//isINIT = false;
				//}
			//}
			
		//}

		//public void windowActivated(WindowEvent e){
		//}
		//public void windowClosed(WindowEvent e){
			//SimpleWebViewer.this.dispose();
		//}
		//public void windowClosing(WindowEvent e){
		//}
		//public void windowDeactivated(WindowEvent e){
		//}
		//public void windowDeiconified(WindowEvent e){
		//}
		//public void windowIconified(WindowEvent e){
		//}
		//public void windowOpened(WindowEvent e){
		//}
	//}
	////
	////
	//private SimpleWebViewer userGuideSWV = null;
	//private SimpleWebViewer tutorialSWV = null;
	////
	////
	
	private JDialog compareDialog = null;
	private LoginDialog loginDialog = null;
	private boolean ppRunning = false;
	private JMenuItem ivjAbout_BoxMenuItem = null;
	private JMenuItem ivjCascadeMenuItem = null;
	private JMenuItem ivjChange_UserMenuItem = null;
	private JMenuItem ivjCloseMenuItem = null;
	private JMenuBar ivjDocumentWindowJMenuBar = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JMenuItem ivjExitMenuItem = null;
	private JMenu ivjFileMenu = null;
	private JMenu ivjHelpMenu = null;
	private JPanel ivjJFrameContentPane = null;
	private JSeparator ivjJSeparator1 = null;
	private JSeparator ivjJSeparator2 = null;
	private JSeparator ivjJSeparator3 = null;
	private JSeparator ivjJSeparator4 = null;
	private JSeparator ivjJSeparator5 = null;
	private JMenuItem ivjLocalMenuItem = null;
	private JMenuItem ivjManage_DatabaseMenuItem = null;
	private JMenuItem ivjMinimize_AllMenuItem = null;
	private JMenu ivjNewMenuItem = null;
	private JMenu ivjOpenMenuItem = null;
	private JMenuItem ivjReconnectMenuItem = null;
	private JMenuItem ivjSave_AsMenuItem = null;
	private JMenuItem ivjSave_VersionMenuItem = null;
	private JMenuItem ivjSaveMenuItem = null;
	private JMenu ivjServerMenu = null;
	private JCheckBoxMenuItem ivjStatusbarMenuItem = null;
	private JPanel ivjStatusBarPane = null;
	private JMenuItem ivjTile_HorizontallyMenuItem = null;
	private JMenuItem ivjTile_VerticallyMenuItem = null;
	private JMenu ivjViewMenu = null;
	private JMenu ivjWindowMenu = null;
	private JSeparator ivjJSeparator6 = null;
	private JMenuItem ivjJMenuItemNewBioModel = null;
	private JMenuItem ivjJMenuItemOpenBioModel = null;
	private JMenuItem ivjJMenuItemOpenGeometry = null;
	private JMenuItem ivjJMenuItemOpenMathModel = null;
	private JPanel ivjJPanelMemStatus = null;
	private JProgressBar ivjJProgressBarMemory = null;
	private JLabel ivjStatusMsgMemory = null;
	private DocumentWindowManager fieldWindowManager = null;
	private JMenuItem ivjJMenuItemExport = null;
	private JMenuItem ivjJMenuItemImport = null;
	private JSeparator ivjJSeparator7 = null;
	private JLabel ivjStatusMsgConnection = null;
	private JMenuItem ivjJMenuItemServer = null;
	private JProgressBar ivjJProgressBarConnection = null;
	private JMenuItem ivjJMenuItemCompare = null;
	private JMenuItem ivjJMenuItemRevert = null;
	private JSeparator ivjJSeparator8 = null;
	private JMenuItem ivjJMenuItemOptions = null;
	private JMenu ivjAnalyticMenu = null;
	private JMenuItem ivjChooseImageMenuItem = null;
	private JMenuItem ivjExistingImageMenuItem = null;
	private JMenu ivjGeometryMenu = null;
	private JMenu ivjImageMenu = null;
	private JMenuItem ivjMathFromBioMenuItem = null;
	private JMenu ivjMathMenu = null;
	private JMenuItem ivjDim1MenuItem = null;
	private JMenuItem ivjDim2MenuItem = null;
	private JMenuItem ivjDim3MenuItem = null;
	private JMenuItem ivjNonSpatialMenuItem = null;
	private JMenuItem ivjSpatialMenuItem = null;
	private JMenuItem ivjEdit_Annotation_JMenuItem = null;
	private JMenuItem ivjTestingFrameworkMenuItem = null;
	private JMenuItem ivjJMenuItemOnlineHelp = null;
	private JMenu ivjBNGMenu = null;
	private JMenuItem ivjRunBNGMenuItem = null;

class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.ItemListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == DocumentWindow.this.getAbout_BoxMenuItem()) 
				connEtoC3(e);
			if (e.getSource() == DocumentWindow.this.getCloseMenuItem()) 
				connEtoC5(e);
			if (e.getSource() == DocumentWindow.this.getExitMenuItem()) 
				connEtoC6(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemNewBioModel()) 
				connEtoC7(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenBioModel()) 
				connEtoC10(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenMathModel()) 
				connEtoC11(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOpenGeometry()) 
				connEtoC12(e);
			if (e.getSource() == DocumentWindow.this.getSaveMenuItem()) 
				connEtoC13(e);
			if (e.getSource() == DocumentWindow.this.getSave_AsMenuItem()) 
				connEtoC14(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemImport()) 
				connEtoC15(e);
			if (e.getSource() == DocumentWindow.this.getSave_VersionMenuItem()) 
				connEtoC16(e);
			if (e.getSource() == DocumentWindow.this.getChange_UserMenuItem()) 
				connEtoC18(e);
			if (e.getSource() == DocumentWindow.this.getReconnectMenuItem()) 
				connEtoC19(e);
			if (e.getSource() == DocumentWindow.this.getLocalMenuItem()) 
				connEtoC20(e);
			if (e.getSource() == DocumentWindow.this.getTile_HorizontallyMenuItem()) 
				connEtoC21(e);
			if (e.getSource() == DocumentWindow.this.getTile_VerticallyMenuItem()) 
				connEtoC22(e);
			if (e.getSource() == DocumentWindow.this.getCascadeMenuItem()) 
				connEtoC23(e);
			if (e.getSource() == DocumentWindow.this.getMinimize_AllMenuItem()) 
				connEtoC24(e);
			if (e.getSource() == DocumentWindow.this.getManage_DatabaseMenuItem()) 
				connEtoC27(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemServer()) 
				connEtoC4(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOptions()) 
				connEtoC1(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemRevert()) 
				connEtoC28(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemCompare()) 
				connEtoC29(e);
			if (e.getSource() == DocumentWindow.this.getExistingImageMenuItem()) 
				connEtoC9(e);
			if (e.getSource() == DocumentWindow.this.getChooseImageMenuItem()) 
				connEtoC30(e);
			if (e.getSource() == DocumentWindow.this.getNonSpatialMenuItem()) 
				connEtoC8(e);
			if (e.getSource() == DocumentWindow.this.getMathFromBioMenuItem()) 
				connEtoC31(e);
			if (e.getSource() == DocumentWindow.this.getDim1MenuItem()) 
				connEtoC32(e);
			if (e.getSource() == DocumentWindow.this.getDim2MenuItem()) 
				connEtoC33(e);
			if (e.getSource() == DocumentWindow.this.getDim3MenuItem()) 
				connEtoC34(e);
			if (e.getSource() == DocumentWindow.this.getSpatialMenuItem()) 
				connEtoC35(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemExport()) 
				connEtoC17(e);
			if (e.getSource() == DocumentWindow.this.getEdit_Annotation_JMenuItem()) 
				connEtoC36(e);
			if (e.getSource() == DocumentWindow.this.getTestingFrameworkMenuItem()) 
				connEtoC37(e);
			if (e.getSource() == DocumentWindow.this.getJMenuItemOnlineHelp()) 
				connEtoC25(e);
			if (e.getSource() == DocumentWindow.this.getRunBNGMenuItem()) 
				connEtoC26(e);
		};
		public void itemStateChanged(java.awt.event.ItemEvent e) {
			if (e.getSource() == DocumentWindow.this.getStatusbarMenuItem()) 
				connEtoC2(e);
		};
	};

/**
 * DocumentWindow constructor comment.
 */
public DocumentWindow() {
	super();
	initialize();
}

/**
 * Comment
 */
private void cascadeWindows() {
	getWindowManager().cascadeWindows();
}


/**
 * Comment
 */
private void closeWindow() {
	getWindowManager().closeWindow();
}


/**
 * Comment
 */
private void compareWithSaved() {
	getWindowManager().compareWithSaved();
}


/**
 * connEtoC1:  (JMenuItemOptions.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC10:  (JMenuItemOpenBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC10(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC11:  (JMenuItemOpenMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC11(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC12:  (JMenuItemOpenGeometry.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC12(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.openDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC13:  (SaveMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC14:  (Save_AsMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC14(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocumentAsNew();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC15:  (JMenuItemImport.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC15(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.importXMLDocument();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC16:  (Save_VersionMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC16(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.saveDocument(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC17:  (JMenuItemExport.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC17(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exportDocument();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC18:  (Change_UserMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC18(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showLoginDialog();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC19:  (ReconnectMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC19(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.reconnect();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC2:  (StatusbarMenuItem.item.itemStateChanged(java.awt.event.ItemEvent) --> DocumentWindow.viewStatusBar()V)
 * @param arg1 java.awt.event.ItemEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ItemEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.viewStatusBar();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC20:  (LocalMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC20(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC21:  (Tile_HorizontallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC21(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.tileHorizontal();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC22:  (Tile_VerticallyMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC22(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.tileVertically();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC23:  (CascadeMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC23(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.cascadeWindows();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC24:  (Minimize_AllMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC25:  (JMenuItemOnlineHelp.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.invokeOnlineHelp()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC25(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.invokeOnlineHelp();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC26:  (RunBNGMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.launchBNG()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC26(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showBNGWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC27:  (Manage_DatabaseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC27(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showDatabaseWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC28:  (JMenuItemRevert.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.revertToSaved()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC28(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.revertToSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC29:  (JMenuItemCompare.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC29(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.compareWithSaved();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC3:  (About_BoxMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showAboutBox()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showAboutBox();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC30:  (ChooseImageMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.chooseImageFromFile(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC30(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC31:  (MathFromBioMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.mathFromBioModel(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC31(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC32:  (Dim1RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC32(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC33:  (Dim2RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC33(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC34:  (Dim3RadioButtonMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC34(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC35:  (SpatialMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newDocument(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC35(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC36:  (Edit_Annotation_JMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showEditAnnotationWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC36(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showEditAnnotationWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC37:  (TestingFrameworkMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.showTestingFrameworkWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC37(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showTestingFrameworkWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC4:  (JMenuItemServer.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.notYet();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC5:  (CloseMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.closeWindow()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC5(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.closeWindow();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC6:  (ExitMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.exitApplication()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC6(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.exitApplication();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoC7:  (JMenuItemNewBioModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.newBioModel()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC7(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC8:  (JMenuItemNewMathModel.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC8(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC9:  (JMenuItemNewGeometry.action.actionPerformed(java.awt.event.ActionEvent) --> DocumentWindow.notYet()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC9(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.newDocument(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * Comment
 */
private void exitApplication() {
	getWindowManager().exitApplication();
}


/**
 * Comment
 */
private void exportDocument() {
	getWindowManager().exportDocument();
}


/**
 * Return the About_BoxMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getAbout_BoxMenuItem() {
	if (ivjAbout_BoxMenuItem == null) {
		try {
			ivjAbout_BoxMenuItem = new javax.swing.JMenuItem();
			ivjAbout_BoxMenuItem.setName("About_BoxMenuItem");
			ivjAbout_BoxMenuItem.setText("About the Virtual Cell");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAbout_BoxMenuItem;
}

/**
 * Return the AnalyticMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getAnalyticMenu() {
	if (ivjAnalyticMenu == null) {
		try {
			ivjAnalyticMenu = new javax.swing.JMenu();
			ivjAnalyticMenu.setName("AnalyticMenu");
			ivjAnalyticMenu.setText("Analytic");
			ivjAnalyticMenu.add(getDim1MenuItem());
			ivjAnalyticMenu.add(getDim2MenuItem());
			ivjAnalyticMenu.add(getDim3MenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAnalyticMenu;
}

/**
 * Return the BNGMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getBNGMenu() {
	if (ivjBNGMenu == null) {
		try {
			ivjBNGMenu = new javax.swing.JMenu();
			ivjBNGMenu.setName("BNGMenu");
			ivjBNGMenu.setText("BioNetGen");
			ivjBNGMenu.add(getRunBNGMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBNGMenu;
}

/**
 * Return the CascadeMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCascadeMenuItem() {
	if (ivjCascadeMenuItem == null) {
		try {
			ivjCascadeMenuItem = new javax.swing.JMenuItem();
			ivjCascadeMenuItem.setName("CascadeMenuItem");
			ivjCascadeMenuItem.setText("Cascade");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCascadeMenuItem;
}


/**
 * Return the Change_UserMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getChange_UserMenuItem() {
	if (ivjChange_UserMenuItem == null) {
		try {
			ivjChange_UserMenuItem = new javax.swing.JMenuItem();
			ivjChange_UserMenuItem.setName("Change_UserMenuItem");
			ivjChange_UserMenuItem.setText("Change User");
			ivjChange_UserMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChange_UserMenuItem;
}

/**
 * Return the ChooseImageMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getChooseImageMenuItem() {
	if (ivjChooseImageMenuItem == null) {
		try {
			ivjChooseImageMenuItem = new javax.swing.JMenuItem();
			ivjChooseImageMenuItem.setName("ChooseImageMenuItem");
			ivjChooseImageMenuItem.setText("Choose Image from File ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjChooseImageMenuItem;
}


/**
 * Return the CloseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getCloseMenuItem() {
	if (ivjCloseMenuItem == null) {
		try {
			ivjCloseMenuItem = new javax.swing.JMenuItem();
			ivjCloseMenuItem.setName("CloseMenuItem");
			ivjCloseMenuItem.setText("Close");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCloseMenuItem;
}


/**
 * Comment
 */
private JDialog getCompareDialog() {
	if (compareDialog == null) {
		compareDialog = new JDialog(this,  "Comparison with Saved Edition", false);
		compareDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		WindowAdapter listener = new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				if (e.getSource() == DocumentWindow.this) {
					compareDialog.dispose();
				}
			}
		};
		DocumentWindow.this.addWindowListener(listener);
	}
	return compareDialog;
}


/**
 * Return the Dim1MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim1MenuItem() {
	if (ivjDim1MenuItem == null) {
		try {
			ivjDim1MenuItem = new javax.swing.JMenuItem();
			ivjDim1MenuItem.setName("Dim1MenuItem");
			ivjDim1MenuItem.setText("1-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim1MenuItem;
}


/**
 * Return the Dim2MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim2MenuItem() {
	if (ivjDim2MenuItem == null) {
		try {
			ivjDim2MenuItem = new javax.swing.JMenuItem();
			ivjDim2MenuItem.setName("Dim2MenuItem");
			ivjDim2MenuItem.setText("2-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim2MenuItem;
}


/**
 * Return the Dim3MenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getDim3MenuItem() {
	if (ivjDim3MenuItem == null) {
		try {
			ivjDim3MenuItem = new javax.swing.JMenuItem();
			ivjDim3MenuItem.setName("Dim3MenuItem");
			ivjDim3MenuItem.setText("3-D");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDim3MenuItem;
}


/**
 * Return the DocumentWindowJMenuBar property value.
 * @return javax.swing.JMenuBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuBar getDocumentWindowJMenuBar() {
	if (ivjDocumentWindowJMenuBar == null) {
		try {
			ivjDocumentWindowJMenuBar = new javax.swing.JMenuBar();
			ivjDocumentWindowJMenuBar.setName("DocumentWindowJMenuBar");
			ivjDocumentWindowJMenuBar.add(getFileMenu());
			ivjDocumentWindowJMenuBar.add(getViewMenu());
			ivjDocumentWindowJMenuBar.add(getServerMenu());
			ivjDocumentWindowJMenuBar.add(getWindowMenu());
			ivjDocumentWindowJMenuBar.add(getBNGMenu());
			ivjDocumentWindowJMenuBar.add(getHelpMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDocumentWindowJMenuBar;
}

/**
 * Return the Edit_Annotation_JMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getEdit_Annotation_JMenuItem() {
	if (ivjEdit_Annotation_JMenuItem == null) {
		try {
			ivjEdit_Annotation_JMenuItem = new javax.swing.JMenuItem();
			ivjEdit_Annotation_JMenuItem.setName("Edit_Annotation_JMenuItem");
			ivjEdit_Annotation_JMenuItem.setText("Edit Annotation...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjEdit_Annotation_JMenuItem;
}


/**
 * Return the ExistingImageMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExistingImageMenuItem() {
	if (ivjExistingImageMenuItem == null) {
		try {
			ivjExistingImageMenuItem = new javax.swing.JMenuItem();
			ivjExistingImageMenuItem.setName("ExistingImageMenuItem");
			ivjExistingImageMenuItem.setText("Existing Image ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExistingImageMenuItem;
}


/**
 * Return the ExitMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExitMenuItem() {
	if (ivjExitMenuItem == null) {
		try {
			ivjExitMenuItem = new javax.swing.JMenuItem();
			ivjExitMenuItem.setName("ExitMenuItem");
			ivjExitMenuItem.setText("Exit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExitMenuItem;
}

/**
 * Return the FileMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getFileMenu() {
	if (ivjFileMenu == null) {
		try {
			ivjFileMenu = new javax.swing.JMenu();
			ivjFileMenu.setName("FileMenu");
			ivjFileMenu.setText("File");
			ivjFileMenu.add(getNewMenuItem());
			ivjFileMenu.add(getOpenMenuItem());
			ivjFileMenu.add(getCloseMenuItem());
			ivjFileMenu.add(getJSeparator2());
			ivjFileMenu.add(getSaveMenuItem());
			ivjFileMenu.add(getSave_VersionMenuItem());
			ivjFileMenu.add(getSave_AsMenuItem());
			ivjFileMenu.add(getJSeparator8());
			ivjFileMenu.add(getJMenuItemRevert());
			ivjFileMenu.add(getJMenuItemCompare());
			ivjFileMenu.add(getJSeparator1());
			ivjFileMenu.add(getManage_DatabaseMenuItem());
			ivjFileMenu.add(getTestingFrameworkMenuItem());
			ivjFileMenu.add(getEdit_Annotation_JMenuItem());
			ivjFileMenu.add(getJSeparator7());
			ivjFileMenu.add(getJMenuItemImport());
			ivjFileMenu.add(getJMenuItemExport());
			ivjFileMenu.add(getJSeparator3());
			ivjFileMenu.add(getExitMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFileMenu;
}

/**
 * Return the GeometryMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getGeometryMenu() {
	if (ivjGeometryMenu == null) {
		try {
			ivjGeometryMenu = new javax.swing.JMenu();
			ivjGeometryMenu.setName("GeometryMenu");
			ivjGeometryMenu.setText("Geometry");
			ivjGeometryMenu.add(getAnalyticMenu());
			ivjGeometryMenu.add(getImageMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjGeometryMenu;
}


/**
 * Return the HelpMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getHelpMenu() {
	if (ivjHelpMenu == null) {
		try {
			ivjHelpMenu = new javax.swing.JMenu();
			ivjHelpMenu.setName("HelpMenu");
			ivjHelpMenu.setText("Help");
			ivjHelpMenu.add(getJMenuItemOnlineHelp());
			ivjHelpMenu.add(getJSeparator6());
			ivjHelpMenu.add(getAbout_BoxMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHelpMenu;
}

/**
 * Return the ImageMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getImageMenu() {
	if (ivjImageMenu == null) {
		try {
			ivjImageMenu = new javax.swing.JMenu();
			ivjImageMenu.setName("ImageMenu");
			ivjImageMenu.setText("From Image");
			ivjImageMenu.add(getExistingImageMenuItem());
			ivjImageMenu.add(getChooseImageMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjImageMenu;
}


/**
 * Return the JFrameContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJFrameContentPane() {
	if (ivjJFrameContentPane == null) {
		try {
			ivjJFrameContentPane = new javax.swing.JPanel();
			ivjJFrameContentPane.setName("JFrameContentPane");
			ivjJFrameContentPane.setLayout(new java.awt.BorderLayout());
			getJFrameContentPane().add(getStatusBarPane(), "South");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJFrameContentPane;
}

/**
 * Return the JMenuItemCompare property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemCompare() {
	if (ivjJMenuItemCompare == null) {
		try {
			ivjJMenuItemCompare = new javax.swing.JMenuItem();
			ivjJMenuItemCompare.setName("JMenuItemCompare");
			ivjJMenuItemCompare.setText("Compare with Saved");
			ivjJMenuItemCompare.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemCompare;
}

/**
 * Return the JMenuItemExport property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemExport() {
	if (ivjJMenuItemExport == null) {
		try {
			ivjJMenuItemExport = new javax.swing.JMenuItem();
			ivjJMenuItemExport.setName("JMenuItemExport");
			ivjJMenuItemExport.setText("Export...");
			ivjJMenuItemExport.setActionCommand("Export");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemExport;
}

/**
 * Return the JMenuItemImport property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemImport() {
	if (ivjJMenuItemImport == null) {
		try {
			ivjJMenuItemImport = new javax.swing.JMenuItem();
			ivjJMenuItemImport.setName("JMenuItemImport");
			ivjJMenuItemImport.setText("Import...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemImport;
}

/**
 * Return the JMenuItemNewBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemNewBioModel() {
	if (ivjJMenuItemNewBioModel == null) {
		try {
			ivjJMenuItemNewBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemNewBioModel.setName("JMenuItemNewBioModel");
			ivjJMenuItemNewBioModel.setText("BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemNewBioModel;
}


/**
 * Return the Help_TopicsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOnlineHelp() {
	if (ivjJMenuItemOnlineHelp == null) {
		try {
			ivjJMenuItemOnlineHelp = new javax.swing.JMenuItem();
			ivjJMenuItemOnlineHelp.setName("JMenuItemOnlineHelp");
			ivjJMenuItemOnlineHelp.setText("Online Help");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOnlineHelp;
}

/**
 * Return the JMenuItemOpenBioModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenBioModel() {
	if (ivjJMenuItemOpenBioModel == null) {
		try {
			ivjJMenuItemOpenBioModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenBioModel.setName("JMenuItemOpenBioModel");
			ivjJMenuItemOpenBioModel.setText("BioModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenBioModel;
}

/**
 * Return the JMenuItemOpenGeometry property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenGeometry() {
	if (ivjJMenuItemOpenGeometry == null) {
		try {
			ivjJMenuItemOpenGeometry = new javax.swing.JMenuItem();
			ivjJMenuItemOpenGeometry.setName("JMenuItemOpenGeometry");
			ivjJMenuItemOpenGeometry.setText("Geometry...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenGeometry;
}

/**
 * Return the JMenuItemOpenMathModel property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOpenMathModel() {
	if (ivjJMenuItemOpenMathModel == null) {
		try {
			ivjJMenuItemOpenMathModel = new javax.swing.JMenuItem();
			ivjJMenuItemOpenMathModel.setName("JMenuItemOpenMathModel");
			ivjJMenuItemOpenMathModel.setText("MathModel...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOpenMathModel;
}

/**
 * Return the JMenuItemOptions property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemOptions() {
	if (ivjJMenuItemOptions == null) {
		try {
			ivjJMenuItemOptions = new javax.swing.JMenuItem();
			ivjJMenuItemOptions.setName("JMenuItemOptions");
			ivjJMenuItemOptions.setText("Options...");
			ivjJMenuItemOptions.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemOptions;
}


/**
 * Return the JMenuItemRevert property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemRevert() {
	if (ivjJMenuItemRevert == null) {
		try {
			ivjJMenuItemRevert = new javax.swing.JMenuItem();
			ivjJMenuItemRevert.setName("JMenuItemRevert");
			ivjJMenuItemRevert.setText("Revert to Saved");
			ivjJMenuItemRevert.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemRevert;
}

/**
 * Return the JMenuItemServer property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getJMenuItemServer() {
	if (ivjJMenuItemServer == null) {
		try {
			ivjJMenuItemServer = new javax.swing.JMenuItem();
			ivjJMenuItemServer.setName("JMenuItemServer");
			ivjJMenuItemServer.setText("Change Server");
			ivjJMenuItemServer.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJMenuItemServer;
}

/**
 * Return the JPanelMemStatus property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJPanelMemStatus() {
	if (ivjJPanelMemStatus == null) {
		try {
			ivjJPanelMemStatus = new javax.swing.JPanel();
			ivjJPanelMemStatus.setName("JPanelMemStatus");
			ivjJPanelMemStatus.setPreferredSize(new java.awt.Dimension(300, 26));
			ivjJPanelMemStatus.setLayout(new java.awt.GridBagLayout());
			ivjJPanelMemStatus.setMinimumSize(new java.awt.Dimension(200, 26));

			java.awt.GridBagConstraints constraintsStatusMsgMemory = new java.awt.GridBagConstraints();
			constraintsStatusMsgMemory.gridx = 0; constraintsStatusMsgMemory.gridy = 0;
			constraintsStatusMsgMemory.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsStatusMsgMemory.weightx = 1.0;
			constraintsStatusMsgMemory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelMemStatus().add(getStatusMsgMemory(), constraintsStatusMsgMemory);

			java.awt.GridBagConstraints constraintsJProgressBarMemory = new java.awt.GridBagConstraints();
			constraintsJProgressBarMemory.gridx = 1; constraintsJProgressBarMemory.gridy = 0;
			constraintsJProgressBarMemory.fill = java.awt.GridBagConstraints.HORIZONTAL;
			constraintsJProgressBarMemory.weightx = 2.0;
			constraintsJProgressBarMemory.insets = new java.awt.Insets(4, 4, 4, 4);
			getJPanelMemStatus().add(getJProgressBarMemory(), constraintsJProgressBarMemory);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJPanelMemStatus;
}

/**
 * Return the JProgressBarConnection property value.
 * @return javax.swing.JProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JProgressBar getJProgressBarConnection() {
	if (ivjJProgressBarConnection == null) {
		try {
			ivjJProgressBarConnection = new javax.swing.JProgressBar();
			ivjJProgressBarConnection.setName("JProgressBarConnection");
			ivjJProgressBarConnection.setString("NOT CONNECTED");
			ivjJProgressBarConnection.setStringPainted(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarConnection;
}

/**
 * Return the JProgressBarMemory property value.
 * @return javax.swing.JProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JProgressBar getJProgressBarMemory() {
	if (ivjJProgressBarMemory == null) {
		try {
			ivjJProgressBarMemory = new javax.swing.JProgressBar();
			ivjJProgressBarMemory.setName("JProgressBarMemory");
			ivjJProgressBarMemory.setMinimum(0);
			ivjJProgressBarMemory.setStringPainted(true);
			ivjJProgressBarMemory.setValue(50);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJProgressBarMemory;
}

/**
 * Return the JSeparator1 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator1() {
	if (ivjJSeparator1 == null) {
		try {
			ivjJSeparator1 = new javax.swing.JSeparator();
			ivjJSeparator1.setName("JSeparator1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator1;
}


/**
 * Return the JSeparator2 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator2() {
	if (ivjJSeparator2 == null) {
		try {
			ivjJSeparator2 = new javax.swing.JSeparator();
			ivjJSeparator2.setName("JSeparator2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator2;
}


/**
 * Return the JSeparator3 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator3() {
	if (ivjJSeparator3 == null) {
		try {
			ivjJSeparator3 = new javax.swing.JSeparator();
			ivjJSeparator3.setName("JSeparator3");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator3;
}


/**
 * Return the JSeparator4 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator4() {
	if (ivjJSeparator4 == null) {
		try {
			ivjJSeparator4 = new javax.swing.JSeparator();
			ivjJSeparator4.setName("JSeparator4");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator4;
}


/**
 * Return the JSeparator5 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator5() {
	if (ivjJSeparator5 == null) {
		try {
			ivjJSeparator5 = new javax.swing.JSeparator();
			ivjJSeparator5.setName("JSeparator5");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator5;
}


/**
 * Return the JSeparator6 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator6() {
	if (ivjJSeparator6 == null) {
		try {
			ivjJSeparator6 = new javax.swing.JSeparator();
			ivjJSeparator6.setName("JSeparator6");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator6;
}


/**
 * Return the JSeparator7 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator7() {
	if (ivjJSeparator7 == null) {
		try {
			ivjJSeparator7 = new javax.swing.JSeparator();
			ivjJSeparator7.setName("JSeparator7");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator7;
}


/**
 * Return the JSeparator8 property value.
 * @return javax.swing.JSeparator
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JSeparator getJSeparator8() {
	if (ivjJSeparator8 == null) {
		try {
			ivjJSeparator8 = new javax.swing.JSeparator();
			ivjJSeparator8.setName("JSeparator8");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJSeparator8;
}


/**
 * Return the LocalMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getLocalMenuItem() {
	if (ivjLocalMenuItem == null) {
		try {
			ivjLocalMenuItem = new javax.swing.JMenuItem();
			ivjLocalMenuItem.setName("LocalMenuItem");
			ivjLocalMenuItem.setText("Local");
			ivjLocalMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjLocalMenuItem;
}

/**
 * Comment
 */
private JDialog getLoginDialog() {
	if (loginDialog == null) {
		loginDialog = new LoginDialog(this, true,getTopLevelWindowManager().isApplet());
		loginDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		loginDialog.pack();
		loginDialog.setResizable(false);
		ActionListener listener = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				getWindowManager().connectAs(loginDialog.getUser(), loginDialog.getPassword());
			}
		};
		loginDialog.addActionListener(listener);
	}
	return loginDialog;
}


/**
 * Return the Manage_DatabaseMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getManage_DatabaseMenuItem() {
	if (ivjManage_DatabaseMenuItem == null) {
		try {
			ivjManage_DatabaseMenuItem = new javax.swing.JMenuItem();
			ivjManage_DatabaseMenuItem.setName("Manage_DatabaseMenuItem");
			ivjManage_DatabaseMenuItem.setText("Manage Database");
			ivjManage_DatabaseMenuItem.setVisible(true);
			ivjManage_DatabaseMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjManage_DatabaseMenuItem;
}

/**
 * Return the MathFromBioMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMathFromBioMenuItem() {
	if (ivjMathFromBioMenuItem == null) {
		try {
			ivjMathFromBioMenuItem = new javax.swing.JMenuItem();
			ivjMathFromBioMenuItem.setName("MathFromBioMenuItem");
			ivjMathFromBioMenuItem.setText("From BioModel");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathFromBioMenuItem;
}


/**
 * Return the MathMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getMathMenu() {
	if (ivjMathMenu == null) {
		try {
			ivjMathMenu = new javax.swing.JMenu();
			ivjMathMenu.setName("MathMenu");
			ivjMathMenu.setText("MathModel");
			ivjMathMenu.add(getNonSpatialMenuItem());
			ivjMathMenu.add(getSpatialMenuItem());
			ivjMathMenu.add(getMathFromBioMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMathMenu;
}

/**
 * Return the Minimize_AllMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getMinimize_AllMenuItem() {
	if (ivjMinimize_AllMenuItem == null) {
		try {
			ivjMinimize_AllMenuItem = new javax.swing.JMenuItem();
			ivjMinimize_AllMenuItem.setName("Minimize_AllMenuItem");
			ivjMinimize_AllMenuItem.setText("Minimize All");
			ivjMinimize_AllMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMinimize_AllMenuItem;
}

/**
 * Return the NewMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getNewMenuItem() {
	if (ivjNewMenuItem == null) {
		try {
			ivjNewMenuItem = new javax.swing.JMenu();
			ivjNewMenuItem.setName("NewMenuItem");
			ivjNewMenuItem.setText("New");
			ivjNewMenuItem.add(getJMenuItemNewBioModel());
			ivjNewMenuItem.add(getMathMenu());
			ivjNewMenuItem.add(getGeometryMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNewMenuItem;
}

/**
 * Return the BlankMathMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getNonSpatialMenuItem() {
	if (ivjNonSpatialMenuItem == null) {
		try {
			ivjNonSpatialMenuItem = new javax.swing.JMenuItem();
			ivjNonSpatialMenuItem.setName("NonSpatialMenuItem");
			ivjNonSpatialMenuItem.setText("Non-Spatial");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjNonSpatialMenuItem;
}

/**
 * Return the OpenMenuItem property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getOpenMenuItem() {
	if (ivjOpenMenuItem == null) {
		try {
			ivjOpenMenuItem = new javax.swing.JMenu();
			ivjOpenMenuItem.setName("OpenMenuItem");
			ivjOpenMenuItem.setText("Open");
			ivjOpenMenuItem.setEnabled(false);
			ivjOpenMenuItem.add(getJMenuItemOpenBioModel());
			ivjOpenMenuItem.add(getJMenuItemOpenMathModel());
			ivjOpenMenuItem.add(getJMenuItemOpenGeometry());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOpenMenuItem;
}

/**
 * Return the ReconnectMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getReconnectMenuItem() {
	if (ivjReconnectMenuItem == null) {
		try {
			ivjReconnectMenuItem = new javax.swing.JMenuItem();
			ivjReconnectMenuItem.setName("ReconnectMenuItem");
			ivjReconnectMenuItem.setText("Reconnect");
			ivjReconnectMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjReconnectMenuItem;
}

/**
 * Return the RunBNGMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getRunBNGMenuItem() {
	if (ivjRunBNGMenuItem == null) {
		try {
			ivjRunBNGMenuItem = new javax.swing.JMenuItem();
			ivjRunBNGMenuItem.setName("RunBNGMenuItem");
			ivjRunBNGMenuItem.setText("Launch BioNetGen");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjRunBNGMenuItem;
}


/**
 * Return the Save_AsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_AsMenuItem() {
	if (ivjSave_AsMenuItem == null) {
		try {
			ivjSave_AsMenuItem = new javax.swing.JMenuItem();
			ivjSave_AsMenuItem.setName("Save_AsMenuItem");
			ivjSave_AsMenuItem.setText("Save As...");
			ivjSave_AsMenuItem.setEnabled(true);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_AsMenuItem;
}

/**
 * Return the Save_VersionMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSave_VersionMenuItem() {
	if (ivjSave_VersionMenuItem == null) {
		try {
			ivjSave_VersionMenuItem = new javax.swing.JMenuItem();
			ivjSave_VersionMenuItem.setName("Save_VersionMenuItem");
			ivjSave_VersionMenuItem.setText("Save New Edition");
			ivjSave_VersionMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSave_VersionMenuItem;
}

/**
 * Return the SaveMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSaveMenuItem() {
	if (ivjSaveMenuItem == null) {
		try {
			ivjSaveMenuItem = new javax.swing.JMenuItem();
			ivjSaveMenuItem.setName("SaveMenuItem");
			ivjSaveMenuItem.setText("Save");
			ivjSaveMenuItem.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSaveMenuItem;
}

/**
 * Return the ServerMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getServerMenu() {
	if (ivjServerMenu == null) {
		try {
			ivjServerMenu = new javax.swing.JMenu();
			ivjServerMenu.setName("ServerMenu");
			ivjServerMenu.setText("Server");
			ivjServerMenu.add(getChange_UserMenuItem());
			ivjServerMenu.add(getReconnectMenuItem());
			ivjServerMenu.add(getJSeparator4());
			ivjServerMenu.add(getJMenuItemServer());
			ivjServerMenu.add(getLocalMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjServerMenu;
}

/**
 * Return the SpatialMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getSpatialMenuItem() {
	if (ivjSpatialMenuItem == null) {
		try {
			ivjSpatialMenuItem = new javax.swing.JMenuItem();
			ivjSpatialMenuItem.setName("SpatialMenuItem");
			ivjSpatialMenuItem.setText("Spatial");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSpatialMenuItem;
}


/**
 * Return the StatusbarMenuItem property value.
 * @return javax.swing.JCheckBoxMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JCheckBoxMenuItem getStatusbarMenuItem() {
	if (ivjStatusbarMenuItem == null) {
		try {
			ivjStatusbarMenuItem = new javax.swing.JCheckBoxMenuItem();
			ivjStatusbarMenuItem.setName("StatusbarMenuItem");
			ivjStatusbarMenuItem.setSelected(true);
			ivjStatusbarMenuItem.setText("Status Bar");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusbarMenuItem;
}

/**
 * Return the StatusBarPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getStatusBarPane() {
	if (ivjStatusBarPane == null) {
		try {
			ivjStatusBarPane = new javax.swing.JPanel();
			ivjStatusBarPane.setName("StatusBarPane");
			ivjStatusBarPane.setLayout(new java.awt.BorderLayout());
			getStatusBarPane().add(getStatusMsgConnection(), "Center");
			getStatusBarPane().add(getJPanelMemStatus(), "East");
			getStatusBarPane().add(getJProgressBarConnection(), "West");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusBarPane;
}

/**
 * Return the StatusMsgConnection property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsgConnection() {
	if (ivjStatusMsgConnection == null) {
		try {
			ivjStatusMsgConnection = new javax.swing.JLabel();
			ivjStatusMsgConnection.setName("StatusMsgConnection");
			ivjStatusMsgConnection.setBorder(new javax.swing.border.EtchedBorder());
			ivjStatusMsgConnection.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsgConnection;
}


/**
 * Return the StatusMsg1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsgMemory() {
	if (ivjStatusMsgMemory == null) {
		try {
			ivjStatusMsgMemory = new javax.swing.JLabel();
			ivjStatusMsgMemory.setName("StatusMsgMemory");
			ivjStatusMsgMemory.setText(" Java Memory used: 0.0MB / 50.0MB");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsgMemory;
}

/**
 * Comment
 */
private boolean getTestFrameworkMenuItemVisibility() {
	// return true;
	return (getWindowManager()!=null && 
			getWindowManager().getUser()!=null && 
			getWindowManager().getUser().isTestAccount() );
	
	
}


/**
 * Return the TestingFrameworkMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTestingFrameworkMenuItem() {
	if (ivjTestingFrameworkMenuItem == null) {
		try {
			ivjTestingFrameworkMenuItem = new javax.swing.JMenuItem();
			ivjTestingFrameworkMenuItem.setName("TestingFrameworkMenuItem");
			ivjTestingFrameworkMenuItem.setText("Testing Framework ...");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTestingFrameworkMenuItem;
}


/**
 * Return the Tile_HorizontallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_HorizontallyMenuItem() {
	if (ivjTile_HorizontallyMenuItem == null) {
		try {
			ivjTile_HorizontallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_HorizontallyMenuItem.setName("Tile_HorizontallyMenuItem");
			ivjTile_HorizontallyMenuItem.setText("Tile Horizontally");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_HorizontallyMenuItem;
}

/**
 * Return the Tile_VerticallyMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getTile_VerticallyMenuItem() {
	if (ivjTile_VerticallyMenuItem == null) {
		try {
			ivjTile_VerticallyMenuItem = new javax.swing.JMenuItem();
			ivjTile_VerticallyMenuItem.setName("Tile_VerticallyMenuItem");
			ivjTile_VerticallyMenuItem.setText("Tile Vertically");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTile_VerticallyMenuItem;
}

/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 3:38:47 PM)
 * @return cbit.vcell.client.desktop.TopLevelWindowManager
 */
public TopLevelWindowManager getTopLevelWindowManager() {
	return getWindowManager();
}


/**
 * Return the ViewMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getViewMenu() {
	if (ivjViewMenu == null) {
		try {
			ivjViewMenu = new javax.swing.JMenu();
			ivjViewMenu.setName("ViewMenu");
			ivjViewMenu.setText("View");
			ivjViewMenu.add(getStatusbarMenuItem());
			ivjViewMenu.add(getJMenuItemOptions());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjViewMenu;
}

/**
 * Gets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @return The windowManager property value.
 * @see #setWindowManager
 */
private DocumentWindowManager getWindowManager() {
	return fieldWindowManager;
}


/**
 * Return the WindowMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getWindowMenu() {
	if (ivjWindowMenu == null) {
		try {
			ivjWindowMenu = new javax.swing.JMenu();
			ivjWindowMenu.setName("WindowMenu");
			ivjWindowMenu.setText("Window");
			ivjWindowMenu.setEnabled(true);
			ivjWindowMenu.add(getTile_HorizontallyMenuItem());
			ivjWindowMenu.add(getTile_VerticallyMenuItem());
			ivjWindowMenu.add(getCascadeMenuItem());
			ivjWindowMenu.add(getJSeparator5());
			ivjWindowMenu.add(getMinimize_AllMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjWindowMenu;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}


/**
 * Comment
 */
private void importXMLDocument() {
	getWindowManager().openDocument(VCDocument.XML_DOC);
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getAbout_BoxMenuItem().addActionListener(ivjEventHandler);
	getStatusbarMenuItem().addItemListener(ivjEventHandler);
	getCloseMenuItem().addActionListener(ivjEventHandler);
	getExitMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemNewBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenBioModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenMathModel().addActionListener(ivjEventHandler);
	getJMenuItemOpenGeometry().addActionListener(ivjEventHandler);
	getSaveMenuItem().addActionListener(ivjEventHandler);
	getSave_AsMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemImport().addActionListener(ivjEventHandler);
	getSave_VersionMenuItem().addActionListener(ivjEventHandler);
	getChange_UserMenuItem().addActionListener(ivjEventHandler);
	getReconnectMenuItem().addActionListener(ivjEventHandler);
	getLocalMenuItem().addActionListener(ivjEventHandler);
	getTile_HorizontallyMenuItem().addActionListener(ivjEventHandler);
	getTile_VerticallyMenuItem().addActionListener(ivjEventHandler);
	getCascadeMenuItem().addActionListener(ivjEventHandler);
	getMinimize_AllMenuItem().addActionListener(ivjEventHandler);
	getManage_DatabaseMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemServer().addActionListener(ivjEventHandler);
	getJMenuItemOptions().addActionListener(ivjEventHandler);
	getJMenuItemRevert().addActionListener(ivjEventHandler);
	getJMenuItemCompare().addActionListener(ivjEventHandler);
	getExistingImageMenuItem().addActionListener(ivjEventHandler);
	getChooseImageMenuItem().addActionListener(ivjEventHandler);
	getNonSpatialMenuItem().addActionListener(ivjEventHandler);
	getMathFromBioMenuItem().addActionListener(ivjEventHandler);
	getDim1MenuItem().addActionListener(ivjEventHandler);
	getDim2MenuItem().addActionListener(ivjEventHandler);
	getDim3MenuItem().addActionListener(ivjEventHandler);
	getSpatialMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemExport().addActionListener(ivjEventHandler);
	getEdit_Annotation_JMenuItem().addActionListener(ivjEventHandler);
	getTestingFrameworkMenuItem().addActionListener(ivjEventHandler);
	getJMenuItemOnlineHelp().addActionListener(ivjEventHandler);
	getRunBNGMenuItem().addActionListener(ivjEventHandler);
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("DocumentWindow");
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setJMenuBar(getDocumentWindowJMenuBar());
		setSize(460, 536);
		setTitle("DocumentWindow");
		setContentPane(getJFrameContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Comment
 */
private void invokeOnlineHelp() {
	
	PopupGenerator.browserLauncher(
		ClientServerManager.ONLINEHELP_URL_STRING,
		"Please visit "+ClientServerManager.ONLINEHELP_URL_STRING+" for Online Help",
		getTopLevelWindowManager().isApplet());
}


/**
 * Starts the application.
 * @param args an array of command-line arguments
 */
public static void main(java.lang.String[] args) {
	try {
		/* Set native look and feel */
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		/* Create the frame */
		DocumentWindow aDocumentWindow = new DocumentWindow();
		/* Add a windowListener for the windowClosedEvent */
		aDocumentWindow.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aDocumentWindow.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of DocumentWindow");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
private void newDocument(java.awt.event.ActionEvent actionEvent) {
	if (actionEvent.getActionCommand().equals("BioModel")) {
		getWindowManager().newDocument(VCDocument.BIOMODEL_DOC, 0);
	} else if (actionEvent.getActionCommand().equals("Non-Spatial")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 0);
	} else if (actionEvent.getActionCommand().equals("Spatial")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 1);
	} else if (actionEvent.getActionCommand().equals("From BioModel")) {
		getWindowManager().newDocument(VCDocument.MATHMODEL_DOC, 2);
	} else if (actionEvent.getActionCommand().equals("1-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 1);
	} else if (actionEvent.getActionCommand().equals("2-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 2);
	} else if (actionEvent.getActionCommand().equals("3-D")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 3);
	} else if (actionEvent.getActionCommand().equals("Existing Image ...")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 4);
	} else if (actionEvent.getActionCommand().equals("Choose Image from File ...")) {
		getWindowManager().newDocument(VCDocument.GEOMETRY_DOC, 5);
	}
}


/**
 * Comment
 */
private void notYet() {
	PopupGenerator.showErrorDialog(this, "Feature not yet implemented...");
}


/**
 * Comment
 */
private void openDocument(java.awt.event.ActionEvent actionEvent) {
	if (actionEvent.getActionCommand().equals("BioModel...")) {
		getWindowManager().openDocument(VCDocument.BIOMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("MathModel...")) {
		getWindowManager().openDocument(VCDocument.MATHMODEL_DOC);
	} else if (actionEvent.getActionCommand().equals("Geometry...")) {
		getWindowManager().openDocument(VCDocument.GEOMETRY_DOC);
	}
}


/**
 * Comment
 */
private void reconnect() {
	getWindowManager().reconnect();
}


/**
 * Comment
 */
private void revertToSaved() {
	getWindowManager().revertToSaved();
}


/**
 * Comment
 */
private void saveDocument(boolean replace) {
	getWindowManager().saveDocument(replace);
}


/**
 * Comment
 */
private void saveDocumentAsNew() {
	getWindowManager().saveDocumentAsNew();
}


/**
 * Sets the windowManager property (cbit.vcell.client.desktop.DocumentWindowManager) value.
 * @param windowManager The new value for the property.
 * @see #getWindowManager
 */
public void setWindowManager(DocumentWindowManager windowManager) {
	DocumentWindowManager oldValue = fieldWindowManager;
	fieldWindowManager = windowManager;
	firePropertyChange("windowManager", oldValue, windowManager);
}


/**
 * Insert the method's description here.
 * Creation date: (5/24/2004 11:39:07 AM)
 * @param c java.awt.Component
 */
public void setWorkArea(Component c) {
	getContentPane().add(c, BorderLayout.CENTER);
}


private void showAboutBox() {
	/* Create the AboutBox dialog */
	DocumentWindowAboutBox aDocumentWindowAboutBox = new DocumentWindowAboutBox();
	Dimension dialogSize = aDocumentWindowAboutBox.getPreferredSize();
	Dimension frameSize = getSize();
	Point loc = getLocation();
	aDocumentWindowAboutBox.setLocation((frameSize.width - dialogSize.width) / 2 + loc.x, (frameSize.height - dialogSize.height) / 2 + loc.y);
	aDocumentWindowAboutBox.setModal(true);
	String version = "";
	String build = DocumentWindowAboutBox.BUILD_NO;
	try {
		java.util.StringTokenizer stk = new java.util.StringTokenizer(DocumentWindowAboutBox.BUILD_NO, "_");
		String edition = stk.nextToken();
		if (!stk.nextToken().equalsIgnoreCase("Version")) throw new RuntimeException("Expecting 'Version'");
		version = "Version " + stk.nextToken();
		if (!stk.nextToken().equalsIgnoreCase("build")) throw new RuntimeException("Expecting 'build'");
		build = edition + " edition , build no. " + stk.nextToken();
	} catch (Exception exc) {
		System.out.println("Failed to parse vcell.softwareVersion: " + exc.getMessage());
		exc.printStackTrace(System.out);
	}
	aDocumentWindowAboutBox.getVersion().setText(version);
	aDocumentWindowAboutBox.getBuildNumber().setText(build);
	aDocumentWindowAboutBox.setTitle("About the Virtual Cell");
	org.vcell.util.gui.ZEnforcer.showModalDialogOnTop(aDocumentWindowAboutBox,this);
}


/**
 * Comment
 */
private void  showBNGWindow() {
	getWindowManager().showBNGWindow();	
}


/**
 * Comment
 */
public void showCompareDialog(Container contentPane) {
	if (getCompareDialog().isShowing()) {
		getCompareDialog().hide();
	}
	getCompareDialog().setContentPane(contentPane);
	getCompareDialog().setSize((int)(getWidth() * 0.5), (int)(getHeight() * 0.8));
	BeanUtils.centerOnComponent(getCompareDialog(), getContentPane());
	getCompareDialog().show();
}


/**
 * Comment
 */
private void showDatabaseWindow() {
	getWindowManager().showDatabaseWindow();
}


/**
 * Comment
 */
private void showEditAnnotationWindow() {

	try {
		if (getWindowManager() != null && getWindowManager().getVCDocument() != null) {
			try{
				// initialize fields
				String oldAnnotation = getWindowManager().getVCDocument().getDescription();
				// show the editor
				String newAnnotation = org.vcell.util.gui.DialogUtils.showAnnotationDialog(this, oldAnnotation);
				if (org.vcell.util.BeanUtils.triggersPropertyChangeEvent(oldAnnotation, newAnnotation)) {
					// Update VCDocument annotation
					getWindowManager().getVCDocument().setDescription(newAnnotation);
				}
			}catch(org.vcell.util.gui.UtilCancelException e){
				//Do Nothing
			}
		}else{
			throw new Exception("No Document to Edit");
		}
	} catch (Throwable exc) {
		exc.printStackTrace(System.out);
		PopupGenerator.showErrorDialog(this, "Failed to edit annotation!\n"+exc.getMessage());
	}
}


/**
 * Comment
 */
private void showLoginDialog() {
	org.vcell.util.gui.ZEnforcer.showModalDialogOnTop(getLoginDialog(),this);
}


/**
 * Comment
 */
private void showTestingFrameworkWindow() {
	getWindowManager().showTestingFrameworkWindow();
}


/**
 * Comment
 */
private void tileHorizontal() {
	getWindowManager().tileWindows(true);
}


/**
 * Comment
 */
private void tileVertically() {
	getWindowManager().tileWindows(false);
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateConnectionStatus(ConnectionStatus connStatus) {

	// other updates
	String status = "";
	User user = getWindowManager().getUser();
	boolean isTestUser = (user!=null)?(user.isTestAccount()):(false);
	switch (connStatus.getStatus()) {
		case ConnectionStatus.NOT_CONNECTED: {
			status = "";
			getJProgressBarConnection().setString("NOT CONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			break;
		}
		case ConnectionStatus.CONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("CONNECTED");
			getJProgressBarConnection().setValue(100);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(true);
			getSaveMenuItem().setEnabled(
				getWindowManager() != null && 
				getWindowManager().getVCDocument() != null &&
				getWindowManager().getVCDocument().getVersion() != null &&
				!(
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Archived) ||
					getWindowManager().getVCDocument().getVersion().getFlag().compareEqual(VersionFlag.Published)
				)
			);
			getSave_AsMenuItem().setEnabled(true);
			getSave_VersionMenuItem().setEnabled(
				getWindowManager() != null && 
				getWindowManager().getVCDocument() != null &&
				getWindowManager().getVCDocument().getVersion() != null
			);
			getJMenuItemRevert().setEnabled(getSave_VersionMenuItem().isEnabled());
			getJMenuItemCompare().setEnabled(getSave_VersionMenuItem().isEnabled());
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(true);
			break;
		}
		case ConnectionStatus.INITIALIZING: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("INITIALIZING...");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(false);
			getReconnectMenuItem().setEnabled(false);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(false);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(isTestUser);
			break;
		}
		case ConnectionStatus.DISCONNECTED: {
			status = "Server: " + connStatus.getServerHost() + " User: " + connStatus.getUserName();
			getJProgressBarConnection().setString("DISCONNECTED");
			getJProgressBarConnection().setValue(0);
			getChange_UserMenuItem().setEnabled(true);
			getReconnectMenuItem().setEnabled(true);
			getOpenMenuItem().setEnabled(false);
			getSaveMenuItem().setEnabled(false);
			getSave_AsMenuItem().setEnabled(false);
			getSave_VersionMenuItem().setEnabled(false);
			getJMenuItemRevert().setEnabled(false);
			getJMenuItemCompare().setEnabled(false);
			//getJMenuItemServer().setEnabled(true);
			getTestingFrameworkMenuItem().setVisible(isTestUser);
			getTestingFrameworkMenuItem().setEnabled(false);
			break;
		}
	}
	getStatusMsgConnection().setText(status);
}


/**
 * Insert the method's description here.
 * Creation date: (5/7/2004 11:51:20 AM)
 */
public void updateMemoryStatus(long freeBytes, long totalBytes) {
	DecimalFormat df = (DecimalFormat)DecimalFormat.getInstance();
	df.setMaximumFractionDigits(1);
	String usedMB = df.format((totalBytes - freeBytes)/1000000.0);
	String totalMB = df.format(totalBytes/1000000.0);
	getStatusMsgMemory().setText("Java Memory Used: " + usedMB + "MB / " + totalMB + "MB");
	getJProgressBarMemory().setValue((int)(100 * (totalBytes - freeBytes) / totalBytes));
}


/**
 * Insert the method's description here.
 * Creation date: (5/10/2004 4:32:17 PM)
 */
public void updateWhileInitializing(int i) {
	// extra animation while initializing connection
	getJProgressBarConnection().setValue(i);
}


private void viewStatusBar() {
	/* Hide or show the statusbar */
	getStatusBarPane().setVisible(getStatusbarMenuItem().isSelected());
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G95DC75B4GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E16DFD8FD8D4D57ABFDB54323BD636CBE5AD3B19D951C62D6DD2319BA59595951595959535D4E4D8D456EAD1D9DD8195859104148AF55AB545C282C5C542C48585C5C4C005C2E1E0AEB0B04C0CB397C1457C3E671C7B1E39774E9DC7685B6F79BD3F6767733C4EBD6FB967FDBF67BD6F79FB4FBD88B9AB464F191D14A388336788723FCD3385E1461F856106B703DEC7DE2ACFF31A207877A5D0169032A685
	FEF3A1EE65721634CC615469D48897C0586F73163425701CAD1CF33A7E8AF87020A79F628A2FECF21ED94FD3BF201EF9B4FC47D769701B81D484BC72BB8C3F194213DF654A7CA6190FB4BBC9901AFFC552CC7FAACF6605C11AE8209C60677F0A252F005F79D473F9E525F23A560B8305998FBA129692B98A19C863653C61722FC178E036659C226B33D569F21ED990D782BCD278E4A1CDAA045F727A3E6E6FBBBB4CD26131CE51E2A96C3418C52BD4E8921DFD124DDED6D6E96B9C68874EA13355E49B9404F8AA53
	38AA154A9004C990164EA53C8F9B081E82F82E84EABD9779F7B792FE88BCCF810ABF974B36E5F5390C3D7964EDC2DC773D7397F9A81B604B4A146F6BAADB2E21A379B3DA8FCBDA093DCD90678794G9486948BA41C571C76852D7FE5BFFE8D3F5BBA249D367EFE1BF51B5D3E5DE2F26C3519C48BBC1715C10C4CEB90BBED8E13A030BADE312AC0874F190865DBBB62FC4CA6016B313E039AEE92E27EFEE952BC9D1B44841ECC4ABD0F592268BC17CD186EAE0F3A6B4FD37B23DA77A1C129DB1836EE5E9C9D5DF9CF
	2D1BE712658CA9F4871EC76A5AC66BFA9CBC4F167D03710FD3FE02024FFCF3B6651370AC08EBBF9FFD23B983315426CC90B20BAF533543383B47A4051F4FB0441C2F45F25381A2BB7557CC679E0EA506728395FC06A502E2A161EA3F6634093FEDCEE37E356288E92B42854DE9F9C0A5C035C096A0BF20008B50473AFE7C76ACFD2C5E6810368F18ADA651A1303CABDA17402FB8A4B90CB5D627E434F60A870D8E333143A2C22F44526437929BF428722D253E5F89BAF609D651E1144CB6ABC8B7760B1268F032B4
	9BDB33C89A07C8E31B4C7DA2A868378BA8777B56ECE28323D3BAE0B799A5511502456FECA5F5F24CF890A402GF8E6F629EDA3768A0572C78145F1BB5CC5656D919DD651D2D6D6EB33758D581BC8C904128B091DCF513EA39152E7DE08B62EEEA73CA1880F3D9065A436AED64829B4F79278C647F1ECE3830D24BF1EF8A17A4C1B4D68B3158BEF948A1E3CC457E746027F06DD48FCA57AC2ED5BB9CDE592DCACBC2F3159CB3B1DF821FE1BBA7B3E4260D5C772A865E7703A3A55C86ACA3888FC98287CA234717A43
	8666335B0DCE913DF41F839CCCB439AC4EF0869F7017B113FE018C10E4ACDAC465884227C0CBE5FDC476B22095C01B003E82DA8D3486689B2035C0242DECG2A81BAAC373B4DC0FB013E835A873485E8AB41873483288A2885E89750D1209F014E63F6FC0962EB02328D83CD840A841AC14ABC9646A4A08B10BFD0A8D09CD07A45501E01DA01FC0102002200E6812D7CBD34F3A089A8GA89CA881A8678FE0BFA093509820E0209820947F66348220A620E12009C011C0B37C51179EE92CCFF2554B9C99F7064616
	99DE6C0979BD599463B748365FAC5BD34F163BE47B6F116D3ECF47FFDAE4BB9FBECBFFBBFA16694E9B25BF7FFFD29373AD31C96BDB490AF852BF2649E174B3B2A6E87D8C73232F11F96FFF85172FE1BC71B96213458273B3BD9FA37EC57C127864FA01792296BB71C362FFEB4F322C3B4EB25D1E7F8B6A657F85E2E3441AA344DF44E3308828946D2255848FCEB92E688871ADF95E52E563F9B6D23E9D66B9BBE0E261647C72A3446F0C1264B0F78CC8E223A8C9E6EB37AB3E126AF28EF458DDD3A45435678871EB
	5BA04CF3F87A7AA3E40E50E933DAC5BAD871ACF2FC831D23089611ACE1F658862C9263B73711F13ECFBCAE4F11DA5B668AE40EE399A073AD56FEA699C91B31BB4C7DB08412A91BE039044CDF7CD765AAEC1487BC324E2BA03F1760DCE4703FB897D9F962FAA12C4D1E24B7179EF74DC5C941173079C344A52E3988433437DD9FFBA31DAB49FCA7437ADE89492BDD2B31317F2D8EA2A79E644F824A3994477EC75BC9BC4E2F64C1FF074DE2E12664B68EB5E612BA910F8E08B0ADA59339BD5CEE779897EB628E4AB6
	E4718FD19BDA94F34030CB098DB79D4475EF8104AB01CC17B2BBCE3C145901257B1027CB3F8C46E4204A4BD8BA1F4B14696EBC046982009F8C94A5274B9927CCF7CEB326AB82FE75B8D73A9ED53A0DAD184E8F7863956942D469DE636992011FF9F9F3DA5165AC1D7DF2E53A1BFE40F401408F73182E63C7CC978B7CC40F691634E23A5CABA04D952EF47570EC81E269769C46F4BE409B27C897F205D25E9CB3260B867EF4C53A4CBFAA537D0327AB82FE759F55FAFB7E08FA5F6A45F4434073D7248BD6493B3A8F
	53C581BFC111AEBDC0196E1085532D84FEF900ABDD2BAADDDABF261300BFC611AEC815EEB2CF97897CB8C53A14BFA953B92DDCAF704B7F24502BCA375A464B8BFC7FBFF942779CCF978CE9A2956992D472AE32E33A4CBFB7276583D57FD9CFDE63D16E2790BF9EA8CCB75DD28726932EECCE4B3D52152E74CAE53A07F83AA660DB94694628521DF6E23AA060078345DD2957BEF6C85CFE6341FE63BD25FB0F27EB05B41247F4B78CE0BAFFC89364B1DD5BB1DE3FA40D47F4590318AE65AAD8A7DC65A95D7DBCDDB9
	24E972186E649077BFC8B346E33AEF0FF37BC11AF0C53A382B1469DE6669D2A6GBE207289AC5D7084E53A6BCEE03A09408F850A115365DD2DCC57F79253D5833F9D4867EA991FAA5D37433C9F82FEA2D06EC4162EF9A2CB47461D77BFA7E3A15DC36CB59EB38E95BA87E1BCAFAB5B3D136CC1303D420F69FA1F0C0B52C45C93FC3D170CC9C1908E870A19086366E38BF1CF503FAFD00819D6BC4F53FE678C99C76EB52EF1B37649EDF359183759C4F4B6C3DC4FB5B85E6D6CD06ECBECF3BAED1DE63AA5A20FD5B3
	BB1463AA63FD5031GFE3B4C8E27D483931FA19C5704CE02176C1948ECF98F297DA06EE78D035EE0205AEB89FFCCCF0E82FB8270F300DF8A14CC655DFFF09D7C9A6940DB48FE6AC5C7174D51AF1A7209E58B0D03D2A11D0395EE2351D564F98D56431ABABAEF6A318DEE6B308DC85BEDC379EB8E4A7BFA9332AB30AD5CB4C1A8BFFDA4C9EF1F55EFD1CF127F354C1621573AECDA6157115C84444A3772D03ADC772957411C67BAAC5F54FAE57906009F8894F99D166FF70748BA40AC097D05643FC649A809BBFA0C
	56EE776255C03CDCB8D6368927487C6318D99CA459861C5B0D8EA89C4373AA47938B3AF28391CFDE05565E7590A785A21E3A661FE76F78ACA23753E2F30AEC32C54CAD7B408D4D08498F7405F1CC936A74B0A58662FE7C367DE4AEA58E1949B621455CC9FDD3A1372D856526DF8F73206BD16E7835DA394390B77EFA14FBDD99597B360A03B8BD4C2F75DC426FDC7A32FFC0FD41A0AB016BFBF00BD65F4A3F40787497346D099FFE1EEDAFBBC2560DB6D8E91CADE00677E90E379530787F85710E7DDE8FEFA4904B
	773B9F398F81AF77864CF7F02BDE3E7A9BB05F56D64CE782DEG4F1731CD2F1E23EE407A781B0D4E270D47C4DE3E9F569CE4FD65132D78DEA51E6BB95103FA8CC1507F86211E572A74740C8DC2BDFFAC4B516859662C9387F95BA9B4235C0910A7064B7D29D6CFEE4E0D7C3DD1B909B7775BED8E29F9EFADAF844AFD094B4D07BC6DB7225CFFD56A499D87712C6CC33DD876209B316C39FDA8AB8EF8F9B7212C5FB4E9E5B5C15C50CD5C465B974B7DE12D2D5BEC2DB49BAD36EEC5DB0A64F247C01EF0AEF75C81BD
	3933385C7BF611FC8ED1DEF172B27BD8D0DE66DF21AD7C9565198F6B497379AB4A8BB8C07AE82BCDEA91A58ACF46D7520F727CA1EDA4173733DDABAFE5924C8FA7213CF14DE4FDAD19ADE2354DE1BEE133CAC60BD2EEBC17DB8EF924C9A8B75D28A7B7084B0D5D0EF28F0A8E897AA60B6538D2EE00956506C11EC4AE77F1DD39C5B7235C6B3B683B89233353E812FBD227D2EE3D8D65D6C21E611BD1EEF8071E5C601B51EFD26C18AF82F8425FB0DFDF0D1E8F167E8D715C167F296CB715C64958E1D4F56FB22690
	AE3B967279F25987DA756ABA74EF58AF2EB8BA5AFE11699DBE0AFA27004C543F235E197B35FA4958DB71F7547B724F54DB61C03DCDA0F38C57EB5825E74B703F23AD3F78A2133615E360B1CD36C66807CC3C3D4C60B223A1FDE6B04AAC295613D99D0CB21F5FC866F01D36FE3B5181D5A37520D899EB20130F8110471F4B154A34F2A3A1EEFAB05AE8117473ECE411D0EF4AADB0C73F857516FD2727D73A857D54B040678A408B63795E7CD61BAF916272EE45FCD1BCDF9170FAEE45FCA70A75720D67797C0E71B1
	9DF889BC5F440DEEE35DEDE0775BB0DF79A037AB707CEF43FC3D1B7472C572FC53F93ED8606506E03E22D23DFC75A118EF62909FDB0197407385976915AF0A67EBBE0E796201E77887662B5E2B67D74D7F607D7017249F92074818269850F81BCFBF01F2AD10E7A2176B37C7CFEE4CBF502F1CA7FE5EDC6822EDDF487DD115896605D698A968345055ABB1FCD3B83E6920BB7F1F086F4E5DFA785A7F0978B61D7CF9785675AE1371B509CE3215CB57FD03B6C71FFB3F69FF92B1CA20BF08E33C22DBEFED9447B1FE
	78B3B11E57C97A8C3375182DCF5CE735182DE235E8313BEC57BC0C3892C1E7516D082BC954626A0138B137A32E4943BF8FD751CF19326D36576D6266E26FF312D713B39C63C1D7706D6E6F17A3B43C988833338DEDF4DEB37DF66D798BB3658B215A7397EF7762FAB5936224D0FC9F9FA112F5FDB404E7G255F816D93289248F4872E277DBA49FB1DB31EF72831CA305CB6DA9AD59B7AF86E40C4747609476570F693318B5D0397703DD657C1EF67E8FC6ED05B0265133C661B2849476AA4E28E4122331F31D734
	8E1015297C8E6073AE65BB00D010958B14F2A774F1F762FC761E9E1C4F965D097B9B27F6AA77B7C2971DCAA27B63FA7B9BBDF7B2FCFEF73A5662796626F92CFE9C5DE4FFA682626200E6913D13E15C81EA869A1E0CF594E95A622D0E28D3B659F6G2F5AE66B5B21FD1742ED7A75A12DCD83A62BED28DF9725EE798AB5611049FAF5F14F227F6A57450E9E3133EF3BEDC8D3A7BD7B746AE48A480E1B0CF532ECFF2AACFF56E4FCAF7F46A84B752157F215042973B11C2B5668612C05346DE108333182FDE7A88CF1
	5E5CBCBA1C135D72E9F1CE5260E4981E29C38C919C0358B2BA8CCE37FC4BB5E161AEBDDB75FE233595993FF2A1ED41DDE82B2757A24E4A3B9067E7BF0C8E67EA37FCDA1C433AB805F2BD1C7E10B610631C7DBD628C63B81F9FA54E573D62CC3CCB2FCE6F6798B26FC68C977FB8BA8CD73A6553E2283EDB8F4385DB91C3BB47D055BABA8C0DEE79343EBDCE97C3DAA5768313B806E7292C783B5D47DBCF447279740C8E7B05EE793458E769E27FF2A7E24F3987311718C707E13BDBBEAD065AFB74B05CD20BF5E862
	9862C70961DD2F9882F4B1AC29C2BB84F38C27FA092C04FBC6DA074B7BC6073D40AD1F963B902E57DF4CE9549B83F2A1EDC1B87697E1CDD83E4AF0AC5F632344996B9567F0381E0D9FBD00987CB90673AD2343606F16CF0BA1D29743784308A10EE3A86B9F9D06EA37FCDA8CF9776A555771A3FA75D582E92B6F457ABA554E7B35FB91671B2344B94BAB4EF1776A59EA07111F4B6798A6D8C707E112DBBEAD06F8DD8C73BB9003F09FE2B8E89B9D8613DBBEAD06527B74B0FC5801BED34FB1AC300F8EC32EDBBEAD
	86BFDD8C93EAD2E59963B906BBC709A152AB06E8DD8CE3DA518E53B906F30E0E8E43D837FCDA8C79776BE1A8E8C08C9577A3061D0E51E1E8F24B2745B0240B6150AE44B016E378E01498D21D5EB0C468E2682BC68C319C43CDEE324E8EC328DBBE6D5CABB7C22F9FFB37D45B0F95C13AA6201E886C47EEA843766B9301B89D5268F07A386553628C09503355516F9043940EE1554068B014386553E2C8FDC0F76DD1283595F92FEA0034A58F202D3EAAC21C358F70F964A8F146FB45697B001E2DEEAEC68C819C43
	0547C607A140AD1F96C3142E2DD6EE50732B84C8ABBC0836FAEEA3624CFD90F1EE9F9C9D4EFA37FCDA1C758F6A596A2ACD082107E3F8F71498D2063CE1982F0B213B94B104F08CFFF113F5F698C23CE2182E0B61F56E37298FA106A347C7074162162FD0932EF8C88F43693D589FB6F38C0BCF0C8E0341AD1F9643D8DD8C1377209D82B90627C609A14EAB06D8DD8CB3F7A306C40E610A132343906816CF0B21A8D28F43E35D0821BA127B4370A87D41AD1F9603CF24DE9F925529B7479E87E903A2318F791D08B8
	4301473EA77BFCB5614D023061E164B9A82F64E1F91ECEF98DE6422B86DEBBCF6724E78EFCA1BC6EE13E4755C73FAB63E19B8D077370FB3DDE3F89FB786C571FDAE2BAB27BFE49EF42585E70E32267F37D51227E397E97C47DF37DF1E29663038C65570D981FA01E795C7F8CD16F5C7FB2DA4ED7A572CE5E6D0CFF1D31DF146D10AD7C6960FCB9CD15E45BC15ECB30BD6479CB4937AD9E7673050AC7687AF2B57ADDBC541B70882B3BFC92F7A17ADDC3977A1D5FA3F8067145AE726EA48C4251C0539FC17F08F05B
	57A1147A28E71FE0FB7A6F53B302F9102E94289E2887486FD15C4B7FED175777ADD5C3E7F85FB25C6D393E4F6D562F6F5FF4137317CE5B0023D3545669586EDC9E67FAEBC0B664C95530B417537C125151AD3A7944F81A1F45F94AFFFD37A73FE13E714012C5546F1CCE51C9DFE410E39B32CF988FA9FD023C2B1377937671BE7FD12C4BEF6BC9DD46C2B891A8F38A5665FF76133A4C1F222E3B72A91E6B1269DE592C543D016BBE3286F557CFC15DEF2FA13A7DA0BC9EA8046BEE2E507323A9DEF5472BF4EF64FD
	4A8BF5FA72623C4A8BE8D14A5B444BB2619BBEEE71329497103294BD561CD68D547E9816A5E62D1E6E21473C692E7FE101C2F7F1916AAEAD4739431847D0F7569622BB9C42B1C0B3386E395F6B69CEFF5C1B6E1C9FD53A0B79DADCD71E412B3C88353CF5A86F77DB756415F815B75C2A12371E0F9D15FA722AE5F92DBAF259D878B65DAB30C33C4F63780E7B369E150E925431EA271E8EFFD9F6200E8EA62F4F2C123781657D33D6CFDE28D79B2C68D5495B08723E2852EDBB323CB80FB670277301C408CFFD82ED
	F020CF252394FDF0CBA37AFF5E93680311748E01A688DB00FC1FC09F3C37C98FCF40938C4724A7BC59EB3EC525FBB316AF6A001E3CF0D9CE34C7F9F728642DABC2F9579C561317A04B9122BC49BB5A2F12D74C5724C778BB0AA8344DEF6837F83590B6818DC7717D28F6DDDF525129567D15D5251B3727EA231E3CC02F721ED14B636DA923C357B73D4A3B402612475B0E50296B1B323CB80F365EE6D7495B04722E2B511317A84BC9FF926645CF2AE5B2F9B36D4AFE9D604972AEF6FB27C65B07AC237AC9CF787E
	F1D4A92F184BABEE501357AA4B31FB14F74A21AAEFA94AEB5D25A74FD716B34E233CE227CA9EEFCB76EABDF9C1321CB00F72DEF1AA4BCB3E01E66B180AF5FA7BC6D1A0A77EC91CCF96EE66FB64CFE17B38E3B3E99F25902E876AF98A5B4724B2BDFCBECFF9733F6BA5E5F9577336FE6CBB5D7666D55E6181E5F949772D72BC20104F27F8D9B6FCCB67D390CE844AFC9A4B72F5111E6E7C273D694EBA26AA8B9F0BEFAD5613D76ED55E3DEAF96B30AC2D9B787C6CE97E2D5286BABF0370F82090DE16580D3A6D582B
	6E6303AA5D3C1F39F6136E7C4C2B3C35C3AAF93C1F31146A768BDE653D2816474768693AF5179E6DCD5EA547D5E3986F37FC776A4E23B472CA94E1A62F66048A9F9F734377684EFB3C62DBF8D2A50F637BE037EE3F65D55EE3AAF96B387D1E6A5613E777EE3FE1153C0D682B69A674D55FE87455ABCD44D7C3A19C8514900D3EBAD654531D720CB75D452B495A5BA4F69987AC306437B945FDF6791AA160B7BDC3F456523D96F206AD77991CB37D067268AAFB3B51415662B78F1233EEDD8EE3BFAC619A6DE227D0
	70ACBD1BE8467EF29C648F820A84CAGCAFF96657D36171E9BB5CB963266171EA577333DC31629B24E6505E41D483EBA043524C437A12CA4AD6B134777A97B6410E7595ABE86FE27BF0BE707D765274B65C8FD2EB92D62B9BC9BFC4E664F850FFB88D0BA40C3ED5FC9738FC13E31C0014F61193F21D5F866AF685A894214D7743FE90CEDBA1594761CBC8710FF49193F82C3C7B22B43C3DD3A6DA546F39D32331F873A892E1298F676F39E679BA93FD641173F29237B9AA4EC023808985CAB7B97BD4FD870FCF3DA
	797338A7B15B6CF9CFA1552C3F2710E1565FC34AB11FF98FA94F6CE9AFC01E436E53ED7F4FFB334F55F46D5F7ABC33439C4E3F09726D8ABE334F864AA7E1DF080BFF9E6D33191EAD2CFD81563DAFA06F1C7DE8B36985EC0B1DEBF44773973C611C738D516B7F8243331A733F247C84851F61FC0F6EAB10F0653FE0CD970B18EC9508A974C5644D2CC3DE440B08733AEF74F0C63D688D670FEB095E7897357E56CD7942CBDAFF5BD4007E168BF143AFA126FF53F3FD31901E7E92E25AD22E07E956CB8CD3664B6E58
	186E73685E404A173518AE267C7217351816EEC1CCCD909772B2E2DA76BDE24A0BC35E4B1C174FF957EFC5DE89672D2EC49BD7F01E9F6555C238BD8E7B3A5443E43F596868AEE67D6B7243584FCBBC5F161DA84B17737E3C93E50D653C4768B92D09908E663CF5D518B70C737ED005F9A3B90E9BFA55B86E6A45FEBEB60E3F3FEB542B0F99F15EFC24220958B77595E677B44E2F237CFC851F554763F4DDCD42559097748A620EE94232E4CE653621E71672A0DC44F92F9F40F4151CD7FB905355F3DE68E1CCE762
	3CE5F4ADEB07306FD4AC772DC7744ABDEEAAABF750D4CFFE7891DD8307CD5516BB0D5E7592BBD5DB6E0B5A305C422B0069D544F4F9BBEF2F1C57E6C4DE9467FD55013CD84EDB5A093C844E9B223CC4882747A36F4E9ACCE7603C9574DDD58104ABB82FE7B77ACE936785523D249E888FF15EC2EADBDF880F633CEAFAB6A48842211CF7BD65C5C0B806731C3BB05DF44E0B263CD9904E1C063CDFD7E33A151C97DF0D690A2671EFCD5771B34353F06EB4EFBD3175B0047D010226E1DD2F5F2C3B57B24D1B0F971791
	F951533463CAB965A7CC530EAB77EC46F1C5F88D6A7AB544FFBFBD0F918161E84E3B60BB64453D467B6BC2BD1C53DF730673FA3AD6CBF9DD5BB75EC279F92FEB7B466F3E453E318462463D0E183695A126D91C77F0B172D2939027F1039E4E1C84EFB85BB6523EA1C10B330F72AB9234B85F5E00B81BA1AEB481B13D3791B1995EC05E9D1B10D740F96716A22F1473667172D4F25E9F77E29FDB4FF933A82F9542C31C779CFD576C8BE1FF4E4B223C71901E44F9EFF47371798D34D916C94FE691EFF833D936C8EC
	90730676FB20E5141F700676FB20EB687A015E478AF16DEFA2266B68FB57F088C73D0963C367EAF22703E2CADC48BEE20279B73941D4F296D66EEB2B5B57D4DDD3372BEDDFDD5B0E5AFD0DD5721D94638715779A17AEB8C777FEACBAAFFE1315F1067CBB66134BE733B6FC119947230237203D3CC56B512C7CE60B60ACCEE16F1FD97CDB2AF83C834F957FE52FB21EE03DBCD9995F280A1FA34BA894708E5D073E42397E2C07A68916DBFCBD5E579C7496AB4F94795770486533639C75F3191CC7FFD45AA7738ACB
	52EC8FF2D227337CB953DDEB8636EE79779A8FF7331015110559B03A8F77E92B27E3BFE8215F087BC0F89C50246968038579FABEF8A6124F6A0EB89F73516768FAAAE2BA7351051C7F9A65A7A8784CF74D14CF4219EF43BC72ED7C166D1D23448E7190CEF98766EDC0A5C0CDC076F7F09D3359DEA4F8F9375AE4335742C24722D81A3036E16D62F331F750D6BF523555D888CF820A607CEE4AA7776E443F436EBDE37CB73A3C3D6FC7D9E7EB4388C5DA79BDD877591CA918B3427AD5664D96AE26F731CB3068E3EB
	742B681D6A725CEA9F5AA9755FD86E6B6B89AF8742A51C97CCF9642EB7F21F9563FDD7CF3013B4A371A3BE36F849A71FAD25BAC6D2FE2D6D3C45E78B75F4BD6894499DFB22094D2B3B7773BDC740496C96AE396CF6E28D5A2D1D5BA86D1BDA62779076858AG8A811A82948F14BA8366BFC065C04DC092509820C9C0D1C03300F2E642FC88289648B493652E26F249FEB5396B045C23B7BC135DAFC76EFAA37747854CE47707113B41C2E732BB4CC2653B29E2E6323B6348FDD633E6327B75185C0F56944DF63789
	51CBFE89B602E54AA86A17140314512DDF144BBD1A3A9C8945ABB013BA182450C96CDCBB53B3862CBF2CAB64137AA47544ECD77B351E6DD64B3F240FA35FC9260DGB392395F75D39DBE5953D97A8B5B0D50C245B399773ED004497D33DF1DA1AF76D5B806A31F580C1C8DE16DA87D18401F4B8749333C3679865BD45E3BFCDECA77A772A1DC8D544A797D14CF6E00A4F78D94717348DB8A347DA949278C674BF2C6E39B2663201B8EED7F14AC287B6111906B1396942A7B6C36A1171D1A4A797E553BB8973C259C
	57FBBE5CC63F237BA57E908E810A617C4BA8BFD33E73125CE749784B36F89B0B1494F3869B22CEF75BED9C110EB359D0EFDCE436BA67384B3F2EB961FAFE7E246B396A1440ED9DD9CE7408D6F2952AC95EBF3F3992673142FBB8375EC07700A4470048E47C749309E6696F5F0963C58ECF9FDF2B99F7CF3B74078B2E3C21D528EBA54F9BCD77563B0C9627486B3D25916B3D74BD7E4D863DF3299242A6A0DF20G20909E5FC4637D65FBBC235EE377D6123BBAD9FC346A1E7BCAD986F98EF94F3DFECDBABCCF9440
	B13C2D5221EC9BFA7D63C8467A795C1E2F4EF655E75381777A6CBB0075B363BD9C4F97A43B6AE060A056C1CAA24657373BE4169CF117396788FF4712485756C7300E8AB82F300D70CAA1DC1B08B6C926F7C635C3588FA888A882A81647E75178B172BD28640ED361FDF607A90B3F24CD2F9D454A72C6525F903D6D0ABCC19C43CD3ABA52C6D8C7D8CF4A3958BCDEEF3799DDED621D8E577395A657739D222B9EAE6AF42F07EBBB319E8C6FE35D45F63972EC5CCD729CB3BB4D642EE316E7AFBF5FDD82F9986FE24E
	2BFC1F5FA7522AEE4349BDAE39AB8F3BE3796EB0E2E962B2FE3BCBADE31559A5A32C41DD46538DA823071727265715672DDD6EF966D6E31EE11E475267726F2C9A0C9F7BBE7FAEF71D5E9AF0627B5E76AFDEACA163C7487B5ABD34844A0FFCDF3B0736F0BD6E2145C2DC658758AEF6EF46FD1B408F9053A63A2F968C61E84E5BCEF964BEDBF2D7AD63BD30D94FB7C99EEF3E98FC96E9180E17F4F51C0D6F1F4DB9F0D617CFEA46795BADAE3FFF211FBC4BF323C234D5A2374BDF599E6107B0D7852A78907937D3BE
	392F175CF59B44ED366DDBEFE3AF11F536ED9AF52AED7603D79DA3B9A32F7CFB9C995CAE33EDAE9B9559DDB69A5A00B6EA67369069BE2485423EC0811CFF1472499D44F9725D4172F7849B1478FDC7E08FA585E872D96430FC96F423D247E857365A39915A15592571284BC6479C2E674B1D2E6759832E6715F4CE4EFCB23B0E2C815865C9E46B45E8B571F43B86DD695E5923765D5EA1D7DC3EA66E770AF958ADA7DDF516EF42BD4CE0DEB71F09A4EF988F7F170649FD47ACFC03896D97B64A7A715E7643390E1F
	73CD47195B7ED6135AC639F4CE4A76476EBDC56C928365CB7C907743FEE5A7F7309EB4764ABBE16476B11B03EE0581335EE1330B8E69B863529B7F719BFF373B9C3C915B6F3CEB9E6E1B867F73AFC24879159E6FC54A1D456A21D47E8D093CFCF686AF4B372749DEDF8F44798285820581C581A54C4232C550EF2949579264CAB5C9B2F676509B1FF1236F20D99CF43149C195A63B01A2154FB09C7D4A13FDC042EE63B1633E0EDE31D3EAB2F673FAFE5E6D8E8661A317CF65FC646EDFEC2C0B257B31799FE97770
	DF237C520F34FB780EFE5C432F0638200F5017DF4CA736497C987AF020D220FA209E20610FB14DF41A065CDDC36E10A477D712FBB5493DE764CEB61646165F2E4008F206E5D9043772E37D361269016F39ED7CD625EB1E6CAF244F40793C27BEEDA4ED09556907C7BD1FE5C9F2681FE5C9F5681FE549F01C79FB27A58E4FFF67E419C379F7CED8FB7D1BE24DF17EF7E43F035FC8663A52CE0ECF5DC0EC333BD18459C6704A0DB27FD74732285F5B8624B6656DD9301627775D352B6EA89F7BB12BF3D7BF7FE4128B
	430AA1A20B5D475DE1F4A8E431F8E9B0D30551CEBAF8A70B7BE93FFAED1B186C12EB5DCB30570903DCA2637752F3817B20D6B002714B2B09AF5003E9EE98BEB62A6D308E67C11DC49639B8D4ADEBC9C90E4CEF137F541DBABE746BC5983F4D2941B737D82D2B946BE257A2259D9A68E528F25C0CAFD5B65A41AEB5E5F19F6DD44BAB46737B95E4DFEE2F51EA6C965B700ADA8D16628252063577B12A4B52D7C07AB452EB3539AE15EC5B6DE643BB4B55B8B6497CA8232ADCB574B2E8B9EEEA1BAA2EEAC8915729A9
	57FA197FA67D5B21D5C3E68933B11FFC29C26B1324EF4A60BEBBE367196337561CB93E21764C71476ABC45B35FDDBA57653BD76D4BD1169B1CF83B59C6DFA13178415CD4DAF7D28FC942F8DB68BB2BDD222DDF149C47891F49ADA3DD1D3C1EFA399C57D3A19F63BA6F716CCF556DCB3422B20E674535CB34E928F2160825791D53CD8E0261F2A2AA157BC30C7742CEEC43AC7CC415B28DAB83DD1EE21F15CD7AACF663FF5B81276850786C39747E55863CD75B4D8FFF5822761B92196F582E7235C651818DCC0EDB
	3F15748D3536CE23452D2FDB532A2DD7B2563966CB679CD017EFF12B3B8DBA0E381759E73E2B4CD5ED6EEB6756B6DC77C7723AFC6388E90BCDE60B58663A345BF25C4D8647ECCBB11D6B92EE0D9DFD695E7D8EF61F36A6EE6ACA358DB7487C87D791DB6CB5DB4D7D66935037D9AC6AB6B82EC3EBABB2A7F0596A0ECEF75B18F62B6D972889B79CF64F73E603BBEFD935BBAF3F46FD3F52FF9D2E47E278DC665592420B07307089725E21BCFAC7F1B07232576B2DA3C99E3D39C27C8866B02EF9CC012E0E7F0D390B
	2BAF3AFA014B771EB312F68D7DA99D84EA7AE138F07327BFECE1ED52860327BA8513F7DF1ACB5EB78239CF3F4EE6ED3443D021ECD0ACBEE3B39D9BB511ACAE64A051C33A1E1D8EDBBF692654FA26253B744C2577C5D71A7B0B5563D5C8314CDF2766AFDFA27357A3DFFE6F136112193702849A862C5B6BF639F03339560327C89C1F2731258CFE9FFF0A7E1D832B191449FC028E110D10505A4D5683B199A4BE977C2484289948826473892EB38E7C749F012EB3F45698D526EE914F49203E52531E671FDBCFFB7F
	7B4055270983F458A44956CF64A33F6EB45D833559A9D37E9BF227C9C765B0F777C8AC294CEF21FFBB5DA2F6D1B6EBDBB3689911GA85724CFF0BF2D2C9F6FD20862EDEBEABFDDBB7370F49A4E91DA6470D07FC85E47E44832C6564EAE9E310E1134B566CF77503D441D508F3B46719534DFA7ABC7976F5EB924BE5810C42F9B10730F2BA3FCF6D6CA494FB8C14AA0BB294CFB026AA213FB42E467FAAE26FFABCB67DC8F6F59D95E8F4A5D7BCEE71BFA6ECD7F94099CF79D7D9B965B2CC64BF198DCDC656859CCFC
	0577905CD762B2BC7B6B6B995E7DF5C686A91B88FE56F45CAEFF6F7FFE8619D0593A3A1CA2EF979FE7E4F2DE0D335E66B41316483025D9C8FA0B71B8ACEA8479BE077FD870DB0FD2703DFAA072BC843F648E0F31701BA96C6FD7FE8F22DF4F2F1EA473877EB707D45F13FCE955FECFC2E4C7036C84A0368E5FED416FC9D2E637241583317A1BDA283AE31A5C92DED6365DC67E7EE2ADAB88BB0775EB1ADF02FCE300A682313D125EBE5CAB493B61EAFA5E4B53993350592C6C3172AFC9CB47B00A2F450AE73F8CC9
	AD72592F5974EFDBB4C3588E641704ED375E6D6E4633EB0FC7C61C0F6DEDFCC84BBE9E746339B746CF21FB9BC18ABE3375855C56A19017175CA21F7D7AD39629A79F8887G0581C583A5G252434487D742D1964DE8DCFFBDD8DB69B7D1408FCD5E404053603F65B8EF814300CEE77A466263470FE2BC0712CAE63G35F5C5CA0B66BC6B2FD89DA8782C0C736CF81E558EF1D1A9D8B733695EBDFBDE20F87E03E524FD61486BB7689755416A675AAC4F7D4C0DD95E7B19DB3374474550AC77F1712EAC7DF1717EAC
	77F1F1400A63E2691C96F9DC3C550663E26B9C2C1F13345E7CA09C88944E793F267CF888274EEDC9AB180B7C05F6CFB6A5F9BD598A651FDD3D2D7228E32467A074087543FF66FDE46DDCD7BFEC02E7B2A798BB1774438F5B8CE710B3BC37C5314EB0DA49BC127547FB1D5D2EABE3647841C13A962427DB77323FB1B76044F739A63A962EF7583A9D2213F4670A6C721A701FF665BAA7DA46B98BFED91F7F09C35B6713784CF9ADE9AB01180C9BD5FF0B27FC9E1351B38F47047B2C58CF8D83AFF89E763B49746F9C
	A5C0B8A5957AAFA0067BB59B31F7A38C8A64E5307C3705C5E57F1F3722A2A9CB506F7FCBD2197D5AD3557D3FFCBE384B437960DAE3871E8FFE5B1EAA7B04BF48E03CCD4ED499CBE4AA625FC17F0EC44AFC408ED4B29F473A055FAE57572128899C0F6276232E5A795896A25D7A5633736FE7C71C0F753D03349EFC67EB479D9F4A9FBBDFBB6E4C37E1FD86C01C30G471DAD59442FCD9076811A88948AB485A89EE896D0CE9A0EBF0796678B1E479FB6B1F08DBA2CFC6F2A6E03ADCAE375DBA97FB627397783ACDF
	B93FB754A22771D124750767C0CDDED67E5BE87D062635E85E435FCD79D394FCE6171ADEFC8F9F87F15569D81F5368FDCAC1696E784200972543174F8F5077306C79FC4573A25BAFBF46657F22BA6435DB3667B1EEDF3677B12EB9DBFF0CBB126DBE46F5E66B0FF166EC659847F8D6D92E03DF384678D2B6BDF7CF272BECB71A3C2B103F73BACA77DD20AEE72563385868605F12ADC4DE3083474A824EEB24FDCBB304A54E4B275FF978C1B800732E6B453CE11C77AF4ACB00F0CA867A5B9D14178B61924E0B203C
	A688CB1C370F5F69C7527DEF56EFAE575143F50C76BD3CA7CA66369768F99EFF50991801F669223CE088CF613C1B9B50FEF199B8562CBCBA1757B50E615F9D45B1AFF3D1CBDA7EA2E61BD678A573963606FC058CF9829B4F9FF2984E00D3DA249C4FFB1D44076C8E31CBF4B8C4D323798471C536CFFAAE7583BFC86F3F8871EDB53B2F758E723B8342A0DDB4101089FDEBA61BD3B1CCF7761E89D3C12692533B3DE4532B1F6C058E74D3C48CCF865D83A90734551908E7AE5B73427988CCB9EC0E63A867B459AFD3
	0EF2F234BC577820D7BB57A0F825CC1CC71477EA6791A45E0F6BDE5AC0EC61243BD1387F17CA3A89D97F290605BC3E1E8C9B22095B7652865C038E48C49BC5B41C49C6C1320DD85F5EF994473CD0604F484431FE0E013C93570E75054C214A4A2A244E9E5134DDF6AFF90DBB1E4AAA48EAC92B84EA4D427245BBC879F608646FC7E1796A173A4A374CCC4E07DB45C1837FC3DB1566FE51CA5E5A652FAFAAAAB02C5B38C6467B139971CAA0BFA88B7196372B76D158BAFC1743EC5AEE6CE68BF1B6AF390FFFE79617
	05731D99D4E65EE2E8CFC0350B9177F3741B69AA23D3BEE7614CF5E1DE55FB864C6B90B353D94C3F4BB2AD46F9973B2B14745D81DC5F0D8D6AFD75D7E8781068146789E637BB5B4FEE4C9B9CF1BEB69F4821FF57B1EA31F67E340C72E397EB67CF57F2DFCA00387AEC6CABFDC7FC0E04657B7DA873BDB462FC2CDCBDF41E931C2DAD6FD14A8F4B561677836E0B1190D71403655D68F6B60410FF8EEBF701B91E66C5C33D1EF007C21EA9C0F1C0090A7CAC5F67741C16FC66C9719CF474171FCF5D7BFFC0073557D5
	26C1453360756E5E1F2F7B33DFD4879B3F777661FCAA7DD39C53EF6A43B1BD1773AE22FDC68F0407B9AF1A4F1D46F25EBC3A760A0570AC4EEB203C4CA5303EDD02E37DD4323C91FC1610B1635E3ECA99D36992F77FC43FCF1629965234831177D274AE1FA52E36417A2EEBFB097D6431D79E2B6E60F7CEC4C0FA26772DDE549B2D23B7D923B7C123D7D82A553BFC3F6731F2937FB6AFFDA97639667D4A3FD348527950F4A41C37947B6BF7F99FDEG3C95B4AF0C52827E1B3E551D07E3DDB719E64B6B7D9753156B
	7D4A27AB137EAB682F77CDCB19BD02173A567B31672E1DAF1F5968A5F948F72E8C1F0163CB5045A7D4B0AC0F11E1D236D55DFE75F8F359FEF2A8E8833FDB6EC3D5BF36B237A52DB4774C73E936DE1E3C0C54E9AD246D819A83B491A884E88AD09CD0A2D07AE7600BC065C075C0A620A1A0BF20G20C91F611ABA680BB50267B535BC48ABF6F2917FD7AA7C61A0AF7A33B363E7EDE531052EBDBEE33EA55F33C1F9A91FB39E437544B24F6B3CE717F9DF673D3CCCFF1DB7ED197BBA6F4DE57A6B3C994B5C57F96FAF
	A3FE508DF6E96669BE663C964ECBDEBEDF669DB21B681E94634FDF3EC066D70BC4A17297ADA73886A92F996FF9D270DAE45EE74B49FC8F0A5CE3F3E05E654B092FF519AD96967E8FCDE336BAC5095BE375F20251ECB7AAF097F0DE8B2F0B72BE777A5956272C9FB6A7B42ECA9778BBDFDAC4464F9BDA6862E39169B71259429FD6DFG0DA1688DE10EA4E4609F8FE62F77A4E189BDEFE710FAC443C133C39AB0DA8CBBC40BC5929630050381168612B0071EE0130494F282CA92D271AC0FA42461E3E1E121A42473
	83BCB41806E7F5E8A8059CCDA3026147304DC9F9735949AC7A1CC9A36AE07EC9DA83CCBAC1GBB11E3A0A7F2A0B1BFFF8308683999C948A267CD8C4AF3A912300872DCE7D0A4E11EFC6204A0144F11983611D2AEE21B8386BC2AA6898BE5156C3DA840154F86D2080B5881B903E4B350BF6CAD890B65E3F106C133544319F83041C05FCA9AE85E4F59C98619556530759B48BBDA9619D6E7332E150FA7G86F2904160B2F2F2715ACA78FF9D7DFFBD79FF9ECFBB1F1DDF23D26632E782GACE8F01D1C23311F4AC7
	6E8C7C4C1D2C1B1D50B4103738D08B354681F0F3223DCE14F6012B88A9ACA6053CBE069F029AF05451GB911850A51DAF3512F9650A2503282C66E9660BB788297588A9D2968AA6037E0003AFDCD069D7B6A6A2AF6B4D5D5BA9D42E277A549368B1FF9BA282DB2A7C9C82A916676D01F2F91668C12C6B1C4BE05789C86218267D161A7E1838B8991127025019CFEB630552EE140A91A4A8CC505C5FB379B3EB5EC208F20ED9157D6C3DBF36C3175E549AFDF1D1CA42400AA563B5588A9240B820D8E26B999FAB72A
	B7C5C9D47FE6AD170F1DEBCEAB6F51C8BC2F5363BDA3BD4BD9BFBF3C5CB5F63231692FDF13FEA28478D14BF1FC79E44DDACF634B368E29319F1A85B4163EEDD693B14776631268BA7B9B7CB5116F44B4F2A40B3B7DEB023BD71167FFGD0CB87888363BF8B23B0GG9C1FGGD0CB818294G94G88G88G95DC75B48363BF8B23B0GG9C1FGG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG5DB0GGGG
**end of data**/
}
}