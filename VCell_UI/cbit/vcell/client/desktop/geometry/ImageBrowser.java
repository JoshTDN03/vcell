package cbit.vcell.client.desktop.geometry;

/**
 * Insert the type's description here.
 * Creation date: (6/10/2004 8:32:57 PM)
 * @author: Anuradha Lakshminarayana
 */
public class ImageBrowser extends javax.swing.JPanel {
	private cbit.vcell.desktop.ImageDbTreePanel ivjImageDbTreePanel1 = null;
/**
 * ImageBrowser constructor comment.
 */
public ImageBrowser() {
	super();
	initialize();
}
/**
 * ImageBrowser constructor comment.
 * @param layout java.awt.LayoutManager
 */
public ImageBrowser(java.awt.LayoutManager layout) {
	super(layout);
}
/**
 * ImageBrowser constructor comment.
 * @param layout java.awt.LayoutManager
 * @param isDoubleBuffered boolean
 */
public ImageBrowser(java.awt.LayoutManager layout, boolean isDoubleBuffered) {
	super(layout, isDoubleBuffered);
}
/**
 * ImageBrowser constructor comment.
 * @param isDoubleBuffered boolean
 */
public ImageBrowser(boolean isDoubleBuffered) {
	super(isDoubleBuffered);
}
/**
 * Return the ImageDbTreePanel1 property value.
 * @return cbit.vcell.desktop.ImageDbTreePanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public cbit.vcell.desktop.ImageDbTreePanel getImageDbTreePanel1() {
	if (ivjImageDbTreePanel1 == null) {
		try {
			ivjImageDbTreePanel1 = new cbit.vcell.desktop.ImageDbTreePanel();
			ivjImageDbTreePanel1.setName("ImageDbTreePanel1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjImageDbTreePanel1;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ImageBrowser");
		setLayout(new java.awt.BorderLayout());
		setSize(362, 501);
		add(getImageDbTreePanel1(), "Center");
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		ImageBrowser aImageBrowser;
		aImageBrowser = new ImageBrowser();
		frame.setContentPane(aImageBrowser);
		frame.setSize(aImageBrowser.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G4E0171B4GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135D8FFCCDB479DE78522CEC59A2B520E2E7B83E5ECE2A92B1816EDE80B262C4A2AE8C1DBB61189E9C8ED35ECCD54EC0A94B4F5D5D41D8D0426C08A41E09BDBCA36E6A90998A1B4D5D3AF5D78158D963A21623AE40A1ABC6C83DC1E5FF35EFB36F1C9E05F6F5DBB7B81B6AC690274615EFD6F677757676ECC9CA70B9BECF687A13686E27E3DEDA3E44EC548700187D5A1ABD482CD44727787C09B797DD2BD
	14455056486A3B9D4DD09E87D4008C4BFAB55054CAFE69F019729AD3AEE03393320775F95961B5E523D03F89A881D428697E47584A793ECBE67D7A67CBC96D0FB4FB8B4EE319D3409565E3AF1B65A97212EDDF9457FA2323599CE3C03D8C004A5711E7A65F427E937333FF8DCE070D5EF8104AF2EFD08ED345688DD1FD5ED0233D33D40DD0C3CB7AFCE391E9168EE9EAC2279A0C3BF98B67D6BBDEE1F391528D7503CCF6460B6B154077F6C095006B726E9B174D3DCEADFE076C1B7D61315732685227F19D263434
	AE9367266B5C4C6E6F90346FE6E82BGD4828E81DA75C0D39F4083ED6DE4E0799C14035346309A09284AE0B4BAA4073477549015615B670396D376BE8D2ADA08906E53BFF774E4584FFA60637EF2576338CDCA5F947EADFB7FC9D2734DC76D0D99ECD2D33AE89F5539ADEE6AE91B70350D2CEB6768AB63EF655A9F926B5A64C0FFE3C306353DBF6FEF5CEC4ED3EAD93BDAC7DFFF1179FA97FC5B4CB8607292A6779AE9B90F459EA647FA8F34959AA2B6260E0B3D0C57EFA12D973E10518EC5CF9558EB8D3E0766D8
	FAAFBCAE066C18D317C06E874800BCC089E08720AAA6E263334B677F47581810B4E3A89616C39071FC6C90690412AE981AB42668062484E9C052425234CCF5E276394AE2E2FA4538899633C1D8639FD4211AE404D585E617A037282673BE57C0876823D1566A8FC7A8AC900992B12F84A0C416F46303E8C8B2E83A87EF8FB33F4625G4C889340B7370BDA07B62F857D1B6301A6EFDC58E19F1B6FAA5594AA7BFC632ABA9F0B7AD193A24751D78F315C6E036FD1G1FEB3E9EE565D05F151A47E3BBE119E7A49C44
	6DCBDAD264C63197F933A6AEFC7D5BA9616B11162F131E3D0FE474F5A144DDED5C74F5E2F54CEFE5F3623EF83D5FBB35BAE76219E37FDE4057383AE60D3A7F537C47D33E7AD99B7A6AA268BB8108A6040D8336D3BCE607A41D0AA87D378681C6C3E90B733E63F664D59A879A9F21D12A0460C3B7E3E452FEAC9D3FB3EAAA362EB1F99462FD9882CCCF49EF58B1A6A543504253B103CED24388AB336976D936169E1B0E26D3C52C255811CF5404424E8BAE536DA7D89EA88AE51BCE8DB15BE3ACD629CCA33069E1B5
	2698DC3ED8077E1E27C9B3D7166B0E32D817E318F77CBCAB1770500EEA61881882D317D4A7B00E37F408739871A04870DCAE03F2C7C244E462F5911327BF799A59F1A3EA4F4405C5DF791C7D54820F2B0B8B691864FB0A56E75EFB1C650CA95779DEDF3B01FD2DC7AA77FFD3BB4A7DB0779CA0E7C1787F05D637A547CC478F2B324C4D1832EFF5DBAB7A035E0AD120A6CC662BA91BBD53F6E2D5DB40349FEFFF3E8D6DA7DBF8006F7570D9349F3BA7FCAC452505DEBD81B160737DF3C2025D70FBC0F3A76A087D0B
	96D277GB76A32876A7B81A4A9EC7D5396F18F58BCDFCAEA8EDCE84CFA27C91AF71AE45A56F307860FF2DBFD6040B5EFC3DBC1D258E97A04155386F5DD8D06991D1ABA3635DBFD41E51D6D2FC2B99356F4E38C12E5C158435B0E7BC53EB545A68F34F52EBEEF0B13E92E5916DC4BBB66D9496C31AB39662CE4726A641A3352AD4E4A7D50B67E09606007D9BC17C33D92308FF08460DD8CB4DDDE94F6A8E9FF13ECF0460DA9F074A812BC39A2F9CD5D7F63286379E656BFF2B408FCC31B3073211B79FC8A561491CC
	F6580932C22817AE8AEEAEF6E36ED6266ADBD97DE02A5E6FDE4D2BF78B1CFB836E7E54EB2C47755CC60FF7E4675DAD9D19F93734A3B36FBE59514665B0077596A25A3F5D31BEAFFF3FA393AF5731363FF59EE5F11DD4E386644FED74DB20D3F0E4AB543B81930050EDEED74E835FC8A0BF4C402585161A0C52A0193A03E3DFF50931BB21FFB560C5008B5AAE81781ADB4F63FE995F0DCC7BB5CA99F7DC4038E79C7D8B3715230B6F70BBC7B5148781BC9F16BA45BB26FE89E2FDC93CE3FE5D0BBA277829D7CA98BE
	5F100A9CB94E15649C75B40BD7768EDA929CD54B66AC037ACEC04D12602805B302234A3E3A056C79D5E60EFA56FF47DE3B44ED64DACEF3D4885EAAFC4DBE17D8538F6D854BA87B4865D895D7AF403FDEA8F9FB610AF6345BD9E2EDFFEAC5BB6EF72F5D5ADE3B223D41B21E6B367BCFC237A33B4B097C2D3C2CEF4AAAD3279705EEBFFE4C3633E862A8377B777A4F12356FC77361E83E97AD4EA6624D585EA55E0CFDB9428F3A877DB087759CC0D10E60063CB5DC3B917838076FF15C6E3B9E47B97CE9A76E3FBC07
	F338ADA57F8913EF3748F9AC3F140A65DD50567399416DB9CE4C03C2281781F682EAGC7G2E878437CFF676118D385D2FC6470108E48BF5F07D5EF25D5BBB75870DA2E636FDF7AB2958B4E2EF4A92B3BD8F70D899B74B0A4A47ECD8F27D5AD91E5F0636A240F6C095E0BF00648A7D9EE7BEGAD2E04424620E1C841B9F6DA8B6582E11AC80B110838EE2E2E75F4F364E6BB171FE731571D3B5AF707187CE26EEA5FA5BD42F78350D612ABE23552C9D2F1345772CD1C1F766C59B8EE5D77F58D735D6C4CFE3E95BA
	B31FEF0FBAB31FEFDFF22EFFFE15B8333FAB1EF0DA5F95BC2E2EF5A1673D1297E8BA8D9885DC87C473C4CC3D637AA30F298C71F4A5B4CB07D5761AB7D2F7BFF7F6DDDFF7EF7C9BC00F9B6F14532AE128911CDF487B5D68AF60C7A66432375DE8A3ADBCBBE7702E267CDDB77224CCE718185F2F4EF7097BD5C11E083B5FF8523176BB4B7732677E47DD51FDDD437C5D23AB3BAF663AB67645ADE6B38AB674A72354FC13F5619DC81D1951E94A670BDD2DA95918BE216AE1FCB8BC1B07F67FFB57A9F3CF95F9EBF924
	52147173CD6992EF216EFCF17F396E417506A95E398527A62860D46F93DFA65E13836C2D1D09D3EF6673798B7253F70C348F4EFA2C3C37837AD4652F7F5B874F19439E54E9BF742D5F84F7BE40G408F1081B90022CDA2FFDABC5DD086240F4D538629D955D8860110DF36D88EE9D2D8B1F82C8EF8508E5BE00E67EC624DF00549AAC176D01D307B4B1E6C7EED70EE6C5F635E4C3966702E4DB537B7F32E1D74DAF30D4BCE1B7322EE7F12A229F94FF9713E446F4F6FC98A5CF2B4A26E485299BC9B428A040EA4FF
	988E99F3DC6EDDE8C94BC7A92E8F757F82D0CB8788091C14BDC789GG1098GGD0CB818294G94G88G88G4E0171B4091C14BDC789GG1098GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG0189GGGG
**end of data**/
}
}
