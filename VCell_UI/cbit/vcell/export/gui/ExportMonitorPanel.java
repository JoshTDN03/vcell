package cbit.vcell.export.gui;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;
import javax.swing.table.*;
import javax.swing.*;
import cbit.rmi.event.*;
import cbit.vcell.export.ExportEvent;
/**
 * Insert the type's description here.
 * Creation date: (4/4/2001 2:38:28 AM)
 * @author: Ion Moraru
 */
public class ExportMonitorPanel extends JPanel {
	private JScrollPane ivjJScrollPane1 = null;
	private JTable ivjScrollPaneTable = null;
	private boolean ivjConnPtoP1Aligning = false;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private ExportMonitorTableModel ivjExportMonitorTableModel1 = null;
	private cbit.gui.DefaultTableCellRendererEnhanced ivjDefaultTableCellRendererEnhanced1 = null;
	private boolean fieldHasJobs = false;

class IvjEventHandler implements java.beans.PropertyChangeListener {
		public void propertyChange(java.beans.PropertyChangeEvent evt) {
			if (evt.getSource() == ExportMonitorPanel.this.getScrollPaneTable() && (evt.getPropertyName().equals("model"))) 
				connPtoP1SetTarget();
			if (evt.getSource() == ExportMonitorPanel.this.getExportMonitorTableModel1() && (evt.getPropertyName().equals("minRowHeight"))) 
				connPtoP2SetTarget();
		};
	};
/**
 * ExportMonitorPanel constructor comment.
 */
public ExportMonitorPanel() {
	super();
	initialize();
}
/**
 * Insert the method's description here.
 * Creation date: (4/4/2001 12:06:18 PM)
 * @param resultSetID java.lang.String
 * @param event cbit.rmi.event.ExportEvent
 */
public void addExportEvent(ExportEvent event, String resultSetID) {
	setHasJobs(true);
	ExportMonitorTableModel etm = (ExportMonitorTableModel)getScrollPaneTable().getModel();
	int r = etm.addExportEvent(resultSetID, event);
	Enumeration en = getScrollPaneTable().getColumnModel().getColumns();
	int c = 0;
	while (en.hasMoreElements()) {
		TableColumn column = (TableColumn)en.nextElement();
		column.setPreferredWidth(Math.max(column.getPreferredWidth(), (int)getScrollPaneTable().getCellRenderer(r, c).getTableCellRendererComponent(getScrollPaneTable(), getScrollPaneTable().getValueAt(r, c), false, false, r, c).getPreferredSize().getWidth()));
		c++;
	}
	getScrollPaneTable().setPreferredScrollableViewportSize(getScrollPaneTable().getPreferredSize());
}
/**
 * connEtoM1:  (ExportMonitorPanel.initialize() --> ScrollPaneTable.setDefaultRenderer(Ljava.lang.Class;Ljavax.swing.table.TableCellRenderer;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1() {
	try {
		// user code begin {1}
		// user code end
		getScrollPaneTable().setDefaultRenderer(Object.class, getDefaultTableCellRendererEnhanced1());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetSource:  (ScrollPaneTable.model <--> ExportMonitorTableModel1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			if ((getExportMonitorTableModel1() != null)) {
				getScrollPaneTable().setModel(getExportMonitorTableModel1());
			}
			getScrollPaneTable().createDefaultColumnsFromModel();
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP1SetTarget:  (ScrollPaneTable.model <--> ExportMonitorTableModel1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			setExportMonitorTableModel1((cbit.vcell.export.gui.ExportMonitorTableModel)getScrollPaneTable().getModel());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connPtoP2SetTarget:  (ExportMonitorTableModel1.minRowHeight <--> ScrollPaneTable.rowHeight)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if ((getExportMonitorTableModel1() != null)) {
			getScrollPaneTable().setRowHeight(getExportMonitorTableModel1().getMinRowHeight());
		}
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the DefaultTableCellRendererEnhanced1 property value.
 * @return cbit.gui.DefaultTableCellRendererEnhanced
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.gui.DefaultTableCellRendererEnhanced getDefaultTableCellRendererEnhanced1() {
	if (ivjDefaultTableCellRendererEnhanced1 == null) {
		try {
			ivjDefaultTableCellRendererEnhanced1 = new cbit.gui.DefaultTableCellRendererEnhanced();
			ivjDefaultTableCellRendererEnhanced1.setName("DefaultTableCellRendererEnhanced1");
			ivjDefaultTableCellRendererEnhanced1.setText("DefaultTableCellRendererEnhanced1");
			ivjDefaultTableCellRendererEnhanced1.setBounds(29, 336, 212, 16);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjDefaultTableCellRendererEnhanced1;
}
/**
 * Return the ExportMonitorTableModel1 property value.
 * @return cbit.vcell.export.ExportMonitorTableModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private ExportMonitorTableModel getExportMonitorTableModel1() {
	// user code begin {1}
	// user code end
	return ivjExportMonitorTableModel1;
}
/**
 * Gets the hasJobs property (boolean) value.
 * @return The hasJobs property value.
 * @see #setHasJobs
 */
public boolean getHasJobs() {
	return fieldHasJobs;
}
/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
			ivjJScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			getJScrollPane1().setViewportView(getScrollPaneTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}
/**
 * Return the ScrollPaneTable property value.
 * @return javax.swing.JTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTable getScrollPaneTable() {
	if (ivjScrollPaneTable == null) {
		try {
			ivjScrollPaneTable = new javax.swing.JTable();
			ivjScrollPaneTable.setName("ScrollPaneTable");
			getJScrollPane1().setColumnHeaderView(ivjScrollPaneTable.getTableHeader());
			getJScrollPane1().getViewport().setBackingStoreEnabled(true);
			ivjScrollPaneTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
			ivjScrollPaneTable.setModel(new cbit.vcell.export.gui.ExportMonitorTableModel());
			ivjScrollPaneTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScrollPaneTable;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getScrollPaneTable().addPropertyChangeListener(ivjEventHandler);
	connPtoP1SetTarget();
	connPtoP2SetTarget();
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ExportMonitorPanel");
		setLayout(new java.awt.GridBagLayout());
		setSize(638, 241);

		java.awt.GridBagConstraints constraintsJScrollPane1 = new java.awt.GridBagConstraints();
		constraintsJScrollPane1.gridx = 0; constraintsJScrollPane1.gridy = 0;
		constraintsJScrollPane1.gridwidth = 2;
		constraintsJScrollPane1.fill = java.awt.GridBagConstraints.BOTH;
		constraintsJScrollPane1.weightx = 1.0;
		constraintsJScrollPane1.weighty = 1.0;
		add(getJScrollPane1(), constraintsJScrollPane1);
		initConnections();
		connEtoM1();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		JFrame frame = new javax.swing.JFrame();
		ExportMonitorPanel aExportMonitorPanel;
		aExportMonitorPanel = new ExportMonitorPanel();
		frame.setContentPane(aExportMonitorPanel);
		frame.setSize(aExportMonitorPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}
/**
 * Set the ExportMonitorTableModel1 to a new value.
 * @param newValue cbit.vcell.export.ExportMonitorTableModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setExportMonitorTableModel1(ExportMonitorTableModel newValue) {
	if (ivjExportMonitorTableModel1 != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjExportMonitorTableModel1 != null) {
				ivjExportMonitorTableModel1.removePropertyChangeListener(ivjEventHandler);
			}
			ivjExportMonitorTableModel1 = newValue;

			/* Listen for events from the new object */
			if (ivjExportMonitorTableModel1 != null) {
				ivjExportMonitorTableModel1.addPropertyChangeListener(ivjEventHandler);
			}
			connPtoP1SetSource();
			connPtoP2SetTarget();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
/**
 * Sets the hasJobs property (boolean) value.
 * @param hasJobs The new value for the property.
 * @see #getHasJobs
 */
private void setHasJobs(boolean hasJobs) {
	boolean oldValue = fieldHasJobs;
	fieldHasJobs = hasJobs;
	firePropertyChange("hasJobs", new Boolean(oldValue), new Boolean(hasJobs));
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G4D0171B4GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E135BB8BD09C67F9C4C65643C8C2EFA4A185CB36AB5BB8450EB2A19E4D1838CD472999C7E91514249A075A29ABCF64C6ED480CA663464BC38299494291F165045AF2AC5B48A1D88F2646D809C1004D09931C60B88EA1095B3B5BBB96769E5EDB60GA17AFD7F3F7F5EF26CF216AAB3734D5E7F7D2F6F7DFF5F3F8BD779E6467E4222CA0EAB5C4F29FF9F96F2DCF59D476D587E76F799AEB568A867F4FFEF81
	3C4A59A7CA601981FD79F7BB4AAB389543E5505E866DAB507EEF78FD14DBBB1CFE86FE186C23C05F6B9F75BEB377BE075B58BE25247D33AB0760798AC0B66070D992427D0B2F9ED3713BD4BC0342A24011B1EFDC2DD2F1ED50F6812481E40668783F0567C132737C06FAF55C1565DB39023F170B8E63BA3AB5991C885339ED6A73B8772B423DE15C6B332B0754B9C9504E86C0660B39C72F3C8F4FF336E17FDFBCEED1299D758812D4ABC443A1D9E9E8E8A54F0B21202804E49B9F94A40E13BE477516DDADA373B9
	2E8E5A7B88EE0900FBE4416FA7G72B57C378691FFCEF6145B81A419717567774E29F4BBA73F497D547F1D03C7CC78CA16A9BF19F20C2F64775D452F939DDC34202CF7C35F2108237CB8C08B0097A0996077C47776B66433492DB4078201D030A99CBEAFF9650BA12FA0416F068668D1F1DD02A7A4FBB90E6A7762559A83FA6682BA2F7F2667D119ECBD4BF41D5975B5EE57575794159A48E4575649227488154536C8CCA6F46FD526FB6F0C4C344519FB77F27A3D39674F146EB7583B6A07E7CAF72B6B3C285B3B
	CEC1DD977AD057D5703BD01585459FA678288ECF6DF2A53199EC27C2DF0142EC43798A2345DA32192BB83D56D08EE90F2794B9C7A88D6111F8DA7EA4625A69A3F44F039AAD8D841F2D43D3DA9EA3F60A6D1D50D7BF6AA8277665E8C7BFCD07F6B6408E005DGE5E30E7293G75E34C46B636FD7085ED4C464B4A7991D1728AB2C767BAAC2F41D308AAB2EF89C694BE68919C3CAC72EEC908F06A18818B4A40BDE31E17583E877678CC888AB22F0821A02C4E8784C510A3F4CC4072AA0E118552EB978382EC9088F3
	EC5D914BD1F8CAFCC46989FBF9C5080D207DD3961449A86F0095E18178CD65F207956565847E43GC91A9C7611755A859962C5C303B5949A9E895B1193EE47984A79C192BBD6416F4CB1A663690B082B0CBA4AEB22EC1D8FAE7CC637CE0B68C172F9F91C79D8A93129C6986F82C80EB25B79F7A7331D16438FF1B5BFD8EDE8BB29E0475B2254E6F22371BEF4142C0D7495C0DF65B80B776B842709EF3922B3FD2BD1256966E347A326FB6C0FEB972BF3EEE68FAA6F97BA103FBA604B86909EE7B29F3AF01C5A70F9
	BEA2B02B6D14416084EFCC83144E33E205AA57E21536039A8F0D24EFA12C1B85108740CDB099FEE75099B70F45201B61E3EE99BECD76E06B175E66BD282CDC6DF8DE8923C2D0E99142C2508BBFA2EA1F3F9D77D27D599752668488BE8C7E5F8C8E97517011F674D1DED1E451BD22885D022208C1FF2CFF126C9599F107E321036DB52F9DF98C0D017FEB639734236FF8C24120C01426CDD17B97915F95A4A1GC4B707C6028A45AF33E2FEB3AC0C2B31E32575G073EAF0DE09C22B9C3960F09D1D89683E08A984A
	3868847A7563DA4E03D08DB84CFD2C70F4CDB05F9CFB1B796609097B391C01F011519913F66F32221C896ABBBBA7E23EC9E9CA3EE8CC7BE292C3D4FC04527A0FD5A88723BC26184C79E470D8FCBF89D5A4EA1F26E37E7A0F187B3588BEFEC4D2C8EFB3A4C9DD28F0D910DB0303982D3D27B55FFA57067495G5DE513100FCCB25FBA50017DAC1E29CE559C12A42AA268CB19C4B9BAFD152A9C6A21ED1B24F2A4B23B0E7DCFE97DC4BEEAFF45F5364FAFBA5077A24267A38290067436EB7A7CD547EF627A9C2AEEE9
	FFD1A76AD652456C1AA95CD391D92EAADD277BA543B39DA08760980C59C646E58D31F151A95A1FBAC5E368BD70FC8370F45C44B09B475D207D47EE507127EE50F1C9B7F01CD552F2E4E8E3BCF15D2071B88C4FDA0E5964AFCE229EC99EBB440F72515A489878CFC3438522ED1A3356DCABD347675EE0392913C7DD15CCBB4A2BG6A26191DFE7FB04BCDD78DEF65F6BDFF3A54AC6736CE2B7947F44CCED377B69D2036903E04FBE6C1DF4EB4534FD4277EFCEC0AC4C29E119C4D2A8EEAECFABB2638533617616993
	6508E2813B0BB2FDFDE8C3FA716CD651EAAEB36DE3797ECE5877D0924B77DF37FC40FD41FCBF6687EAFE68B94BE412BAF1AF67DA3D3E285CC4A6ADC9D4965E2418CCEAEE6C5BCFE918671CC903FFC40463BD01FB29F547FEBF53E1FA9253555427FADDEDBFB2E5CA57CE151E829DDD0DA1FBA91559C61297625AF5DF01BA85007AFF499062C5900A48CB6204D0FD12463BA3AEFD3C3B8746BF813087001B4764FD465ACE7CCDD179E3ECD5DB51CCEBA5BE682FA5A74147D61D5D56AAA8065AD942787824C31543C7
	C32C7EBAB60F496121B79AD5DAF23F3619AB6367979955D3A94F7B0BEC73A87F51F9B1B9D42EF497D783D0D97C08700C6B674018FD7318AC3E67C23E8244AAD88C758E6319218C0A91CA47FFB6696948AECDB124E3702F520ACE5DC177F75E9123A36DEEF7F1665D0C0EAD430C0E2DB0A67F8EC6474B926283E230ABB456A6087EC105626BA424C1E6C84D9FC6A4364E31E4082949EC1DDD92524E4B7EB32A2E83B3F9395E47F8C94A5D469DBB3A44109704054914072C6498AF79996E6282G1A131C3E96DF17F1
	73E379E1657C5939A22DD7F2C90C2A1ECF6B15E28D7FC3022F5761A92F57F846EB9B74E54EE7B976C7F634570ABBA14786E8813882F09DA07DCE961B9E331D659254B016A01496C1DE6A1E110C30DA62926E8B79035A9E3F0476C272870E65E673FD37D6D32F3C69F9146FCDBDF8DEE6830FBB8176G14AC005AED8163795717EA92714CEAB115D9CA4F4BFEA3FADA9628B63DE036BEA9BDA53DC80F847D8B81B2G328172B4FA5A3A926A20B5EA2883CA5796B11E2EFDF134D4AE1C5926739E1EB52FB62EDD9FB7
	0F463821C913331744AF9AAB8F3B753152361056FE5761198AC0E35AE72EB215162D8B59797CE3AF5AF2BE3681AA96319A62AFC3C8EB7522AFDEDFD159DFF6E2BEF18E66B98142GA9GD9G39GFB97B19D2C697AB8218EB07137071AC872569C1FE92BB27D49D0A21BB556458B8967D5AC1EB90F72777DBE642F9A7ADAG2EGC48152813281F6ADE67C6D6EBA1F083FA6D60CG0F6C67ECB6D5FA6F9F3EB5BE3F19F0DE41E223F913522D6D37A8613CC3F7994935339F65FA827A9A811CG8AC09A40B6003C3B
	18DC4FF5A7142BF6BDB337DC69DDC99B49D977427AA5A90EF20AFB0778C9B5349BD318BF7C830F6716D7EB6FA2ED4CC7E85B4B1B5DA95C8C607AC6F83A4754ED59235884CF65FB5EEEDEF3DB6C46B5F7275D38666E313FCA7130067EC60E75DF354FDD138BF6731A7C3E9EF3BA9F6AB126736BBD46F4FE2BE7EEBA3F5DE3C6A7351737C84EFC9DF4172259501DFEE6C3E9A94CF68F751A53FC3457186657FB0DE9FE33F7EE1A5F6BB52379FF088DFC7735A3E4FEA4A2C4C820ED6195DE6D7BB765371C415DC687F8
	9547F2529F0B8755B12DCA68A25666742C7237629A86E7D537C706CA9C2BC50E3D63E8F53373E8FB8ABB0FAE8F105A9E5A0716C08E310479175505F1659C34EDCBE67B0857GC7F3388EF27F9DDDC2F338C28D5FCB7049BABC4D6D723D2C2ECB053E02A5CC1FBD249EF0AEF5148FAEE57A74BA4D75B96CB4566767CE2CF3A3219159A3446BAC6ABC2675458216C59182A8FABA66ABE43E828935B0CB678B49FC5AE7B6FF39534CAE28DEDF9BE6FA35A9A15BE9ED6DFF6EB3677519BEE3DEF77719737A733E443C6E
	6BB36775253E443C16DD46BA55ADFAC5D93D8122BC664F60710C467BA3D2B9437B64D0G38276B74751B736E6AB7665D57EF4EFB20BFB16F237D663CCF75A7667D4EFEE35E872E61FD23440F07C620F87B69D2346D51EBACF70CC2BB95A09BA0F7A94DA129DFBFBC066B7960E485F3698E8B9EAEE7994EBD275568B550EE84F081A481E4ACE3B560594F5127F491C03D772B7713DA9004D7160A6F02535C50D4575D68E76BDA214F851084108110134AE24285B74BB57281D710BAB38614ADB70B89CF1198D335BC
	3E5E4BA3781A6571751EEB0055FB6720AFE3B90B899E12A7142CF0149FDF41F0598407F7F2F59A6EC3B7BB8B1CAB986DF68C036A39FED5777BB96F6DB8634D006E7152173A87552DB424567D27D72DC0994CA36D6B701B4AF453B596E77330FFA5333353AED2BF307323169FD39A9ABE13C56FF95EEFA5D6CB4F0E67C85E06735BD63233231268A9895AE9GD9AB593DCD74DDF6FF15F95FE6EE473F9A5FB5665B270A1ED8C9EDE64FCA5DFD497B6EE23A275B45762CDE85B6398AF1292E4AB85E1FAD24F59D6DFF
	FCC6BF465E131C3E3FE0C6BF527BDFA57A7EF7F9FD7FFE5DFC4A5B136FB05EDEFCB20B133E11EC7A6D4256D56A3BB875F97C29F505FB52EC8768BA5F6B57FF83D131DEAAAAB4D927E4B51DDF31BAA6A3AA1F3F71B379342CE672798FFF3CFC5E1A417F5B037172393BC85F5FB398AF1F7BE748F741E03CFCBED657273E47935F3B8E74E42CE67E987610EFD7203DCB43BD69E1BE3AF7B573511D83E8330DEBD87BE95246BBF45A768D687D88475DFEDF1D1E3107D96E7E7F735589977E66C714D0179091A7481DB4
	472DDAC33E9FA0B60FF23F82EDFADEBC27457C3CB5747D49DEF8162CD55FD710785D215DC7D4817E94008DA08C103A161D8BE9648E3453BD84A7D42D8753DB753B95C1EF0B27A62DC545A6361835164ABCC7FD263C34CEFD3FFC4F2C3B40AFA66FC7EEF15E4FEEFA9EBDF31EA3B1EB6F5A787C7467847F625A787C74F783ACEE1625B94A25B4F677384A0B725E816DBDGA56B9C65D5G67G1C6BD83E7A9377A9AEC16DEC8F052D1068C83A12027267F75D5A77B65FAEE571E95B238FF059F736183EBB105629BA
	D41F59396B8A71C979FB4F077CED073EBC009781AA57BB4A2B819A57B37E5E7328770C2DDE91EFD7F84FA0F94323DDB20A42D88C0DC98CDD7B029FA9D5F3B34FBB70F470C32AF4F029104CD638GC79235D7BB6F57F47F0461BDE5E23F0B3A713B39D1C1D6C48FAF517468BCAF5BC2126899E77EC7629746FC7BFA66B78B885D03A1D91C88851559B3196FEEA1B16D4F58063907B6A06E99CF4B9CF4B1DB5B2F5218877376G7CD6EDF39BE276C8E91183189B47D2BB7ACE1376BD6042EF42742FDD680DE5EDD30F
	3DF3202B355BF239F52049EA9DE86E3476DC6C68E6B613B126777F7A1767993E43C630EF2036B238A1667F54CFDE516E68B320AFEF833B83F5706C0C2AC8E7F9C3B2995B86ED97C0B41D0DD55C6CDDD8EABABB4FB25D71675972996751536E78738C770A75D7F8624F33197337FA634FB3B61F5A6A64A039F7CAE7B67F30678FE6768A48E6706DEEA87502FEE62BFB86B84DEEFF297BFDFC604B4FBBBF7AD277D03F91731A57EA77F80DEB35873C46F7ACD95E396F27323D6677D30FF9755F0CD05DAD95D1373B50
	6EG2AB6423988503211697222003A24B74371312B556B47DA913FDCD3587E27FC663CFE68CB7C3DDB238F5FF93BC30A928A607A8C7F298F7525044284C9F16DBE725E8F5F795121AA7E128FFDC492FC84CD7D5E652963627CBE96A0EA9D2DDDF6CBF313F5203B392B53EABD5F54B55054BD50515A5A525AC267BF6A795FB96637F5F6D9AEF7F6580DD76038B7499AF0BEF26CEF6FA7C6B8DAF3FEBA4CF1AC6E7C4BA1F6D6D5BD3805EB7927162237B96338635A283E0B5C984B011D3E3A03D44F8D926E339B7ACA
	B6B15D667A7FB8071F5A64D0980E01F10AA5DF0C28BED349A7BADBCEECB23A077FC342F9EF987AE8FF42F971C07315FDA406B6EE0A4FE38A5D0837EE0A4FE39673AC0FF1C25F76CDAC279EF76B77BF7ED528233FBAF7DECD65BBBD08779A91B556296F18C4F37F58A8A6760F7BC4721D885835FDBC2C5E2BBCA862BEA11FAFA2E8FE18C53E4523B8CB44960A08F861C2EDE1B40067ED9B706085D8881081308DA097A09F20G20AC43D1FE9C209E408A6082D0G128152GB2B3189D5DB5FCF28EBBD28BE592A8E4
	DE44D021527809043252E299B5B1666F9246A56D7B8B72298CBDB568FDF04E514324DF9203C2B37D92D63317DF731C763B549D7B1DFADB5ED54CFD1E5C7F256EC16B42D4128364007C711C2638558417276254EF6382663636BC10585656870CE3F1C6E0F6AC3EB7E09C0B9F8C68E331EA1B81BC077CE097CEED5CB7B4DC1F06FB142C0938DE512B8CEA789CC2976259879F947FF7042EB102F32A38A7F538BE9537A3007E82ACC33A4A667E00FC836293A50936FFC44608C1F09FCD9ECF939A45B02F237BD98D07
	F4539C15FFD7776D90A11D622B2207E3F86DDB957AFFAA3F0C0E42B37385EE3F423D15703343084C9DE1D7D13596C2E47E68590662E7379497F1A5966EGD51A05ABC149DB387DC4B1962E981496450F40637E68D9F3F2DA1F636E1B6FB14DF1CFEC26712FFEF36C2C213125FD92752DGBEF5B30B8F9BA67E441957AF5D81DE1220E298EE8AFA3116B9BF2E8831FC46B6096BC7589835137675CEA25DC33AB97F87D0CB87887E3BAC76F092GGD0B4GGD0CB818294G94G88G88G4D0171B47E3BAC76F092
	GGD0B4GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG2A92GGGG
**end of data**/
}
}
