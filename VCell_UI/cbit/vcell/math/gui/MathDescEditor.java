package cbit.vcell.math.gui;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import javax.swing.*;
import java.util.*;
import cbit.vcell.math.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class MathDescEditor extends JPanel implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.beans.PropertyChangeListener, javax.swing.event.DocumentListener {
	private JButton ivjCancelButton = null;
	private MathDescription ivjMathDescription = null;
	private JButton ivjApplyButton = null;
	protected transient java.beans.PropertyChangeSupport propertyChange;
	private JButton ivjCreateConstrSolnButton = null;
	private javax.swing.text.Document ivjdocument1 = null;
	private cbit.vcell.numericstest.gui.SolutionTemplatePanel ivjsolutionTemplatePanel1 = null;
	private boolean fieldConstructedSolnButtonVisibility = false;
	private JButton ivjSensitivitySolnButton = null;
	private boolean fieldApproxSensSolnButtonVisibility = false;
	private JButton ivjExpandFunctionButton = null;
	private boolean fieldMakeCanonicalVisibility = false;
	private JButton ivjFlattenButton = null;
	private boolean fieldFlattenVisibility = false;
	private boolean ivjConnPtoP2Aligning = false;
	private boolean ivjConnPtoP1Aligning = false;
	private org.vcell.util.gui.LineNumberedTextPanel ivjlineNumberedTextArea1 = null;
	private JTextArea ivjtextArea1 = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public MathDescEditor() {
	super();
	initialize();
}


/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == getApplyButton()) 
		connEtoM1(e);
	if (e.getSource() == getCreateConstrSolnButton()) 
		connEtoC2(e);
	if (e.getSource() == getSensitivitySolnButton()) 
		connEtoC3(e);
	if (e.getSource() == getCancelButton()) 
		connEtoM24(e);
	if (e.getSource() == getExpandFunctionButton()) 
		connEtoM2(e);
	if (e.getSource() == getFlattenButton()) 
		connEtoM13(e);
	// user code begin {2}
	// user code end
}

/**
 * The addPropertyChangeListener method was generated to support the propertyChange field.
 */
public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().addPropertyChangeListener(listener);
}


/**
 * Comment
 */
private void apply_ExceptionOccurred(java.lang.Throwable e) throws javax.swing.text.BadLocationException {
	JOptionPane.showMessageDialog(this, e.getMessage(), "Error While Saving", JOptionPane.ERROR_MESSAGE);
	if (e instanceof MathFormatException){
		int lineNumber = ((MathFormatException)e).getLineNumber();
		if (lineNumber>=0){
			int lineStartOffset = getlineNumberedTextArea1().getLineStartOffset(Math.max(0,lineNumber-1));
			int lineEndOffset = getlineNumberedTextArea1().getLineEndOffset(lineNumber);
			getlineNumberedTextArea1().setCaretPosition(lineStartOffset);
			getlineNumberedTextArea1().select(lineStartOffset,lineEndOffset);
		}
	}
}


/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void changedUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * connEtoC1:  ( (SaveButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,read(Lcbit.vcell.math.CommentStringTokenizer;)V).exceptionOccurred --> MathDescEditor.save_ExceptionOccurred(Ljava.lang.Throwable;)V)
 * @param exception java.lang.Throwable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.lang.Throwable exception) {
	try {
		// user code begin {1}
		// user code end
		this.apply_ExceptionOccurred(exception);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoC2:  (CreateConstrSolnButton.action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor.createConstructedSolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;)
 * @return java.lang.String
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.lang.String connEtoC2(java.awt.event.ActionEvent arg1) {
	String connEtoC2Result = null;
	try {
		// user code begin {1}
		// user code end
		connEtoC2Result = this.createConstructedSolution(arg1);
		connEtoM17(connEtoC2Result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
	return connEtoC2Result;
}

/**
 * connEtoC3:  (SensitivitySolnButton.action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor.createSensitivitySolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;)
 * @return java.lang.String
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.lang.String connEtoC3(java.awt.event.ActionEvent arg1) {
	String connEtoC3Result = null;
	try {
		// user code begin {1}
		// user code end
		connEtoC3Result = this.createSensitivitySolution(arg1);
		connEtoM22(connEtoC3Result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
	return connEtoC3Result;
}

/**
 * connEtoM1:  (ApplyButton.action.actionPerformed(java.awt.event.ActionEvent) --> tempMathDescription.this)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			setMathDescription(cbit.vcell.math.MathDescription.fromEditor(getMathDescription(), getlineNumberedTextArea1().getText()));
		}
		connEtoM5();
		connEtoM4();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		connEtoC1(ivjExc);
	}
}

/**
 * connEtoM10:  (MathDescEditor.testFrameworkEnabled --> CreateConstrSolnButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM10(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setVisible(this.getConstructedSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM11:  (MathDescEditor.initialize() --> CreateConstrSolnButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM11() {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setVisible(this.getConstructedSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM12:  (MathDescription.this --> CreateConstrSolnButton.enabled)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM12(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		getCreateConstrSolnButton().setEnabled((getMathDescription() != null));
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM13:  (FlattenButton.action.actionPerformed(java.awt.event.ActionEvent) --> textArea1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM13(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(this.flattenMath());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM14:  (MathDescription.this --> SensitivitySolnButton.enabled)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM14(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setEnabled((getMathDescription() != null));
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM15:  (MathDescEditor.approxSensSolnButtonVisibility --> SensitivitySolnButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM15(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setVisible(this.getApproxSensSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM16:  (MathDescEditor.initialize() --> SensitivitySolnButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM16() {
	try {
		// user code begin {1}
		// user code end
		getSensitivitySolnButton().setVisible(this.getApproxSensSolnButtonVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM17:  ( (CreateConstrSolnButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor,createConstructedSolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;).normalResult --> textArea1.text)
 * @param result java.lang.String
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM17(java.lang.String result) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM18:  (MathDescEditor.makeCanonicalVisibility --> ExpandFunctionButton.visible)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM18(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getExpandFunctionButton().setVisible(this.getMakeCanonicalVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM19:  (MathDescEditor.initialize() --> ExpandFunctionButton.visible)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM19() {
	try {
		// user code begin {1}
		// user code end
		getExpandFunctionButton().setVisible(this.getMakeCanonicalVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM2:  (ExpandFunctionButton.action.actionPerformed(java.awt.event.ActionEvent) --> textArea1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(this.makeCanonical());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM20:  (MathDescEditor.initialize() --> FlattenButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM20() {
	try {
		// user code begin {1}
		// user code end
		getFlattenButton().setEnabled(this.getFlattenVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM21:  (MathDescEditor.flattenVisibility --> FlattenButton.enabled)
 * @param arg1 java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM21(java.beans.PropertyChangeEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getFlattenButton().setEnabled(this.getFlattenVisibility());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM22:  ( (SensitivitySolnButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescEditor,createSensitivitySolution(Ljava.awt.event.ActionEvent;)Ljava.lang.String;).normalResult --> textArea1.text)
 * @param result java.lang.String
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM22(java.lang.String result) {
	try {
		// user code begin {1}
		// user code end
		gettextArea1().setText(result);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM24:  (CancelButton.action.actionPerformed(java.awt.event.ActionEvent) --> lineNumberedTextPanel1.text)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM24(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			getlineNumberedTextArea1().setText(getMathDescription().getVCML_database());
		}
		connEtoM25();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM25:  ( (CancelButton,action.actionPerformed(java.awt.event.ActionEvent) --> lineNumberedTextPanel1,text).normalResult --> lineNumberedTextPanel1.caretPosition)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM25() {
	try {
		// user code begin {1}
		// user code end
		getlineNumberedTextArea1().setCaretPosition(0);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM3:  (MathDescription.this --> lineNumberedTextPanel1.text)
 * @param value cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3(cbit.vcell.math.MathDescription value) {
	try {
		// user code begin {1}
		// user code end
		if ((getMathDescription() != null)) {
			getlineNumberedTextArea1().setText(getMathDescription().getVCML_database());
		}
		connEtoM7();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM4:  ( (ApplyButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,this).normalResult --> ApplyButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM4() {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM5:  ( (ApplyButton,action.actionPerformed(java.awt.event.ActionEvent) --> MathDescription,this).normalResult --> CancelButton.enabled)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5() {
	try {
		// user code begin {1}
		// user code end
		getCancelButton().setEnabled(false);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM6:  (textArea1.key.keyPressed(java.awt.event.KeyEvent) --> ApplyButton.enabled)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM6(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM7:  ( (CancelButton,action.actionPerformed(java.awt.event.ActionEvent) --> TextArea1,text).normalResult --> TextArea1.caretPosition)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM7() {
	try {
		// user code begin {1}
		// user code end
		getlineNumberedTextArea1().setCaretPosition(0);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM8:  (textArea1.key.keyPressed(java.awt.event.KeyEvent) --> CancelButton.enabled)
 * @param arg1 java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM8(java.awt.event.KeyEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		getCancelButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM9:  (document1.document.changedUpdate(javax.swing.event.DocumentEvent) --> ApplyButton.enabled)
 * @param evt javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM9(javax.swing.event.DocumentEvent evt) {
	try {
		// user code begin {1}
		// user code end
		getApplyButton().setEnabled(true);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP1SetTarget:  (lineNumberedTextArea1.textArea <--> textArea1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP1Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP1Aligning = true;
			settextArea1(getlineNumberedTextArea1().getTextArea());
			// user code begin {2}
			// user code end
			ivjConnPtoP1Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP1Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP2SetSource:  (lineNumberedTextPanel1.document <--> document1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP2Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP2Aligning = true;
			if ((getdocument1() != null)) {
				getlineNumberedTextArea1().setDocument(getdocument1());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connPtoP2SetTarget:  (lineNumberedTextPanel1.document <--> document1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP2SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP2Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP2Aligning = true;
			setdocument1(getlineNumberedTextArea1().getDocument());
			// user code begin {2}
			// user code end
			ivjConnPtoP2Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP2Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * Comment
 */
private String createConstructedSolution(java.awt.event.ActionEvent actionEvent) {
	String text = null;
	MathDescription newMath = null;
	try {
		cbit.vcell.numericstest.ConstructedSolutionTemplate constructedSolutionTemplate = new cbit.vcell.numericstest.ConstructedSolutionTemplate(getMathDescription());
		getsolutionTemplatePanel1().setConstructedSolutionTemplate(constructedSolutionTemplate);
		int option = javax.swing.JOptionPane.showConfirmDialog(this, getsolutionTemplatePanel1(), "Edit Solution Templates:", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.PLAIN_MESSAGE);
		if (option != JOptionPane.OK_OPTION) {
			return getMathDescription().getVCML_database();
		}
		newMath = cbit.vcell.solver.test.MathTestingUtilities.constructExactMath(getMathDescription(),new Random(),constructedSolutionTemplate);
		text = newMath.getVCML_database();
	} catch (Throwable e) {
		e.printStackTrace(System.out);
		return "error : "+e.getMessage();
	}
	return text;
}


/**
 * Comment
 */
private String createSensitivitySolution(java.awt.event.ActionEvent actionEvent) {
	//
	// Get the list of constants in the mathDescription
	//
	Vector constsVector = new Vector();
	Enumeration enumVars = getMathDescription().getVariables();
	while (enumVars.hasMoreElements()) {
		Variable var = (Variable)enumVars.nextElement();
		if (var instanceof Constant){
			constsVector.addElement(var);
		}
	}
	Constant constantsList[] = (Constant[])org.vcell.util.BeanUtils.getArray(constsVector, Constant.class);

	//
	// Get the names of the constants in the mathDesc to display in the list box
	//	
	String constantNamesList[] = new String[constantsList.length];
	for (int i = 0; i < constantsList.length; i++){
		constantNamesList[i] = constantsList[i].getName();
	}

	String mathDescText = null;
	try {
		mathDescText = getMathDescription().getVCML_database();
	} catch (MathException e) {
		e.printStackTrace(System.out);
	}
	// To select sensitivity parameter, popup list box containing the names of constants 
	javax.swing.JList list = new javax.swing.JList(constantNamesList);
	list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
	list.setSelectedIndex(0);
	javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(list);
	int selection = javax.swing.JOptionPane.showConfirmDialog(this,scrollPane,"Select Sensitivity Parameter :",javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.PLAIN_MESSAGE);
	if (selection != javax.swing.JOptionPane.OK_OPTION){
		return mathDescText;
	}
	if (list.getSelectedIndex() < 0) {
		return mathDescText;
	}

	//
	// From the selected name in the list, get the index of corresponding constant from the Constants list. That is the sensitivity parameter.
	//
	String newSensParamName = (String)list.getSelectedValue().toString();
	int newSensParamIndex = -1;
	for (int i=0;i<constantNamesList.length;i++){
		if (constantNamesList[i].equals(newSensParamName)){
			newSensParamIndex = i;
		}
	}
	if (newSensParamIndex==-1){
		throw new RuntimeException("No such Constant/Parameter Exists "+newSensParamName);
	}
	Constant sensParameter = constantsList[newSensParamIndex];

	//
	// Using the selected sensitivity parameter and the current MathDesc, create the math description for sensitivity analysis of that parameter.
	// Return the mathDesc as text to be displayed in the text area of MathDescEditor.
	//

	try {
		MathDescription sensMathDesc = cbit.vcell.solver.test.MathTestingUtilities.constructOdesForSensitivity(getMathDescription(),sensParameter);
		mathDescText = sensMathDesc.getVCML_database();
	} catch (Exception e) {
		e.printStackTrace(System.out);
		throw new RuntimeException(e.getMessage());
	}
	
	return mathDescText;
}


/**
 * The firePropertyChange method was generated to support the propertyChange field.
 */
public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
	getPropertyChange().firePropertyChange(propertyName, oldValue, newValue);
}


/**
 * Comment
 */
public java.lang.String flattenMath() throws Exception {
	if (getMathDescription()==null){
		throw new RuntimeException("math is null");
	}
	MathDescription newMath = MathDescription.createCanonicalMathDescription(getMathDescription());
	return newMath.getVCML_database();
}


/**
 * Return the ApplyButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getApplyButton() {
	if (ivjApplyButton == null) {
		try {
			ivjApplyButton = new javax.swing.JButton();
			ivjApplyButton.setName("ApplyButton");
			ivjApplyButton.setText("Apply Changes");
			ivjApplyButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjApplyButton;
}

/**
 * Gets the approxSensSolnButtonVisibility property (boolean) value.
 * @return The approxSensSolnButtonVisibility property value.
 * @see #setApproxSensSolnButtonVisibility
 */
public boolean getApproxSensSolnButtonVisibility() {
	return fieldApproxSensSolnButtonVisibility;
}


/**
 * Return the CancelButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCancelButton() {
	if (ivjCancelButton == null) {
		try {
			ivjCancelButton = new javax.swing.JButton();
			ivjCancelButton.setName("CancelButton");
			ivjCancelButton.setText("Cancel");
			ivjCancelButton.setEnabled(false);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCancelButton;
}

/**
 * Gets the constructedSolnButtonVisibility property (boolean) value.
 * @return The constructedSolnButtonVisibility property value.
 * @see #setConstructedSolnButtonVisibility
 */
public boolean getConstructedSolnButtonVisibility() {
	return fieldConstructedSolnButtonVisibility;
}


/**
 * Return the CreateConstrSolnButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCreateConstrSolnButton() {
	if (ivjCreateConstrSolnButton == null) {
		try {
			ivjCreateConstrSolnButton = new javax.swing.JButton();
			ivjCreateConstrSolnButton.setName("CreateConstrSolnButton");
			ivjCreateConstrSolnButton.setText("Create Constructed Solution");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCreateConstrSolnButton;
}


/**
 * Return the document1 property value.
 * @return javax.swing.text.Document
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.text.Document getdocument1() {
	// user code begin {1}
	// user code end
	return ivjdocument1;
}


/**
 * Return the ExpandFunctionButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getExpandFunctionButton() {
	if (ivjExpandFunctionButton == null) {
		try {
			ivjExpandFunctionButton = new javax.swing.JButton();
			ivjExpandFunctionButton.setName("ExpandFunctionButton");
			ivjExpandFunctionButton.setText("Expand Functions");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExpandFunctionButton;
}


/**
 * Return the FlattenButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getFlattenButton() {
	if (ivjFlattenButton == null) {
		try {
			ivjFlattenButton = new javax.swing.JButton();
			ivjFlattenButton.setName("FlattenButton");
			ivjFlattenButton.setText("Flatten");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFlattenButton;
}


/**
 * Gets the flattenVisibility property (boolean) value.
 * @return The flattenVisibility property value.
 * @see #setFlattenVisibility
 */
public boolean getFlattenVisibility() {
	return fieldFlattenVisibility;
}


/**
 * Return the lineNumberedTextPanel1 property value.
 * @return cbit.gui.LineNumberedTextPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private org.vcell.util.gui.LineNumberedTextPanel getlineNumberedTextArea1() {
	if (ivjlineNumberedTextArea1 == null) {
		try {
			ivjlineNumberedTextArea1 = new org.vcell.util.gui.LineNumberedTextPanel();
			ivjlineNumberedTextArea1.setName("lineNumberedTextArea1");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjlineNumberedTextArea1;
}

/**
 * Gets the makeCanonicalVisibility property (boolean) value.
 * @return The makeCanonicalVisibility property value.
 * @see #setMakeCanonicalVisibility
 */
public boolean getMakeCanonicalVisibility() {
	return fieldMakeCanonicalVisibility;
}


/**
 * Return the MathDescription property value.
 * @return cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public cbit.vcell.math.MathDescription getMathDescription() {
	// user code begin {1}
	// user code end
	return ivjMathDescription;
}

/**
 * Accessor for the propertyChange field.
 */
protected java.beans.PropertyChangeSupport getPropertyChange() {
	if (propertyChange == null) {
		propertyChange = new java.beans.PropertyChangeSupport(this);
	};
	return propertyChange;
}


/**
 * Return the SensitivitySolnButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getSensitivitySolnButton() {
	if (ivjSensitivitySolnButton == null) {
		try {
			ivjSensitivitySolnButton = new javax.swing.JButton();
			ivjSensitivitySolnButton.setName("SensitivitySolnButton");
			ivjSensitivitySolnButton.setText("Create Approx. Sensitivity Solution");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjSensitivitySolnButton;
}


/**
 * Return the solutionTemplatePanel1 property value.
 * @return cbit.vcell.numericstest.gui.SolutionTemplatePanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.numericstest.gui.SolutionTemplatePanel getsolutionTemplatePanel1() {
	if (ivjsolutionTemplatePanel1 == null) {
		try {
			ivjsolutionTemplatePanel1 = new cbit.vcell.numericstest.gui.SolutionTemplatePanel();
			ivjsolutionTemplatePanel1.setName("solutionTemplatePanel1");
			ivjsolutionTemplatePanel1.setLocation(71, 607);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjsolutionTemplatePanel1;
}

/**
 * Return the textArea1 property value.
 * @return javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JTextArea gettextArea1() {
	// user code begin {1}
	// user code end
	return ivjtextArea1;
}


/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}

/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getApplyButton().addActionListener(this);
	getCreateConstrSolnButton().addActionListener(this);
	this.addPropertyChangeListener(this);
	getSensitivitySolnButton().addActionListener(this);
	getCancelButton().addActionListener(this);
	getlineNumberedTextArea1().addPropertyChangeListener(this);
	getExpandFunctionButton().addActionListener(this);
	getFlattenButton().addActionListener(this);
	connPtoP2SetTarget();
	connPtoP1SetTarget();
}

/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("MathDescEditor");
		setLayout(new java.awt.GridBagLayout());
		setSize(981, 242);

		java.awt.GridBagConstraints constraintsApplyButton = new java.awt.GridBagConstraints();
		constraintsApplyButton.gridx = 0; constraintsApplyButton.gridy = 1;
		constraintsApplyButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getApplyButton(), constraintsApplyButton);

		java.awt.GridBagConstraints constraintsCancelButton = new java.awt.GridBagConstraints();
		constraintsCancelButton.gridx = 1; constraintsCancelButton.gridy = 1;
		constraintsCancelButton.anchor = java.awt.GridBagConstraints.WEST;
		constraintsCancelButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getCancelButton(), constraintsCancelButton);

		java.awt.GridBagConstraints constraintsCreateConstrSolnButton = new java.awt.GridBagConstraints();
		constraintsCreateConstrSolnButton.gridx = 2; constraintsCreateConstrSolnButton.gridy = 1;
		constraintsCreateConstrSolnButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getCreateConstrSolnButton(), constraintsCreateConstrSolnButton);

		java.awt.GridBagConstraints constraintsSensitivitySolnButton = new java.awt.GridBagConstraints();
		constraintsSensitivitySolnButton.gridx = 3; constraintsSensitivitySolnButton.gridy = 1;
		constraintsSensitivitySolnButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getSensitivitySolnButton(), constraintsSensitivitySolnButton);

		java.awt.GridBagConstraints constraintsExpandFunctionButton = new java.awt.GridBagConstraints();
		constraintsExpandFunctionButton.gridx = 4; constraintsExpandFunctionButton.gridy = 1;
		constraintsExpandFunctionButton.insets = new java.awt.Insets(0, 9, 9, 0);
		add(getExpandFunctionButton(), constraintsExpandFunctionButton);

		java.awt.GridBagConstraints constraintsFlattenButton = new java.awt.GridBagConstraints();
		constraintsFlattenButton.gridx = 5; constraintsFlattenButton.gridy = 1;
		constraintsFlattenButton.insets = new java.awt.Insets(0, 9, 9, 9);
		add(getFlattenButton(), constraintsFlattenButton);

		java.awt.GridBagConstraints constraintslineNumberedTextArea1 = new java.awt.GridBagConstraints();
		constraintslineNumberedTextArea1.gridx = 0; constraintslineNumberedTextArea1.gridy = 0;
		constraintslineNumberedTextArea1.gridwidth = 6;
		constraintslineNumberedTextArea1.fill = java.awt.GridBagConstraints.BOTH;
		constraintslineNumberedTextArea1.weightx = 1.0;
		constraintslineNumberedTextArea1.weighty = 1.0;
		constraintslineNumberedTextArea1.insets = new java.awt.Insets(4, 4, 4, 4);
		add(getlineNumberedTextArea1(), constraintslineNumberedTextArea1);
		initConnections();
		connEtoM11();
		connEtoM16();
		connEtoM19();
		connEtoM20();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void insertUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyPressed(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	if (e.getSource() == gettextArea1()) 
		connEtoM6(e);
	if (e.getSource() == gettextArea1()) 
		connEtoM8(e);
	// user code begin {2}
	// user code end
}

/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyReleased(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Method to handle events for the KeyListener interface.
 * @param e java.awt.event.KeyEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void keyTyped(java.awt.event.KeyEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		MathDescEditor aMathDescEditor;
		aMathDescEditor = new MathDescEditor();
		frame.setContentPane(aMathDescEditor);
		frame.setSize(aMathDescEditor.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Comment
 */
public String makeCanonical() throws Exception {
	if (getMathDescription()==null){
		throw new RuntimeException("mathDescription is null");
	}
	MathDescription newMath = new MathDescription(getMathDescription());
	String answer = cbit.vcell.client.PopupGenerator.showInputDialog(this,"enter any function to expand separated by spaces","");
	HashSet varsToKeep = newMath.getStateVariableNames();
	if (answer!=null && answer.length()>0){
		StringTokenizer st = new StringTokenizer(answer);
		while (st.hasMoreTokens()){
			String token = st.nextToken();
			System.out.println("adding function '"+token+"'");
			varsToKeep.add(token);
		}
	}
	newMath = newMath.createMathWithExpandedEquations(newMath,varsToKeep);
	return newMath.getVCML_database();
}


/**
 * Method to handle events for the PropertyChangeListener interface.
 * @param evt java.beans.PropertyChangeEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void propertyChange(java.beans.PropertyChangeEvent evt) {
	// user code begin {1}
	// user code end
	if (evt.getSource() == this && (evt.getPropertyName().equals("constructedSolnButtonVisibility"))) 
		connEtoM10(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("approxSensSolnButtonVisibility"))) 
		connEtoM15(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("makeCanonicalVisibility"))) 
		connEtoM18(evt);
	if (evt.getSource() == this && (evt.getPropertyName().equals("flattenVisibility"))) 
		connEtoM21(evt);
	if (evt.getSource() == getlineNumberedTextArea1() && (evt.getPropertyName().equals("document"))) 
		connPtoP2SetTarget();
	if (evt.getSource() == getlineNumberedTextArea1() && (evt.getPropertyName().equals("textArea"))) 
		connPtoP1SetTarget();
	// user code begin {2}
	// user code end
}

/**
 * The removePropertyChangeListener method was generated to support the propertyChange field.
 */
public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
	getPropertyChange().removePropertyChangeListener(listener);
}


/**
 * Method to handle events for the DocumentListener interface.
 * @param e javax.swing.event.DocumentEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void removeUpdate(javax.swing.event.DocumentEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}


/**
 * Sets the approxSensSolnButtonVisibility property (boolean) value.
 * @param approxSensSolnButtonVisibility The new value for the property.
 * @see #getApproxSensSolnButtonVisibility
 */
public void setApproxSensSolnButtonVisibility(boolean approxSensSolnButtonVisibility) {
	boolean oldValue = fieldApproxSensSolnButtonVisibility;
	fieldApproxSensSolnButtonVisibility = approxSensSolnButtonVisibility;
	firePropertyChange("approxSensSolnButtonVisibility", new Boolean(oldValue), new Boolean(approxSensSolnButtonVisibility));
}


/**
 * Sets the constructedSolnButtonVisibility property (boolean) value.
 * @param constructedSolnButtonVisibility The new value for the property.
 * @see #getConstructedSolnButtonVisibility
 */
public void setConstructedSolnButtonVisibility(boolean constructedSolnButtonVisibility) {
	boolean oldValue = fieldConstructedSolnButtonVisibility;
	fieldConstructedSolnButtonVisibility = constructedSolnButtonVisibility;
	firePropertyChange("constructedSolnButtonVisibility", new Boolean(oldValue), new Boolean(constructedSolnButtonVisibility));
}


/**
 * Set the document1 to a new value.
 * @param newValue javax.swing.text.Document
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setdocument1(javax.swing.text.Document newValue) {
	if (ivjdocument1 != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjdocument1 != null) {
				ivjdocument1.removeDocumentListener(this);
			}
			ivjdocument1 = newValue;

			/* Listen for events from the new object */
			if (ivjdocument1 != null) {
				ivjdocument1.addDocumentListener(this);
			}
			connPtoP2SetSource();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Sets the flattenVisibility property (boolean) value.
 * @param flattenVisibility The new value for the property.
 * @see #getFlattenVisibility
 */
public void setFlattenVisibility(boolean flattenVisibility) {
	boolean oldValue = fieldFlattenVisibility;
	fieldFlattenVisibility = flattenVisibility;
	firePropertyChange("flattenVisibility", new Boolean(oldValue), new Boolean(flattenVisibility));
}


/**
 * Sets the makeCanonicalVisibility property (boolean) value.
 * @param makeCanonicalVisibility The new value for the property.
 * @see #getMakeCanonicalVisibility
 */
public void setMakeCanonicalVisibility(boolean makeCanonicalVisibility) {
	boolean oldValue = fieldMakeCanonicalVisibility;
	fieldMakeCanonicalVisibility = makeCanonicalVisibility;
	firePropertyChange("makeCanonicalVisibility", new Boolean(oldValue), new Boolean(makeCanonicalVisibility));
}


/**
 * Set the MathDescription to a new value.
 * @param newValue cbit.vcell.math.MathDescription
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setMathDescription(cbit.vcell.math.MathDescription newValue) {
	if (ivjMathDescription != newValue) {
		try {
			cbit.vcell.math.MathDescription oldValue = getMathDescription();
			ivjMathDescription = newValue;
			connEtoM12(ivjMathDescription);
			connEtoM14(ivjMathDescription);
			connEtoM3(ivjMathDescription);
			firePropertyChange("mathDescription", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}

/**
 * Set the textArea1 to a new value.
 * @param newValue javax.swing.JTextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void settextArea1(javax.swing.JTextArea newValue) {
	if (ivjtextArea1 != newValue) {
		try {
			/* Stop listening for events from the current object */
			if (ivjtextArea1 != null) {
				ivjtextArea1.removeKeyListener(this);
			}
			ivjtextArea1 = newValue;

			/* Listen for events from the new object */
			if (ivjtextArea1 != null) {
				ivjtextArea1.addKeyListener(this);
			}
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}
}