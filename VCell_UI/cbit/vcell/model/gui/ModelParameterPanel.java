package cbit.vcell.model.gui;

import cbit.gui.ScopedExpressionTableCellRenderer;

/**
 * Insert the type's description here.
 * Creation date: (9/23/2003 12:23:30 PM)
 * @author: Jim Schaff
 */
public class ModelParameterPanel extends javax.swing.JPanel {
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private javax.swing.JScrollPane ivjJScrollPane1 = null;
	private ModelParameterTableModel ivjmodelParameterTableModel = null;
	private cbit.vcell.messaging.admin.sorttable.JSortTable ivjScrollPaneTable = null;
	private cbit.vcell.model.Model fieldModel = null;

class IvjEventHandler implements java.beans.PropertyChangeListener {
		public void propertyChange(java.beans.PropertyChangeEvent evt) {
			if (evt.getSource() == ModelParameterPanel.this && (evt.getPropertyName().equals("model"))) 
				connPtoP3SetTarget();
		};
	};
	private boolean ivjConnPtoP3Aligning = false;
	private cbit.vcell.model.Model ivjmodel1 = null;

/**
 * ModelParameterPanel constructor comment.
 */
public ModelParameterPanel() {
	super();
	initialize();
}

/**
 * ModelParameterPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public ModelParameterPanel(java.awt.LayoutManager layout) {
	super(layout);
}


/**
 * ModelParameterPanel constructor comment.
 * @param layout java.awt.LayoutManager
 * @param isDoubleBuffered boolean
 */
public ModelParameterPanel(java.awt.LayoutManager layout, boolean isDoubleBuffered) {
	super(layout, isDoubleBuffered);
}


/**
 * ModelParameterPanel constructor comment.
 * @param isDoubleBuffered boolean
 */
public ModelParameterPanel(boolean isDoubleBuffered) {
	super(isDoubleBuffered);
}


/**
 * connEtoM3:  (ModelParameterPanel.initialize() --> ScrollPaneTable.setDefaultRenderer(Ljava.lang.Class;Ljavax.swing.table.TableCellRenderer;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM3() {
	try {
		// user code begin {1}
		// user code end
		getScrollPaneTable().setDefaultRenderer(String.class, new ScopedExpressionTableCellRenderer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM4:  (ModelParameterPanel.initialize() --> ScrollPaneTable.setDefaultRenderer(Ljava.lang.Class;Ljavax.swing.table.TableCellRenderer;)V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM4() {
	try {
		// user code begin {1}
		// user code end
		getScrollPaneTable().setDefaultRenderer(cbit.vcell.parser.ScopedExpression.class, new ScopedExpressionTableCellRenderer());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}

/**
 * connEtoM5:  (model1.this --> modelParameterTableModel.model)
 * @param value cbit.vcell.model.Model
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM5(cbit.vcell.model.Model value) {
	try {
		// user code begin {1}
		// user code end
		getmodelParameterTableModel().setModel(getmodel1());
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connEtoM6:  (ModelParameterPanel.initialize() --> modelParameterTableModel.model)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM6() {
	try {
		// user code begin {1}
		// user code end
		if ((getmodel1() != null)) {
			getmodelParameterTableModel().setModel(getmodel1());
		}
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP1SetTarget:  (modelParameterTableModel.this <--> ScrollPaneTable.model)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP1SetTarget() {
	/* Set the target from the source */
	try {
		getScrollPaneTable().setModel(getmodelParameterTableModel());
		getScrollPaneTable().createDefaultColumnsFromModel();
		// user code begin {1}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP3SetSource:  (ModelParameterPanel.model <--> model1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetSource() {
	/* Set the source from the target */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			if ((getmodel1() != null)) {
				this.setModel(getmodel1());
			}
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * connPtoP3SetTarget:  (ModelParameterPanel.model <--> model1.this)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connPtoP3SetTarget() {
	/* Set the target from the source */
	try {
		if (ivjConnPtoP3Aligning == false) {
			// user code begin {1}
			// user code end
			ivjConnPtoP3Aligning = true;
			setmodel1(this.getModel());
			// user code begin {2}
			// user code end
			ivjConnPtoP3Aligning = false;
		}
	} catch (java.lang.Throwable ivjExc) {
		ivjConnPtoP3Aligning = false;
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}


/**
 * Return the JScrollPane1 property value.
 * @return javax.swing.JScrollPane
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JScrollPane getJScrollPane1() {
	if (ivjJScrollPane1 == null) {
		try {
			ivjJScrollPane1 = new javax.swing.JScrollPane();
			ivjJScrollPane1.setName("JScrollPane1");
			ivjJScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			ivjJScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
			getJScrollPane1().setViewportView(getScrollPaneTable());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJScrollPane1;
}


/**
 * Gets the model property (cbit.vcell.model.Model) value.
 * @return The model property value.
 * @see #setModel
 */
public cbit.vcell.model.Model getModel() {
	return fieldModel;
}


/**
 * Return the model1 property value.
 * @return cbit.vcell.model.Model
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.model.Model getmodel1() {
	// user code begin {1}
	// user code end
	return ivjmodel1;
}


/**
 * Return the modelParameterTableModel property value.
 * @return cbit.vcell.model.gui.ModelParameterTableModel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private ModelParameterTableModel getmodelParameterTableModel() {
	if (ivjmodelParameterTableModel == null) {
		try {
			ivjmodelParameterTableModel = new cbit.vcell.model.gui.ModelParameterTableModel();
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjmodelParameterTableModel;
}


/**
 * Return the ScrollPaneTable property value.
 * @return cbit.vcell.messaging.admin.sorttable.JSortTable
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private cbit.vcell.messaging.admin.sorttable.JSortTable getScrollPaneTable() {
	if (ivjScrollPaneTable == null) {
		try {
			ivjScrollPaneTable = new cbit.vcell.messaging.admin.sorttable.JSortTable();
			ivjScrollPaneTable.setName("ScrollPaneTable");
			getJScrollPane1().setColumnHeaderView(ivjScrollPaneTable.getTableHeader());
			getJScrollPane1().getViewport().setBackingStoreEnabled(true);
			ivjScrollPaneTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
			ivjScrollPaneTable.setBounds(0, 0, 200, 200);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjScrollPaneTable;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}


/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	this.addPropertyChangeListener(ivjEventHandler);
	connPtoP1SetTarget();
	connPtoP3SetTarget();
}

/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("ModelParameterPanel");
		setLayout(new java.awt.BorderLayout());
		setSize(655, 226);
		add(getJScrollPane1(), "Center");
		initConnections();
		connEtoM3();
		connEtoM4();
		connEtoM6();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}

/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		javax.swing.JFrame frame = new javax.swing.JFrame();
		ModelParameterPanel aModelParameterPanel;
		aModelParameterPanel = new ModelParameterPanel();
		frame.setContentPane(aModelParameterPanel);
		frame.setSize(aModelParameterPanel.getSize());
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		frame.show();
		java.awt.Insets insets = frame.getInsets();
		frame.setSize(frame.getWidth() + insets.left + insets.right, frame.getHeight() + insets.top + insets.bottom);
		frame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JPanel");
		exception.printStackTrace(System.out);
	}
}


/**
 * Sets the model property (cbit.vcell.model.Model) value.
 * @param model The new value for the property.
 * @see #getModel
 */
public void setModel(cbit.vcell.model.Model model) {
	cbit.vcell.model.Model oldValue = fieldModel;
	fieldModel = model;
	firePropertyChange("model", oldValue, model);
}


/**
 * Set the model1 to a new value.
 * @param newValue cbit.vcell.model.Model
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void setmodel1(cbit.vcell.model.Model newValue) {
	if (ivjmodel1 != newValue) {
		try {
			cbit.vcell.model.Model oldValue = getmodel1();
			ivjmodel1 = newValue;
			connPtoP3SetSource();
			connEtoM5(ivjmodel1);
			firePropertyChange("model", oldValue, newValue);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	// user code begin {3}
	// user code end
}


/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G740171B4GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E13DBA8DF4D357F98E81C20988868C98F040A104F88D493C4DBDE1BDAC47ED492957500EE63043D91C4C6DF1B252320C2E6ED9C65959158C58417CA5F8095338013434B18975ECFE924FA1E0DB16AD01EC4B16D0CC4B0A1F25072DA06B0927A77CEF6F3B773ECFFA161F2C6005691C6FBC5D6F5E6FFEBF777B3E7B5D7B9EA9BD163E57E8AAA5443817283F0F0D04B41EA3245DFA63926212836E9222793D87
	70BA79D9F08FBC53212F08359F3BF0G1E07G56830EBE77C86E12A364DB974AD4FC2E0AC7B01A8849E3E3DE38D02E622C506E82C883481478789CF83E46B84F2A2DD147DDDB10C18A3EA31B8E52F9B4F3A2D484B92DDDFD9EA73B0C85C14A2B68628115E6A634B7GD0658B4976F31570BC6F3859F341536DD3AAEFFBC43F3F32CF720A7E4A1E302F3636057EF5883250A7AA226C9082221F1060ADBAE75B45E2B687A1B5505E4DF06F59A81FAC783F89A0BF02AF38CC71F5323B2493A0A823EE1F3EFFDE153DF3
	78C9125F7374EB076368B6C766BAE54AD15DD2CFF6973E4D56611CCC6D3D837A0E045CA5A7G2CG3DGF3G5E013E23647C2D8F60D95F2D18253EBEA9D09F8CB6783DB2D3907E5756C20F0A6B90BD126CA5042F71410B27F464198AB85DBBF7CC47ED12F18657FBDD4793A477AF16180AF4EC121BB1ECCA8FF1DB2C8FC5ED42F93B62725E961A680F93F9FFC6343C494B270B766A70AE7F3B53C5BB54F9089265DD235035DE4CFC60B87CB72A3660780798FEC403673E79BE4353F68A743D2A20EFF49EC2D96CFB
	D613A355CBF56D107ACD0369DA184B2004E3E59930533953431C676108ACF398BEC70367326CE2FECA5BBB214FFF5BDD427D6B02C2E3F5BB3477743BCB4A814E8238G02GB37B5147E65D7A2FAF68E390D3CAC35867770AB261349764B761A98EA832E08B0494A160915D026C933A7DE20828E31AE5EA036E89F4F6667B9E6051AC86C4D9D0FCD2A09231A1BE660A7CBA9DA30B2C57656B9301C1DF10603C7FA39F0527DF88A9D702DEC19123A3F83FA853B539AD38E1C618G7EF33B5C8CD3FB2D817DB7GEC0A
	58A10F4DF7D914A1DF54565AA569E6B868221A107281EA671BACF7644178D77B5146BD37A92E8B7A8786F01E37C2EFE866E974F9287802BC08B13602790E81462F8358BC003E73CAA77ACE63414749292D0BF5FDA7997CB8FF007B4C6E015898FA144DCD65BBB168AEE99C441C7FBBDB679D46B50B270109F1E708E9EFD65B1CC75334F86C0DE99746340B54A7377756FE2A1F9774CA82C89FC41BF7040EF39FEE90C2A2FAED1B8C8EA7FA23AB40659C33533820B6271B65C1B5F6DEE77390721F91FD9EE0635683
	0FBC0062A1F7C995C0A7C092C046905A9636AE9D3D261A7FCEED94BFDF9F5365DD285A35C8C70EAF03B73739D521730937450052A8864500977E04543EB60572D573428DA9C2F305610310C74C903821887E8F8A350F20A8322FBB2C08CED1D1FC011EE83F07718A053B035194043CBED7282ED2BF641148F8C921B16811828111ADFE04C46D3F45F20068977BC0E833948EA89C5F9F263552CDF1D04DC14361FD046690FF1866B3DEFFE48A541EC1595787AEC5D3A2B9BECC73430C0BE59A9BED867F20F5D481BC
	0B07B1467BFF0DB1FEE268CFC8767520C9EF2FCAFDE43E29F718475648F0B44639CC7E5B7A324BAC9729789017F5391F7A1CDEC1D448E81EF1D3197BA674331C47C87818E73B766118EA0C43C303D406B410AD93A0E7986370155B349FF31F9A00E6496F674BC0759821365AE1AB55681BB74CEDC57FE7307E32CB585F8B6D2411E8BF6773DC7F916A8F622D3088DB8E9578F2E44DFE587FC6CC1FDBDDBF5E7F23FE3AFEFECDFEF70CD21ECF5B31365DB94273E7B1604BG4E833C8B781AB1BAAE258547250D723D
	A0CB9D378960840C61634EBBF05C4C31496352G4779BE5F0163B247381EB9E3BCF7670EE9792EF362389D1AFEAA671EF1EE9BBE2E5F05634A4679FCD5639347A963F41C79CA24169F67B92DEBBCBAEFA5C1FF7F69C96AA32C5E7EDC38AD8CD4067AA1B6EBEBAFB1C762F5758E36B752715963D8BF171959DEC4F9A539CBAA12B0863EFF906B67141B99A477656A22F8E7033AA4AE2FB7A99A83641F6B77F19F6C9C22BC57C0DFD6927A1FB8205D436BC3A14963E365033A7625035A986138378777437306CF8EA9
	B6C8E28368A74786293C343ED0512ABDFE796699F287670FE8B829756AE813D67F8D07C7CDA5F1744FD1755E2E51BF5B6FAA62F55FA31771FCD4F18F2C5DBDF8BE7AA731BC1EFC2AECDC8E4F9914A3F968915235F8F9DCB9D26FD1EB76FB22F21C9AFBF5AF176395D61752DC31937AABE638CBF85E3852C2F329526B8B717CB837C91B9F3BE05C9A009C005C884DE84BDE4CB5846B7BFF292FD3E9B6BD311A2CAFB218744EDB3D0F261A8AE6F0794A6F0D4A39AE3D3BB09B004B7AD7AD8754F5744318B577A25F93
	2D946F8B78941F60778D0995A739ADCF5BAF33DC82BB5C8DA16CD7BA68B6A70BF2051D06C225DF8874D4321D6C933BA6B6AA953A6615EC654DE0FC247A6424DBBD07DEED45F8493D97636271F735FA968B33F475B43C5CE3AA1D4975BBBFB32AE745426E42738BD1CF5101FA4E04B19BGB85F1FBB10EF81607858FDCEDC3FD3335CA55ED9E813BE27F6ADB8EE0993571453EEF5A21FB4205B92216DF2E9E97958F49772B9B09B724CEC9CDBF4A55676FC7C69CE9CBF82E333E623FF17DE20CF36A7C7FCE464AA5A
	AEE9D396A9BBBACF57F6ACF74E66B6AB3DCFF35F302A3B3098FC0457D4BF19F48E755E972DFB876E1BFC966567B3834BF7067B78792CB002DF4270E99ABC576FDDB36A378E7A0E4C41B345FB23B4CE94E8A783E4GE4836481102FE01EFBF4106620A94FEC36GA41F0060F7CEA81A706CB4C479C21D233605A12DCD399C7347689EDC8EBCEBG9CG3DGF3A2B2EC9FCAA803E5C0D786759E6A72746EA87E720E6938BEBB4629BE99A07FC600DC0082005239284F6961D3097441332D2A881727401EC81E33F3A7
	7A8C27B335A4226B0C21637E7F24659C51496FE2A8A4745064A3F87BFC014A10A4ABAC8D41C66D047F3C52A1EA2D7ADD33B6978767727AA48D1E19F3B1D7FC3389F3C54EDC5C5383D66A3364FE28E3G2A6EC71FEDB052BD478AEDAF4088C0AA408600EDG3B6FC79BA78DB7A432F1BD9E82DCD2642FB93610C79BFEEB128DCB8D93ED26EF7B6FCF222B0CE9D79974687E58CA692C0649B9C08F2E9950BECF1A28FD0250B6G2C8148864887A07320B61B0776F9F6781304B1C58FDCE09BE60E490661F25EF4CC4F
	AE031368E26D52B8CF0F0E34D33AEB733E18DD0273706CFC40B93D5879C5C23A193AF2BEB7096E0B596565C9F46F463453F4792DF5CDCF3F2C04F4D93A7CEABA27472FA9A15D2698FE5C2F7F56C27DBA9F7A48831093G4E82F482A8G298F20DF1F98C998775102F94A3867F7F145F5B4B7E5427C9B81B86E45FA0A5B8EEDB29F7DEB211956ABA7A26DB45626F5A7EF1FB0CF674EAA96687CFAF84E6353AF05C76C3D9882376F8723716FE22AC7756FE2BE9E553F0B79F474F50E07B934B73E58EF991D7A2E26E5
	B47EDD4D523178F22E9C5317F34D183E1CDF9D1BDA4EBF9F1BDA4E027178327CFCDCDF96A351172508CCAD4BE192CF16DF32357DC7055E8BCE3A2FEA0508A0D8FBFF58721ABA4621C80EEA0275C00F054E21F3BEF7FAE4496F2727F4026F3F76B6962BFEF9FEBE6E69DBADF4CFD720EDGD8930915EFB7511C30A10EEFEF564173FA77072CC6481F4F6BDDE3847FE3065F294173BAD83162B9F6B774F5A5E34E309B632F0F53283FBED70D74AEA1A405E50F983B86DD4632C8DFB4315894310F1A190F71B1FAC510
	FB44C9EB98E4743CAF9E7D20111E213BFDDE1F2C5EF871757D6BB78FB37F880544905B409B85C5D057F5D7E4DDAD0A54C2EBEA1E4F426C0C38916C31A599F35CD38C178F6D02081D3EE10AEF279C133E1D3EE70AEF272D2644F6FA41945FCEAF1A925B6995D33CF860B6D96D505A64EC44A6EF3523CD4A9620CDBC6DE8130A85F826B4BB3531F2A6B26F9BAE6D3C67A27867A760BF0A60254E921C6706AC75B9CE2BBABEEF09EF73FC0B3E4DFFE409EF731FD8925BFC17A53E4D0DCD09ED3E3FA956B7390E476A68
	7D2EDF9814428AA16B97D01BFED4076783BB343DG860074857C1C40734E1F31FB549B30EB4352B903220724AC24343B6B1116C03B9460AC008BC0D9086BD37B5FB466B5992A1A671C7D0DD8076442581D8BA76618BD0B62659CDB931D2FECD16C595B4970950BE24F5E4FD9706CDD83FDE90B5017DEE0E79E12826D9444D5B7E3DDD1150239F13B158ED36F8BB47F072CDF46DE9F8FB80FC5F71587DF9FC3AB2D13401D2A7DA954862BD95B15026B37957BCFF3FF79F1AB2EF9A60C4981A8DD8C7138182F971F23
	2E1D5254810E53985A11C6D94CE98C70CCD7E978BA7D318E770675005F3998FD6F25CA6A5311BD2FD268D7EAEB9BA47A3E414E9D196FF7EBD91D486EC81760FE37054D59856D810064A5F87FB670DB3C8FDD37F6B5597C227E3DF41EEB541431044B38E909661E71E4F7A167792B8664D93C54DDD23714629C8D5A779D5406CF9B79590A774F1850CFF363C9226D4F1A50CF65BD36D75B7F5204FEEA23DF2B74DC37E7FE033A6DFEA613783FB6B36E77B8F316F21D56294F635FDBE63C3654310F4742FB2CFE4807
	3E62D40C0FAA8B4515C33BB1021BEB411869CC4518E9EB226BBFB3523E4A5A74FD88EF7F402275EBBA6E4B0F1DDD93F8442B297FEF317333A67ADF88ABD20798728D313BFF2817D229DD8EB523EF24C31B67CBEBB346C169B20899GABC0AF401CE598EF6B597D3493364BC0CF2507161E6A37C82276BB2B2AE13B29B04E3AE6ACD36F70552761BF16295FD99DED43DC389D7A0EAF47982B6E2BA3136F19FAC489CEE972A0FF55512C361C61EE37648F7709136E3CF9CC7C218D756EDC0EF1789546B7995A99G59
	4BD1D7F7FB85BCB5AC212C8E09F22553A385C52FE5A0A80BA17AC187378357A12B9DF55886739CD901F7D83B5B112FF585727D20030ECD02F6AAC0668A74BFEF5D746EA365E952BDF647F4FCCFDBDB4F3E83DA91DBDF7FA943EFD991DBDF7FFDA40766C1DFE39A5EC93DE325FE17816D0DG39G85G258F42BE77A056160FB5D5118467F6179434C3A164579CFB38FE6FB7CC6FDB32EF94E12E4A7A7AD7497A590DF15FCBB5BE283E9FD41F6BB7ADB352A7576F899B55AF857AB28136G6CGA0AB21F6DC097A7D
	34C93D7335F8FD7466D1707432B703118BDF1F589FC553A2077BE8CD63DB703CAD4A0A4FA378F99953A0488E496F738C2A316EE43972F7G27D622EFB7DB28EC3D126C9B12824AE4CA4C939E16BF6B817CC01B3D12FD0BE6B9BE056D562D64B660FC7EE608562751720A5F7E723E5FB47F8A1E5A57D517D8F7E57D95D75B758E0B5376FB4B753626A6DC0F74FEED0E2959BFC3771B858A452B5477EF2B22B90647E120996F12DD2BF0CFDC5B9C3BA7AE1830A7EEEB0E5D93A94FE87FFEEB6C1EB8117E3CB5F6CFC4
	FA6E9FE517697EE3D8053ED0436C6296BED73D1C3A04A4B3CFG2499FC1E67DF0C5F375B9279F77AAA3D3B36779352455EADF23A2E04F47A79625FD91E5D30AAB6DF6CE36F88F3D645660B79ED18AF36C0DFCDBA66472F37CFCF5F1C04F47A7A9ABB26276FCA165F5352E375FD1461B352E3752D6AC0FD33202F6CA154F79D8DBFD5162FE97E67555D7D9A7F5F6EAA8F75CE569A7F8C7B21D57F8CDBED553F7F7A58BA75DD5BC5EB7CBB41A62B767BAD9E1B9F5AE96C0E40DA2482ECG588C107F90466A96AB0DD5
	7E36A8B6E7DB3CBD748CCD3FC6D5107F1336783ABEE5CB7C8D6B37ED749B11EEC9D124BEBABF623FEB236B25C8C106D45F6158280DE4DFCF2F42072A78EDB61A837D628D0666397838055E63CD48455124DD6936F438EC66FA7BF52739234DEEEF286F38DEEF7F2C7E2A13E01E9F321C19025E5A56E17BFDDB2BCBEF86CE7F14051E7D4DA2FDD70C793EDF447D377C3107C97931BA93665ED8BFA22BF93C1FDA9DBD879D0A2C613C9676EDAC740D2C46F573DD7A10444F318E99AABCD99964D87655169A8F21E6ED
	AEC80379B2D7CFFDBE607C4AAFD37DC2EA5E66F7F159C769594797707B822219FF019C093BC2C7B44E8FE87EAFEE3B7BB17F447F830FB59DD11D9E577C7F28636E73EE3B2BBC78FA1F31470F73DAFB62B8B75B5977E1901F2E4120FAEFE635D39F12EE5C880911FC52E2BF924159C28EA9642397EA5C6F33DB0F43F3A378E79E401E0761CC8CD085E085388620BC0C71708FF6FA5609978F7CC20365B2D97061F71E8BDB283E11DC4B43C415EBD9CBA951FCCB43BEFD63D50BFAAEE7F5D8B270273592474DE7388C
	954767F926B53E9D1FEDCDEC4767DA7573658FDAA7674B17DA7573650ED6ED3ED46FC955F965484B910E7F57D69A537C8E33C58888BDECAF6167D861371A6F0BBE73F915DE0EAF9FB89845DBC54A9F5A7F8BD0CB8788AA812679A092GGECB5GGD0CB818294G94G88G88G740171B4AA812679A092GGECB5GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGGDA92GGGG
**end of data**/
}
}