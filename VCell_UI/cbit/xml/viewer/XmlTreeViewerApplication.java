package cbit.xml.viewer;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.awt.*;
import javax.swing.*;
/**
 * This type was generated by a SmartGuide.
 */
public class XmlTreeViewerApplication extends JFrame {
	private JMenuItem ivjAbout_BoxMenuItem = null;
	private JMenuItem ivjBooks_OnlineMenuItem = null;
	private JButton ivjCopyButton = null;
	private JButton ivjCutButton = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JMenuItem ivjExitMenuItem = null;
	private JMenu ivjFileMenu = null;
	private JMenuItem ivjHelp_TopicsMenuItem = null;
	private JMenu ivjHelpMenu = null;
	private JPanel ivjJFrameContentPane = null;
	private JMenuItem ivjOpenMenuItem = null;
	private JButton ivjPasteButton = null;
	private JMenuItem ivjStatusbarMenuItem = null;
	private JPanel ivjStatusBarPane = null;
	private JLabel ivjStatusMsg1 = null;
	private JLabel ivjStatusMsg2 = null;
	private JMenuItem ivjToolbarMenuItem = null;
	private JToolBar ivjToolBarPane = null;
	private JMenu ivjViewMenu = null;
	private JMenuBar ivjXmlTreeViewerApplicationJMenuBar = null;
	private JPanel ivjXmlTreeViewerApplicationPane = null;
	private JFileChooser chooser =null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == XmlTreeViewerApplication.this.getExitMenuItem()) 
				connEtoM1(e);
			if (e.getSource() == XmlTreeViewerApplication.this.getToolbarMenuItem()) 
				connEtoC1(e);
			if (e.getSource() == XmlTreeViewerApplication.this.getStatusbarMenuItem()) 
				connEtoC2(e);
			if (e.getSource() == XmlTreeViewerApplication.this.getAbout_BoxMenuItem()) 
				connEtoC3(e);
			if (e.getSource() == XmlTreeViewerApplication.this.getOpenMenuItem()) 
				connEtoC4(e);
		};
	};
	private XmlTreeViewer ivjXmlTreeViewer = null;
/**
 * XmlTreeViewerApplication constructor comment.
 */
public XmlTreeViewerApplication() {
	super();
	initialize();
}
/**
 * XmlTreeViewerApplication constructor comment.
 * @param title java.lang.String
 */
public XmlTreeViewerApplication(String title) {
	super(title);
}
/**
 * connEtoC1:  (ToolbarMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> XmlTreeViewerApplication.viewToolBar()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.viewToolBar();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC2:  (StatusbarMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> XmlTreeViewerApplication.viewStatusBar()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC2(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.viewStatusBar();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC3:  (About_BoxMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> XmlTreeViewerApplication.showAboutBox()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC3(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.showAboutBox();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoC4:  (OpenMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> XmlTreeViewerApplication.fileOpen(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoC4(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.fileOpen(arg1);
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * connEtoM1:  (ExitMenuItem.action.actionPerformed(java.awt.event.ActionEvent) --> XmlTreeViewerApplication.dispose()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.dispose();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Comment
 */
public void fileOpen(java.awt.event.ActionEvent actionEvent) {
	try {
		//  Automatically open two files and do:
		java.io.File file = getfile();
		if (file == null) {
			getStatusMsg1().setText("Warning");
			getStatusMsg2().setText("No baseline file selected!");
		} else {
			org.jdom.input.SAXBuilder saxBuilder = new org.jdom.input.SAXBuilder();
			org.jdom.Document document = null;
			org.jdom.Element root = null;
			//
			try {
				getXmlTreeViewer().setDocument(saxBuilder.build(file));
			} catch (org.jdom.JDOMException jdomexception) {
				getStatusMsg1().setText("Error");
				if (jdomexception.getCause() != null) {
					getStatusMsg2().setText(jdomexception.getCause().getMessage());
				} else {
					getStatusMsg2().setText(jdomexception.getMessage());
				}
			}
		}
	} catch (Exception exception) {
		getStatusMsg1().setText("Error");
		getStatusMsg2().setText(exception.getMessage());
	}
}
/**
 * Return the About_BoxMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getAbout_BoxMenuItem() {
	if (ivjAbout_BoxMenuItem == null) {
		try {
			ivjAbout_BoxMenuItem = new javax.swing.JMenuItem();
			ivjAbout_BoxMenuItem.setName("About_BoxMenuItem");
			ivjAbout_BoxMenuItem.setText("About Box");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAbout_BoxMenuItem;
}
/**
 * Return the Books_OnlineMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getBooks_OnlineMenuItem() {
	if (ivjBooks_OnlineMenuItem == null) {
		try {
			ivjBooks_OnlineMenuItem = new javax.swing.JMenuItem();
			ivjBooks_OnlineMenuItem.setName("Books_OnlineMenuItem");
			ivjBooks_OnlineMenuItem.setText("Books Online");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBooks_OnlineMenuItem;
}
/**
 * Return the CopyButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCopyButton() {
	if (ivjCopyButton == null) {
		try {
			ivjCopyButton = new javax.swing.JButton();
			ivjCopyButton.setName("CopyButton");
			ivjCopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/copy.gif")));
			ivjCopyButton.setText("");
			ivjCopyButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
			ivjCopyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjCopyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCopyButton;
}
/**
 * Return the CutButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getCutButton() {
	if (ivjCutButton == null) {
		try {
			ivjCutButton = new javax.swing.JButton();
			ivjCutButton.setName("CutButton");
			ivjCutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cut.gif")));
			ivjCutButton.setText("");
			ivjCutButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
			ivjCutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjCutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCutButton;
}
/**
 * Return the ExitMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getExitMenuItem() {
	if (ivjExitMenuItem == null) {
		try {
			ivjExitMenuItem = new javax.swing.JMenuItem();
			ivjExitMenuItem.setName("ExitMenuItem");
			ivjExitMenuItem.setText("Exit");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjExitMenuItem;
}
/**
 * Insert the method's description here.
 * Creation date: (4/2/2001 12:37:30 PM)
 * @return java.io.File
 */
protected java.io.File getfile() {
	if (this.chooser == null) {
		this.chooser = new cbit.gui.VCFileChooser(".");
		this.chooser.setFileSelectionMode(chooser.FILES_ONLY);
		this.chooser.addChoosableFileFilter(cbit.util.FileFilters.FILE_FILTER_XML);
		this.chooser.setFileFilter(cbit.util.FileFilters.FILE_FILTER_XML);
	}
	
	int returnval = chooser.showOpenDialog(null);
	if (returnval == chooser.APPROVE_OPTION) {
		return ( chooser.getSelectedFile() );
	}
	
	return null;
}
/**
 * Return the FileMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getFileMenu() {
	if (ivjFileMenu == null) {
		try {
			ivjFileMenu = new javax.swing.JMenu();
			ivjFileMenu.setName("FileMenu");
			ivjFileMenu.setText("File");
			ivjFileMenu.add(getOpenMenuItem());
			ivjFileMenu.add(getExitMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjFileMenu;
}
/**
 * Return the Help_TopicsMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getHelp_TopicsMenuItem() {
	if (ivjHelp_TopicsMenuItem == null) {
		try {
			ivjHelp_TopicsMenuItem = new javax.swing.JMenuItem();
			ivjHelp_TopicsMenuItem.setName("Help_TopicsMenuItem");
			ivjHelp_TopicsMenuItem.setText("Help Topics");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHelp_TopicsMenuItem;
}
/**
 * Return the HelpMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getHelpMenu() {
	if (ivjHelpMenu == null) {
		try {
			ivjHelpMenu = new javax.swing.JMenu();
			ivjHelpMenu.setName("HelpMenu");
			ivjHelpMenu.setText("Help");
			ivjHelpMenu.add(getHelp_TopicsMenuItem());
			ivjHelpMenu.add(getBooks_OnlineMenuItem());
			ivjHelpMenu.add(getAbout_BoxMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjHelpMenu;
}
/**
 * Return the JFrameContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJFrameContentPane() {
	if (ivjJFrameContentPane == null) {
		try {
			ivjJFrameContentPane = new javax.swing.JPanel();
			ivjJFrameContentPane.setName("JFrameContentPane");
			ivjJFrameContentPane.setLayout(new java.awt.BorderLayout());
			getJFrameContentPane().add(getToolBarPane(), "North");
			getJFrameContentPane().add(getStatusBarPane(), "South");
			getJFrameContentPane().add(getXmlTreeViewerApplicationPane(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJFrameContentPane;
}
/**
 * Return the OpenMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getOpenMenuItem() {
	if (ivjOpenMenuItem == null) {
		try {
			ivjOpenMenuItem = new javax.swing.JMenuItem();
			ivjOpenMenuItem.setName("OpenMenuItem");
			ivjOpenMenuItem.setText("Open");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOpenMenuItem;
}
/**
 * Return the PasteButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getPasteButton() {
	if (ivjPasteButton == null) {
		try {
			ivjPasteButton = new javax.swing.JButton();
			ivjPasteButton.setName("PasteButton");
			ivjPasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paste.gif")));
			ivjPasteButton.setText("");
			ivjPasteButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
			ivjPasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjPasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjPasteButton;
}
/**
 * Return the StatusbarMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getStatusbarMenuItem() {
	if (ivjStatusbarMenuItem == null) {
		try {
			ivjStatusbarMenuItem = new javax.swing.JMenuItem();
			ivjStatusbarMenuItem.setName("StatusbarMenuItem");
			ivjStatusbarMenuItem.setText("Statusbar");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusbarMenuItem;
}
/**
 * Return the StatusBarPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getStatusBarPane() {
	if (ivjStatusBarPane == null) {
		try {
			ivjStatusBarPane = new javax.swing.JPanel();
			ivjStatusBarPane.setName("StatusBarPane");
			ivjStatusBarPane.setLayout(new java.awt.BorderLayout());
			getStatusBarPane().add(getStatusMsg1(), "West");
			getStatusBarPane().add(getStatusMsg2(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusBarPane;
}
/**
 * Return the StatusMsg1 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsg1() {
	if (ivjStatusMsg1 == null) {
		try {
			ivjStatusMsg1 = new javax.swing.JLabel();
			ivjStatusMsg1.setName("StatusMsg1");
			ivjStatusMsg1.setBorder(new javax.swing.border.EtchedBorder());
			ivjStatusMsg1.setText("StatusMsg1    ");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsg1;
}
/**
 * Return the StatusMsg2 property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getStatusMsg2() {
	if (ivjStatusMsg2 == null) {
		try {
			ivjStatusMsg2 = new javax.swing.JLabel();
			ivjStatusMsg2.setName("StatusMsg2");
			ivjStatusMsg2.setBorder(new javax.swing.border.EtchedBorder());
			ivjStatusMsg2.setText("StatusMsg2");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjStatusMsg2;
}
/**
 * Return the ToolbarMenuItem property value.
 * @return javax.swing.JMenuItem
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuItem getToolbarMenuItem() {
	if (ivjToolbarMenuItem == null) {
		try {
			ivjToolbarMenuItem = new javax.swing.JMenuItem();
			ivjToolbarMenuItem.setName("ToolbarMenuItem");
			ivjToolbarMenuItem.setText("Toolbar");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjToolbarMenuItem;
}
/**
 * Return the ToolBarPane property value.
 * @return javax.swing.JToolBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JToolBar getToolBarPane() {
	if (ivjToolBarPane == null) {
		try {
			ivjToolBarPane = new javax.swing.JToolBar();
			ivjToolBarPane.setName("ToolBarPane");
			ivjToolBarPane.add(getCutButton());
			ivjToolBarPane.add(getCopyButton());
			ivjToolBarPane.add(getPasteButton());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjToolBarPane;
}
/**
 * Return the ViewMenu property value.
 * @return javax.swing.JMenu
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenu getViewMenu() {
	if (ivjViewMenu == null) {
		try {
			ivjViewMenu = new javax.swing.JMenu();
			ivjViewMenu.setName("ViewMenu");
			ivjViewMenu.setText("View");
			ivjViewMenu.add(getToolbarMenuItem());
			ivjViewMenu.add(getStatusbarMenuItem());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjViewMenu;
}
/**
 * Return the XmlTreeViewer property value.
 * @return cbit.xml.viewer.XmlTreeViewer
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private XmlTreeViewer getXmlTreeViewer() {
	if (ivjXmlTreeViewer == null) {
		try {
			ivjXmlTreeViewer = new cbit.xml.viewer.XmlTreeViewer();
			ivjXmlTreeViewer.setName("XmlTreeViewer");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjXmlTreeViewer;
}
/**
 * Return the XmlTreeViewerApplicationJMenuBar property value.
 * @return javax.swing.JMenuBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JMenuBar getXmlTreeViewerApplicationJMenuBar() {
	if (ivjXmlTreeViewerApplicationJMenuBar == null) {
		try {
			ivjXmlTreeViewerApplicationJMenuBar = new javax.swing.JMenuBar();
			ivjXmlTreeViewerApplicationJMenuBar.setName("XmlTreeViewerApplicationJMenuBar");
			ivjXmlTreeViewerApplicationJMenuBar.add(getFileMenu());
			ivjXmlTreeViewerApplicationJMenuBar.add(getViewMenu());
			ivjXmlTreeViewerApplicationJMenuBar.add(getHelpMenu());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjXmlTreeViewerApplicationJMenuBar;
}
/**
 * Return the XmlTreeViewerApplicationPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getXmlTreeViewerApplicationPane() {
	if (ivjXmlTreeViewerApplicationPane == null) {
		try {
			ivjXmlTreeViewerApplicationPane = new javax.swing.JPanel();
			ivjXmlTreeViewerApplicationPane.setName("XmlTreeViewerApplicationPane");
			ivjXmlTreeViewerApplicationPane.setLayout(new java.awt.BorderLayout());
			getXmlTreeViewerApplicationPane().add(getXmlTreeViewer(), "Center");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjXmlTreeViewerApplicationPane;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getExitMenuItem().addActionListener(ivjEventHandler);
	getToolbarMenuItem().addActionListener(ivjEventHandler);
	getStatusbarMenuItem().addActionListener(ivjEventHandler);
	getAbout_BoxMenuItem().addActionListener(ivjEventHandler);
	getOpenMenuItem().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("XmlTreeViewerApplication");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setJMenuBar(getXmlTreeViewerApplicationJMenuBar());
		setSize(460, 300);
		setTitle("XmlTreeViewerApplication");
		setContentPane(getJFrameContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * Starts the application.
 * @param args an array of command-line arguments
 */
public static void main(java.lang.String[] args) {
	try {
		/* Set native look and feel */
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		/* Create the frame */
		XmlTreeViewerApplication aXmlTreeViewerApplication = new XmlTreeViewerApplication();

		/* Calculate the screen size */
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

		/* Create the splash screen */
		XmlTreeViewerApplicationSplashScreen aXmlTreeViewerApplicationSplashScreen = new XmlTreeViewerApplicationSplashScreen();
		aXmlTreeViewerApplicationSplashScreen.pack();

		/* Center splash screen */
		Dimension splashScreenSize = aXmlTreeViewerApplicationSplashScreen.getSize();
		if (splashScreenSize.height > screenSize.height)
				splashScreenSize.height = screenSize.height;
		if (splashScreenSize.width > screenSize.width)
				splashScreenSize.width = screenSize.width;
		aXmlTreeViewerApplicationSplashScreen.setLocation((screenSize.width - splashScreenSize.width) / 2, (screenSize.height - splashScreenSize.height) / 2);
		aXmlTreeViewerApplicationSplashScreen.setVisible(true);
		try {;
				Thread.sleep(3000);
		} catch (InterruptedException ie) {};
		aXmlTreeViewerApplicationSplashScreen.dispose();

		/* Pack frame on the screen */
		aXmlTreeViewerApplication.pack();

		/* Center frame on the screen */
		Dimension frameSize = aXmlTreeViewerApplication.getSize();
		if (frameSize.height > screenSize.height)
				frameSize.height = screenSize.height;
		if (frameSize.width > screenSize.width)
				frameSize.width = screenSize.width;
		aXmlTreeViewerApplication.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);

		/* Add a windowListener for the windowClosedEvent */
		aXmlTreeViewerApplication.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aXmlTreeViewerApplication.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of XmlTreeViewerApplication");
		exception.printStackTrace(System.out);
	}
}
public void showAboutBox() {
	/* Create the AboutBox dialog */
	XmlTreeViewerApplicationAboutBox aXmlTreeViewerApplicationAboutBox = new XmlTreeViewerApplicationAboutBox(this,true);
	Dimension dialogSize = aXmlTreeViewerApplicationAboutBox.getPreferredSize();
	Dimension frameSize = getSize();
	Point loc = getLocation();
	aXmlTreeViewerApplicationAboutBox.setLocation((frameSize.width - dialogSize.width) / 2 + loc.x, (frameSize.height - dialogSize.height) / 2 + loc.y);
	aXmlTreeViewerApplicationAboutBox.show();
}
public void viewStatusBar() {
	/* Hide or show the statusbar */
	getStatusBarPane().setVisible(!(getStatusBarPane().isVisible()));
}
public void viewToolBar() {
	/* Hide or show the toolbar */
	getToolBarPane().setVisible(!(getToolBarPane().isVisible()));
}
/**
 * 
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private static void getBuilderData() {
/*V1.1
**start of data**
	D0CB838494G88G88G700171B4GGGGGGGGGGGG8CGGGE2F5E9ECE4E5F2A0E4E1F4E13DBC8DD8D4473544E8C28CC950E84504C422E8D0D1B1A10AA9C9E9E29B5372D213E7DE6D2B4D330DE9E91F6D73FD252D6DE7DFAFFF0A628FC6E2E82516A4B4C1EB089A5B9AE2D265AF207C896B0A0A15053D40426E5EE577822B223EF3E66E193D3B6C72E3E27D3E635CB973F34E1CB9F3661C19D9241CBFC5E4242466C8D2CA06247D7BFB0AA45557CB520CC95DDB8897EAB7E6C93AFFEF816C14362725
	C39A81E519CF9B333225E72C19100F057C58AF9B335E046FDD52F3562555709100CEB8140D1FBFEF7650F41616911DCD1CEE45D6C8378344818E53F485693FDB112B61D7E9F80214D4C9DA4D6A1C284853F01510EF81888708D1F87DE510EEE61447959F556AB5CF0812123F61CC5D067D687AA4A8F4703655DA1AAF7DA6A55901343A981F58E6AC646381F070E952A79B0BA0BDD65F5D71E9DB2BC5ADF25B2CC5FD9639DFF69697B7592C8627AC9BD9760443E1353419D40BE217A4C78F7679D8C5A66BC3120EC2
	FE83431DD511CEACFCA7822C91783D3D08BF6EB4E6B581B81CB436CF5EBB26715EF4F531342663EB1BF78498DB30130FA9466999DB7E7E56345F33F9C8E772DE8BE559AEE3D681C0A5C0A7C0B0409EB67FD9657BA1BD512A16AAB61BE2079115D84D4E9A45ACDB613B3898CAB4DC035C26B84D12446758D1F1408FBFC381EFF7FD546D38CC22BE24790EEE18AF2DFA7CCB291B7C48E4D5545554889717C51C4BA393CEFBF1C05AABDD5E7A68CD7B2C2427AD7D7870268CBF34737E63702635DABF126A21FDD04539
	7EA65301FC78CE51740363DFE6F8D507673AF91161B1BF964A12D4520D266D44CBF57AF4A97B50943FF288FBA6A4353A1773E06E7565E5A2533B50DECEB3CB70924170B1BABC67250061B13F9C4A0E74993338FEED2B44359A8679D800C400B5G697D462CFC00A37D24E306728FC628E375A627DA52EB311AE527445BEE2B588D296CD61D26AA3BCBB5595BE42349E9B135DAE517245559DD01B2E875EA370769FE9B5078CC364BCE36C621F713CDD6E5270B57A9285809F51CB2ABB5D8ECB29030B9A46A77C045
	AEC82DA617FA46E1B629322786AFBFD201F352E7B2C20F4C84C8DCAE45D5A8AF830C5F8AB0A064300075F7CAF65AE5EBF1F13522F477BA8CB892A9319F657C82339D21709D55CFB27E5BC944E53B0DD905EE6A6707952F6B7AA93334A17BA667E5DAE3AF2AE80F0F39C9E7FE56C4BAD336ED1EF4606549FEF5A6947437454DF5456D76DDBB5FE5FDA2DFBC5F26B60DF29D6B61185B7FFA733695831F0BC65AB065DC3E1127F02EA2001FF800D5C246EFFD164FF536446412C9CB6B1C20E03259A3F14EE7D8EF0EA6
	CF241921713FD90CE396ABCF063E73AE9B334AG2CG13AE13AC7777B685E8FF33E39FAC4BD2C643377F2CAF088617591B1538CF49FD32DDAD139D325D8C9FAE2DECEFA5525356F13BA25A94B03C8356FDA9ACB417406F2F4435E9D2D5272535D7159BE5D53558BBBC650799ADD7EF2B43E3B20856C715B8C6259F563D287FE9A52E19B645EE17596409A6DA79F136E6E52BEC8326CB15DE3B4A7195D528775D72E54DE61C2C5AA8611A3776227D617EC20C896568F0DAEC2092E842242DD7F0BD3FA67C9D04F818
	EF74FBD6C31AFC1956E67FBB34B68B2E4C1692AEB9D27D6DADE1B36FCBB5DC61EB26730AE7EDF21EBEBE691F77934CF6E8F8976775CAB77294480B61EB62FB5558DFB0508987083DC2EB622913D8CEF6C7DB8C250A554AC5AAE4BD67D4B64E0D5C53AB0339C683F7CA48EF612957FD4A0C1AACF97912D3A8CB2B4EB6B6DFC5D9FE37177C42C460E78DC07AD5EEA74B2EF2F9ECE0752675D13DA848A7DC6575185C3D6AB5768BBFF3G7C4C81CF3D2081FD3DCDEE2A978E78D8DD3D95DE753EAC6A2D83FC66B53057
	57F83D4EEB3C9E177F2F7F0072E73EE517294F64AEF27503DE97971F2C403D097B10F51FE5EA6BB37C9A790AD9E7F1CED6C0FEADC07AF5521F9737112FB829BBCADA7563C31B827941F957B99F472FFB74A776FFCEEC64F37EDEAD528C0232506BB45FC72A757B558917CBE933F0E717173FDA2D57AF0ECB2A4620245D62F429D5E0G5CB42FBF2BC6FEF1AF55501AEF115EC7FECEA450DD85205EC0FC6C299C9D6FB900BB86508210467A6B6EBB0C7601A9DE91CF6AE5E73B62344966C214EC1129DFADE2362868
	84ABAE476FFDB48F335EC4BE4D9617C3F149057B0C646B4D5BFB1C74EC7EF4A953B4AE551F6F9D72630E54789BDC0EEBEEF86499B331B5EDA9G9F5BB2B13683C146ACF3900DEDFE2D6F584221ACA108620FDFF4A39EA38E0322D8CBCCCE9DFF53F76979BBF6631FFE798B5E51193AA2C8534FA08FFF1540DB3360EF201F782B3C8D747EB662CF2D7347DF5CED445F74EB599AFF0D2AC96DF5F18EF91F875D54E7A254CF9FC3FDC69B864DA714350C21BE7755B2FB5E29741FE8D5FA5592450D0366FD2EE1FDE2BD
	956AC70BBEFFF6521F0E2C99C3BAF26A72675311E7D25EE33AEC156BE0B7AB2C8E5C64E360156F33064FB046D88FBCEC3DFD300F136F03BB82F96EFB5FE06B3B72F65F7860AE06EF3A5DB7BE58F916645C89E50937133F38319E6D4B4131462CEAGB340GC0B8C07CD8DA57FDB59FCA437863D5F6F0136DA6EB235786CBFEF1AD5205BDD14B9F2CC5F931BDD1A2FFE3CB5FF0F15E4A315E32606DF207ED3741279D1F2BE599480B9F3BDAA35BFB2BD459266D4956AA7D1E1CB34E18F5942099400140EC6DA35594
	43870FA3BBFB2DC2EFE763F7DCCB4D72336E909246F17ED60F732C3B821BE1931F1F185338CF645F813A8AE0GF0GCC820881D8F1874D51125A0F071BA326F986052BE1292FE7234973051B1C07D54336CB3E433B9D176F419AFF725DFAA74404F712FCDF2B95E7A4F7125E3E5708F2F1C0BE84A092A081E08D0094EC4CAA88A639EC297BE404F2A985DCA5789103A5C3E39C53FFF332899D36DDD930F7BBBE6E39F5B46E66E0727D7F663EB99E4A06EDB7A9585F7C94577B1B1FE8281B90CC73732A0178DCA978
	7C49A0FA59F7F9776F1F4F75035A6D75499F384B1F2C7EFC0AF8A803F29E9FF7B33FE8G729182778C43455E454741F14EB308DB863855225E7DC644250FB7E6650E27B10DBB0B3EFD01485F4772E5A27F66596162CFECBBD479D040E99C9C1646F0F16CD040574C0E7A40F1596EFA7FF1D9DE3D7F386C6D7A1D9C8FFD68CFEBC45CD6BFCC5CD66FAFEE7BA39B670F54B7A4BFB1DAADB8461A9CA026695B2C55A9D7151AC392597F4DEF62F9F6G7BAFA50CC79DD8779969FEA7640334390B9A4F63882EF711D524
	F719F7136F7DF796DF9D07FC930063EE520FD9557E56E0705D01F5025B3A794C978A07FAF1G4B8112GB2C34846AD2B9FF6FFAEF78F31BFBFF9BA70FCFF75347F79FE6EB4468DAE255759A67B4E698B27F3C519471A62260AD3436BFC1B35D7CD4E8EF910CE3C425A7332C06DFFF4BA105E70F94F68574DFB69A1E1A7BAEBE83E8AC3E83EFED503735582F9B7C0E80830E1357E66ABAAA470FCF15E8EB586166751C67F727C34B130BC4B9B0717E7EDE3E0F91EE99CDE1E7FEC9CDA1ECB3C64F9D8582318BAFFB2
	0A9FC2C63CBF1BDB5F5F07E2FE1C75B4BF4B457C241C4679493C87FC82002377507CA4997C512E3FA7B0EDEEB71E5F3D0359A417CBF6314D3F4C241AB43E5E3A2C676B0898677ED37EE8190720457B9B73995AA8335CEE6A3502E9046091E28327F685A4455C0363FB086DC9E8175C77D0AC729D06E3568842A5EE339676238F598E01BFCCCD23C3EE13026FE5BE7F9932D34950BE93F005G15G1D77D2FFF30CAC9E3228D6340D4B6F45FB39C597A441671E961CFFFE2AGBA22B2F3ED473A5C8FC8B86B65875C
	47ED60D1C82B81F80C51D7C977E3E640055FC7315A180F7EA0853435B0BA705159BCBF4E5A2F00F6EB8152C34917F63FCB3EF4742C695272577C1FD92CB6DCCB4D8B554EACC2BD3E74117D2DE9FC8EE7D7791B43015040F348E32A394C1E07067218AAC36097B1FC248E4F657049C90ABF6320ACEF827994CF31B8A18872219348F6AFB2843695CF997C5B0AE78D7E775A678DC36F35AF9A822DF1AE9FDB0DBF7904CF98CEBE5D356C9EE8022FFC7A98FE6984DF797C36066433924A0ECDA479245411FCA2846EB9
	010B1EC86B3E3F5E9F1FF19307633317591144091C1FCD82FF9B432F5161B91F1B989E739B202C65FE6269F78662E929401DB8C5386577531A0BE5313DCE650B4EDA6CE6259F56975ECC292E22322A467A3A4672CBF53517CA2B61036BFBC43F7E2E7A6816B1FE4FF891D65D4F473CCECBC3FEB7B5055B51854C2745B605130077C9087B5E997D798772F8AED5120AA06565BB0C7AF25415FD123E7C04D7B972BAB5CDDF6E72AA4F503567637A661FE99DEF78E60CE4FDE2EC40BB7828C9FCBC09DA1A7F4254146C
	307A0D3C1FEFDD504BA77B81EBEACA00FE52A773765913BD76005B241F6F8BF02E0AD64F4AE5387EAC596532493497051CC31D98007CA400684924138315B7F73FBDFE546D384E3E476E9F16CE7655658F99FE55E4DFDDDED2C93A1C8CE5CDDF22B8FA51C514C3BC64D7822C83481C827B87C0599432D13F3DF0D09A463FB4A80EEAB0E2D61D59616BA2210A56C553941255C2F64FE0067C004045B39C1E0363D93DF687F5D29F6BE0DD316FCE3979B84ADB7E4DDEB4B2FC56476725416D4037591D108A061C6F3B
	72A554E2AE1F31B5A41FC9C296BD6C3CA382727182B740F0F8BF01F78F9C17D6BB1A7B4E889F19458FA3C3CEA3EFD4B4FCE516B1CCFDAE0F6096C9FC4FB5F9E4F3EFBD49E6151043D5E61313A01F9986FA9AC678BB993E92721DE17C5E0563371D9E6D1DB0769B288C69966A4AB90DF7C7CDE3A83924E97DFA4BC8EA7348689DB3FE73753B5C0CB28A861EA243E83D16B77F85D22329CBDB2965E60B2AB859D285E43DD3818FD43D4C316CB6CD9BC76C191BFBEB7355CDE457E31F1CA3455DD196702CF329A63BB5
	DA9A17B8B5E53B98CBF1BB5A221C29462C03G86GABC090C058D49ADBC8B3720891AD30FFC2D5CDED1D6CB6098C91DED1FA5068A4733EAFF6A0273C0F171A7F9CC8BE5043C9588E6ADA3BA0C8B218BA449C7F762C2FEC2227FA74A0E16AE01D6176D8BA4FFC5A293EF6FAAB432F1D6AEB27A71EA3BB1D7EG68728324476FB33B1E887955G49827F91439F536EDC700E04633FD209BA0975BE2F8DA3C8547ADAADE82FE4B4B6FDC17D6B6DC706182B2FDC8C6C9FFF7D22FF7FB87122FF7F78250BC31FB57D6745
	40EF843EFFD17FC6002F4327BAA509EC7C0E37F09E705E07AE90B87E2E8644173BADAA61F95B5596CF5BE96CCE8E6F6EDACDCEF17F404BE63E0EBC73FBB3FDA971105B6D69A777885E3FD6027BF28976E3CB1B4B272F5CF2744FCA94255BF5294EEE3558E5EFDE1FB06EE4EBCB69D5AF15A8EE9DADFEFF7664E9FFF7F2198F527DDAD0033F723C87E96D3EEC5E2E17BFB7BD1AFCD719312D45EED1ADA62B658A8B109B21223D032F5F24EEACBF88FDD583B8G468204093EDB643739DD70E3934A4D9DB2795CC42F
	34BD30DE1DEC9F7E8DD9E3BB5E8737AA2A2A5830FF421FEB477520AA8E06544ED65AD19F1D160ECE15D7557066F6345DD6391D21791E1753444E27E1DC4B9E2458627CB9BA1FDE7BA02D3D0D4CFEE40743FE84D096CE7857995E8A79D000D8018FBBB712BDAADB6B8B3F8B43C7EEBBB43FEEC4B4747B5BF07E01EF3BDD52DFF3D0969596AB53DD0E8BF2A18EAD3F87F76A1DCCEDADA00E7B737FFBDA5CD30453796D628642E5BFC43A342EBB30EE7C2AFBF85D10583BE9996654F059211D2FE5D8719D10525E6E12
	058EEE31E68BDC152BDEF1D9D06BB97FFFE9427AD653E5D80C12F69EDD52C4E7B01540EB4BC3FCFE02A145BB08080730CE4F395CE1E5385D1E25591B9213131D72E836E67BB6E1EB28045A2CE66FD5823D83422A7C1C287C3C1EFE1246DB7643462C82GDE6715CE5F33A42CF38C4A6BC51DDFAB7E6AF4C279404324533FBC6D4FDF1974F0E03D55E20D863F673AC334535EFFB75179D6BC54CDFE184E37FED864F5170CD77E4545A58A3EF72A669348E347C7D97B8353E0ACG4D5368FC2B2B1B7C273C39B3D80C
	9AA8AED627F19E4326F962D9DAC7E9D24B0DG67EC5AD453996B3573E29DCC2338F68D37A791E0CFG0EC7507A58ED219838A9026ABE5D454E43A09F8510A06A9EF2D05D15226EB6A76B779168976078A3E45336B50838D0607EDD604C0F509CBB1AEE725D78285BF13FEC8F733F9C0FF03FACC5608BF85C2F43F31D18A7F4A2984A56BEC2F1759DB6545F7A696043820482C48144832C18CEF6E61A954F3D8379698D0A420EE071B45684FB3513EDE1CE78D469BE7A7CD0E3CC1A9E48A7ED3A00BCEF186E6B131A
	99BEE7062FCF7A137364139E00325099B4B7FBAC3E7413E7F8E8E6C68622FF389B7B4B0B74BDAF7C04618FC67A1E97AE6D227342B2A80B0A94F7618EDF7ADBE7FAE8664F8CC47FB62613C7E67A3E1D391B614BE67A3E1D59652437B386A80B83603E571F5065547C3007709938B6AFEF1D73FC6F57FDBF5E74F95EA70FCC6F93EFA98D2E377759826F0FDF328D3FBFCE3379771DE65A867BCEF3EC7EFD27985BE05FE96AF9721372E6110E7C1369F4A564DBG5C825F457021100F81D8AE706B4E0FD4FE58A726AD
	33C666A7F9E8EF3EB0D29A7AF8E824BA40E5F158C2FE643AD9E4DFDDDDA41F1CC70917235D08BB8E79A601ABE5B88764C3856E9BDD2351AB6CEBA4750EEB75B80DD7C7C5E324B2A199F29954B8C8AEB10F0ABB069E124B8AB15EBB1DF8E6A7C5D1FE824B67097C6F1DFADE315E973F168FFB5178A24EA375E0084231471C4F9FEAFE34F1F19F70D9B32E4552DE080DE1695A857E259B381ECB9547E5AA60783DFB504F2CB739D4D9AB60F162C39774F1E2B85040F8E5C5944511890A3F72A4D13E3041DF7986C839
	1FFC41C23EE376EC0F1FDCB81B47C4FC5C633B069C77EC7D38FF70860E0F7B45B52E0EC3041F71FBAF7CE10A13FB3B757C99B43A6E59447F921B3F72105944FF1F03780F50780F03B4F1B60F67B87F2F748C457F9AAF7EFF5D0D7E24176FAE513D6EB3CE3D1F3DDE23D1B8877C71B9F40F75EF67F12D55AACE958FBC345FA148FA1FB56FCF47D3716C401F4FEA1843F9891A634FE7DD1B0BF7C47C37130A2D4852EAAB6A6D339519DA55A2995CA10F73AAF40E7B1AABAE601AC57D0A1DC37E672F94422D95382486
	42954C25FB6A5BAD6433B583EE52DC72D59398BE9172EB90B717467FE897725A880EFC27607B676D816E0F2ACD2DF4FF944D6CA82E651CE862E71D0DF05551444F438E713BD240450B3ABFF4509DDEF2B471185343E208F990C3GB44FA39EFF20E03CD8AA63BBDC62B129699DE9C43FCB55E47A9BA745856ABC229769C2FA5110DF8A30EA9E79374FB17DCB06FC76FCE3569100EA0096GB7C088C064FC72F33F6FA814827B39BCD072B8375C76FD67827AF689733D6D6A8AAD1F24259B34B4FB8159658D8A36AB
	D8605D6E28162F565296ADD5C53B1F3218B05827DD38160F515225DA3AD2343BEB108FBCB25BBEE5546D380FFA047942EB977846A71FB07C7A853E714957052E2747C07C9CA36E603A757493E33433DDADCD0E993C1F71F63F30695BE5AE64757234746042C06DA287796AA31353E3B7596E3FC75D0E4BB1182D2F32053E721D4070758BFD657B079EE1CB20ACE1A14977F74E216897BC96A8B649E53F63BD7A18AF7D37983E6CB1DF7AF3DCC43F9E4AE29F23B577D2CFE09F7DBBBD437B68BF68716F23A7758C76
	51FF5A635FC77FF90F5EC7673875DA3FCE71D013637F2F8777A8FE5ED5E3321BBA589E457D33F54C5667BE8E7B526364331D6D213302E3829747F01510EF96388C36A7F4C2BEC4604EB3DC84649384EE1703E82C903885CE2211A4F059AE2211ACF0B58D03E974B58C26115EC8B424D8424D1709C60E406DE8A79A7982F725F3B00D991DFA9ADC6F0A3BA43186CAF55F0916DB9FFB3EF6CBE970B1AFE3FB6A81104BF1A11B6DB6F1EEA4F00A0DFCFA0740ED35D35BF0012BD128ED02E7CE94EA1B98CBF23D3747A3
	4BA93A6F7C1EDBAF570FEEA98DBE665DAE9A73FAB1663D2AE71C6F693EE3DC37FE4C4F5FD29A5CE75A540CB11D25CD3173F718FFECC69994BCE14CBA78841D71A8F8BD28557FD68F7AD8B6133343E227F31F092A27BCCFC13B5A29B8ADD7704C4EEAG93CB277A7456736F8A79F483CF106F5643621DBE5929DA5A3CDB71B6F7AB64B3C6C39B0EBB466C55AA48A789DE1F68C5DE78774ABE7C66F55FE7F66748A2D8B30B286EBF5C1E3ABF3A6C9943FFF5639839FD26FB07DFF6D30C90826DA397E9BE9024F8C640
	7B58F2957B6031499D367CA1E43FCEEB4F7B7E2B1D7A1696FB7A4EDD4C4F9EF85F6F8FF87A7E1AB2D45F9477703A6F3B286E414503775BB28D47E93CF85DA303329E7C4D10DD6E4F573F5D2B324126D4854AD2084F2871E239F0DF91FCB6487CE5F6615B9F34752AC59D167637776D93FD55AA78B7EF747DB4627F1EA700256535067286D1FF7AF075CB6A8C063A9A41F73D6461BB5C7969CD728D213BE01C777BEC0A275F8765FF5CDC3F8E8C7D29E36E2F6C35123F5204F33C186ED0B27271CD06EFBCD5449531
	3838DCED6B144DA51ADAEA77A997D8DF4B200F55G6B9753FA1AE143F5FDD6F6295A5FC631934D6CB8E3D6E59C45B68FB0FC906443GE262A86EBA6322FB0CE5F15467BDAEFDFC45EDD4017566FC534323EE47FD40EF3171CACBFCFD43158C3FF5092FEFE892324E053201A562EFF158EF0E6F1ED137637CEDD7100F550378FE1361578E62BBC24C57FAA8EBFE1278BE6F5253CFG7C0AA7C772066DE52BA43EDF51FDF7D8EF7DBE9674AF201123F84674C75D77AC7B2D277D15DBCA037BA6BDECBDA641DCF72792
	2E0F6124AF9B33DECD25738E533B28B75A9B123396335A4971F96EED9EFC250CF18A64795FB37BA0458D6D23FFAAE528D2EE206BEDD5CA4797BC2A34C9FB2423CA1B45139C78E6CFE672CB94B7D444A7C010608B85C830ABC8709D02AAE5E1124F1F662852D67690A71FBF448106DCCEE9077845B844E5326ADA5D77E1F15A2BB352D22574AAE9A38F462A24F40C282A248C96F0D5C9E9900C39596D137E9FF658A3DD17360E22E03B6708B39F7E2952964F59A6F0770E3F833AA28C624CE2AFB87FECCBDC6773EF
	3C1DAAE5D4C9D96D9659EAEEE43BC135144DF2E5322B4DE9F1F0293E4EFEA27F0155E46F7800BF767938DA5A496A51AE025DA33BEFD4CB3BF45D21F86D1E226D3A22B38D55B0945EB388768348FF4C641322CAB9C5C54DFDED32551A6F36D91B356DDA15B2E967466EF29DCCBEB93C459B5EAD340D9266DCEC1AD8F90FD71B5DDEED44A68872746C08D8FD2F031F256E3B21FF4F3EFEDCDB40777E55CFEB67D7CFFB4ED279F9DCC6BA2E07F04047BDCDE7GE7525E17823FF3EC34192CD670D23BCF584D78663164
	32AAFB5E42EDC9477EDDD4C7AB64E5BB53116FAEDD1B7F87D0CB878838B47E1EFE9AGGF8D0GGD0CB818294G94G88G88G700171B438B47E1EFE9AGGF8D0GG8CGGGGGGGGGGGGGGGGGE2F5E9ECE4E5F2A0E4E1F4E1D0CB8586GGGG81G81GBAGGG389AGGGG
**end of data**/
}
}
