Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12158)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcherEngine.java	(revision 12157)
@@ -123,8 +123,8 @@
 			}catch (UpdateSynchronizationException e){
 				simStateMachine.onStartRequest(user, simulation, fdis, simulationDatabase, session, log);
 			}
-			int taskID = simStateMachine.getLatestKnownTaskID();
-			simStateMachine.onDispatch(vcSimID, taskID, simulationDatabase, dispatcherQueueSession, log);
+			SimulationTaskProcessState latestSimTaskProcessState = simStateMachine.getLatestSimTaskProcessState();
+			simStateMachine.onDispatch(vcSimID, latestSimTaskProcessState.taskID, simulationDatabase, dispatcherQueueSession, log);
 		}
 	}
 
Index: src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java	(revision 0)
+++ src/cbit/vcell/message/server/dispatcher/SimulationTaskProcessState.java	(revision 12157)
@@ -0,0 +1,50 @@
+package cbit.vcell.message.server.dispatcher;
+
+import java.util.Date;
+
+import org.vcell.util.document.KeyValue;
+
+import cbit.vcell.message.server.htc.HtcJobID;
+
+public class SimulationTaskProcessState {
+	final KeyValue simKey;
+	final int jobIndex;
+	final int taskID;
+	
+	Date startDate = null;
+	Date latestUpdateDate = null;
+	Date endDate = null;
+	
+	Boolean hasData = null;
+	Double progress = null;
+	Double timePoint = null;
+	
+	HtcJobID htcJobID;
+	//PBSJobStatus pbsJobStatus;
+	//PBSJobExitCode pbsJobExitCode;
+	
+	String computeHost;
+	
+	public SimulationTaskProcessState(KeyValue simKey, int jobIndex, int taskID) {
+		this.simKey = simKey;
+		this.jobIndex = jobIndex;
+		this.taskID = taskID;
+	}
+
+	public SimulationTaskProcessState(SimulationTaskProcessState simTaskProcessState) {
+		this.simKey = simTaskProcessState.simKey;
+		this.jobIndex = simTaskProcessState.jobIndex;
+		this.taskID = simTaskProcessState.taskID;
+		this.startDate = simTaskProcessState.startDate;
+		this.latestUpdateDate = simTaskProcessState.latestUpdateDate;
+		this.endDate = simTaskProcessState.endDate;
+		this.hasData = simTaskProcessState.hasData;
+		this.progress = simTaskProcessState.progress;
+		this.timePoint = simTaskProcessState.timePoint;
+		this.htcJobID = simTaskProcessState.htcJobID;
+		//this.pbsJobStatus = simTaskProcessState.pbsJobStatus;
+		//this.pbsJobExitCode = simTaskProcessState.pbsJobExitCode;
+		this.computeHost = simTaskProcessState.computeHost;
+	}
+
+}
Index: src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12158)
+++ src/cbit/vcell/message/server/dispatcher/SimulationStateMachine.java	(revision 12157)
@@ -3,10 +3,7 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.List;
 
-import javax.media.TransitionEvent;
-
 import org.vcell.util.DataAccessException;
 import org.vcell.util.MessageConstants;
 import org.vcell.util.MessageConstants.SimulationQueueID;
@@ -43,20 +40,8 @@
 public class SimulationStateMachine {
 	private KeyValue simKey;
 	private int jobIndex;
-	private ArrayList<StateMachineTransition> stateMachineTransitions = new ArrayList<StateMachineTransition>();
-	public static class StateMachineTransition {
-		public final AbstractStateMachineEvent event;
-		public final SimulationJobStatus oldSimJobStatus;
-		public final SimulationJobStatus newSimJobStatus;
-		public StateMachineTransition(AbstractStateMachineEvent event, SimulationJobStatus oldSimJobStatus, SimulationJobStatus newSimJobStatus){
-			this.event = event;
-			this.oldSimJobStatus = oldSimJobStatus;
-			this.newSimJobStatus = newSimJobStatus;
-		}
-		public String toString(){
-			return "event=("+event+") : oldJobStatus=("+oldSimJobStatus+") : newJobStatus=("+newSimJobStatus+")";
-		}
-	}
+	private ArrayList<SimulationTaskProcessState> simTaskProcessStates = new ArrayList<SimulationTaskProcessState>();
+	private ArrayList<AbstractStateMachineEvent> stateMachineEvents = new ArrayList<AbstractStateMachineEvent>();
 	
 	//==============================================================
 	//
@@ -64,66 +49,39 @@
 	//
 	//==============================================================
 	public abstract class AbstractStateMachineEvent {
-		final long timestampMS = System.currentTimeMillis();
-		final Integer taskID;
-		public AbstractStateMachineEvent(Integer taskID){
-			this.taskID = taskID;
-		}
-		protected String getTimeAndTaskString(){
-			return "timeStampMS="+timestampMS+",elaspedTimeS="+((System.currentTimeMillis()-timestampMS)/1000)+", taskID='"+taskID+"'";
-		}
+		final long timestampMS = System.currentTimeMillis();		
 	}
 	public class WorkerStateMachineEvent extends AbstractStateMachineEvent {
 		final WorkerEvent workerEvent;
-		public WorkerStateMachineEvent(Integer taskID, WorkerEvent workerEvent){
-			super(taskID);
+		public WorkerStateMachineEvent(WorkerEvent workerEvent){
 			this.workerEvent = workerEvent;
 		}
-		public String toString(){
-			return "WorkerStateMachineEvent("+getTimeAndTaskString()+",workerEvent='"+workerEvent.toString()+"')";
-		}
 	}
 	public class StartStateMachineEvent extends AbstractStateMachineEvent {
-		public StartStateMachineEvent(Integer taskID){
-			super(taskID);
+		final User user;
+		public StartStateMachineEvent(User user){
+			this.user = user;
 		}
-		public String toString(){
-			return "StartStateMachineEvent("+getTimeAndTaskString()+")";
-		}
 	}
 	public class StopStateMachineEvent extends AbstractStateMachineEvent {
-		public StopStateMachineEvent(Integer taskID){
-			super(taskID);
+		final User user;
+		public StopStateMachineEvent(User user){
+			this.user = user;
 		}
-		public String toString(){
-			return "StopStateMachineEvent("+getTimeAndTaskString()+")";
-		}
 	}
 	public class PreloadStateMachineEvent extends AbstractStateMachineEvent {
-		public PreloadStateMachineEvent(Integer taskID){
-			super(taskID);
+		final SimulationJobStatus simJobStatus;
+		public PreloadStateMachineEvent(SimulationJobStatus simJobStatus){
+			this.simJobStatus = simJobStatus;
 		}
-		public String toString(){
-			return "PreloadStateMachineEvent("+getTimeAndTaskString()+")";
-		}
 	}
 	public class DispatchStateMachineEvent extends AbstractStateMachineEvent {
-		public DispatchStateMachineEvent(Integer taskID){
-			super(taskID);
+		public DispatchStateMachineEvent(){
 		}
-		public String toString(){
-			return "DispatchStateMachineEvent("+getTimeAndTaskString()+")";
-		}
 	}
 	public class AbortStateMachineEvent extends AbstractStateMachineEvent {
-		public final String failureMessage;
-		public AbortStateMachineEvent(Integer taskID, String failureMessage){
-			super(taskID);
-			this.failureMessage = failureMessage;
+		public AbortStateMachineEvent(){
 		}
-		public String toString(){
-			return "AbortStateMachineEvent("+getTimeAndTaskString()+")";
-		}
 	}
 
 	
@@ -135,8 +93,18 @@
 	public SimulationStateMachine(SimulationJobStatus[] simJobStatus) {
 		this.simKey = simJobStatus[0].getVCSimulationIdentifier().getSimulationKey();
 		this.jobIndex = simJobStatus[0].getJobIndex();
-		for (SimulationJobStatus jobStatus : simJobStatus){
-			addStateMachineTransition(new StateMachineTransition(new PreloadStateMachineEvent(jobStatus.getTaskID()), null, jobStatus));
+		for (SimulationJobStatus simulationJobStatus : simJobStatus){
+			SimulationExecutionStatus simulationExecutionStatus = simulationJobStatus.getSimulationExecutionStatus();
+			if (simulationExecutionStatus!=null){
+				SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(simKey,jobIndex,simulationJobStatus.getTaskID());
+				simTaskProcessState.computeHost = simulationExecutionStatus.getComputeHost();
+				simTaskProcessState.endDate = simulationExecutionStatus.getEndDate();
+				simTaskProcessState.latestUpdateDate = simulationExecutionStatus.getLatestUpdateDate();
+				simTaskProcessState.htcJobID = simulationExecutionStatus.getHtcJobID();
+				simTaskProcessState.startDate = simulationExecutionStatus.getStartDate();
+				simTaskProcessStates.add(simTaskProcessState);
+			}
+			addStateMachineEvent(new PreloadStateMachineEvent(simulationJobStatus));
 		}
 	}
 	
@@ -148,26 +116,98 @@
 		return jobIndex;
 	}
 
-	public List<StateMachineTransition> getStateMachineTransitions() {
-		return stateMachineTransitions;
+	public ArrayList<SimulationTaskProcessState> getSimTaskProcessStates() {
+		return simTaskProcessStates;
 	}
+
+	public SimulationTaskProcessState getLatestSimTaskProcessState() {
+		int taskID = -1;
+		SimulationTaskProcessState simTaskProcessState = null;
+		for (SimulationTaskProcessState taskState : simTaskProcessStates){
+			if (taskState.taskID > taskID){
+				taskID = taskState.taskID;
+				simTaskProcessState = taskState;
+			}
+		}
+		return simTaskProcessState;
+	}
+
+	private void addStateMachineEvent(AbstractStateMachineEvent stateMachineEvent){
+		stateMachineEvents.add(stateMachineEvent);
+	}
 	
-	public String show(){
-		StringBuffer buffer = new StringBuffer();
-		buffer.append("SimulationStateMachine for SimID='"+simKey+"', jobIndex="+jobIndex+"\n");
-		for (StateMachineTransition stateMachineTransition : stateMachineTransitions){
-			buffer.append(stateMachineTransition+"\n");
+	public SimulationTaskProcessState getSimTaskProcessState(int taskID){
+		for (SimulationTaskProcessState taskState : simTaskProcessStates){
+			if (taskState.taskID == taskID){
+				return taskState;
+			}
 		}
-		return buffer.toString();
+		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(simKey,  jobIndex, taskID);
+		simTaskProcessStates.add(simTaskProcessState);
+		return simTaskProcessState;
 	}
+	
+	private void addOrReplaceSimTaskProcessState(SimulationTaskProcessState newSimTaskProcessState){
+		SimulationTaskProcessState foundSimTaskProcState = null;
+		for (SimulationTaskProcessState taskState : simTaskProcessStates){
+			if (taskState.taskID == newSimTaskProcessState.taskID){
+				foundSimTaskProcState = taskState;
+			}
+		}
+		if (foundSimTaskProcState!=null){
+			simTaskProcessStates.remove(foundSimTaskProcState);
+		}
+		simTaskProcessStates.add(newSimTaskProcessState);
+	}
 
-	private void addStateMachineTransition(StateMachineTransition stateMachineTransition){
-		stateMachineTransitions.add(stateMachineTransition);
+	private SimulationTaskProcessState getNewTaskState_StopSimulation(int taskID){
+		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
+		simTaskProcessState.endDate = null;
+		simTaskProcessState.hasData = false;
+		simTaskProcessState.latestUpdateDate = new Date();
+		simTaskProcessState.progress = null;
+		simTaskProcessState.startDate = null;
+		return simTaskProcessState;
 	}
+	
+	private SimulationTaskProcessState getNewTaskState_StartSimulation(int taskID){
+		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
+		simTaskProcessState.endDate = null;
+		simTaskProcessState.hasData = false;
+		simTaskProcessState.latestUpdateDate = new Date();
+		simTaskProcessState.progress = null;
+		simTaskProcessState.startDate = null;
+		return simTaskProcessState;
+	}
+	
+	private SimulationTaskProcessState getNewTaskState_WorkerEvent(int taskID, WorkerEvent workerEvent){
+		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
+		if (workerEvent.getHostName()!=null){
+			simTaskProcessState.computeHost = workerEvent.getHostName();
+		}
+		if (workerEvent.getProgress()!=null){
+			simTaskProcessState.progress = workerEvent.getProgress();
+		}
+		if (workerEvent.getTimePoint()!=null){
+			simTaskProcessState.timePoint = workerEvent.getTimePoint();
+		}		
+		return simTaskProcessState;
+	}
 
+	private SimulationTaskProcessState getNewTaskState_Dispatch(int taskID){
+		SimulationTaskProcessState simTaskProcessState = new SimulationTaskProcessState(getSimTaskProcessState(taskID));
+		simTaskProcessState.endDate = null;
+		simTaskProcessState.hasData = false;
+		simTaskProcessState.latestUpdateDate = new Date();
+		simTaskProcessState.progress = null;
+		simTaskProcessState.startDate = null;
+		return simTaskProcessState;
+	}
+	
 	public synchronized void onWorkerEvent(WorkerEvent workerEvent, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws DataAccessException, VCMessagingException, SQLException {
 		WorkerEventMessage workerEventMessage = new WorkerEventMessage(workerEvent);
 		VCMongoMessage.sendWorkerEvent(workerEventMessage);
+		addStateMachineEvent(new WorkerStateMachineEvent(workerEvent));
 		
 		String userName = workerEvent.getUserName(); // as the filter of the client
 		int taskID = workerEvent.getTaskID();
@@ -260,6 +300,7 @@
 		
 		
 		SimulationJobStatus newJobStatus = null;
+		final SimulationTaskProcessState newTaskState = getNewTaskState_WorkerEvent(taskID, workerEvent);
 
 		if (workerEvent.isAcceptedEvent()) {
 			//
@@ -385,9 +426,13 @@
 
 			}
 		}
-		SimulationJobStatus updatedSimJobStatus = null;
+
+		if (newTaskState!=null){
+			addOrReplaceSimTaskProcessState(newTaskState);
+		}
 		if (newJobStatus!=null){
-			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, newJobStatus);
+			SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, newJobStatus);
+
 			if (!newJobStatus.compareEqual(oldSimulationJobStatus) || workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()) {		
 				Double progress = workerEvent.getProgress();
 				Double timepoint = workerEvent.getTimePoint();
@@ -402,19 +447,18 @@
 		}else if (workerEvent.isProgressEvent() || workerEvent.isNewDataEvent()){
 			Double progress = workerEvent.getProgress();
 			Double timepoint = workerEvent.getTimePoint();
-			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus, oldSimulationJobStatus);
-			StatusMessage msgForClient = new StatusMessage(updatedSimJobStatus, userName, progress, timepoint);
+			StatusMessage msgForClient = new StatusMessage(oldSimulationJobStatus, userName, progress, timepoint);
 			msgForClient.sendToClient(session);
 			log.print("Send status to client: " + msgForClient);
 		}else{
 			VCMongoMessage.sendInfo("onWorkerEvent() ignoring WorkerEvent (currState="+oldSchedulerStatus.getDescription()+"): "+workerEvent.show());
 		}
-		addStateMachineTransition(new StateMachineTransition(new WorkerStateMachineEvent(updatedSimJobStatus.getTaskID(), workerEvent), oldSimulationJobStatus, updatedSimJobStatus));
-
 	}
 
 	public synchronized void onStartRequest(User user, Simulation simulation, FieldDataIdentifierSpec[] fieldDataIdentifierSpecs, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 
+		addStateMachineEvent(new StartStateMachineEvent(user));
+
 		VCSimulationIdentifier vcSimID = new VCSimulationIdentifier(simKey, simulation.getVersion().getOwner());
 		if (!user.equals(vcSimID.getOwner())) {
 			log.alert(user + " is not authorized to start simulation (key=" + simKey + ")");
@@ -452,7 +496,9 @@
 			// first task, start with 0
 			newTaskID = 0;
 		}
-				
+		
+		addOrReplaceSimTaskProcessState(getNewTaskState_StartSimulation(newTaskID));
+		
 		Date currentDate = new Date();
 		// new queue status
 		SimulationQueueEntryStatus newQueueStatus = new SimulationQueueEntryStatus(currentDate, MessageConstants.PRIORITY_DEFAULT, SimulationQueueID.QUEUE_ID_WAITING);
@@ -474,7 +520,6 @@
 				newTaskID, SimulationMessage.MESSAGE_JOB_WAITING, newQueueStatus, newExeStatus);
 		
 		SimulationJobStatus updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newJobStatus);
-		addStateMachineTransition(new StateMachineTransition(new StartStateMachineEvent(updatedSimJobStatus.getTaskID()), oldSimulationJobStatus, updatedSimJobStatus));
 			
 		StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
 		message.sendToClient(session);
@@ -483,6 +528,8 @@
 
 	public synchronized void onDispatch(VCSimulationIdentifier vcSimID, int taskID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 
+		addStateMachineEvent(new DispatchStateMachineEvent());
+		
 		SimulationJobStatus oldSimulationJobStatus = simulationDatabase.getSimulationJobStatus(simKey, jobIndex, taskID);
 		if (oldSimulationJobStatus == null) {
 			VCMongoMessage.sendInfo("onDispatch("+vcSimID.getID()+") Can't start, simulation[" + vcSimID + "] job [" + jobIndex + "] task [" + taskID + "], status not found)");
@@ -499,7 +546,6 @@
 
 		double requiredMemMB = simulationTask.getEstimatedMemorySizeMB();
 		double allowableMemMB = Double.parseDouble(PropertyLoader.getRequiredProperty(PropertyLoader.limitJobMemoryMB));
-		SimulationJobStatus updatedSimJobStatus = null;
 		
 		if (requiredMemMB > allowableMemMB) {						
 			//
@@ -514,7 +560,7 @@
 					SimulationMessage.jobFailed("simulation required "+requiredMemMB+"MB of memory, only "+allowableMemMB+"MB allowed"),
 					newQueueStatus,newSimExeStatus);
 			
-			updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newSimJobStatus);
+			SimulationJobStatus updatedSimJobStatus = simulationDatabase.insertSimulationJobStatus(newSimJobStatus);
 			
 			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
 			message.sendToClient(session);
@@ -534,18 +580,19 @@
 			SimulationTaskMessage simTaskMessage = new SimulationTaskMessage(simulationTask);
 			simTaskMessage.sendSimulationTask(session);
 			
-			updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus,newSimJobStatus);
+			SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldSimulationJobStatus,newSimJobStatus);
 			
 			StatusMessage message = new StatusMessage(updatedSimJobStatus, simulation.getVersion().getOwner().getName(), null, null);
 			message.sendToClient(session);
 		
+			addOrReplaceSimTaskProcessState(getNewTaskState_Dispatch(taskID));
 		}
-		addStateMachineTransition(new StateMachineTransition(new DispatchStateMachineEvent(updatedSimJobStatus.getTaskID()), oldSimulationJobStatus, updatedSimJobStatus));
-
 	}
 
 	public synchronized void onStopRequest(User user, VCSimulationIdentifier vcSimID, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, DataAccessException, SQLException {
 		
+		addStateMachineEvent(new StopStateMachineEvent(user));
+		
 		if (!user.equals(vcSimID.getOwner())) {
 			log.alert(user + " is not authorized to stop simulation (key=" + simKey + ")");
 			StatusMessage message = new StatusMessage(new SimulationJobStatus(VCellServerID.getSystemServerID(), vcSimID, 0, null, 
@@ -562,6 +609,7 @@
 		for (SimulationJobStatus oldJobStatus : oldJobStatusArray){
 			SchedulerStatus schedulerStatus = oldJobStatus.getSchedulerStatus();
 			int taskID = oldJobStatus.getTaskID();
+			addOrReplaceSimTaskProcessState(getNewTaskState_StopSimulation(taskID));
 	
 			if (schedulerStatus.isActive()){
 				SimulationQueueEntryStatus simQueueEntryStatus = oldJobStatus.getSimulationQueueEntryStatus();
@@ -585,8 +633,7 @@
 				session.sendTopicMessage(VCellTopic.ServiceControlTopic, msg);	
 				
 				SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
-				addStateMachineTransition(new StateMachineTransition(new StopStateMachineEvent(updatedSimJobStatus.getTaskID()), oldJobStatus, updatedSimJobStatus));
-
+				
 				// update client
 				StatusMessage message = new StatusMessage(updatedSimJobStatus, user.getName(), null, null);
 				message.sendToClient(session);
@@ -595,8 +642,11 @@
 	}
 
 	public synchronized void onSystemAbort(SimulationJobStatus oldJobStatus, String failureMessage, SimulationDatabase simulationDatabase, VCMessageSession session, SessionLog log) throws VCMessagingException, UpdateSynchronizationException, DataAccessException, SQLException {
+		addStateMachineEvent(new AbortStateMachineEvent());
 		
+		SchedulerStatus schedulerStatus = oldJobStatus.getSchedulerStatus();
 		int taskID = oldJobStatus.getTaskID();
+		addOrReplaceSimTaskProcessState(getNewTaskState_StopSimulation(taskID));
 
 		//
 		// status information (initialized as if new record)
@@ -648,7 +698,6 @@
 				taskID, SimulationMessage.jobFailed(failureMessage), newQueueStatus, newExeStatus);
 		
 		SimulationJobStatus updatedSimJobStatus = simulationDatabase.updateSimulationJobStatus(oldJobStatus, newJobStatus);
-		addStateMachineTransition(new StateMachineTransition(new AbortStateMachineEvent(updatedSimJobStatus.getTaskID(), failureMessage), oldJobStatus, updatedSimJobStatus));
 
 		String userName = "all";
 		SimulationJob simulationJob = simulationDatabase.getSimulationJob(simKey, jobIndex);
@@ -663,17 +712,4 @@
 		log.print("Send status to client: " + msgForClient);
 	}
 
-	public int getLatestKnownTaskID() {
-		int taskID = -1;
-		for (StateMachineTransition transition : stateMachineTransitions){
-			if (transition.event.taskID!=null && transition.event.taskID>taskID){
-				taskID = transition.event.taskID;
-			}
-			if (transition.newSimJobStatus!=null && transition.newSimJobStatus.getTaskID()>taskID){
-				taskID = transition.newSimJobStatus.getTaskID();
-			}
-		}
-		return taskID;
-	}
-
 }
Index: src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java
===================================================================
--- src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12158)
+++ src/cbit/vcell/message/server/dispatcher/SimulationDispatcher.java	(revision 12157)
@@ -164,7 +164,7 @@
 				} catch (Exception e1) {
 					log.exception(e1);
 				}
-				long endFlushTimeMS = System.currentTimeMillis();
+				long endFlushTimeMS = System.currentTimeMillis() - startFlushTimeMS;
 				long messageFlushTimeMS = endFlushTimeMS - startFlushTimeMS;
 				
 				//
@@ -186,8 +186,8 @@
 		private void flushWorkerEventQueue() throws VCMessagingException{
 			VCMessage message = simMonitorThreadSession.createObjectMessage(new Long(VCMongoMessage.getServiceStartupTime()));
 			message.setStringProperty(MessageConstants.MESSAGE_TYPE_PROPERTY,MessageConstants.MESSAGE_TYPE_FLUSH_VALUE);
+			simMonitorThreadSession.sendQueueMessage(VCellQueue.WorkerEventQueue, message);
 			synchronized (notifyObject) {
-				simMonitorThreadSession.sendQueueMessage(VCellQueue.WorkerEventQueue, message);
 				try {
 					long waitTime = MessageConstants.MINUTE_IN_MS*5;
 					long startWaitTime = System.currentTimeMillis();
@@ -208,13 +208,10 @@
 					String simJobName = runningSimulations.get(htcJobID);
 					HtcProxy.SimTaskInfo simTaskInfo = HtcProxy.getSimTaskInfoFromSimJobName(simJobName);
 					SimulationJobStatus simJobStatus = simulationDatabase.getSimulationJobStatus(simTaskInfo.simId, simTaskInfo.jobIndex, simTaskInfo.taskId);
-					String failureMessage = null;
 					boolean killJob = false;
 					if (simJobStatus==null){
-						failureMessage = "no jobStatus found in database for running htc job";
 						killJob = true;
 					}else if (simJobStatus.getSchedulerStatus().isDone()){
-						failureMessage = "jobStatus Done in database for running htc job";
 						if (simJobStatus.getSimulationExecutionStatus()==null){
 							killJob = true;
 						}else{
@@ -225,7 +222,6 @@
 						}
 					}
 					if (killJob){
-						VCMongoMessage.sendZombieJob(simJobStatus,failureMessage,htcJobID);
 						htcProxy.killJob(htcJobID);
 					}
 				}catch (Exception e){
@@ -242,14 +238,9 @@
 			// because of this, we don't have to worry about killing jobs prematurely.
 			//
 			
-			long currentTimeMS = System.currentTimeMillis();
 			SimulationJobStatus[] jobStatusArray = simulationDatabase.getObsoleteSimulations(MessageConstants.INTERVAL_DATABASE_SERVER_FAIL_SECONDS + (messageFlushTimeMS/1000));
 			for (SimulationJobStatus jobStatus : jobStatusArray){
 				String failureMessage = "failed: timed out";
-				System.out.println("obsolete job detected at timestampMS="+currentTimeMS+", status=(" + jobStatus + ")\n\n");
-				SimulationStateMachine simStateMachine = simDispatcherEngine.getSimulationStateMachine(jobStatus.getVCSimulationIdentifier().getSimulationKey(), jobStatus.getJobIndex());
-				System.out.println(simStateMachine.show());
-				VCMongoMessage.sendObsoleteJob(jobStatus,failureMessage,simStateMachine);
 				simDispatcherEngine.onSystemAbort(jobStatus, failureMessage, simulationDatabase, simMonitorThreadSession, log);
 				if (jobStatus.getSimulationExecutionStatus()!=null && jobStatus.getSimulationExecutionStatus().getHtcJobID()!=null){
 					HtcJobID htcJobId = jobStatus.getSimulationExecutionStatus().getHtcJobID();
Index: src/cbit/vcell/mongodb/VCMongoMessage.java
===================================================================
--- src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12158)
+++ src/cbit/vcell/mongodb/VCMongoMessage.java	(revision 12157)
@@ -18,7 +18,6 @@
 import cbit.vcell.message.messages.StatusMessage;
 import cbit.vcell.message.messages.WorkerEventMessage;
 import cbit.vcell.message.server.cmd.CommandService.CommandOutput;
-import cbit.vcell.message.server.dispatcher.SimulationStateMachine;
 import cbit.vcell.message.server.htc.HtcJobID;
 import cbit.vcell.messaging.db.SimulationExecutionStatus;
 import cbit.vcell.messaging.db.SimulationJobStatus;
@@ -79,8 +78,6 @@
 	public final static String MongoMessage_msgtype_jmsMessageSent						= "jmsMessageSent";
 	public final static String MongoMessage_msgtype_commandServiceCall					= "pbsCall";
 	public final static String MongoMessage_msgtype_infoMsg								= "infoMsg";
-	public final static String MongoMessage_msgtype_obsoleteJob							= "obsoleteJob";
-	public final static String MongoMessage_msgtype_zombieJob							= "zombieJob";
 	public final static String MongoMessage_msgTime				= "msgTime";
 	public final static String MongoMessage_msgTimeNice			= "msgTimeNice";
 	
@@ -149,7 +146,6 @@
 	public final static String MongoMessage_stderr				= "stderr";
 	public final static String MongoMessage_exitCode			= "exitCode";
 	public final static String MongoMessage_info				= "info";
-	public final static String MongoMessage_simStateMachineDump = "simStateMachine";
 	private BasicDBObject doc = null;
 	
 	VCMongoMessage(BasicDBObject doc){
@@ -370,46 +366,6 @@
 		}
 	}
 
-	public static void sendZombieJob(SimulationJobStatus jobStatus, String failureMessage, HtcJobID htcJobID) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_zombieJob);
-
-			dbObject.put(MongoMessage_info,failureMessage);
-			dbObject.put(MongoMessage_htcJobID,htcJobID.toDatabase());
-			
-			addObject(dbObject,jobStatus);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
-	public static void sendObsoleteJob(SimulationJobStatus jobStatus, String failureMessage, SimulationStateMachine simStateMachine) {
-		if (!enabled){
-			return;
-		}
-		try {
-			BasicDBObject dbObject = new BasicDBObject();
-
-			addHeader(dbObject,MongoMessage_msgtype_obsoleteJob);
-
-			dbObject.put(MongoMessage_info,failureMessage);
-			dbObject.put(MongoMessage_simStateMachineDump,simStateMachine.show());
-			
-			addObject(dbObject,jobStatus);
-			
-			VCMongoDbDriver.getInstance().addMessage(new VCMongoMessage(dbObject));
-		} catch (Exception e){
-			VCMongoDbDriver.getInstance().getSessionLog().exception(e);
-		}
-	}
-
 	public static void sendSimJobStatusInsert(SimulationJobStatus newSimulationJobStatus,SimulationJobStatus updatedSimulationJobStatus) {
 		if (!enabled){
 			return;
