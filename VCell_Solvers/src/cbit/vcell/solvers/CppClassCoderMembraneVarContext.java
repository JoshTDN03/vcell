package cbit.vcell.solvers;
/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.*;
import cbit.vcell.math.*;
import cbit.vcell.parser.*;
import cbit.vcell.simulation.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderMembraneVarContext extends CppClassCoderAbstractVarContext {
/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderMembraneVarContext(CppCoderVCell argCppCoderVCell,
												Equation argEquation,
												MembraneSubDomain argMembraneSubDomain,
												Simulation argSimulation, 
												String argParentClass) throws Exception
{
	super(argCppCoderVCell,argEquation,argMembraneSubDomain,argSimulation,argParentClass);
}


/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.model.Feature
 */
public CompartmentSubDomain getInsideCompartment() {
	if (isFlippedInsideOutside((MembraneSubDomain)getSubDomain())) {
		return ((MembraneSubDomain)getSubDomain()).getOutsideCompartment();
	} else {
		return ((MembraneSubDomain)getSubDomain()).getInsideCompartment();
	}
}


/**
 * This method was created in VisualAge.
 * @return cbit.vcell.math.MembraneSubDomain
 */
public MembraneSubDomain getMembraneSubDomain() {
	return (MembraneSubDomain)getSubDomain();
}


/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.model.Feature
 */
public CompartmentSubDomain getOutsideCompartment() {
	if (isFlippedInsideOutside((MembraneSubDomain)getSubDomain())) {
		return ((MembraneSubDomain)getSubDomain()).getInsideCompartment();
	} else {
		return ((MembraneSubDomain)getSubDomain()).getOutsideCompartment();
	}
}


/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {
	out.println(getClassName()+"::"+getClassName()+"(Feature *Afeature,CString AspeciesName)");
	out.println(": "+getParentClassName()+"(Afeature,AspeciesName)");
	out.println("{");
	try {
		Expression ic = getEquation().getInitialExpression();
		ic.bindExpression(getSimulation());
		double value = ic.evaluateConstant();
		out.println("   initialValue = new double;");
		out.println("   *initialValue = "+value+";");
	}catch (Exception e){
		out.println("   initialValue = NULL;");
	}	
	//if (getEquation() instanceof PdeEquation){
		//try {
			//Expression Dexp = ((PdeEquation)getEquation()).getDiffusionExpression();
			//Dexp.bindExpression(getSimulation());
			//double value = Dexp.evaluateConstant();
			//out.println("   diffusionRate = new double;");
			//out.println("   *diffusionRate = "+value+";");
		//}catch (Exception e){
			//out.println("   diffusionRate = NULL;");
		//}
	//}else{	
		//out.println("   diffusionRate = NULL;");
	//}	
	out.println("");
	Variable requiredVariables[] = getRequiredVariables();
	for (int i = 0; i < requiredVariables.length; i++){
		Variable var = requiredVariables[i];
		if (var instanceof VolVariable){
			out.println("   var_"+var.getName()+" = NULL;");
		}
		if (var instanceof MemVariable){
			out.println("   var_"+var.getName()+" = NULL;");
		}
		if (var instanceof VolumeRegionVariable){
			out.println("   var_"+var.getName()+" = NULL;");
		}
		if (var instanceof MembraneRegionVariable){
			out.println("   var_"+var.getName()+" = NULL;");
		}
	}		  	
	out.println("}");
}


/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("    "+getClassName() + "(Feature *feature, CString speciesName);");
	out.println("    virtual boolean resolveReferences(Simulation *sim);");

	BoundaryConditionType bc = null;
	int dimension = getSimulation().getMathDescription().getGeometry().getDimension();
	if (getEquation() instanceof PdeEquation){
		PdeEquation pdeEqu = (PdeEquation)getEquation();
		if (pdeEqu.getBoundaryXm()!=null){
			bc = getMembraneSubDomain().getBoundaryConditionXm();
			if (bc.isDIRICHLET()){
				out.println("    virtual double getXmBoundaryValue(MembraneElement *memElement);");
			}else if (bc.isNEUMANN()){
				out.println("    virtual double getXmBoundaryFlux(MembraneElement *memElement);");
			}
		}
		if (pdeEqu.getBoundaryXp()!=null){			
			bc = getMembraneSubDomain().getBoundaryConditionXp();
			if (bc.isDIRICHLET()){
				out.println("    virtual double getXpBoundaryValue(MembraneElement *memElement);");
			}else if (bc.isNEUMANN()){
				out.println("    virtual double getXpBoundaryFlux(MembraneElement *memElement);");
			}
		}
		if (pdeEqu.getVelocityX() != null) {
			out.println("\tvirtual double getConvectionVelocity_X(MembraneElement *memElement);");
		}
		if (dimension>1){
			if (pdeEqu.getBoundaryYm()!=null){
				bc = getMembraneSubDomain().getBoundaryConditionYm();
				if (bc.isDIRICHLET()){
					out.println("    virtual double getYmBoundaryValue(MembraneElement *memElement);");
				}else if (bc.isNEUMANN()){
					out.println("    virtual double getYmBoundaryFlux(MembraneElement *memElement);");
				}
			}	
			if (pdeEqu.getBoundaryYp()!=null){
				bc = getMembraneSubDomain().getBoundaryConditionYp();
				if (bc.isDIRICHLET()){
					out.println("    virtual double getYpBoundaryValue(MembraneElement *memElement);");
				}else if (bc.isNEUMANN()){
					out.println("    virtual double getYpBoundaryFlux(MembraneElement *memElement);");
				}
			}
			if (pdeEqu.getVelocityY() != null) {
				out.println("\tvirtual double getConvectionVelocity_Y(MembraneElement *memElement);");
			}			
		}
		if (dimension==3){	
			if (pdeEqu.getBoundaryZm()!=null){
				bc = getMembraneSubDomain().getBoundaryConditionZm();
				if (bc.isDIRICHLET()){
					out.println("    virtual double getZmBoundaryValue(MembraneElement *memElement);");
				}else if (bc.isNEUMANN()){
					out.println("    virtual double getZmBoundaryFlux(MembraneElement *memElement);");
				}
			}	
			if (pdeEqu.getBoundaryZp()!=null){
				bc = getMembraneSubDomain().getBoundaryConditionZp();
				if (bc.isDIRICHLET()){
					out.println("    virtual double getZpBoundaryValue(MembraneElement *memElement);");
				}else if (bc.isNEUMANN()){
					out.println("    virtual double getZpBoundaryFlux(MembraneElement *memElement);");
				}
			}
			if (pdeEqu.getVelocityZ() != null) {
				out.println("\tvirtual double getConvectionVelocity_Z(MembraneElement *memElement);");
			}			
		}	
	}		
	try {
		Expression ic = getEquation().getInitialExpression();
		ic.bindExpression(getSimulation());
		double value = ic.evaluateConstant();
	}catch (Exception e){
		out.println("    virtual double getInitialValue(MembraneElement *memElement);");
	}
	out.println(" protected:");
	out.println("    virtual double getMembraneReactionRate(MembraneElement *memElement);");
	out.println("    virtual double getMembraneDiffusionRate(MembraneElement *memElement);");
	out.println(" private:");
	Variable requiredVariables[] = getRequiredVariables();
	for (int i = 0; i < requiredVariables.length; i++){
		Variable var = requiredVariables[i];
		if (var instanceof VolVariable){
			out.println("    VolumeVariable      *var_"+var.getName()+";");
		}else if (var instanceof MemVariable){
			out.println("    MembraneVariable    *var_"+var.getName()+";");
		}else if (var instanceof MembraneRegionVariable){
			out.println("    MembraneRegionVariable    *var_"+var.getName()+";");
		}else if (var instanceof VolumeRegionVariable){
			out.println("    VolumeRegionVariable    *var_"+var.getName()+";");
		}else if (var instanceof ReservedVariable){
		}else if (var instanceof Constant){
		}else if (var instanceof Function){
		}else{
			throw new Exception("unknown identifier type '"+var.getClass().getName()+"' for identifier: "+var.getName());
		}	
	}		  	
	out.println("};");
}


/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeConstructor(out);
	out.println("");
	writeResolveReferences(out);
	out.println("");
	boolean bFlippedInsideOutside = isFlippedInsideOutside(getMembraneSubDomain());
	writeMembraneFunction(out,"getMembraneReactionRate", getEquation().getRateExpression(),bFlippedInsideOutside);
	out.println("");
	if (getEquation() instanceof PdeEquation){
		PdeEquation pde = (PdeEquation)getEquation();
		writeMembraneFunction(out,"getMembraneDiffusionRate", pde.getDiffusionExpression(), bFlippedInsideOutside);
	}else{
		writeMembraneFunction(out,"getMembraneDiffusionRate", new Expression(0.0), bFlippedInsideOutside);
	}
	out.println("");
	MathDescription mathDesc = getSimulation().getMathDescription();
	int dimension = mathDesc.getGeometry().getDimension();
	if (getEquation() instanceof PdeEquation){
		PdeEquation pde = (PdeEquation)getEquation();
		BoundaryConditionType bc = getMembraneSubDomain().getBoundaryConditionXm();
		if (bc != null && (pde.getBoundaryXm()!=null)){
			if (bc.isDIRICHLET()){
				writeMembraneFunction(out,"getXmBoundaryValue",pde.getBoundaryXm(),bFlippedInsideOutside);
			}else if (bc.isNEUMANN()){
				writeMembraneFunction(out,"getXmBoundaryFlux", pde.getBoundaryXm(),bFlippedInsideOutside);
			}
		}	
		bc = getMembraneSubDomain().getBoundaryConditionXp();
		if (bc != null && (pde.getBoundaryXp()!=null)){
			if (bc.isDIRICHLET()){
				writeMembraneFunction(out,"getXpBoundaryValue",pde.getBoundaryXp(),bFlippedInsideOutside);
			}else if (bc.isNEUMANN()){
				writeMembraneFunction(out,"getXpBoundaryFlux", pde.getBoundaryXp(),bFlippedInsideOutside);
			}
		}
		if (dimension>1){
			bc = getMembraneSubDomain().getBoundaryConditionYm();
			if (bc != null && (pde.getBoundaryYm()!=null)){
				if (bc.isDIRICHLET()){
					writeMembraneFunction(out,"getYmBoundaryValue",pde.getBoundaryYm(),bFlippedInsideOutside);
				}else if (bc.isNEUMANN()){
					writeMembraneFunction(out,"getYmBoundaryFlux", pde.getBoundaryYm(),bFlippedInsideOutside);
				}
			}	
			bc = getMembraneSubDomain().getBoundaryConditionYp();
			if (bc != null && (pde.getBoundaryYp()!=null)){
				if (bc.isDIRICHLET()){
					writeMembraneFunction(out,"getYpBoundaryValue",pde.getBoundaryYp(),bFlippedInsideOutside);
				}else if (bc.isNEUMANN()){
					writeMembraneFunction(out,"getYpBoundaryFlux", pde.getBoundaryYp(),bFlippedInsideOutside);
				}
			}
		}
		if (dimension==3){		
			bc = getMembraneSubDomain().getBoundaryConditionZm();
			if (bc != null && (pde.getBoundaryZm()!=null)){
				if (bc.isDIRICHLET()){
					writeMembraneFunction(out,"getZmBoundaryValue",pde.getBoundaryZm(),bFlippedInsideOutside);
				}else if (bc.isNEUMANN()){
					writeMembraneFunction(out,"getZmBoundaryFlux", pde.getBoundaryZm(),bFlippedInsideOutside);
				}
			}	
			bc = getMembraneSubDomain().getBoundaryConditionZp();
			if (bc != null && (pde.getBoundaryZp()!=null)){
				if (bc.isDIRICHLET()){
					writeMembraneFunction(out,"getZpBoundaryValue",pde.getBoundaryZp(),bFlippedInsideOutside);
				}else if (bc.isNEUMANN()){
					writeMembraneFunction(out,"getZpBoundaryFlux", pde.getBoundaryZp(),bFlippedInsideOutside);
				}
			}
		}		
	}	
	try {
		double value = getEquation().getInitialExpression().evaluateConstant();
	}catch (Exception e){
		writeMembraneFunction(out,"getInitialValue", getEquation().getInitialExpression(),bFlippedInsideOutside);
	}
	out.println("");
}
}