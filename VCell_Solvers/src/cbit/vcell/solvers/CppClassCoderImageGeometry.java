package cbit.vcell.solvers;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import cbit.util.*;
import cbit.vcell.solver.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderImageGeometry extends CppClassCoder {
	protected Simulation simulation = null;
/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderImageGeometry(CppCoderVCell cppCoderVCell, Simulation argSimulation) 
{
	super(cppCoderVCell,"UserGeometry", "ImageGeometry");
	this.simulation = argSimulation;
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {
	
	cbit.vcell.geometry.Geometry geo = simulation.getMathDescription().getGeometry();
	
	int dim   = geo.getDimension();
	double sX = geo.getExtent().getX();
	double sY = geo.getExtent().getY();
	double sZ = geo.getExtent().getZ();
	double oX = geo.getOrigin().getX();
	double oY = geo.getOrigin().getY();
	double oZ = geo.getOrigin().getZ();
	
	ISize samplingSize = simulation.getMeshSpecification().getSamplingSize();
	int meshX = samplingSize.getX();
	int meshY = samplingSize.getY();
	int meshZ = samplingSize.getZ();
	
	out.println(getClassName()+"::"+getClassName()+"()");
	out.println(": ImageGeometry("+dim+","+sX+","+sY+","+sZ+","+oX+","+oY+","+oZ+")");
	out.println("{");
	out.println("   setFeatureHandles(userFeatureHandle,"+meshX+","+meshY+","+meshZ+");");
	out.println("}");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("   "+getClassName() + "();");
	out.println(" private:");
	out.println("   static FeatureHandle userFeatureHandle[];");
	out.println("};");
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeHandleArray(java.io.PrintWriter out) throws Exception {
	
	final int NumbersPerLine = 20;
	cbit.vcell.geometry.Geometry geo = simulation.getMathDescription().getGeometry();

	ISize samplingSize = simulation.getMeshSpecification().getSamplingSize();
	int meshX = samplingSize.getX();
	int meshY = samplingSize.getY();
	int meshZ = samplingSize.getZ();
	int totalSize = meshX*meshY*meshZ;

	cbit.image.VCImage handleImage = geo.getGeometrySpec().createSampledImage(new ISize(meshX,meshY,meshZ));
	byte pixels[] = handleImage.getPixels();
	int handleData[] = new int[pixels.length];
	for (int i = 0; i < pixels.length; i++){
		handleData[i] = ((int)pixels[i]) & 0x000000ff;
	}
	if (handleData.length!=totalSize){
		throw new Exception("handle data array doesn't match sampling info");
	}	

	out.println("FeatureHandle "+getClassName()+"::userFeatureHandle["+totalSize+"] = {");
	for (int i=0;i<totalSize;i++){
		if (i>0){
			out.print(",");
		}	
		out.print(handleData[i]);
		if ((i%NumbersPerLine)==(NumbersPerLine-1)){
			out.println("");
		}	
	}	
	out.println("};");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeHandleArray(out);
	out.println("");
	writeConstructor(out);
	out.println("");
}
}
