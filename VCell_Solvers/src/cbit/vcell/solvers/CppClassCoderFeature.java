package cbit.vcell.solvers;

/*©
 * (C) Copyright University of Connecticut Health Center 2001.
 * All rights reserved.
©*/
import java.util.Enumeration;

import cbit.vcell.math.CompartmentSubDomain;
import cbit.vcell.math.MembraneSubDomain;
import cbit.vcell.simulation.Simulation;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class CppClassCoderFeature extends CppClassCoder {
	protected Simulation simulation = null;
	protected CompartmentSubDomain volumeSubDomain = null;
	protected MembraneSubDomain membraneSubDomain = null;
/**
 * VarContextCppCoder constructor comment.
 * @param name java.lang.String
 */
protected CppClassCoderFeature(CppCoderVCell cppCoderVCell, Simulation argSimulation, 
										CompartmentSubDomain volSubDomain, MembraneSubDomain memSubDomain) 
{
	super(cppCoderVCell,"Feature"+volSubDomain.getName(), "Feature");
	this.simulation = argSimulation;
	this.volumeSubDomain = volSubDomain;
	this.membraneSubDomain = memSubDomain;
}
/**
 * This method was created by a SmartGuide.
 * @return cbit.vcell.math.CompartmentSubDomain
 */
public CompartmentSubDomain getCompartmentSubDomain() {
	return volumeSubDomain;
}
/**
 * This method was created by a SmartGuide.
 * @param out java.io.PrintWriter
 */
protected void writeConstructor(java.io.PrintWriter out) throws Exception {
	int handle = simulation.getMathDescription().getHandle(volumeSubDomain);	
	out.println(getClassName()+"::"+getClassName()+"(char *Aname, int priority)");
	out.println(": Feature(Aname, "+handle+", priority)");
 	out.println("{");
 	Enumeration enum1 = cppCoder.getCppClassCoders();
 	while (enum1.hasMoreElements()){
 		CppClassCoder coder = (CppClassCoder)enum1.nextElement();
 		if (coder instanceof CppClassCoderVolumeVarContext){
 			CppClassCoderVolumeVarContext vcClassCoder = (CppClassCoderVolumeVarContext)coder;
 			if (vcClassCoder.getCompartmentSubDomain() == volumeSubDomain){
				out.println("   addVolumeVarContext(new "+vcClassCoder.getClassName()+"(this,\""+vcClassCoder.getVariable().getName()+"\"));");
			}	
		}
 		if (coder instanceof CppClassCoderMembraneVarContext){
 			CppClassCoderMembraneVarContext vcClassCoder = (CppClassCoderMembraneVarContext)coder;
 			if (vcClassCoder.getInsideCompartment() == volumeSubDomain){
				out.println("   addMembraneVarContext(new "+vcClassCoder.getClassName()+"(this,\""+vcClassCoder.getVariable().getName()+"\"));");
			}	
		}
 		if (coder instanceof CppClassCoderMembraneRegionVarContext){
 			CppClassCoderMembraneRegionVarContext vcClassCoder = (CppClassCoderMembraneRegionVarContext)coder;
 			if (vcClassCoder.getInsideCompartment() == volumeSubDomain){
				out.println("   addMembraneRegionVarContext(new "+vcClassCoder.getClassName()+"(this,\""+vcClassCoder.getVariable().getName()+"\"));");
			}	
		}
 		if (coder instanceof CppClassCoderVolumeRegionVarContext){
 			CppClassCoderVolumeRegionVarContext vcClassCoder = (CppClassCoderVolumeRegionVarContext)coder;
 			if (vcClassCoder.getCompartmentSubDomain() == volumeSubDomain){
				out.println("   addVolumeRegionVarContext(new "+vcClassCoder.getClassName()+"(this,\""+vcClassCoder.getVariable().getName()+"\"));");
			}	
		}
 		if (coder instanceof CppClassCoderFastSystem){
 			CppClassCoderFastSystem vcClassCoder = (CppClassCoderFastSystem)coder;
 			if (vcClassCoder.getCompartment() == volumeSubDomain){
				out.println("   fastSystem = new "+vcClassCoder.getClassName()+"();");
			}	
		}
	}		
	out.println("}");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeDeclaration(java.io.PrintWriter out) {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");

	out.println("class " + getClassName() + " : public " + getParentClassName());
	out.println("{");
	out.println(" public:");
	out.println("   "+getClassName() + "(char *featureName, int priority);");
	if (volumeSubDomain.getBoundaryConditionXm().isDIRICHLET()){
		out.println("   virtual BoundaryType getXmBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getXmBoundaryType() { return BOUNDARY_FLUX; }");
	}		
	if (volumeSubDomain.getBoundaryConditionXp().isDIRICHLET()){
		out.println("   virtual BoundaryType getXpBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getXpBoundaryType() { return BOUNDARY_FLUX; }");
	}		
	if (volumeSubDomain.getBoundaryConditionYm().isDIRICHLET()){
		out.println("   virtual BoundaryType getYmBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getYmBoundaryType() { return BOUNDARY_FLUX; }");
	}		
	if (volumeSubDomain.getBoundaryConditionYp().isDIRICHLET()){
		out.println("   virtual BoundaryType getYpBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getYpBoundaryType() { return BOUNDARY_FLUX; }");
	}		
	if (volumeSubDomain.getBoundaryConditionZm().isDIRICHLET()){
		out.println("   virtual BoundaryType getZmBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getZmBoundaryType() { return BOUNDARY_FLUX; }");
	}		
	if (volumeSubDomain.getBoundaryConditionZp().isDIRICHLET()){
		out.println("   virtual BoundaryType getZpBoundaryType() { return BOUNDARY_VALUE; }");
	}else{
		out.println("   virtual BoundaryType getZpBoundaryType() { return BOUNDARY_FLUX; }");
	}	
	out.println("");	
	out.println("};");
}
/**
 * This method was created by a SmartGuide.
 * @param printWriter java.io.PrintWriter
 */
public void writeImplementation(java.io.PrintWriter out) throws Exception {
	out.println("//---------------------------------------------");
	out.println("//  class " + getClassName());
	out.println("//---------------------------------------------");
	writeConstructor(out);
	out.println("");
}
}
