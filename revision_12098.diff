Index: src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java
===================================================================
--- src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12098)
+++ src/cbit/vcell/message/server/sim/JavaSimulationExecutable.java	(revision 12097)
@@ -59,6 +59,8 @@
 	
 	private String userDirectory = null;
 	private String inputFile = null;
+	int jobIndex = 0;
+	int taskID = 0;
 	
 	SessionLog log = null;
 	
@@ -97,16 +99,28 @@
 
 private void start() {
 	try {
-		if (arguments.length != 2) {
-			throw new RuntimeException("Missing arguments: " + JavaSimulationExecutable.class.getName() + " simTaskFile userDir");
+		if (arguments.length != 6) {
+			throw new RuntimeException("Missing arguments: " + JavaSimulationExecutable.class.getName() + "{alpha|beta|rel} userDir inputFile jobIndex -tid taskID");
 		}
 		
 		int argCount = 0;
+		String serverID = arguments[argCount ++];
+		if (!serverID.equalsIgnoreCase(VCellServerID.getSystemServerID().toString())) {
+			throw new IllegalArgumentException("wrong server id : " + arguments[argCount]);
+		}
+		userDirectory = arguments[argCount ++];
 		inputFile = arguments[argCount ++];
-		userDirectory = arguments[argCount ++];
+		jobIndex = Integer.parseInt(arguments[argCount ++]);
+		String tid = arguments[argCount ++];
+		if (tid.equals("-tid")) {
+			taskID = Integer.parseInt(arguments[argCount ++]);
+		} else {
+			throw new IllegalArgumentException("wrong arguments : " + tid);
+		}
 		
-		String xmlString = FileUtils.readFileToString(new File(inputFile));
-		simulationTask = XmlHelper.XMLToSimTask(xmlString);
+		String xmlString = FileUtils.readFileToString(new File(userDirectory, inputFile));
+		Simulation simulation = XmlHelper.XMLToSim(xmlString);
+		simulationTask = new SimulationTask(new SimulationJob(simulation, jobIndex, null), taskID);
 		
 		log = new StdoutSessionLog(simulationTask.getSimulationJobID());	
 		
Index: src/cbit/vcell/message/server/sim/HtcSimulationWorker.java
===================================================================
--- src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12098)
+++ src/cbit/vcell/message/server/sim/HtcSimulationWorker.java	(revision 12097)
@@ -108,25 +108,25 @@
 	
 	Solver realSolver = (AbstractSolver)SolverFactory.createSolver(log, userdir, simTask, true);
 	
-	String simTaskXmlText = XmlHelper.simTaskToXML(simTask);
-	String simTaskFilePath = forceUnixPath(new File(userdir,simTask.getSimulationJobID()+"_"+simTask.getTaskID()+".simtask.xml").toString());
-	
-	if (htcProxy.getCommandService() instanceof CommandServiceSsh){
-		// write simTask file locally, and send it to server, and delete local copy.
-		File tempFile = File.createTempFile("simTask", "xml");
-		XmlUtil.writeXMLStringToFile(simTaskXmlText, tempFile.getAbsolutePath(), true);
-		this.htcProxy.getCommandService().pushFile(tempFile, simTaskFilePath);
-		tempFile.delete();
-	}else{
-		// write final file directly.
-		XmlUtil.writeXMLStringToFile(simTaskXmlText, simTaskFilePath, true);
-	}
+	if (realSolver instanceof AbstractCompiledSolver) {
+		String simTaskXmlText = XmlHelper.simTaskToXML(simTask);
+		String simTaskFilePath = forceUnixPath(new File(userdir,simTask.getSimulationJobID()+simTask.getTaskID()+".simtask.xml").toString());
 
-	if (realSolver instanceof AbstractCompiledSolver) {
+		if (htcProxy.getCommandService() instanceof CommandServiceSsh){
+			// write simTask file locally, and send it to server, and delete local copy.
+			File tempFile = File.createTempFile("simTask", "xml");
+			XmlUtil.writeXMLStringToFile(simTaskXmlText, tempFile.getAbsolutePath(), true);
+			this.htcProxy.getCommandService().pushFile(tempFile, simTaskFilePath);
+			tempFile.delete();
+		}else{
+			// write final file directly.
+			XmlUtil.writeXMLStringToFile(simTaskXmlText, simTaskFilePath, true);
+		}
 		
 		// compiled solver ...used to be only single executable, now we pass 2 commands to PBSUtils.submitJob that invokes SolverPreprocessor.main() and then the native executable
 		String[] preprocessorCmd = new String[] { 
 				PropertyLoader.getRequiredProperty(PropertyLoader.simulationPreprocessor), 
+//				serviceInstanceStatus.getServerID().toString().toLowerCase(), 
 				simTaskFilePath, 
 				forceUnixPath(userdir.getAbsolutePath())
 		};
@@ -144,10 +144,15 @@
 		
 	} else {
 		
+		File inputFile = new File(getBaseName(userdir,simTask)+SimDataConstants.JAVA_INPUT_EXTENSION);
 		String[] command = new String[] { 
 				PropertyLoader.getRequiredProperty(PropertyLoader.javaSimulationExecutable), 
-				simTaskFilePath,
-				forceUnixPath(userdir.getAbsolutePath())
+//				VCellServerID.getSystemServerID().toString(), 
+				forceUnixPath(inputFile.getParent()), 
+				forceUnixPath(inputFile.getName()), 
+				String.valueOf(simTask.getSimulationJob().getJobIndex()),
+				"-tid", 
+				String.valueOf(simTask.getTaskID())
 		};
 
 		jobid = htcProxy.submitJob(jobname, subFile, command, 1, simTask.getEstimatedMemorySizeMB());
@@ -162,6 +167,11 @@
 	return filePath.replace("C:","").replace("D:","").replace("\\","/");
 }
 
+private String getBaseName(File userdir, SimulationTask simTask) {
+	return (new File(userdir, simTask.getSimulationJob().getSimulationJobID()).getPath());
+}
+
+
 private void initQueueConsumer() {
 	QueueListener listener = new QueueListener() {
 		
Index: deployInfo/JavaPreprocessor64
===================================================================
--- deployInfo/JavaPreprocessor64	(revision 12098)
+++ deployInfo/JavaPreprocessor64	(revision 12097)
@@ -1,5 +1,5 @@
 printusage() {
-	echo "Usage: JavaPreprocessor64 simTaskFile userdir"
+	echo "Usage: JavaPreprocessor64 simtaskfile userdir"
 	exit 1
 }
 
@@ -11,7 +11,6 @@
 
 # set up cmd and cmd rguments
 mainclass=GENERATED
-#SolverPreprocessor
 arguments=$*
 
 siteRootDir=/share/apps/vcell/deployed/${site}
Index: deployInfo/JavaSimExe64
===================================================================
--- deployInfo/JavaSimExe64	(revision 12098)
+++ deployInfo/JavaSimExe64	(revision 12097)
@@ -1,17 +1,16 @@
 printusage() {
-	echo "Usage: JavaSimExe64 simTaskFile userdir"
+	echo "Usage: JavaSimExe64 userdir inputfile jobIndex -tid taskID"
 	exit 1
 }
 
 # main code
-if [ "$#" != "2" ] ; then 
+if [ "$#" != "5" ] ; then 
 	printusage
 fi
 site=GENERATED
 
 # set up cmd and cmd rguments
 mainclass=GENERATED
-#JavaSimulationExecutable
 arguments=$*
 
 siteRootDir=/share/apps/vcell/deployed/${site}
@@ -24,7 +23,7 @@
 jvmprop="-Xmx500M -Dvcell.propertyfile=${siteCfgDir}/vcell64.properties"
 
 echo "starting ${serviceid} on ${nodename}"
-nice ${jre} -cp ${jvm_jars} ${jvmprop} ${mainclass} ${arguments}
+nice ${jre} -cp ${jvm_jars} ${jvmprop} ${mainclass} ${site} ${arguments}
 
 exit 0
 
